{"domain": "spotify", "input": "Function Signatures:\n\n[{\"name\": \"GET_search\", \"description\": \"Get Spotify catalog information about albums, artists, playlists, tracks, shows, episodes or audiobooks\\nthat match a keyword string.<br />\\n**Note: Audiobooks are only available for the US, UK, Ireland, New Zealand and Australia markets.**\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"q\": {\"type\": \"string\", \"description\": \"Your search query.\\n\\nYou can narrow down your search using field filters. The available filters are `album`, `artist`, `track`, `year`, `upc`, `tag:hipster`, `tag:new`, `isrc`, and `genre`. Each field filter only applies to certain result types.\\n\\nThe `artist` and `year` filters can be used while searching albums, artists and tracks. You can filter on a single `year` or a range (e.g. 1955-1960).<br />\\nThe `album` filter can be used while searching albums and tracks.<br />\\nThe `genre` filter can be used while searching artists and tracks.<br />\\nThe `isrc` and `track` filters can be used while searching tracks.<br />\\nThe `upc`, `tag:new` and `tag:hipster` filters can only be used while searching albums. The `tag:new` filter will return albums released in the past two weeks and `tag:hipster` can be used to return only albums with the lowest 10% popularity.<br />\\n\"}, \"type\": {\"type\": \"array\", \"description\": \"A comma-separated list of item types to search across. Search results include hits\\nfrom all the specified item types. For example: `q=abacab&type=album,track` returns\\nboth albums and tracks matching \\\"abacab\\\".\\n\"}, \"market\": {\"type\": \"string\", \"description\": \"An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).\\n  If a country code is specified, only content that is available in that market will be returned.<br/>\\n  If a valid user access token is specified in the request header, the country associated with\\n  the user account will take priority over this parameter.<br/>\\n  _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>\\n  Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).\\n\"}, \"limit\": {\"type\": \"integer\", \"description\": \"The maximum number of results to return in each item type.\\n\"}, \"offset\": {\"type\": \"integer\", \"description\": \"The index of the first result to return. Use\\nwith limit to get the next page of search results.\\n\"}, \"include_external\": {\"type\": \"string\", \"description\": \"If `include_external=audio` is specified it signals that the client can play externally hosted audio content, and marks\\nthe content as playable in the response. By default externally hosted audio content is marked as unplayable in the response.\\n\"}}, \"required\": [\"q\", \"type\"]}}, {\"name\": \"GET_me\", \"description\": \"Get detailed profile information about the current user (including the\\ncurrent user's username).\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {}, \"required\": []}}, {\"name\": \"POST_users__user_id__playlists\", \"description\": \"Create a playlist for a Spotify user (Before calling this API, must call GET /me first to get the user_id). (The playlist will be empty until\\nyou [add tracks](/documentation/web-api/reference/#/operations/add-tracks-to-playlist).)\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"user_id\": {\"type\": \"string\", \"description\": \"The user's [Spotify user ID](/documentation/web-api/#spotify-uris-and-ids).\\n\"}, \"name\": {\"type\": \"string\", \"description\": \"The name for the new playlist, for example \\\"Your Coolest Playlist\\\". This name does not need to be unique; a user may have several playlists with the same name.\"}, \"public\": {\"type\": \"boolean\", \"description\": \"Defaults to true. If true the playlist will be public, if false it will be private. To be able to create private playlists, the user must have granted the playlist-modify-private scope\"}, \"collaborative\": {\"type\": \"boolean\", \"description\": \"Defaults to false. If true the playlist will be collaborative. Note: to create a collaborative playlist you must also set public to false. To create collaborative playlists you must have granted playlist-modify-private and playlist-modify-public scopes.\"}, \"description\": {\"type\": \"string\", \"description\": \"value for playlist description as displayed in Spotify Clients and in the Web API.\"}}, \"required\": [\"user_id\", \"name\"], \"body_params\": [\"name\", \"public\", \"collaborative\", \"description\"]}}, {\"name\": \"POST_playlists__playlist_id__tracks\", \"description\": \"Add one or more items to a user's playlist.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"playlist_id\": {\"type\": \"string\", \"description\": \"The [Spotify ID](/documentation/web-api/#spotify-uris-and-ids) of the playlist.\\n\"}, \"position\": {\"type\": \"integer\", \"description\": \"The position to insert the items, a zero-based index. For example, to insert the items in the first position: `position=0`; to insert the items in the third position: `position=2`. If omitted, the items will be appended to the playlist. Items are added in the order they are listed in the query string or request body.\\n\"}, \"uris\": {\"type\": \"string\", \"description\": \"A comma-separated list of [Spotify URIs](/documentation/web-api/#spotify-uris-and-ids) to add, can be track or episode URIs. For example:<br/>`uris=spotify:track:4iV5W9uYEdYUVa79Axb7Rh, spotify:track:1301WleyT98MSxVHPZCA6M, spotify:episode:512ojhOuo1ktJprKbVcKyQ`<br/>A maximum of 100 items can be added in one request. <br/>\\n_**Note**: it is likely that passing a large number of item URIs as a query parameter will exceed the maximum length of the request URI. When adding a large number of items, it is recommended to pass them in the request body, see below._\\n\"}}, \"required\": [\"playlist_id\"]}}]\n\nGraphQL schema:\n\ntype POST_users__user_id__playlists_ExternalUrls {\n  spotify: String\n}\n\ntype POST_users__user_id__playlists_ExternalUrls1 {\n  spotify: String\n}\n\ntype POST_users__user_id__playlists_Followers {\n  \"\"\"\n  Field \"href\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  href: JSON\n  total: Int\n}\n\ntype POST_users__user_id__playlists_Owner {\n  \"\"\"\n  Field \"display_name\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  display_name: JSON\n  external_urls: POST_users__user_id__playlists_ExternalUrls1\n  href: String\n  id: String\n  type: String\n  uri: String\n}\n\ntype POST_users__user_id__playlists_Root {\n  collaborative: Boolean\n  \"\"\"\n  Field \"description\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  description: JSON\n  external_urls: POST_users__user_id__playlists_ExternalUrls\n  followers: POST_users__user_id__playlists_Followers\n  href: String\n  id: String\n  images: [JSON]\n  name: String\n  owner: POST_users__user_id__playlists_Owner\n  \"\"\"\n  Field \"primary_color\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  primary_color: JSON\n  public: Boolean\n  snapshot_id: String\n  tracks: POST_users__user_id__playlists_Tracks\n  type: String\n  uri: String\n}\n\ntype POST_users__user_id__playlists_Tracks {\n  href: String\n  items: [JSON]\n  limit: Int\n  \"\"\"\n  Field \"next\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  next: JSON\n  offset: Int\n  \"\"\"\n  Field \"previous\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  previous: JSON\n  total: Int\n}\n\ntype Query {\n  POST_users__user_id__playlists(\n    name: String\n    spotify_access_token: String!\n  ): POST_users__user_id__playlists_Root\n    @rest(\n      method: POST\n      endpoint: \"https://api.spotify.com/v1/users/31rph2hasdr2pflu7x5sffw4xxgy/playlists\"\n      headers: [\n        { name: \"authorization\", value: \"Bearer $spotify_access_token;\" }\n      ]\n    )\n}\ntype GET_search_Album {\n  album_type: String\n  artists: [GET_search_ArtistsEntry]\n  available_markets: [String]\n  external_urls: GET_search_ExternalUrls1\n  href: String\n  id: String\n  images: [GET_search_ImagesEntry]\n  name: String\n  release_date: String\n  release_date_precision: String\n  total_tracks: Int\n  type: String\n  uri: String\n}\n\ntype GET_search_Artists1Entry {\n  external_urls: GET_search_ExternalUrls2\n  href: String\n  id: String\n  name: String\n  type: String\n  uri: String\n}\n\ntype GET_search_ArtistsEntry {\n  external_urls: GET_search_ExternalUrls\n  href: String\n  id: String\n  name: String\n  type: String\n  uri: String\n}\n\ntype GET_search_ExternalIds {\n  isrc: String\n}\n\ntype GET_search_ExternalUrls {\n  spotify: String\n}\n\ntype GET_search_ExternalUrls1 {\n  spotify: String\n}\n\ntype GET_search_ExternalUrls2 {\n  spotify: String\n}\n\ntype GET_search_ExternalUrls3 {\n  spotify: String\n}\n\ntype GET_search_ImagesEntry {\n  height: Int\n  url: String\n  width: Int\n}\n\ntype GET_search_ItemsEntry {\n  album: GET_search_Album\n  artists: [GET_search_Artists1Entry]\n  available_markets: [String]\n  disc_number: Int\n  duration_ms: Int\n  explicit: Boolean\n  external_ids: GET_search_ExternalIds\n  external_urls: GET_search_ExternalUrls3\n  href: String\n  id: String\n  is_local: Boolean\n  name: String\n  popularity: Int\n  preview_url: String\n  track_number: Int\n  type: String\n  uri: String\n}\n\ntype GET_search_Root {\n  tracks: GET_search_Tracks\n}\n\ntype GET_search_Tracks {\n  href: String\n  items: [GET_search_ItemsEntry]\n  limit: Int\n  next: String\n  offset: Int\n  \"\"\"\n  Field \"previous\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  previous: JSON\n  total: Int\n}\n\ntype Query {\n  GET_search(\n    q: String\n    spotify_access_token: String!\n    type: String\n  ): GET_search_Root\n    @rest(\n      endpoint: \"https://api.spotify.com/v1/search\"\n      headers: [\n        { name: \"authorization\", value: \"Bearer $spotify_access_token;\" }\n      ]\n    )\n}\ntype GET_me_ExplicitContent {\n  filter_enabled: Boolean\n  filter_locked: Boolean\n}\n\ntype GET_me_ExternalUrls {\n  spotify: String\n}\n\ntype GET_me_Followers {\n  \"\"\"\n  Field \"href\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  href: JSON\n  total: Int\n}\n\ntype GET_me_Root {\n  country: String\n  display_name: String\n  email: String\n  explicit_content: GET_me_ExplicitContent\n  external_urls: GET_me_ExternalUrls\n  followers: GET_me_Followers\n  href: String\n  id: String\n  images: [JSON]\n  product: String\n  type: String\n  uri: String\n}\n\ntype Query {\n  GET_me(spotify_access_token: String!): GET_me_Root\n    @rest(\n      endpoint: \"https://api.spotify.com/v1/me\"\n      headers: [\n        { name: \"authorization\", value: \"Bearer $spotify_access_token;\" }\n      ]\n    )\n}\n\nUtterance: Make me a playlist containing three songs of Mariah Carey and name it 'Love Mariah'", "output": "response_obj = GET_search(q=\"Mariah Carey\", type=\"track\")\nresponse_obj1 = GET_me()\nresponse_obj2 = POST_users__user_id__playlists(user_id=response_obj1.id, name=\"Love Mariah\")\nPOST_playlists__playlist_id__tracks(playlist_id=response_obj2.id, uris=\",\".join([item.uri for item in response_obj.tracks.items[:3]]))\n", "function_specs": "[{\"name\": \"GET_search\", \"description\": \"Get Spotify catalog information about albums, artists, playlists, tracks, shows, episodes or audiobooks\\nthat match a keyword string.<br />\\n**Note: Audiobooks are only available for the US, UK, Ireland, New Zealand and Australia markets.**\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"q\": {\"type\": \"string\", \"description\": \"Your search query.\\n\\nYou can narrow down your search using field filters. The available filters are `album`, `artist`, `track`, `year`, `upc`, `tag:hipster`, `tag:new`, `isrc`, and `genre`. Each field filter only applies to certain result types.\\n\\nThe `artist` and `year` filters can be used while searching albums, artists and tracks. You can filter on a single `year` or a range (e.g. 1955-1960).<br />\\nThe `album` filter can be used while searching albums and tracks.<br />\\nThe `genre` filter can be used while searching artists and tracks.<br />\\nThe `isrc` and `track` filters can be used while searching tracks.<br />\\nThe `upc`, `tag:new` and `tag:hipster` filters can only be used while searching albums. The `tag:new` filter will return albums released in the past two weeks and `tag:hipster` can be used to return only albums with the lowest 10% popularity.<br />\\n\"}, \"type\": {\"type\": \"array\", \"description\": \"A comma-separated list of item types to search across. Search results include hits\\nfrom all the specified item types. For example: `q=abacab&type=album,track` returns\\nboth albums and tracks matching \\\"abacab\\\".\\n\"}, \"market\": {\"type\": \"string\", \"description\": \"An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).\\n  If a country code is specified, only content that is available in that market will be returned.<br/>\\n  If a valid user access token is specified in the request header, the country associated with\\n  the user account will take priority over this parameter.<br/>\\n  _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>\\n  Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).\\n\"}, \"limit\": {\"type\": \"integer\", \"description\": \"The maximum number of results to return in each item type.\\n\"}, \"offset\": {\"type\": \"integer\", \"description\": \"The index of the first result to return. Use\\nwith limit to get the next page of search results.\\n\"}, \"include_external\": {\"type\": \"string\", \"description\": \"If `include_external=audio` is specified it signals that the client can play externally hosted audio content, and marks\\nthe content as playable in the response. By default externally hosted audio content is marked as unplayable in the response.\\n\"}}, \"required\": [\"q\", \"type\"]}}, {\"name\": \"GET_me\", \"description\": \"Get detailed profile information about the current user (including the\\ncurrent user's username).\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {}, \"required\": []}}, {\"name\": \"POST_users__user_id__playlists\", \"description\": \"Create a playlist for a Spotify user (Before calling this API, must call GET /me first to get the user_id). (The playlist will be empty until\\nyou [add tracks](/documentation/web-api/reference/#/operations/add-tracks-to-playlist).)\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"user_id\": {\"type\": \"string\", \"description\": \"The user's [Spotify user ID](/documentation/web-api/#spotify-uris-and-ids).\\n\"}, \"name\": {\"type\": \"string\", \"description\": \"The name for the new playlist, for example \\\"Your Coolest Playlist\\\". This name does not need to be unique; a user may have several playlists with the same name.\"}, \"public\": {\"type\": \"boolean\", \"description\": \"Defaults to true. If true the playlist will be public, if false it will be private. To be able to create private playlists, the user must have granted the playlist-modify-private scope\"}, \"collaborative\": {\"type\": \"boolean\", \"description\": \"Defaults to false. If true the playlist will be collaborative. Note: to create a collaborative playlist you must also set public to false. To create collaborative playlists you must have granted playlist-modify-private and playlist-modify-public scopes.\"}, \"description\": {\"type\": \"string\", \"description\": \"value for playlist description as displayed in Spotify Clients and in the Web API.\"}}, \"required\": [\"user_id\", \"name\"], \"body_params\": [\"name\", \"public\", \"collaborative\", \"description\"]}}, {\"name\": \"POST_playlists__playlist_id__tracks\", \"description\": \"Add one or more items to a user's playlist.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"playlist_id\": {\"type\": \"string\", \"description\": \"The [Spotify ID](/documentation/web-api/#spotify-uris-and-ids) of the playlist.\\n\"}, \"position\": {\"type\": \"integer\", \"description\": \"The position to insert the items, a zero-based index. For example, to insert the items in the first position: `position=0`; to insert the items in the third position: `position=2`. If omitted, the items will be appended to the playlist. Items are added in the order they are listed in the query string or request body.\\n\"}, \"uris\": {\"type\": \"string\", \"description\": \"A comma-separated list of [Spotify URIs](/documentation/web-api/#spotify-uris-and-ids) to add, can be track or episode URIs. For example:<br/>`uris=spotify:track:4iV5W9uYEdYUVa79Axb7Rh, spotify:track:1301WleyT98MSxVHPZCA6M, spotify:episode:512ojhOuo1ktJprKbVcKyQ`<br/>A maximum of 100 items can be added in one request. <br/>\\n_**Note**: it is likely that passing a large number of item URIs as a query parameter will exceed the maximum length of the request URI. When adding a large number of items, it is recommended to pass them in the request body, see below._\\n\"}}, \"required\": [\"playlist_id\"]}}]", "GraphQL_schema": "type POST_users__user_id__playlists_ExternalUrls {\n  spotify: String\n}\n\ntype POST_users__user_id__playlists_ExternalUrls1 {\n  spotify: String\n}\n\ntype POST_users__user_id__playlists_Followers {\n  \"\"\"\n  Field \"href\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  href: JSON\n  total: Int\n}\n\ntype POST_users__user_id__playlists_Owner {\n  \"\"\"\n  Field \"display_name\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  display_name: JSON\n  external_urls: POST_users__user_id__playlists_ExternalUrls1\n  href: String\n  id: String\n  type: String\n  uri: String\n}\n\ntype POST_users__user_id__playlists_Root {\n  collaborative: Boolean\n  \"\"\"\n  Field \"description\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  description: JSON\n  external_urls: POST_users__user_id__playlists_ExternalUrls\n  followers: POST_users__user_id__playlists_Followers\n  href: String\n  id: String\n  images: [JSON]\n  name: String\n  owner: POST_users__user_id__playlists_Owner\n  \"\"\"\n  Field \"primary_color\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  primary_color: JSON\n  public: Boolean\n  snapshot_id: String\n  tracks: POST_users__user_id__playlists_Tracks\n  type: String\n  uri: String\n}\n\ntype POST_users__user_id__playlists_Tracks {\n  href: String\n  items: [JSON]\n  limit: Int\n  \"\"\"\n  Field \"next\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  next: JSON\n  offset: Int\n  \"\"\"\n  Field \"previous\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  previous: JSON\n  total: Int\n}\n\ntype Query {\n  POST_users__user_id__playlists(\n    name: String\n    spotify_access_token: String!\n  ): POST_users__user_id__playlists_Root\n    @rest(\n      method: POST\n      endpoint: \"https://api.spotify.com/v1/users/31rph2hasdr2pflu7x5sffw4xxgy/playlists\"\n      headers: [\n        { name: \"authorization\", value: \"Bearer $spotify_access_token;\" }\n      ]\n    )\n}\ntype GET_search_Album {\n  album_type: String\n  artists: [GET_search_ArtistsEntry]\n  available_markets: [String]\n  external_urls: GET_search_ExternalUrls1\n  href: String\n  id: String\n  images: [GET_search_ImagesEntry]\n  name: String\n  release_date: String\n  release_date_precision: String\n  total_tracks: Int\n  type: String\n  uri: String\n}\n\ntype GET_search_Artists1Entry {\n  external_urls: GET_search_ExternalUrls2\n  href: String\n  id: String\n  name: String\n  type: String\n  uri: String\n}\n\ntype GET_search_ArtistsEntry {\n  external_urls: GET_search_ExternalUrls\n  href: String\n  id: String\n  name: String\n  type: String\n  uri: String\n}\n\ntype GET_search_ExternalIds {\n  isrc: String\n}\n\ntype GET_search_ExternalUrls {\n  spotify: String\n}\n\ntype GET_search_ExternalUrls1 {\n  spotify: String\n}\n\ntype GET_search_ExternalUrls2 {\n  spotify: String\n}\n\ntype GET_search_ExternalUrls3 {\n  spotify: String\n}\n\ntype GET_search_ImagesEntry {\n  height: Int\n  url: String\n  width: Int\n}\n\ntype GET_search_ItemsEntry {\n  album: GET_search_Album\n  artists: [GET_search_Artists1Entry]\n  available_markets: [String]\n  disc_number: Int\n  duration_ms: Int\n  explicit: Boolean\n  external_ids: GET_search_ExternalIds\n  external_urls: GET_search_ExternalUrls3\n  href: String\n  id: String\n  is_local: Boolean\n  name: String\n  popularity: Int\n  preview_url: String\n  track_number: Int\n  type: String\n  uri: String\n}\n\ntype GET_search_Root {\n  tracks: GET_search_Tracks\n}\n\ntype GET_search_Tracks {\n  href: String\n  items: [GET_search_ItemsEntry]\n  limit: Int\n  next: String\n  offset: Int\n  \"\"\"\n  Field \"previous\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  previous: JSON\n  total: Int\n}\n\ntype Query {\n  GET_search(\n    q: String\n    spotify_access_token: String!\n    type: String\n  ): GET_search_Root\n    @rest(\n      endpoint: \"https://api.spotify.com/v1/search\"\n      headers: [\n        { name: \"authorization\", value: \"Bearer $spotify_access_token;\" }\n      ]\n    )\n}\ntype GET_me_ExplicitContent {\n  filter_enabled: Boolean\n  filter_locked: Boolean\n}\n\ntype GET_me_ExternalUrls {\n  spotify: String\n}\n\ntype GET_me_Followers {\n  \"\"\"\n  Field \"href\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  href: JSON\n  total: Int\n}\n\ntype GET_me_Root {\n  country: String\n  display_name: String\n  email: String\n  explicit_content: GET_me_ExplicitContent\n  external_urls: GET_me_ExternalUrls\n  followers: GET_me_Followers\n  href: String\n  id: String\n  images: [JSON]\n  product: String\n  type: String\n  uri: String\n}\n\ntype Query {\n  GET_me(spotify_access_token: String!): GET_me_Root\n    @rest(\n      endpoint: \"https://api.spotify.com/v1/me\"\n      headers: [\n        { name: \"authorization\", value: \"Bearer $spotify_access_token;\" }\n      ]\n    )\n}\n", "utterance": "Make me a playlist containing three songs of Mariah Carey and name it 'Love Mariah'"}
{"domain": "spotify", "input": "Function Signatures:\n\n[{\"name\": \"GET_me_following\", \"description\": \"Get the current user's followed artists.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"type\": {\"type\": \"string\", \"description\": \"The ID type: currently only `artist` is supported.\\n\"}, \"after\": {\"type\": \"string\", \"description\": \"The last artist ID retrieved from the previous request.\\n\"}, \"limit\": {\"type\": \"integer\", \"description\": \"The maximum number of items to return. Default: 20\\\\. Minimum: 1\\\\. Maximum: 50\\\\.\\n\"}}, \"required\": [\"type\"]}}, {\"name\": \"GET_artists__id__albums\", \"description\": \"Get Spotify catalog information about an artist's albums.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"id\": {\"type\": \"string\", \"description\": \"The [Spotify ID](/documentation/web-api/#spotify-uris-and-ids) of the artist.\\n\"}, \"include_groups\": {\"type\": \"string\", \"description\": \"A comma-separated list of keywords that will be used to filter the response. If not supplied, all album types will be returned. <br/>\\nValid values are:<br/>- `album`<br/>- `single`<br/>- `appears_on`<br/>- `compilation`<br/>For example: `include_groups=album,single`.\\n\"}, \"market\": {\"type\": \"string\", \"description\": \"An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).\\n  If a country code is specified, only content that is available in that market will be returned.<br/>\\n  If a valid user access token is specified in the request header, the country associated with\\n  the user account will take priority over this parameter.<br/>\\n  _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>\\n  Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).\\n\"}, \"limit\": {\"type\": \"integer\", \"description\": \"The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50.\\n\"}, \"offset\": {\"type\": \"integer\", \"description\": \"The index of the first item to return. Default: 0 (the first item). Use with limit to get the next set of items.\\n\"}}, \"required\": [\"id\"]}}, {\"name\": \"GET_albums__id__tracks\", \"description\": \"Get Spotify catalog information about an album\\u2019s tracks.\\nOptional parameters can be used to limit the number of tracks returned.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"id\": {\"type\": \"string\", \"description\": \"The [Spotify ID](/documentation/web-api/#spotify-uris-and-ids) of the album.\\n\"}, \"market\": {\"type\": \"string\", \"description\": \"An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).\\n  If a country code is specified, only content that is available in that market will be returned.<br/>\\n  If a valid user access token is specified in the request header, the country associated with\\n  the user account will take priority over this parameter.<br/>\\n  _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>\\n  Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).\\n\"}, \"limit\": {\"type\": \"integer\", \"description\": \"The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50.\\n\"}, \"offset\": {\"type\": \"integer\", \"description\": \"The index of the first item to return. Default: 0 (the first item). Use with limit to get the next set of items.\\n\"}}, \"required\": [\"id\"]}}, {\"name\": \"POST_me_player_queue\", \"description\": \"Add an item to the end of the user's current playback queue.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"uri\": {\"type\": \"string\", \"description\": \"The uri of the item to add to the queue. Must be a track or an episode uri.\\n\"}, \"device_id\": {\"type\": \"string\", \"description\": \"The id of the device this command is targeting. If\\nnot supplied, the user's currently active device is the target.\\n\"}}, \"required\": [\"uri\"]}}]\n\nGraphQL schema:\n\ntype GET_albums__id__tracks_ArtistsEntry {\n  external_urls: GET_albums__id__tracks_ExternalUrls\n  href: String\n  id: String\n  name: String\n  type: String\n  uri: String\n}\n\ntype GET_albums__id__tracks_ExternalUrls {\n  spotify: String\n}\n\ntype GET_albums__id__tracks_ExternalUrls1 {\n  spotify: String\n}\n\ntype GET_albums__id__tracks_ItemsEntry {\n  artists: [GET_albums__id__tracks_ArtistsEntry]\n  disc_number: Int\n  duration_ms: Int\n  explicit: Boolean\n  external_urls: GET_albums__id__tracks_ExternalUrls1\n  href: String\n  id: String\n  is_local: Boolean\n  is_playable: Boolean\n  name: String\n  preview_url: String\n  track_number: Int\n  type: String\n  uri: String\n}\n\ntype GET_albums__id__tracks_Root {\n  href: String\n  items: [GET_albums__id__tracks_ItemsEntry]\n  limit: Int\n  \"\"\"\n  Field \"next\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  next: JSON\n  offset: Int\n  \"\"\"\n  Field \"previous\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  previous: JSON\n  total: Int\n}\n\ntype Query {\n  GET_albums__id__tracks(\n    id: String!\n    spotify_access_token: String!\n  ): GET_albums__id__tracks_Root\n    @rest(\n      endpoint: \"https://api.spotify.com/v1/albums/$id;/tracks\"\n      headers: [\n        { name: \"authorization\", value: \"Bearer $spotify_access_token;\" }\n      ]\n    )\n}\ntype GET_me_following_Artists {\n  cursors: GET_me_following_Cursors\n  href: String\n  items: [GET_me_following_ItemsEntry]\n  limit: Int\n  \"\"\"\n  Field \"next\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  next: JSON\n  total: Int\n}\n\ntype GET_me_following_Cursors {\n  \"\"\"\n  Field \"after\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  after: JSON\n}\n\ntype GET_me_following_ExternalUrls {\n  spotify: String\n}\n\ntype GET_me_following_Followers {\n  \"\"\"\n  Field \"href\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  href: JSON\n  total: Int\n}\n\ntype GET_me_following_ImagesEntry {\n  height: Int\n  url: String\n  width: Int\n}\n\ntype GET_me_following_ItemsEntry {\n  external_urls: GET_me_following_ExternalUrls\n  followers: GET_me_following_Followers\n  genres: [String]\n  href: String\n  id: String\n  images: [GET_me_following_ImagesEntry]\n  name: String\n  popularity: Int\n  type: String\n  uri: String\n}\n\ntype GET_me_following_Root {\n  artists: GET_me_following_Artists\n}\n\ntype Query {\n  GET_me_following(\n    spotify_access_token: String!\n    type: String\n  ): GET_me_following_Root\n    @rest(\n      endpoint: \"https://api.spotify.com/v1/me/following\"\n      headers: [\n        { name: \"authorization\", value: \"Bearer $spotify_access_token;\" }\n      ]\n    )\n}\ntype GET_artists__id__albums_ArtistsEntry {\n  external_urls: GET_artists__id__albums_ExternalUrls1\n  href: String\n  id: String\n  name: String\n  type: String\n  uri: String\n}\n\ntype GET_artists__id__albums_ExternalUrls {\n  spotify: String\n}\n\ntype GET_artists__id__albums_ExternalUrls1 {\n  spotify: String\n}\n\ntype GET_artists__id__albums_ImagesEntry {\n  height: Int\n  url: String\n  width: Int\n}\n\ntype GET_artists__id__albums_ItemsEntry {\n  album_group: String\n  album_type: String\n  artists: [GET_artists__id__albums_ArtistsEntry]\n  available_markets: [String]\n  external_urls: GET_artists__id__albums_ExternalUrls\n  href: String\n  id: String\n  images: [GET_artists__id__albums_ImagesEntry]\n  name: String\n  release_date: String\n  release_date_precision: String\n  total_tracks: Int\n  type: String\n  uri: String\n}\n\ntype GET_artists__id__albums_Root {\n  href: String\n  items: [GET_artists__id__albums_ItemsEntry]\n  limit: Int\n  next: String\n  offset: Int\n  \"\"\"\n  Field \"previous\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  previous: JSON\n  total: Int\n}\n\ntype Query {\n  GET_artists__id__albums(\n    id: String!\n    spotify_access_token: String!\n  ): GET_artists__id__albums_Root\n    @rest(\n      endpoint: \"https://api.spotify.com/v1/artists/$id;/albums\"\n      headers: [\n        { name: \"authorization\", value: \"Bearer $spotify_access_token;\" }\n      ]\n    )\n}\n\nUtterance: Append the first song of the newest album of my following first artist to my player queue", "output": "response_obj = GET_me_following(type)\nresponse_obj1 = GET_artists__id__albums(id=response_obj.items[0].id)\nresponse_obj2 = GET_albums__id__tracks(id=response_obj1.items[0].id)\nPOST_me_player_queue(uri=response_obj2.items[0].uri)\n", "function_specs": "[{\"name\": \"GET_me_following\", \"description\": \"Get the current user's followed artists.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"type\": {\"type\": \"string\", \"description\": \"The ID type: currently only `artist` is supported.\\n\"}, \"after\": {\"type\": \"string\", \"description\": \"The last artist ID retrieved from the previous request.\\n\"}, \"limit\": {\"type\": \"integer\", \"description\": \"The maximum number of items to return. Default: 20\\\\. Minimum: 1\\\\. Maximum: 50\\\\.\\n\"}}, \"required\": [\"type\"]}}, {\"name\": \"GET_artists__id__albums\", \"description\": \"Get Spotify catalog information about an artist's albums.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"id\": {\"type\": \"string\", \"description\": \"The [Spotify ID](/documentation/web-api/#spotify-uris-and-ids) of the artist.\\n\"}, \"include_groups\": {\"type\": \"string\", \"description\": \"A comma-separated list of keywords that will be used to filter the response. If not supplied, all album types will be returned. <br/>\\nValid values are:<br/>- `album`<br/>- `single`<br/>- `appears_on`<br/>- `compilation`<br/>For example: `include_groups=album,single`.\\n\"}, \"market\": {\"type\": \"string\", \"description\": \"An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).\\n  If a country code is specified, only content that is available in that market will be returned.<br/>\\n  If a valid user access token is specified in the request header, the country associated with\\n  the user account will take priority over this parameter.<br/>\\n  _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>\\n  Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).\\n\"}, \"limit\": {\"type\": \"integer\", \"description\": \"The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50.\\n\"}, \"offset\": {\"type\": \"integer\", \"description\": \"The index of the first item to return. Default: 0 (the first item). Use with limit to get the next set of items.\\n\"}}, \"required\": [\"id\"]}}, {\"name\": \"GET_albums__id__tracks\", \"description\": \"Get Spotify catalog information about an album\\u2019s tracks.\\nOptional parameters can be used to limit the number of tracks returned.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"id\": {\"type\": \"string\", \"description\": \"The [Spotify ID](/documentation/web-api/#spotify-uris-and-ids) of the album.\\n\"}, \"market\": {\"type\": \"string\", \"description\": \"An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).\\n  If a country code is specified, only content that is available in that market will be returned.<br/>\\n  If a valid user access token is specified in the request header, the country associated with\\n  the user account will take priority over this parameter.<br/>\\n  _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>\\n  Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).\\n\"}, \"limit\": {\"type\": \"integer\", \"description\": \"The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50.\\n\"}, \"offset\": {\"type\": \"integer\", \"description\": \"The index of the first item to return. Default: 0 (the first item). Use with limit to get the next set of items.\\n\"}}, \"required\": [\"id\"]}}, {\"name\": \"POST_me_player_queue\", \"description\": \"Add an item to the end of the user's current playback queue.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"uri\": {\"type\": \"string\", \"description\": \"The uri of the item to add to the queue. Must be a track or an episode uri.\\n\"}, \"device_id\": {\"type\": \"string\", \"description\": \"The id of the device this command is targeting. If\\nnot supplied, the user's currently active device is the target.\\n\"}}, \"required\": [\"uri\"]}}]", "GraphQL_schema": "type GET_albums__id__tracks_ArtistsEntry {\n  external_urls: GET_albums__id__tracks_ExternalUrls\n  href: String\n  id: String\n  name: String\n  type: String\n  uri: String\n}\n\ntype GET_albums__id__tracks_ExternalUrls {\n  spotify: String\n}\n\ntype GET_albums__id__tracks_ExternalUrls1 {\n  spotify: String\n}\n\ntype GET_albums__id__tracks_ItemsEntry {\n  artists: [GET_albums__id__tracks_ArtistsEntry]\n  disc_number: Int\n  duration_ms: Int\n  explicit: Boolean\n  external_urls: GET_albums__id__tracks_ExternalUrls1\n  href: String\n  id: String\n  is_local: Boolean\n  is_playable: Boolean\n  name: String\n  preview_url: String\n  track_number: Int\n  type: String\n  uri: String\n}\n\ntype GET_albums__id__tracks_Root {\n  href: String\n  items: [GET_albums__id__tracks_ItemsEntry]\n  limit: Int\n  \"\"\"\n  Field \"next\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  next: JSON\n  offset: Int\n  \"\"\"\n  Field \"previous\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  previous: JSON\n  total: Int\n}\n\ntype Query {\n  GET_albums__id__tracks(\n    id: String!\n    spotify_access_token: String!\n  ): GET_albums__id__tracks_Root\n    @rest(\n      endpoint: \"https://api.spotify.com/v1/albums/$id;/tracks\"\n      headers: [\n        { name: \"authorization\", value: \"Bearer $spotify_access_token;\" }\n      ]\n    )\n}\ntype GET_me_following_Artists {\n  cursors: GET_me_following_Cursors\n  href: String\n  items: [GET_me_following_ItemsEntry]\n  limit: Int\n  \"\"\"\n  Field \"next\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  next: JSON\n  total: Int\n}\n\ntype GET_me_following_Cursors {\n  \"\"\"\n  Field \"after\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  after: JSON\n}\n\ntype GET_me_following_ExternalUrls {\n  spotify: String\n}\n\ntype GET_me_following_Followers {\n  \"\"\"\n  Field \"href\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  href: JSON\n  total: Int\n}\n\ntype GET_me_following_ImagesEntry {\n  height: Int\n  url: String\n  width: Int\n}\n\ntype GET_me_following_ItemsEntry {\n  external_urls: GET_me_following_ExternalUrls\n  followers: GET_me_following_Followers\n  genres: [String]\n  href: String\n  id: String\n  images: [GET_me_following_ImagesEntry]\n  name: String\n  popularity: Int\n  type: String\n  uri: String\n}\n\ntype GET_me_following_Root {\n  artists: GET_me_following_Artists\n}\n\ntype Query {\n  GET_me_following(\n    spotify_access_token: String!\n    type: String\n  ): GET_me_following_Root\n    @rest(\n      endpoint: \"https://api.spotify.com/v1/me/following\"\n      headers: [\n        { name: \"authorization\", value: \"Bearer $spotify_access_token;\" }\n      ]\n    )\n}\ntype GET_artists__id__albums_ArtistsEntry {\n  external_urls: GET_artists__id__albums_ExternalUrls1\n  href: String\n  id: String\n  name: String\n  type: String\n  uri: String\n}\n\ntype GET_artists__id__albums_ExternalUrls {\n  spotify: String\n}\n\ntype GET_artists__id__albums_ExternalUrls1 {\n  spotify: String\n}\n\ntype GET_artists__id__albums_ImagesEntry {\n  height: Int\n  url: String\n  width: Int\n}\n\ntype GET_artists__id__albums_ItemsEntry {\n  album_group: String\n  album_type: String\n  artists: [GET_artists__id__albums_ArtistsEntry]\n  available_markets: [String]\n  external_urls: GET_artists__id__albums_ExternalUrls\n  href: String\n  id: String\n  images: [GET_artists__id__albums_ImagesEntry]\n  name: String\n  release_date: String\n  release_date_precision: String\n  total_tracks: Int\n  type: String\n  uri: String\n}\n\ntype GET_artists__id__albums_Root {\n  href: String\n  items: [GET_artists__id__albums_ItemsEntry]\n  limit: Int\n  next: String\n  offset: Int\n  \"\"\"\n  Field \"previous\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  previous: JSON\n  total: Int\n}\n\ntype Query {\n  GET_artists__id__albums(\n    id: String!\n    spotify_access_token: String!\n  ): GET_artists__id__albums_Root\n    @rest(\n      endpoint: \"https://api.spotify.com/v1/artists/$id;/albums\"\n      headers: [\n        { name: \"authorization\", value: \"Bearer $spotify_access_token;\" }\n      ]\n    )\n}\n", "utterance": "Append the first song of the newest album of my following first artist to my player queue"}
{"domain": "spotify", "input": "Function Signatures:\n\n[{\"name\": \"GET_me_playlists\", \"description\": \"Get a list of the playlists owned or followed by the current Spotify\\nuser.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"limit\": {\"type\": \"integer\", \"description\": \"The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50.\\n\"}, \"offset\": {\"type\": \"integer\", \"description\": \"'The index of the first playlist to return. Default:\\n0 (the first object). Maximum offset: 100.000\\\\. Use with `limit` to get the\\nnext set of playlists.'\\n\"}}, \"required\": []}}, {\"name\": \"GET_playlists__playlist_id__tracks\", \"description\": \"Get full details of the items of a playlist owned by a Spotify user.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"playlist_id\": {\"type\": \"string\", \"description\": \"The [Spotify ID](/documentation/web-api/#spotify-uris-and-ids) of the playlist.\\n\"}, \"market\": {\"type\": \"string\", \"description\": \"An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).\\n  If a country code is specified, only content that is available in that market will be returned.<br/>\\n  If a valid user access token is specified in the request header, the country associated with\\n  the user account will take priority over this parameter.<br/>\\n  _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>\\n  Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).\\n\"}, \"fields\": {\"type\": \"string\", \"description\": \"Filters for the query: a comma-separated list of the\\nfields to return. If omitted, all fields are returned. For example, to get\\njust the total number of items and the request limit:<br/>`fields=total,limit`<br/>A\\ndot separator can be used to specify non-reoccurring fields, while parentheses\\ncan be used to specify reoccurring fields within objects. For example, to\\nget just the added date and user ID of the adder:<br/>`fields=items(added_at,added_by.id)`<br/>Use\\nmultiple parentheses to drill down into nested objects, for example:<br/>`fields=items(track(name,href,album(name,href)))`<br/>Fields\\ncan be excluded by prefixing them with an exclamation mark, for example:<br/>`fields=items.track.album(!external_urls,images)`\\n\"}, \"limit\": {\"type\": \"integer\", \"description\": \"The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50.\\n\"}, \"offset\": {\"type\": \"integer\", \"description\": \"The index of the first item to return. Default: 0 (the first item). Use with limit to get the next set of items.\\n\"}, \"additional_types\": {\"type\": \"string\", \"description\": \"A comma-separated list of item types that your client supports besides the default `track` type. Valid types are: `track` and `episode`.<br/>\\n_**Note**: This parameter was introduced to allow existing clients to maintain their current behaviour and might be deprecated in the future._<br/>\\nIn addition to providing this parameter, make sure that your client properly handles cases of new types in the future by checking against the `type` field of each object.\\n\"}}, \"required\": [\"playlist_id\"]}}, {\"name\": \"DELETE_playlists__playlist_id__tracks\", \"description\": \"Remove one or more items from a user's playlist.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"playlist_id\": {\"type\": \"string\", \"description\": \"The [Spotify ID](/documentation/web-api/#spotify-uris-and-ids) of the playlist.\\n\"}, \"tracks\": {\"type\": \"array\", \"description\": \"An array of objects containing Spotify URIs of the tracks or episodes to remove. For example: { \\\"tracks\\\": [{ \\\"uri\\\": \\\"spotify:track:4iV5W9uYEdYUVa79Axb7Rh\\\" },{ \\\"uri\\\": \\\"spotify:track:1301WleyT98MSxVHPZCA6M\\\" }] }. A maximum of 100 objects can be sent at once.\"}, \"snapshot_id\": {\"type\": \"string\", \"description\": \"The playlist's snapshot ID against which you want to make the changes. The API will validate that the specified items exist and in the specified positions and make the changes, even if more recent changes have been made to the playlist.\"}}, \"required\": [\"playlist_id\", \"tracks\"], \"body_params\": [\"tracks\"]}}]\n\nGraphQL schema:\n\ntype GET_me_playlists_ExternalUrls {\n  spotify: String\n}\n\ntype GET_me_playlists_ExternalUrls1 {\n  spotify: String\n}\n\ntype GET_me_playlists_ImagesEntry {\n  \"\"\"\n  Field \"height\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  height: JSON\n  url: String\n  \"\"\"\n  Field \"width\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  width: JSON\n}\n\ntype GET_me_playlists_ItemsEntry {\n  collaborative: Boolean\n  description: String\n  external_urls: GET_me_playlists_ExternalUrls\n  href: String\n  id: String\n  images: [GET_me_playlists_ImagesEntry]\n  name: String\n  owner: GET_me_playlists_Owner\n  \"\"\"\n  Field \"primary_color\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  primary_color: JSON\n  public: Boolean\n  snapshot_id: String\n  tracks: GET_me_playlists_Tracks\n  type: String\n  uri: String\n}\n\ntype GET_me_playlists_Owner {\n  display_name: String\n  external_urls: GET_me_playlists_ExternalUrls1\n  href: String\n  id: String\n  type: String\n  uri: String\n}\n\ntype GET_me_playlists_Root {\n  href: String\n  items: [GET_me_playlists_ItemsEntry]\n  limit: Int\n  \"\"\"\n  Field \"next\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  next: JSON\n  offset: Int\n  \"\"\"\n  Field \"previous\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  previous: JSON\n  total: Int\n}\n\ntype GET_me_playlists_Tracks {\n  href: String\n  total: Int\n}\n\ntype Query {\n  GET_me_playlists(spotify_access_token: String!): GET_me_playlists_Root\n    @rest(\n      endpoint: \"https://api.spotify.com/v1/me/playlists\"\n      headers: [\n        { name: \"authorization\", value: \"Bearer $spotify_access_token;\" }\n      ]\n    )\n}\ntype GET_playlists__playlist_id__tracks_AddedBy {\n  external_urls: GET_playlists__playlist_id__tracks_ExternalUrls\n  href: String\n  id: String\n  type: String\n  uri: String\n}\n\ntype GET_playlists__playlist_id__tracks_Album {\n  album_type: String\n  artists: [GET_playlists__playlist_id__tracks_ArtistsEntry]\n  available_markets: [String]\n  external_urls: GET_playlists__playlist_id__tracks_ExternalUrls2\n  href: String\n  id: String\n  images: [GET_playlists__playlist_id__tracks_ImagesEntry]\n  name: String\n  release_date: Int\n  release_date_precision: String\n  total_tracks: Int\n  type: String\n  uri: String\n}\n\ntype GET_playlists__playlist_id__tracks_Artists1Entry {\n  external_urls: GET_playlists__playlist_id__tracks_ExternalUrls3\n  href: String\n  id: String\n  name: String\n  type: String\n  uri: String\n}\n\ntype GET_playlists__playlist_id__tracks_ArtistsEntry {\n  external_urls: GET_playlists__playlist_id__tracks_ExternalUrls1\n  href: String\n  id: String\n  name: String\n  type: String\n  uri: String\n}\n\ntype GET_playlists__playlist_id__tracks_ExternalIds {\n  isrc: String\n}\n\ntype GET_playlists__playlist_id__tracks_ExternalUrls {\n  spotify: String\n}\n\ntype GET_playlists__playlist_id__tracks_ExternalUrls1 {\n  spotify: String\n}\n\ntype GET_playlists__playlist_id__tracks_ExternalUrls2 {\n  spotify: String\n}\n\ntype GET_playlists__playlist_id__tracks_ExternalUrls3 {\n  spotify: String\n}\n\ntype GET_playlists__playlist_id__tracks_ExternalUrls4 {\n  spotify: String\n}\n\ntype GET_playlists__playlist_id__tracks_ImagesEntry {\n  height: Int\n  url: String\n  width: Int\n}\n\ntype GET_playlists__playlist_id__tracks_ItemsEntry {\n  added_at: DateTime\n  added_by: GET_playlists__playlist_id__tracks_AddedBy\n  is_local: Boolean\n  \"\"\"\n  Field \"primary_color\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  primary_color: JSON\n  track: GET_playlists__playlist_id__tracks_Track\n  video_thumbnail: GET_playlists__playlist_id__tracks_VideoThumbnail\n}\n\ntype GET_playlists__playlist_id__tracks_Root {\n  href: String\n  items: [GET_playlists__playlist_id__tracks_ItemsEntry]\n  limit: Int\n  \"\"\"\n  Field \"next\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  next: JSON\n  offset: Int\n  \"\"\"\n  Field \"previous\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  previous: JSON\n  total: Int\n}\n\ntype GET_playlists__playlist_id__tracks_Track {\n  album: GET_playlists__playlist_id__tracks_Album\n  artists: [GET_playlists__playlist_id__tracks_Artists1Entry]\n  available_markets: [String]\n  disc_number: Int\n  duration_ms: Int\n  episode: Boolean\n  explicit: Boolean\n  external_ids: GET_playlists__playlist_id__tracks_ExternalIds\n  external_urls: GET_playlists__playlist_id__tracks_ExternalUrls4\n  href: String\n  id: String\n  is_local: Boolean\n  name: String\n  popularity: Int\n  preview_url: String\n  track: Boolean\n  track_number: Int\n  type: String\n  uri: String\n}\n\ntype GET_playlists__playlist_id__tracks_VideoThumbnail {\n  \"\"\"\n  Field \"url\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  url: JSON\n}\n\ntype Query {\n  GET_playlists__playlist_id__tracks(\n    playlist_id: String!\n    spotify_access_token: String!\n  ): GET_playlists__playlist_id__tracks_Root\n    @rest(\n      endpoint: \"https://api.spotify.com/v1/playlists/$playlist_id;/tracks\"\n      headers: [\n        { name: \"authorization\", value: \"Bearer $spotify_access_token;\" }\n      ]\n    )\n}\n\nUtterance: Remove the first song from my playlist 'My Rock'", "output": "response_obj = GET_me_playlists()\nresponse_obj1 = GET_playlists__playlist_id__tracks(playlist_id=[item.id for item in response_obj.items if item.name == \"My Rock\"][0])\nDELETE_playlists__playlist_id__tracks(playlist_id=[item.id for item in response_obj.items if item.name == \"My Rock\"][0], tracks=[{\"uri\":response_obj1.items[0].track.uri}])\n", "function_specs": "[{\"name\": \"GET_me_playlists\", \"description\": \"Get a list of the playlists owned or followed by the current Spotify\\nuser.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"limit\": {\"type\": \"integer\", \"description\": \"The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50.\\n\"}, \"offset\": {\"type\": \"integer\", \"description\": \"'The index of the first playlist to return. Default:\\n0 (the first object). Maximum offset: 100.000\\\\. Use with `limit` to get the\\nnext set of playlists.'\\n\"}}, \"required\": []}}, {\"name\": \"GET_playlists__playlist_id__tracks\", \"description\": \"Get full details of the items of a playlist owned by a Spotify user.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"playlist_id\": {\"type\": \"string\", \"description\": \"The [Spotify ID](/documentation/web-api/#spotify-uris-and-ids) of the playlist.\\n\"}, \"market\": {\"type\": \"string\", \"description\": \"An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).\\n  If a country code is specified, only content that is available in that market will be returned.<br/>\\n  If a valid user access token is specified in the request header, the country associated with\\n  the user account will take priority over this parameter.<br/>\\n  _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>\\n  Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).\\n\"}, \"fields\": {\"type\": \"string\", \"description\": \"Filters for the query: a comma-separated list of the\\nfields to return. If omitted, all fields are returned. For example, to get\\njust the total number of items and the request limit:<br/>`fields=total,limit`<br/>A\\ndot separator can be used to specify non-reoccurring fields, while parentheses\\ncan be used to specify reoccurring fields within objects. For example, to\\nget just the added date and user ID of the adder:<br/>`fields=items(added_at,added_by.id)`<br/>Use\\nmultiple parentheses to drill down into nested objects, for example:<br/>`fields=items(track(name,href,album(name,href)))`<br/>Fields\\ncan be excluded by prefixing them with an exclamation mark, for example:<br/>`fields=items.track.album(!external_urls,images)`\\n\"}, \"limit\": {\"type\": \"integer\", \"description\": \"The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50.\\n\"}, \"offset\": {\"type\": \"integer\", \"description\": \"The index of the first item to return. Default: 0 (the first item). Use with limit to get the next set of items.\\n\"}, \"additional_types\": {\"type\": \"string\", \"description\": \"A comma-separated list of item types that your client supports besides the default `track` type. Valid types are: `track` and `episode`.<br/>\\n_**Note**: This parameter was introduced to allow existing clients to maintain their current behaviour and might be deprecated in the future._<br/>\\nIn addition to providing this parameter, make sure that your client properly handles cases of new types in the future by checking against the `type` field of each object.\\n\"}}, \"required\": [\"playlist_id\"]}}, {\"name\": \"DELETE_playlists__playlist_id__tracks\", \"description\": \"Remove one or more items from a user's playlist.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"playlist_id\": {\"type\": \"string\", \"description\": \"The [Spotify ID](/documentation/web-api/#spotify-uris-and-ids) of the playlist.\\n\"}, \"tracks\": {\"type\": \"array\", \"description\": \"An array of objects containing Spotify URIs of the tracks or episodes to remove. For example: { \\\"tracks\\\": [{ \\\"uri\\\": \\\"spotify:track:4iV5W9uYEdYUVa79Axb7Rh\\\" },{ \\\"uri\\\": \\\"spotify:track:1301WleyT98MSxVHPZCA6M\\\" }] }. A maximum of 100 objects can be sent at once.\"}, \"snapshot_id\": {\"type\": \"string\", \"description\": \"The playlist's snapshot ID against which you want to make the changes. The API will validate that the specified items exist and in the specified positions and make the changes, even if more recent changes have been made to the playlist.\"}}, \"required\": [\"playlist_id\", \"tracks\"], \"body_params\": [\"tracks\"]}}]", "GraphQL_schema": "type GET_me_playlists_ExternalUrls {\n  spotify: String\n}\n\ntype GET_me_playlists_ExternalUrls1 {\n  spotify: String\n}\n\ntype GET_me_playlists_ImagesEntry {\n  \"\"\"\n  Field \"height\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  height: JSON\n  url: String\n  \"\"\"\n  Field \"width\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  width: JSON\n}\n\ntype GET_me_playlists_ItemsEntry {\n  collaborative: Boolean\n  description: String\n  external_urls: GET_me_playlists_ExternalUrls\n  href: String\n  id: String\n  images: [GET_me_playlists_ImagesEntry]\n  name: String\n  owner: GET_me_playlists_Owner\n  \"\"\"\n  Field \"primary_color\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  primary_color: JSON\n  public: Boolean\n  snapshot_id: String\n  tracks: GET_me_playlists_Tracks\n  type: String\n  uri: String\n}\n\ntype GET_me_playlists_Owner {\n  display_name: String\n  external_urls: GET_me_playlists_ExternalUrls1\n  href: String\n  id: String\n  type: String\n  uri: String\n}\n\ntype GET_me_playlists_Root {\n  href: String\n  items: [GET_me_playlists_ItemsEntry]\n  limit: Int\n  \"\"\"\n  Field \"next\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  next: JSON\n  offset: Int\n  \"\"\"\n  Field \"previous\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  previous: JSON\n  total: Int\n}\n\ntype GET_me_playlists_Tracks {\n  href: String\n  total: Int\n}\n\ntype Query {\n  GET_me_playlists(spotify_access_token: String!): GET_me_playlists_Root\n    @rest(\n      endpoint: \"https://api.spotify.com/v1/me/playlists\"\n      headers: [\n        { name: \"authorization\", value: \"Bearer $spotify_access_token;\" }\n      ]\n    )\n}\ntype GET_playlists__playlist_id__tracks_AddedBy {\n  external_urls: GET_playlists__playlist_id__tracks_ExternalUrls\n  href: String\n  id: String\n  type: String\n  uri: String\n}\n\ntype GET_playlists__playlist_id__tracks_Album {\n  album_type: String\n  artists: [GET_playlists__playlist_id__tracks_ArtistsEntry]\n  available_markets: [String]\n  external_urls: GET_playlists__playlist_id__tracks_ExternalUrls2\n  href: String\n  id: String\n  images: [GET_playlists__playlist_id__tracks_ImagesEntry]\n  name: String\n  release_date: Int\n  release_date_precision: String\n  total_tracks: Int\n  type: String\n  uri: String\n}\n\ntype GET_playlists__playlist_id__tracks_Artists1Entry {\n  external_urls: GET_playlists__playlist_id__tracks_ExternalUrls3\n  href: String\n  id: String\n  name: String\n  type: String\n  uri: String\n}\n\ntype GET_playlists__playlist_id__tracks_ArtistsEntry {\n  external_urls: GET_playlists__playlist_id__tracks_ExternalUrls1\n  href: String\n  id: String\n  name: String\n  type: String\n  uri: String\n}\n\ntype GET_playlists__playlist_id__tracks_ExternalIds {\n  isrc: String\n}\n\ntype GET_playlists__playlist_id__tracks_ExternalUrls {\n  spotify: String\n}\n\ntype GET_playlists__playlist_id__tracks_ExternalUrls1 {\n  spotify: String\n}\n\ntype GET_playlists__playlist_id__tracks_ExternalUrls2 {\n  spotify: String\n}\n\ntype GET_playlists__playlist_id__tracks_ExternalUrls3 {\n  spotify: String\n}\n\ntype GET_playlists__playlist_id__tracks_ExternalUrls4 {\n  spotify: String\n}\n\ntype GET_playlists__playlist_id__tracks_ImagesEntry {\n  height: Int\n  url: String\n  width: Int\n}\n\ntype GET_playlists__playlist_id__tracks_ItemsEntry {\n  added_at: DateTime\n  added_by: GET_playlists__playlist_id__tracks_AddedBy\n  is_local: Boolean\n  \"\"\"\n  Field \"primary_color\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  primary_color: JSON\n  track: GET_playlists__playlist_id__tracks_Track\n  video_thumbnail: GET_playlists__playlist_id__tracks_VideoThumbnail\n}\n\ntype GET_playlists__playlist_id__tracks_Root {\n  href: String\n  items: [GET_playlists__playlist_id__tracks_ItemsEntry]\n  limit: Int\n  \"\"\"\n  Field \"next\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  next: JSON\n  offset: Int\n  \"\"\"\n  Field \"previous\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  previous: JSON\n  total: Int\n}\n\ntype GET_playlists__playlist_id__tracks_Track {\n  album: GET_playlists__playlist_id__tracks_Album\n  artists: [GET_playlists__playlist_id__tracks_Artists1Entry]\n  available_markets: [String]\n  disc_number: Int\n  duration_ms: Int\n  episode: Boolean\n  explicit: Boolean\n  external_ids: GET_playlists__playlist_id__tracks_ExternalIds\n  external_urls: GET_playlists__playlist_id__tracks_ExternalUrls4\n  href: String\n  id: String\n  is_local: Boolean\n  name: String\n  popularity: Int\n  preview_url: String\n  track: Boolean\n  track_number: Int\n  type: String\n  uri: String\n}\n\ntype GET_playlists__playlist_id__tracks_VideoThumbnail {\n  \"\"\"\n  Field \"url\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  url: JSON\n}\n\ntype Query {\n  GET_playlists__playlist_id__tracks(\n    playlist_id: String!\n    spotify_access_token: String!\n  ): GET_playlists__playlist_id__tracks_Root\n    @rest(\n      endpoint: \"https://api.spotify.com/v1/playlists/$playlist_id;/tracks\"\n      headers: [\n        { name: \"authorization\", value: \"Bearer $spotify_access_token;\" }\n      ]\n    )\n}\n", "utterance": "Remove the first song from my playlist 'My Rock'"}
{"domain": "spotify", "input": "Function Signatures:\n\n[{\"name\": \"GET_me_player_currently_playing\", \"description\": \"Get the track currently being played on the user's Spotify account.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"market\": {\"type\": \"string\", \"description\": \"An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).\\n  If a country code is specified, only content that is available in that market will be returned.<br/>\\n  If a valid user access token is specified in the request header, the country associated with\\n  the user account will take priority over this parameter.<br/>\\n  _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>\\n  Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).\\n\"}, \"additional_types\": {\"type\": \"string\", \"description\": \"A comma-separated list of item types that your client supports besides the default `track` type. Valid types are: `track` and `episode`.<br/>\\n_**Note**: This parameter was introduced to allow existing clients to maintain their current behaviour and might be deprecated in the future._<br/>\\nIn addition to providing this parameter, make sure that your client properly handles cases of new types in the future by checking against the `type` field of each object.\\n\"}}, \"required\": []}}, {\"name\": \"GET_tracks__id_\", \"description\": \"Get Spotify catalog information for a single track identified by its\\nunique Spotify ID.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"id\": {\"type\": \"string\", \"description\": \"The [Spotify ID](/documentation/web-api/#spotify-uris-and-ids)\\nfor the track.\\n\"}, \"market\": {\"type\": \"string\", \"description\": \"An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).\\n  If a country code is specified, only content that is available in that market will be returned.<br/>\\n  If a valid user access token is specified in the request header, the country associated with\\n  the user account will take priority over this parameter.<br/>\\n  _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>\\n  Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).\\n\"}}, \"required\": [\"id\"]}}, {\"name\": \"DELETE_me_following\", \"description\": \"Remove the current user as a follower of one or more artists or other Spotify users.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"type\": {\"type\": \"string\", \"description\": \"The ID type: either `artist` or `user`.\\n\"}, \"ids\": {\"type\": \"string\", \"description\": \"A comma-separated list of the artist or the user [Spotify IDs](/documentation/web-api/#spotify-uris-and-ids). For example: `ids=74ASZWbe4lXaubB36ztrGX,08td7MxkoHQkXnWAYD8d6Q`. A maximum of 50 IDs can be sent in one request.\\n\"}}, \"required\": [\"type\", \"ids\"]}}]\n\nGraphQL schema:\n\ntype GET_me_player_currently_playing_Actions {\n  disallows: GET_me_player_currently_playing_Disallows\n}\n\ntype GET_me_player_currently_playing_Album {\n  album_type: String\n  artists: [GET_me_player_currently_playing_ArtistsEntry]\n  available_markets: [String]\n  external_urls: GET_me_player_currently_playing_ExternalUrls2\n  href: String\n  id: String\n  images: [GET_me_player_currently_playing_ImagesEntry]\n  name: String\n  release_date: Int\n  release_date_precision: String\n  total_tracks: Int\n  type: String\n  uri: String\n}\n\ntype GET_me_player_currently_playing_Artists1Entry {\n  external_urls: GET_me_player_currently_playing_ExternalUrls3\n  href: String\n  id: String\n  name: String\n  type: String\n  uri: String\n}\n\ntype GET_me_player_currently_playing_ArtistsEntry {\n  external_urls: GET_me_player_currently_playing_ExternalUrls1\n  href: String\n  id: String\n  name: String\n  type: String\n  uri: String\n}\n\ntype GET_me_player_currently_playing_Context {\n  external_urls: GET_me_player_currently_playing_ExternalUrls\n  href: String\n  type: String\n  uri: String\n}\n\ntype GET_me_player_currently_playing_Disallows {\n  resuming: Boolean\n}\n\ntype GET_me_player_currently_playing_ExternalIds {\n  isrc: String\n}\n\ntype GET_me_player_currently_playing_ExternalUrls {\n  spotify: String\n}\n\ntype GET_me_player_currently_playing_ExternalUrls1 {\n  spotify: String\n}\n\ntype GET_me_player_currently_playing_ExternalUrls2 {\n  spotify: String\n}\n\ntype GET_me_player_currently_playing_ExternalUrls3 {\n  spotify: String\n}\n\ntype GET_me_player_currently_playing_ExternalUrls4 {\n  spotify: String\n}\n\ntype GET_me_player_currently_playing_ImagesEntry {\n  height: Int\n  url: String\n  width: Int\n}\n\ntype GET_me_player_currently_playing_Item {\n  album: GET_me_player_currently_playing_Album\n  artists: [GET_me_player_currently_playing_Artists1Entry]\n  available_markets: [String]\n  disc_number: Int\n  duration_ms: Int\n  explicit: Boolean\n  external_ids: GET_me_player_currently_playing_ExternalIds\n  external_urls: GET_me_player_currently_playing_ExternalUrls4\n  href: String\n  id: String\n  is_local: Boolean\n  name: String\n  popularity: Int\n  preview_url: String\n  track_number: Int\n  type: String\n  uri: String\n}\n\ntype GET_me_player_currently_playing_Root {\n  actions: GET_me_player_currently_playing_Actions\n  context: GET_me_player_currently_playing_Context\n  currently_playing_type: String\n  is_playing: Boolean\n  item: GET_me_player_currently_playing_Item\n  progress_ms: Int\n  timestamp: ID\n}\n\ntype Query {\n  GET_me_player_currently_playing(\n    spotify_access_token: String!\n  ): GET_me_player_currently_playing_Root\n    @rest(\n      endpoint: \"https://api.spotify.com/v1/me/player/currently-playing\"\n      headers: [\n        { name: \"authorization\", value: \"Bearer $spotify_access_token;\" }\n      ]\n    )\n}\ntype GET_tracks__id_Album {\n  album_type: String\n  artists: [GET_tracks__id_ArtistsEntry]\n  available_markets: [String]\n  external_urls: GET_tracks__id_ExternalUrls1\n  href: String\n  id: String\n  images: [GET_tracks__id_ImagesEntry]\n  name: String\n  release_date: Date\n  release_date_precision: String\n  total_tracks: Int\n  type: String\n  uri: String\n}\n\ntype GET_tracks__id_Artists1Entry {\n  external_urls: GET_tracks__id_ExternalUrls2\n  href: String\n  id: String\n  name: String\n  type: String\n  uri: String\n}\n\ntype GET_tracks__id_ArtistsEntry {\n  external_urls: GET_tracks__id_ExternalUrls\n  href: String\n  id: String\n  name: String\n  type: String\n  uri: String\n}\n\ntype GET_tracks__id_ExternalIds {\n  isrc: String\n}\n\ntype GET_tracks__id_ExternalUrls {\n  spotify: String\n}\n\ntype GET_tracks__id_ExternalUrls1 {\n  spotify: String\n}\n\ntype GET_tracks__id_ExternalUrls2 {\n  spotify: String\n}\n\ntype GET_tracks__id_ExternalUrls3 {\n  spotify: String\n}\n\ntype GET_tracks__id_ImagesEntry {\n  height: Int\n  url: String\n  width: Int\n}\n\ntype GET_tracks__id_Root {\n  album: GET_tracks__id_Album\n  artists: [GET_tracks__id_Artists1Entry]\n  available_markets: [String]\n  disc_number: Int\n  duration_ms: Int\n  explicit: Boolean\n  external_ids: GET_tracks__id_ExternalIds\n  external_urls: GET_tracks__id_ExternalUrls3\n  href: String\n  id: String\n  is_local: Boolean\n  name: String\n  popularity: Int\n  preview_url: String\n  track_number: Int\n  type: String\n  uri: String\n}\n\ntype Query {\n  GET_tracks__id_(\n    id: String!\n    spotify_access_token: String!\n  ): GET_tracks__id_Root\n    @rest(\n      endpoint: \"https://api.spotify.com/v1/tracks/$id;\"\n      headers: [\n        { name: \"authorization\", value: \"Bearer $spotify_access_token;\" }\n      ]\n    )\n}\n\nUtterance: Remove following from the artist of the currently playing music", "output": "response_obj = GET_me_player_currently_playing()\nresponse_obj1 = GET_tracks__id_(id=response_obj.item.id)\nDELETE_me_following(type=\"artist\", ids=response_obj1.artists[0].id)\n", "function_specs": "[{\"name\": \"GET_me_player_currently_playing\", \"description\": \"Get the track currently being played on the user's Spotify account.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"market\": {\"type\": \"string\", \"description\": \"An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).\\n  If a country code is specified, only content that is available in that market will be returned.<br/>\\n  If a valid user access token is specified in the request header, the country associated with\\n  the user account will take priority over this parameter.<br/>\\n  _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>\\n  Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).\\n\"}, \"additional_types\": {\"type\": \"string\", \"description\": \"A comma-separated list of item types that your client supports besides the default `track` type. Valid types are: `track` and `episode`.<br/>\\n_**Note**: This parameter was introduced to allow existing clients to maintain their current behaviour and might be deprecated in the future._<br/>\\nIn addition to providing this parameter, make sure that your client properly handles cases of new types in the future by checking against the `type` field of each object.\\n\"}}, \"required\": []}}, {\"name\": \"GET_tracks__id_\", \"description\": \"Get Spotify catalog information for a single track identified by its\\nunique Spotify ID.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"id\": {\"type\": \"string\", \"description\": \"The [Spotify ID](/documentation/web-api/#spotify-uris-and-ids)\\nfor the track.\\n\"}, \"market\": {\"type\": \"string\", \"description\": \"An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).\\n  If a country code is specified, only content that is available in that market will be returned.<br/>\\n  If a valid user access token is specified in the request header, the country associated with\\n  the user account will take priority over this parameter.<br/>\\n  _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>\\n  Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).\\n\"}}, \"required\": [\"id\"]}}, {\"name\": \"DELETE_me_following\", \"description\": \"Remove the current user as a follower of one or more artists or other Spotify users.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"type\": {\"type\": \"string\", \"description\": \"The ID type: either `artist` or `user`.\\n\"}, \"ids\": {\"type\": \"string\", \"description\": \"A comma-separated list of the artist or the user [Spotify IDs](/documentation/web-api/#spotify-uris-and-ids). For example: `ids=74ASZWbe4lXaubB36ztrGX,08td7MxkoHQkXnWAYD8d6Q`. A maximum of 50 IDs can be sent in one request.\\n\"}}, \"required\": [\"type\", \"ids\"]}}]", "GraphQL_schema": "type GET_me_player_currently_playing_Actions {\n  disallows: GET_me_player_currently_playing_Disallows\n}\n\ntype GET_me_player_currently_playing_Album {\n  album_type: String\n  artists: [GET_me_player_currently_playing_ArtistsEntry]\n  available_markets: [String]\n  external_urls: GET_me_player_currently_playing_ExternalUrls2\n  href: String\n  id: String\n  images: [GET_me_player_currently_playing_ImagesEntry]\n  name: String\n  release_date: Int\n  release_date_precision: String\n  total_tracks: Int\n  type: String\n  uri: String\n}\n\ntype GET_me_player_currently_playing_Artists1Entry {\n  external_urls: GET_me_player_currently_playing_ExternalUrls3\n  href: String\n  id: String\n  name: String\n  type: String\n  uri: String\n}\n\ntype GET_me_player_currently_playing_ArtistsEntry {\n  external_urls: GET_me_player_currently_playing_ExternalUrls1\n  href: String\n  id: String\n  name: String\n  type: String\n  uri: String\n}\n\ntype GET_me_player_currently_playing_Context {\n  external_urls: GET_me_player_currently_playing_ExternalUrls\n  href: String\n  type: String\n  uri: String\n}\n\ntype GET_me_player_currently_playing_Disallows {\n  resuming: Boolean\n}\n\ntype GET_me_player_currently_playing_ExternalIds {\n  isrc: String\n}\n\ntype GET_me_player_currently_playing_ExternalUrls {\n  spotify: String\n}\n\ntype GET_me_player_currently_playing_ExternalUrls1 {\n  spotify: String\n}\n\ntype GET_me_player_currently_playing_ExternalUrls2 {\n  spotify: String\n}\n\ntype GET_me_player_currently_playing_ExternalUrls3 {\n  spotify: String\n}\n\ntype GET_me_player_currently_playing_ExternalUrls4 {\n  spotify: String\n}\n\ntype GET_me_player_currently_playing_ImagesEntry {\n  height: Int\n  url: String\n  width: Int\n}\n\ntype GET_me_player_currently_playing_Item {\n  album: GET_me_player_currently_playing_Album\n  artists: [GET_me_player_currently_playing_Artists1Entry]\n  available_markets: [String]\n  disc_number: Int\n  duration_ms: Int\n  explicit: Boolean\n  external_ids: GET_me_player_currently_playing_ExternalIds\n  external_urls: GET_me_player_currently_playing_ExternalUrls4\n  href: String\n  id: String\n  is_local: Boolean\n  name: String\n  popularity: Int\n  preview_url: String\n  track_number: Int\n  type: String\n  uri: String\n}\n\ntype GET_me_player_currently_playing_Root {\n  actions: GET_me_player_currently_playing_Actions\n  context: GET_me_player_currently_playing_Context\n  currently_playing_type: String\n  is_playing: Boolean\n  item: GET_me_player_currently_playing_Item\n  progress_ms: Int\n  timestamp: ID\n}\n\ntype Query {\n  GET_me_player_currently_playing(\n    spotify_access_token: String!\n  ): GET_me_player_currently_playing_Root\n    @rest(\n      endpoint: \"https://api.spotify.com/v1/me/player/currently-playing\"\n      headers: [\n        { name: \"authorization\", value: \"Bearer $spotify_access_token;\" }\n      ]\n    )\n}\ntype GET_tracks__id_Album {\n  album_type: String\n  artists: [GET_tracks__id_ArtistsEntry]\n  available_markets: [String]\n  external_urls: GET_tracks__id_ExternalUrls1\n  href: String\n  id: String\n  images: [GET_tracks__id_ImagesEntry]\n  name: String\n  release_date: Date\n  release_date_precision: String\n  total_tracks: Int\n  type: String\n  uri: String\n}\n\ntype GET_tracks__id_Artists1Entry {\n  external_urls: GET_tracks__id_ExternalUrls2\n  href: String\n  id: String\n  name: String\n  type: String\n  uri: String\n}\n\ntype GET_tracks__id_ArtistsEntry {\n  external_urls: GET_tracks__id_ExternalUrls\n  href: String\n  id: String\n  name: String\n  type: String\n  uri: String\n}\n\ntype GET_tracks__id_ExternalIds {\n  isrc: String\n}\n\ntype GET_tracks__id_ExternalUrls {\n  spotify: String\n}\n\ntype GET_tracks__id_ExternalUrls1 {\n  spotify: String\n}\n\ntype GET_tracks__id_ExternalUrls2 {\n  spotify: String\n}\n\ntype GET_tracks__id_ExternalUrls3 {\n  spotify: String\n}\n\ntype GET_tracks__id_ImagesEntry {\n  height: Int\n  url: String\n  width: Int\n}\n\ntype GET_tracks__id_Root {\n  album: GET_tracks__id_Album\n  artists: [GET_tracks__id_Artists1Entry]\n  available_markets: [String]\n  disc_number: Int\n  duration_ms: Int\n  explicit: Boolean\n  external_ids: GET_tracks__id_ExternalIds\n  external_urls: GET_tracks__id_ExternalUrls3\n  href: String\n  id: String\n  is_local: Boolean\n  name: String\n  popularity: Int\n  preview_url: String\n  track_number: Int\n  type: String\n  uri: String\n}\n\ntype Query {\n  GET_tracks__id_(\n    id: String!\n    spotify_access_token: String!\n  ): GET_tracks__id_Root\n    @rest(\n      endpoint: \"https://api.spotify.com/v1/tracks/$id;\"\n      headers: [\n        { name: \"authorization\", value: \"Bearer $spotify_access_token;\" }\n      ]\n    )\n}\n", "utterance": "Remove following from the artist of the currently playing music"}
{"domain": "spotify", "input": "Function Signatures:\n\n[{\"name\": \"GET_me_player_currently_playing\", \"description\": \"Get the track currently being played on the user's Spotify account.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"market\": {\"type\": \"string\", \"description\": \"An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).\\n  If a country code is specified, only content that is available in that market will be returned.<br/>\\n  If a valid user access token is specified in the request header, the country associated with\\n  the user account will take priority over this parameter.<br/>\\n  _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>\\n  Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).\\n\"}, \"additional_types\": {\"type\": \"string\", \"description\": \"A comma-separated list of item types that your client supports besides the default `track` type. Valid types are: `track` and `episode`.<br/>\\n_**Note**: This parameter was introduced to allow existing clients to maintain their current behaviour and might be deprecated in the future._<br/>\\nIn addition to providing this parameter, make sure that your client properly handles cases of new types in the future by checking against the `type` field of each object.\\n\"}}, \"required\": []}}, {\"name\": \"GET_artists__id_\", \"description\": \"Get Spotify catalog information for a single artist identified by their unique Spotify ID.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"id\": {\"type\": \"string\", \"description\": \"The [Spotify ID](/documentation/web-api/#spotify-uris-and-ids) of the artist.\\n\"}}, \"required\": [\"id\"]}}, {\"name\": \"GET_search\", \"description\": \"Get Spotify catalog information about albums, artists, playlists, tracks, shows, episodes or audiobooks\\nthat match a keyword string.<br />\\n**Note: Audiobooks are only available for the US, UK, Ireland, New Zealand and Australia markets.**\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"q\": {\"type\": \"string\", \"description\": \"Your search query.\\n\\nYou can narrow down your search using field filters. The available filters are `album`, `artist`, `track`, `year`, `upc`, `tag:hipster`, `tag:new`, `isrc`, and `genre`. Each field filter only applies to certain result types.\\n\\nThe `artist` and `year` filters can be used while searching albums, artists and tracks. You can filter on a single `year` or a range (e.g. 1955-1960).<br />\\nThe `album` filter can be used while searching albums and tracks.<br />\\nThe `genre` filter can be used while searching artists and tracks.<br />\\nThe `isrc` and `track` filters can be used while searching tracks.<br />\\nThe `upc`, `tag:new` and `tag:hipster` filters can only be used while searching albums. The `tag:new` filter will return albums released in the past two weeks and `tag:hipster` can be used to return only albums with the lowest 10% popularity.<br />\\n\"}, \"type\": {\"type\": \"array\", \"description\": \"A comma-separated list of item types to search across. Search results include hits\\nfrom all the specified item types. For example: `q=abacab&type=album,track` returns\\nboth albums and tracks matching \\\"abacab\\\".\\n\"}, \"market\": {\"type\": \"string\", \"description\": \"An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).\\n  If a country code is specified, only content that is available in that market will be returned.<br/>\\n  If a valid user access token is specified in the request header, the country associated with\\n  the user account will take priority over this parameter.<br/>\\n  _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>\\n  Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).\\n\"}, \"limit\": {\"type\": \"integer\", \"description\": \"The maximum number of results to return in each item type.\\n\"}, \"offset\": {\"type\": \"integer\", \"description\": \"The index of the first result to return. Use\\nwith limit to get the next page of search results.\\n\"}, \"include_external\": {\"type\": \"string\", \"description\": \"If `include_external=audio` is specified it signals that the client can play externally hosted audio content, and marks\\nthe content as playable in the response. By default externally hosted audio content is marked as unplayable in the response.\\n\"}}, \"required\": [\"q\", \"type\"]}}]\n\nGraphQL schema:\n\ntype GET_search_Album {\n  album_type: String\n  artists: [GET_search_ArtistsEntry]\n  available_markets: [String]\n  external_urls: GET_search_ExternalUrls1\n  href: String\n  id: String\n  images: [GET_search_ImagesEntry]\n  name: String\n  release_date: Date\n  release_date_precision: String\n  total_tracks: Int\n  type: String\n  uri: String\n}\n\ntype GET_search_Artists1Entry {\n  external_urls: GET_search_ExternalUrls2\n  href: String\n  id: String\n  name: String\n  type: String\n  uri: String\n}\n\ntype GET_search_ArtistsEntry {\n  external_urls: GET_search_ExternalUrls\n  href: String\n  id: String\n  name: String\n  type: String\n  uri: String\n}\n\ntype GET_search_ExternalIds {\n  isrc: String\n}\n\ntype GET_search_ExternalUrls {\n  spotify: String\n}\n\ntype GET_search_ExternalUrls1 {\n  spotify: String\n}\n\ntype GET_search_ExternalUrls2 {\n  spotify: String\n}\n\ntype GET_search_ExternalUrls3 {\n  spotify: String\n}\n\ntype GET_search_ImagesEntry {\n  height: Int\n  url: String\n  width: Int\n}\n\ntype GET_search_ItemsEntry {\n  album: GET_search_Album\n  artists: [GET_search_Artists1Entry]\n  available_markets: [String]\n  disc_number: Int\n  duration_ms: Int\n  explicit: Boolean\n  external_ids: GET_search_ExternalIds\n  external_urls: GET_search_ExternalUrls3\n  href: String\n  id: String\n  is_local: Boolean\n  name: String\n  popularity: Int\n  preview_url: String\n  track_number: Int\n  type: String\n  uri: String\n}\n\ntype GET_search_Root {\n  tracks: GET_search_Tracks\n}\n\ntype GET_search_Tracks {\n  href: String\n  items: [GET_search_ItemsEntry]\n  limit: Int\n  next: String\n  offset: Int\n  \"\"\"\n  Field \"previous\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  previous: JSON\n  total: Int\n}\n\ntype Query {\n  GET_search(\n    q: String\n    spotify_access_token: String!\n    type: String\n  ): GET_search_Root\n    @rest(\n      endpoint: \"https://api.spotify.com/v1/search\"\n      headers: [\n        { name: \"authorization\", value: \"Bearer $spotify_access_token;\" }\n      ]\n    )\n}\ntype GET_me_player_currently_playing_Actions {\n  disallows: GET_me_player_currently_playing_Disallows\n}\n\ntype GET_me_player_currently_playing_Album {\n  album_type: String\n  artists: [GET_me_player_currently_playing_ArtistsEntry]\n  available_markets: [String]\n  external_urls: GET_me_player_currently_playing_ExternalUrls2\n  href: String\n  id: String\n  images: [GET_me_player_currently_playing_ImagesEntry]\n  name: String\n  release_date: Int\n  release_date_precision: String\n  total_tracks: Int\n  type: String\n  uri: String\n}\n\ntype GET_me_player_currently_playing_Artists1Entry {\n  external_urls: GET_me_player_currently_playing_ExternalUrls3\n  href: String\n  id: String\n  name: String\n  type: String\n  uri: String\n}\n\ntype GET_me_player_currently_playing_ArtistsEntry {\n  external_urls: GET_me_player_currently_playing_ExternalUrls1\n  href: String\n  id: String\n  name: String\n  type: String\n  uri: String\n}\n\ntype GET_me_player_currently_playing_Context {\n  external_urls: GET_me_player_currently_playing_ExternalUrls\n  href: String\n  type: String\n  uri: String\n}\n\ntype GET_me_player_currently_playing_Disallows {\n  resuming: Boolean\n  skipping_prev: Boolean\n}\n\ntype GET_me_player_currently_playing_ExternalIds {\n  isrc: String\n}\n\ntype GET_me_player_currently_playing_ExternalUrls {\n  spotify: String\n}\n\ntype GET_me_player_currently_playing_ExternalUrls1 {\n  spotify: String\n}\n\ntype GET_me_player_currently_playing_ExternalUrls2 {\n  spotify: String\n}\n\ntype GET_me_player_currently_playing_ExternalUrls3 {\n  spotify: String\n}\n\ntype GET_me_player_currently_playing_ExternalUrls4 {\n  spotify: String\n}\n\ntype GET_me_player_currently_playing_ImagesEntry {\n  height: Int\n  url: String\n  width: Int\n}\n\ntype GET_me_player_currently_playing_Item {\n  album: GET_me_player_currently_playing_Album\n  artists: [GET_me_player_currently_playing_Artists1Entry]\n  available_markets: [String]\n  disc_number: Int\n  duration_ms: Int\n  explicit: Boolean\n  external_ids: GET_me_player_currently_playing_ExternalIds\n  external_urls: GET_me_player_currently_playing_ExternalUrls4\n  href: String\n  id: String\n  is_local: Boolean\n  name: String\n  popularity: Int\n  preview_url: String\n  track_number: Int\n  type: String\n  uri: String\n}\n\ntype GET_me_player_currently_playing_Root {\n  actions: GET_me_player_currently_playing_Actions\n  context: GET_me_player_currently_playing_Context\n  currently_playing_type: String\n  is_playing: Boolean\n  item: GET_me_player_currently_playing_Item\n  progress_ms: Int\n  timestamp: ID\n}\n\ntype Query {\n  GET_me_player_currently_playing(\n    spotify_access_token: String!\n  ): GET_me_player_currently_playing_Root\n    @rest(\n      endpoint: \"https://api.spotify.com/v1/me/player/currently-playing\"\n      headers: [\n        { name: \"authorization\", value: \"Bearer $spotify_access_token;\" }\n      ]\n    )\n}\ntype GET_artists__id_ExternalUrls {\n  spotify: String\n}\n\ntype GET_artists__id_Followers {\n  \"\"\"\n  Field \"href\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  href: JSON\n  total: Int\n}\n\ntype GET_artists__id_ImagesEntry {\n  height: Int\n  url: String\n  width: Int\n}\n\ntype GET_artists__id_Root {\n  external_urls: GET_artists__id_ExternalUrls\n  followers: GET_artists__id_Followers\n  genres: [String]\n  href: String\n  id: String\n  images: [GET_artists__id_ImagesEntry]\n  name: String\n  popularity: Int\n  type: String\n  uri: String\n}\n\ntype Query {\n  GET_artists__id_(\n    id: String!\n    spotify_access_token: String!\n  ): GET_artists__id_Root\n    @rest(\n      endpoint: \"https://api.spotify.com/v1/artists/$id;\"\n      headers: [\n        { name: \"authorization\", value: \"Bearer $spotify_access_token;\" }\n      ]\n    )\n}\n\nUtterance: Recommend me some tracks with the same genre of the music currently playing", "output": "response_obj = GET_me_player_currently_playing()\nresponse_obj1 = GET_artists__id_(id=response_obj.item.artists[0].id)\nGET_search(q=response_obj1.genres[0], type=\"track\")\n", "function_specs": "[{\"name\": \"GET_me_player_currently_playing\", \"description\": \"Get the track currently being played on the user's Spotify account.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"market\": {\"type\": \"string\", \"description\": \"An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).\\n  If a country code is specified, only content that is available in that market will be returned.<br/>\\n  If a valid user access token is specified in the request header, the country associated with\\n  the user account will take priority over this parameter.<br/>\\n  _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>\\n  Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).\\n\"}, \"additional_types\": {\"type\": \"string\", \"description\": \"A comma-separated list of item types that your client supports besides the default `track` type. Valid types are: `track` and `episode`.<br/>\\n_**Note**: This parameter was introduced to allow existing clients to maintain their current behaviour and might be deprecated in the future._<br/>\\nIn addition to providing this parameter, make sure that your client properly handles cases of new types in the future by checking against the `type` field of each object.\\n\"}}, \"required\": []}}, {\"name\": \"GET_artists__id_\", \"description\": \"Get Spotify catalog information for a single artist identified by their unique Spotify ID.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"id\": {\"type\": \"string\", \"description\": \"The [Spotify ID](/documentation/web-api/#spotify-uris-and-ids) of the artist.\\n\"}}, \"required\": [\"id\"]}}, {\"name\": \"GET_search\", \"description\": \"Get Spotify catalog information about albums, artists, playlists, tracks, shows, episodes or audiobooks\\nthat match a keyword string.<br />\\n**Note: Audiobooks are only available for the US, UK, Ireland, New Zealand and Australia markets.**\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"q\": {\"type\": \"string\", \"description\": \"Your search query.\\n\\nYou can narrow down your search using field filters. The available filters are `album`, `artist`, `track`, `year`, `upc`, `tag:hipster`, `tag:new`, `isrc`, and `genre`. Each field filter only applies to certain result types.\\n\\nThe `artist` and `year` filters can be used while searching albums, artists and tracks. You can filter on a single `year` or a range (e.g. 1955-1960).<br />\\nThe `album` filter can be used while searching albums and tracks.<br />\\nThe `genre` filter can be used while searching artists and tracks.<br />\\nThe `isrc` and `track` filters can be used while searching tracks.<br />\\nThe `upc`, `tag:new` and `tag:hipster` filters can only be used while searching albums. The `tag:new` filter will return albums released in the past two weeks and `tag:hipster` can be used to return only albums with the lowest 10% popularity.<br />\\n\"}, \"type\": {\"type\": \"array\", \"description\": \"A comma-separated list of item types to search across. Search results include hits\\nfrom all the specified item types. For example: `q=abacab&type=album,track` returns\\nboth albums and tracks matching \\\"abacab\\\".\\n\"}, \"market\": {\"type\": \"string\", \"description\": \"An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).\\n  If a country code is specified, only content that is available in that market will be returned.<br/>\\n  If a valid user access token is specified in the request header, the country associated with\\n  the user account will take priority over this parameter.<br/>\\n  _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>\\n  Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).\\n\"}, \"limit\": {\"type\": \"integer\", \"description\": \"The maximum number of results to return in each item type.\\n\"}, \"offset\": {\"type\": \"integer\", \"description\": \"The index of the first result to return. Use\\nwith limit to get the next page of search results.\\n\"}, \"include_external\": {\"type\": \"string\", \"description\": \"If `include_external=audio` is specified it signals that the client can play externally hosted audio content, and marks\\nthe content as playable in the response. By default externally hosted audio content is marked as unplayable in the response.\\n\"}}, \"required\": [\"q\", \"type\"]}}]", "GraphQL_schema": "type GET_search_Album {\n  album_type: String\n  artists: [GET_search_ArtistsEntry]\n  available_markets: [String]\n  external_urls: GET_search_ExternalUrls1\n  href: String\n  id: String\n  images: [GET_search_ImagesEntry]\n  name: String\n  release_date: Date\n  release_date_precision: String\n  total_tracks: Int\n  type: String\n  uri: String\n}\n\ntype GET_search_Artists1Entry {\n  external_urls: GET_search_ExternalUrls2\n  href: String\n  id: String\n  name: String\n  type: String\n  uri: String\n}\n\ntype GET_search_ArtistsEntry {\n  external_urls: GET_search_ExternalUrls\n  href: String\n  id: String\n  name: String\n  type: String\n  uri: String\n}\n\ntype GET_search_ExternalIds {\n  isrc: String\n}\n\ntype GET_search_ExternalUrls {\n  spotify: String\n}\n\ntype GET_search_ExternalUrls1 {\n  spotify: String\n}\n\ntype GET_search_ExternalUrls2 {\n  spotify: String\n}\n\ntype GET_search_ExternalUrls3 {\n  spotify: String\n}\n\ntype GET_search_ImagesEntry {\n  height: Int\n  url: String\n  width: Int\n}\n\ntype GET_search_ItemsEntry {\n  album: GET_search_Album\n  artists: [GET_search_Artists1Entry]\n  available_markets: [String]\n  disc_number: Int\n  duration_ms: Int\n  explicit: Boolean\n  external_ids: GET_search_ExternalIds\n  external_urls: GET_search_ExternalUrls3\n  href: String\n  id: String\n  is_local: Boolean\n  name: String\n  popularity: Int\n  preview_url: String\n  track_number: Int\n  type: String\n  uri: String\n}\n\ntype GET_search_Root {\n  tracks: GET_search_Tracks\n}\n\ntype GET_search_Tracks {\n  href: String\n  items: [GET_search_ItemsEntry]\n  limit: Int\n  next: String\n  offset: Int\n  \"\"\"\n  Field \"previous\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  previous: JSON\n  total: Int\n}\n\ntype Query {\n  GET_search(\n    q: String\n    spotify_access_token: String!\n    type: String\n  ): GET_search_Root\n    @rest(\n      endpoint: \"https://api.spotify.com/v1/search\"\n      headers: [\n        { name: \"authorization\", value: \"Bearer $spotify_access_token;\" }\n      ]\n    )\n}\ntype GET_me_player_currently_playing_Actions {\n  disallows: GET_me_player_currently_playing_Disallows\n}\n\ntype GET_me_player_currently_playing_Album {\n  album_type: String\n  artists: [GET_me_player_currently_playing_ArtistsEntry]\n  available_markets: [String]\n  external_urls: GET_me_player_currently_playing_ExternalUrls2\n  href: String\n  id: String\n  images: [GET_me_player_currently_playing_ImagesEntry]\n  name: String\n  release_date: Int\n  release_date_precision: String\n  total_tracks: Int\n  type: String\n  uri: String\n}\n\ntype GET_me_player_currently_playing_Artists1Entry {\n  external_urls: GET_me_player_currently_playing_ExternalUrls3\n  href: String\n  id: String\n  name: String\n  type: String\n  uri: String\n}\n\ntype GET_me_player_currently_playing_ArtistsEntry {\n  external_urls: GET_me_player_currently_playing_ExternalUrls1\n  href: String\n  id: String\n  name: String\n  type: String\n  uri: String\n}\n\ntype GET_me_player_currently_playing_Context {\n  external_urls: GET_me_player_currently_playing_ExternalUrls\n  href: String\n  type: String\n  uri: String\n}\n\ntype GET_me_player_currently_playing_Disallows {\n  resuming: Boolean\n  skipping_prev: Boolean\n}\n\ntype GET_me_player_currently_playing_ExternalIds {\n  isrc: String\n}\n\ntype GET_me_player_currently_playing_ExternalUrls {\n  spotify: String\n}\n\ntype GET_me_player_currently_playing_ExternalUrls1 {\n  spotify: String\n}\n\ntype GET_me_player_currently_playing_ExternalUrls2 {\n  spotify: String\n}\n\ntype GET_me_player_currently_playing_ExternalUrls3 {\n  spotify: String\n}\n\ntype GET_me_player_currently_playing_ExternalUrls4 {\n  spotify: String\n}\n\ntype GET_me_player_currently_playing_ImagesEntry {\n  height: Int\n  url: String\n  width: Int\n}\n\ntype GET_me_player_currently_playing_Item {\n  album: GET_me_player_currently_playing_Album\n  artists: [GET_me_player_currently_playing_Artists1Entry]\n  available_markets: [String]\n  disc_number: Int\n  duration_ms: Int\n  explicit: Boolean\n  external_ids: GET_me_player_currently_playing_ExternalIds\n  external_urls: GET_me_player_currently_playing_ExternalUrls4\n  href: String\n  id: String\n  is_local: Boolean\n  name: String\n  popularity: Int\n  preview_url: String\n  track_number: Int\n  type: String\n  uri: String\n}\n\ntype GET_me_player_currently_playing_Root {\n  actions: GET_me_player_currently_playing_Actions\n  context: GET_me_player_currently_playing_Context\n  currently_playing_type: String\n  is_playing: Boolean\n  item: GET_me_player_currently_playing_Item\n  progress_ms: Int\n  timestamp: ID\n}\n\ntype Query {\n  GET_me_player_currently_playing(\n    spotify_access_token: String!\n  ): GET_me_player_currently_playing_Root\n    @rest(\n      endpoint: \"https://api.spotify.com/v1/me/player/currently-playing\"\n      headers: [\n        { name: \"authorization\", value: \"Bearer $spotify_access_token;\" }\n      ]\n    )\n}\ntype GET_artists__id_ExternalUrls {\n  spotify: String\n}\n\ntype GET_artists__id_Followers {\n  \"\"\"\n  Field \"href\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  href: JSON\n  total: Int\n}\n\ntype GET_artists__id_ImagesEntry {\n  height: Int\n  url: String\n  width: Int\n}\n\ntype GET_artists__id_Root {\n  external_urls: GET_artists__id_ExternalUrls\n  followers: GET_artists__id_Followers\n  genres: [String]\n  href: String\n  id: String\n  images: [GET_artists__id_ImagesEntry]\n  name: String\n  popularity: Int\n  type: String\n  uri: String\n}\n\ntype Query {\n  GET_artists__id_(\n    id: String!\n    spotify_access_token: String!\n  ): GET_artists__id_Root\n    @rest(\n      endpoint: \"https://api.spotify.com/v1/artists/$id;\"\n      headers: [\n        { name: \"authorization\", value: \"Bearer $spotify_access_token;\" }\n      ]\n    )\n}\n", "utterance": "Recommend me some tracks with the same genre of the music currently playing"}
{"domain": "spotify", "input": "Function Signatures:\n\n[{\"name\": \"GET_me_playlists\", \"description\": \"Get a list of the playlists owned or followed by the current Spotify\\nuser.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"limit\": {\"type\": \"integer\", \"description\": \"The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50.\\n\"}, \"offset\": {\"type\": \"integer\", \"description\": \"'The index of the first playlist to return. Default:\\n0 (the first object). Maximum offset: 100.000\\\\. Use with `limit` to get the\\nnext set of playlists.'\\n\"}}, \"required\": []}}, {\"name\": \"GET_playlists__playlist_id_\", \"description\": \"Get a playlist owned by a Spotify user.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"playlist_id\": {\"type\": \"string\", \"description\": \"The [Spotify ID](/documentation/web-api/#spotify-uris-and-ids) of the playlist.\\n\"}, \"market\": {\"type\": \"string\", \"description\": \"An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).\\n  If a country code is specified, only content that is available in that market will be returned.<br/>\\n  If a valid user access token is specified in the request header, the country associated with\\n  the user account will take priority over this parameter.<br/>\\n  _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>\\n  Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).\\n\"}, \"fields\": {\"type\": \"string\", \"description\": \"Filters for the query: a comma-separated list of the\\nfields to return. If omitted, all fields are returned. For example, to get\\njust the playlist''s description and URI: `fields=description,uri`. A dot\\nseparator can be used to specify non-reoccurring fields, while parentheses\\ncan be used to specify reoccurring fields within objects. For example, to\\nget just the added date and user ID of the adder: `fields=tracks.items(added_at,added_by.id)`.\\nUse multiple parentheses to drill down into nested objects, for example: `fields=tracks.items(track(name,href,album(name,href)))`.\\nFields can be excluded by prefixing them with an exclamation mark, for example:\\n`fields=tracks.items(track(name,href,album(!name,href)))`\\n\"}, \"additional_types\": {\"type\": \"string\", \"description\": \"A comma-separated list of item types that your client supports besides the default `track` type. Valid types are: `track` and `episode`.<br/>\\n_**Note**: This parameter was introduced to allow existing clients to maintain their current behaviour and might be deprecated in the future._<br/>\\nIn addition to providing this parameter, make sure that your client properly handles cases of new types in the future by checking against the `type` field of each object.\\n\"}}, \"required\": [\"playlist_id\"]}}, {\"name\": \"DELETE_playlists__playlist_id__tracks\", \"description\": \"Remove one or more items from a user's playlist.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"playlist_id\": {\"type\": \"string\", \"description\": \"The [Spotify ID](/documentation/web-api/#spotify-uris-and-ids) of the playlist.\\n\"}, \"tracks\": {\"type\": \"array\", \"description\": \"An array of objects containing Spotify URIs of the tracks or episodes to remove. For example: { \\\"tracks\\\": [{ \\\"uri\\\": \\\"spotify:track:4iV5W9uYEdYUVa79Axb7Rh\\\" },{ \\\"uri\\\": \\\"spotify:track:1301WleyT98MSxVHPZCA6M\\\" }] }. A maximum of 100 objects can be sent at once.\"}}, \"required\": [\"playlist_id\"], \"body_params\": [\"tracks\"]}}]\n\nGraphQL schema:\n\ntype GET_me_playlists_ExternalUrls {\n  spotify: String\n}\n\ntype GET_me_playlists_ExternalUrls1 {\n  spotify: String\n}\n\ntype GET_me_playlists_ImagesEntry {\n  \"\"\"\n  Field \"height\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  height: JSON\n  url: String\n  \"\"\"\n  Field \"width\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  width: JSON\n}\n\ntype GET_me_playlists_ItemsEntry {\n  collaborative: Boolean\n  description: String\n  external_urls: GET_me_playlists_ExternalUrls\n  href: String\n  id: String\n  images: [GET_me_playlists_ImagesEntry]\n  name: String\n  owner: GET_me_playlists_Owner\n  \"\"\"\n  Field \"primary_color\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  primary_color: JSON\n  public: Boolean\n  snapshot_id: String\n  tracks: GET_me_playlists_Tracks\n  type: String\n  uri: String\n}\n\ntype GET_me_playlists_Owner {\n  display_name: String\n  external_urls: GET_me_playlists_ExternalUrls1\n  href: String\n  id: String\n  type: String\n  uri: String\n}\n\ntype GET_me_playlists_Root {\n  href: String\n  items: [GET_me_playlists_ItemsEntry]\n  limit: Int\n  \"\"\"\n  Field \"next\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  next: JSON\n  offset: Int\n  \"\"\"\n  Field \"previous\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  previous: JSON\n  total: Int\n}\n\ntype GET_me_playlists_Tracks {\n  href: String\n  total: Int\n}\n\ntype Query {\n  GET_me_playlists(spotify_access_token: String!): GET_me_playlists_Root\n    @rest(\n      endpoint: \"https://api.spotify.com/v1/me/playlists\"\n      headers: [\n        { name: \"authorization\", value: \"Bearer $spotify_access_token;\" }\n      ]\n    )\n}\ntype GET_playlists__playlist_id_AddedBy {\n  external_urls: GET_playlists__playlist_id_ExternalUrls2\n  href: String\n  id: String\n  type: String\n  uri: String\n}\n\ntype GET_playlists__playlist_id_Album {\n  album_type: String\n  artists: [GET_playlists__playlist_id_ArtistsEntry]\n  available_markets: [String]\n  external_urls: GET_playlists__playlist_id_ExternalUrls4\n  href: String\n  id: String\n  images: [GET_playlists__playlist_id_Images1Entry]\n  name: String\n  release_date: Int\n  release_date_precision: String\n  total_tracks: Int\n  type: String\n  uri: String\n}\n\ntype GET_playlists__playlist_id_Artists1Entry {\n  external_urls: GET_playlists__playlist_id_ExternalUrls5\n  href: String\n  id: String\n  name: String\n  type: String\n  uri: String\n}\n\ntype GET_playlists__playlist_id_ArtistsEntry {\n  external_urls: GET_playlists__playlist_id_ExternalUrls3\n  href: String\n  id: String\n  name: String\n  type: String\n  uri: String\n}\n\ntype GET_playlists__playlist_id_ExternalIds {\n  isrc: String\n}\n\ntype GET_playlists__playlist_id_ExternalUrls {\n  spotify: String\n}\n\ntype GET_playlists__playlist_id_ExternalUrls1 {\n  spotify: String\n}\n\ntype GET_playlists__playlist_id_ExternalUrls2 {\n  spotify: String\n}\n\ntype GET_playlists__playlist_id_ExternalUrls3 {\n  spotify: String\n}\n\ntype GET_playlists__playlist_id_ExternalUrls4 {\n  spotify: String\n}\n\ntype GET_playlists__playlist_id_ExternalUrls5 {\n  spotify: String\n}\n\ntype GET_playlists__playlist_id_ExternalUrls6 {\n  spotify: String\n}\n\ntype GET_playlists__playlist_id_Followers {\n  \"\"\"\n  Field \"href\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  href: JSON\n  total: Int\n}\n\ntype GET_playlists__playlist_id_Images1Entry {\n  height: Int\n  url: String\n  width: Int\n}\n\ntype GET_playlists__playlist_id_ImagesEntry {\n  \"\"\"\n  Field \"height\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  height: JSON\n  url: String\n  \"\"\"\n  Field \"width\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  width: JSON\n}\n\ntype GET_playlists__playlist_id_ItemsEntry {\n  added_at: DateTime\n  added_by: GET_playlists__playlist_id_AddedBy\n  is_local: Boolean\n  \"\"\"\n  Field \"primary_color\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  primary_color: JSON\n  track: GET_playlists__playlist_id_Track\n  video_thumbnail: GET_playlists__playlist_id_VideoThumbnail\n}\n\ntype GET_playlists__playlist_id_Owner {\n  display_name: String\n  external_urls: GET_playlists__playlist_id_ExternalUrls1\n  href: String\n  id: String\n  type: String\n  uri: String\n}\n\ntype GET_playlists__playlist_id_Root {\n  collaborative: Boolean\n  description: String\n  external_urls: GET_playlists__playlist_id_ExternalUrls\n  followers: GET_playlists__playlist_id_Followers\n  href: String\n  id: String\n  images: [GET_playlists__playlist_id_ImagesEntry]\n  name: String\n  owner: GET_playlists__playlist_id_Owner\n  \"\"\"\n  Field \"primary_color\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  primary_color: JSON\n  public: Boolean\n  snapshot_id: String\n  tracks: GET_playlists__playlist_id_Tracks\n  type: String\n  uri: String\n}\n\ntype GET_playlists__playlist_id_Track {\n  album: GET_playlists__playlist_id_Album\n  artists: [GET_playlists__playlist_id_Artists1Entry]\n  available_markets: [String]\n  disc_number: Int\n  duration_ms: Int\n  episode: Boolean\n  explicit: Boolean\n  external_ids: GET_playlists__playlist_id_ExternalIds\n  external_urls: GET_playlists__playlist_id_ExternalUrls6\n  href: String\n  id: String\n  is_local: Boolean\n  name: String\n  popularity: Int\n  preview_url: String\n  track: Boolean\n  track_number: Int\n  type: String\n  uri: String\n}\n\ntype GET_playlists__playlist_id_Tracks {\n  href: String\n  items: [GET_playlists__playlist_id_ItemsEntry]\n  limit: Int\n  \"\"\"\n  Field \"next\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  next: JSON\n  offset: Int\n  \"\"\"\n  Field \"previous\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  previous: JSON\n  total: Int\n}\n\ntype GET_playlists__playlist_id_VideoThumbnail {\n  \"\"\"\n  Field \"url\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  url: JSON\n}\n\ntype Query {\n  GET_playlists__playlist_id_(\n    playlist_id: String!\n    spotify_access_token: String!\n  ): GET_playlists__playlist_id_Root\n    @rest(\n      endpoint: \"https://api.spotify.com/v1/playlists/$playlist_id;\"\n      headers: [\n        { name: \"authorization\", value: \"Bearer $spotify_access_token;\" }\n      ]\n    )\n}\n\nUtterance: Delete all songs from my first playlist", "output": "response_obj = GET_me_playlists()\nresponse_obj1 = GET_playlists__playlist_id_(playlist_id=response_obj.items[0].id)\nDELETE_playlists__playlist_id__tracks(playlist_id=response_obj.items[0].id, tracks=[{\"uri\":item.track.uri} for item in response_obj1.tracks.items])\n", "function_specs": "[{\"name\": \"GET_me_playlists\", \"description\": \"Get a list of the playlists owned or followed by the current Spotify\\nuser.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"limit\": {\"type\": \"integer\", \"description\": \"The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50.\\n\"}, \"offset\": {\"type\": \"integer\", \"description\": \"'The index of the first playlist to return. Default:\\n0 (the first object). Maximum offset: 100.000\\\\. Use with `limit` to get the\\nnext set of playlists.'\\n\"}}, \"required\": []}}, {\"name\": \"GET_playlists__playlist_id_\", \"description\": \"Get a playlist owned by a Spotify user.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"playlist_id\": {\"type\": \"string\", \"description\": \"The [Spotify ID](/documentation/web-api/#spotify-uris-and-ids) of the playlist.\\n\"}, \"market\": {\"type\": \"string\", \"description\": \"An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).\\n  If a country code is specified, only content that is available in that market will be returned.<br/>\\n  If a valid user access token is specified in the request header, the country associated with\\n  the user account will take priority over this parameter.<br/>\\n  _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>\\n  Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).\\n\"}, \"fields\": {\"type\": \"string\", \"description\": \"Filters for the query: a comma-separated list of the\\nfields to return. If omitted, all fields are returned. For example, to get\\njust the playlist''s description and URI: `fields=description,uri`. A dot\\nseparator can be used to specify non-reoccurring fields, while parentheses\\ncan be used to specify reoccurring fields within objects. For example, to\\nget just the added date and user ID of the adder: `fields=tracks.items(added_at,added_by.id)`.\\nUse multiple parentheses to drill down into nested objects, for example: `fields=tracks.items(track(name,href,album(name,href)))`.\\nFields can be excluded by prefixing them with an exclamation mark, for example:\\n`fields=tracks.items(track(name,href,album(!name,href)))`\\n\"}, \"additional_types\": {\"type\": \"string\", \"description\": \"A comma-separated list of item types that your client supports besides the default `track` type. Valid types are: `track` and `episode`.<br/>\\n_**Note**: This parameter was introduced to allow existing clients to maintain their current behaviour and might be deprecated in the future._<br/>\\nIn addition to providing this parameter, make sure that your client properly handles cases of new types in the future by checking against the `type` field of each object.\\n\"}}, \"required\": [\"playlist_id\"]}}, {\"name\": \"DELETE_playlists__playlist_id__tracks\", \"description\": \"Remove one or more items from a user's playlist.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"playlist_id\": {\"type\": \"string\", \"description\": \"The [Spotify ID](/documentation/web-api/#spotify-uris-and-ids) of the playlist.\\n\"}, \"tracks\": {\"type\": \"array\", \"description\": \"An array of objects containing Spotify URIs of the tracks or episodes to remove. For example: { \\\"tracks\\\": [{ \\\"uri\\\": \\\"spotify:track:4iV5W9uYEdYUVa79Axb7Rh\\\" },{ \\\"uri\\\": \\\"spotify:track:1301WleyT98MSxVHPZCA6M\\\" }] }. A maximum of 100 objects can be sent at once.\"}}, \"required\": [\"playlist_id\"], \"body_params\": [\"tracks\"]}}]", "GraphQL_schema": "type GET_me_playlists_ExternalUrls {\n  spotify: String\n}\n\ntype GET_me_playlists_ExternalUrls1 {\n  spotify: String\n}\n\ntype GET_me_playlists_ImagesEntry {\n  \"\"\"\n  Field \"height\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  height: JSON\n  url: String\n  \"\"\"\n  Field \"width\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  width: JSON\n}\n\ntype GET_me_playlists_ItemsEntry {\n  collaborative: Boolean\n  description: String\n  external_urls: GET_me_playlists_ExternalUrls\n  href: String\n  id: String\n  images: [GET_me_playlists_ImagesEntry]\n  name: String\n  owner: GET_me_playlists_Owner\n  \"\"\"\n  Field \"primary_color\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  primary_color: JSON\n  public: Boolean\n  snapshot_id: String\n  tracks: GET_me_playlists_Tracks\n  type: String\n  uri: String\n}\n\ntype GET_me_playlists_Owner {\n  display_name: String\n  external_urls: GET_me_playlists_ExternalUrls1\n  href: String\n  id: String\n  type: String\n  uri: String\n}\n\ntype GET_me_playlists_Root {\n  href: String\n  items: [GET_me_playlists_ItemsEntry]\n  limit: Int\n  \"\"\"\n  Field \"next\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  next: JSON\n  offset: Int\n  \"\"\"\n  Field \"previous\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  previous: JSON\n  total: Int\n}\n\ntype GET_me_playlists_Tracks {\n  href: String\n  total: Int\n}\n\ntype Query {\n  GET_me_playlists(spotify_access_token: String!): GET_me_playlists_Root\n    @rest(\n      endpoint: \"https://api.spotify.com/v1/me/playlists\"\n      headers: [\n        { name: \"authorization\", value: \"Bearer $spotify_access_token;\" }\n      ]\n    )\n}\ntype GET_playlists__playlist_id_AddedBy {\n  external_urls: GET_playlists__playlist_id_ExternalUrls2\n  href: String\n  id: String\n  type: String\n  uri: String\n}\n\ntype GET_playlists__playlist_id_Album {\n  album_type: String\n  artists: [GET_playlists__playlist_id_ArtistsEntry]\n  available_markets: [String]\n  external_urls: GET_playlists__playlist_id_ExternalUrls4\n  href: String\n  id: String\n  images: [GET_playlists__playlist_id_Images1Entry]\n  name: String\n  release_date: Int\n  release_date_precision: String\n  total_tracks: Int\n  type: String\n  uri: String\n}\n\ntype GET_playlists__playlist_id_Artists1Entry {\n  external_urls: GET_playlists__playlist_id_ExternalUrls5\n  href: String\n  id: String\n  name: String\n  type: String\n  uri: String\n}\n\ntype GET_playlists__playlist_id_ArtistsEntry {\n  external_urls: GET_playlists__playlist_id_ExternalUrls3\n  href: String\n  id: String\n  name: String\n  type: String\n  uri: String\n}\n\ntype GET_playlists__playlist_id_ExternalIds {\n  isrc: String\n}\n\ntype GET_playlists__playlist_id_ExternalUrls {\n  spotify: String\n}\n\ntype GET_playlists__playlist_id_ExternalUrls1 {\n  spotify: String\n}\n\ntype GET_playlists__playlist_id_ExternalUrls2 {\n  spotify: String\n}\n\ntype GET_playlists__playlist_id_ExternalUrls3 {\n  spotify: String\n}\n\ntype GET_playlists__playlist_id_ExternalUrls4 {\n  spotify: String\n}\n\ntype GET_playlists__playlist_id_ExternalUrls5 {\n  spotify: String\n}\n\ntype GET_playlists__playlist_id_ExternalUrls6 {\n  spotify: String\n}\n\ntype GET_playlists__playlist_id_Followers {\n  \"\"\"\n  Field \"href\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  href: JSON\n  total: Int\n}\n\ntype GET_playlists__playlist_id_Images1Entry {\n  height: Int\n  url: String\n  width: Int\n}\n\ntype GET_playlists__playlist_id_ImagesEntry {\n  \"\"\"\n  Field \"height\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  height: JSON\n  url: String\n  \"\"\"\n  Field \"width\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  width: JSON\n}\n\ntype GET_playlists__playlist_id_ItemsEntry {\n  added_at: DateTime\n  added_by: GET_playlists__playlist_id_AddedBy\n  is_local: Boolean\n  \"\"\"\n  Field \"primary_color\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  primary_color: JSON\n  track: GET_playlists__playlist_id_Track\n  video_thumbnail: GET_playlists__playlist_id_VideoThumbnail\n}\n\ntype GET_playlists__playlist_id_Owner {\n  display_name: String\n  external_urls: GET_playlists__playlist_id_ExternalUrls1\n  href: String\n  id: String\n  type: String\n  uri: String\n}\n\ntype GET_playlists__playlist_id_Root {\n  collaborative: Boolean\n  description: String\n  external_urls: GET_playlists__playlist_id_ExternalUrls\n  followers: GET_playlists__playlist_id_Followers\n  href: String\n  id: String\n  images: [GET_playlists__playlist_id_ImagesEntry]\n  name: String\n  owner: GET_playlists__playlist_id_Owner\n  \"\"\"\n  Field \"primary_color\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  primary_color: JSON\n  public: Boolean\n  snapshot_id: String\n  tracks: GET_playlists__playlist_id_Tracks\n  type: String\n  uri: String\n}\n\ntype GET_playlists__playlist_id_Track {\n  album: GET_playlists__playlist_id_Album\n  artists: [GET_playlists__playlist_id_Artists1Entry]\n  available_markets: [String]\n  disc_number: Int\n  duration_ms: Int\n  episode: Boolean\n  explicit: Boolean\n  external_ids: GET_playlists__playlist_id_ExternalIds\n  external_urls: GET_playlists__playlist_id_ExternalUrls6\n  href: String\n  id: String\n  is_local: Boolean\n  name: String\n  popularity: Int\n  preview_url: String\n  track: Boolean\n  track_number: Int\n  type: String\n  uri: String\n}\n\ntype GET_playlists__playlist_id_Tracks {\n  href: String\n  items: [GET_playlists__playlist_id_ItemsEntry]\n  limit: Int\n  \"\"\"\n  Field \"next\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  next: JSON\n  offset: Int\n  \"\"\"\n  Field \"previous\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  previous: JSON\n  total: Int\n}\n\ntype GET_playlists__playlist_id_VideoThumbnail {\n  \"\"\"\n  Field \"url\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  url: JSON\n}\n\ntype Query {\n  GET_playlists__playlist_id_(\n    playlist_id: String!\n    spotify_access_token: String!\n  ): GET_playlists__playlist_id_Root\n    @rest(\n      endpoint: \"https://api.spotify.com/v1/playlists/$playlist_id;\"\n      headers: [\n        { name: \"authorization\", value: \"Bearer $spotify_access_token;\" }\n      ]\n    )\n}\n", "utterance": "Delete all songs from my first playlist"}
{"domain": "spotify", "input": "Function Signatures:\n\n[{\"name\": \"GET_me_playlists\", \"description\": \"Get a list of the playlists owned or followed by the current Spotify\\nuser.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"limit\": {\"type\": \"integer\", \"description\": \"The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50.\\n\"}, \"offset\": {\"type\": \"integer\", \"description\": \"'The index of the first playlist to return. Default:\\n0 (the first object). Maximum offset: 100.000\\\\. Use with `limit` to get the\\nnext set of playlists.'\\n\"}}, \"required\": []}}, {\"name\": \"GET_playlists__playlist_id__tracks\", \"description\": \"Get full details of the items of a playlist owned by a Spotify user.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"playlist_id\": {\"type\": \"string\", \"description\": \"The [Spotify ID](/documentation/web-api/#spotify-uris-and-ids) of the playlist.\\n\"}, \"market\": {\"type\": \"string\", \"description\": \"An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).\\n  If a country code is specified, only content that is available in that market will be returned.<br/>\\n  If a valid user access token is specified in the request header, the country associated with\\n  the user account will take priority over this parameter.<br/>\\n  _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>\\n  Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).\\n\"}, \"fields\": {\"type\": \"string\", \"description\": \"Filters for the query: a comma-separated list of the\\nfields to return. If omitted, all fields are returned. For example, to get\\njust the total number of items and the request limit:<br/>`fields=total,limit`<br/>A\\ndot separator can be used to specify non-reoccurring fields, while parentheses\\ncan be used to specify reoccurring fields within objects. For example, to\\nget just the added date and user ID of the adder:<br/>`fields=items(added_at,added_by.id)`<br/>Use\\nmultiple parentheses to drill down into nested objects, for example:<br/>`fields=items(track(name,href,album(name,href)))`<br/>Fields\\ncan be excluded by prefixing them with an exclamation mark, for example:<br/>`fields=items.track.album(!external_urls,images)`\\n\"}, \"limit\": {\"type\": \"integer\", \"description\": \"The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50.\\n\"}, \"offset\": {\"type\": \"integer\", \"description\": \"The index of the first item to return. Default: 0 (the first item). Use with limit to get the next set of items.\\n\"}, \"additional_types\": {\"type\": \"string\", \"description\": \"A comma-separated list of item types that your client supports besides the default `track` type. Valid types are: `track` and `episode`.<br/>\\n_**Note**: This parameter was introduced to allow existing clients to maintain their current behaviour and might be deprecated in the future._<br/>\\nIn addition to providing this parameter, make sure that your client properly handles cases of new types in the future by checking against the `type` field of each object.\\n\"}}, \"required\": [\"playlist_id\"]}}, {\"name\": \"DELETE_playlists__playlist_id__tracks\", \"description\": \"Remove one or more items from a user's playlist.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"playlist_id\": {\"type\": \"string\", \"description\": \"The [Spotify ID](/documentation/web-api/#spotify-uris-and-ids) of the playlist.\\n\"}, \"tracks\": {\"type\": \"array\", \"description\": \"An array of objects containing Spotify URIs of the tracks or episodes to remove. For example: { \\\"tracks\\\": [{ \\\"uri\\\": \\\"spotify:track:4iV5W9uYEdYUVa79Axb7Rh\\\" },{ \\\"uri\\\": \\\"spotify:track:1301WleyT98MSxVHPZCA6M\\\" }] }. A maximum of 100 objects can be sent at once.\"}, \"snapshot_id\": {\"type\": \"string\", \"description\": \"The playlist's snapshot ID against which you want to make the changes. The API will validate that the specified items exist and in the specified positions and make the changes, even if more recent changes have been made to the playlist.\"}}, \"required\": [\"playlist_id\", \"tracks\"], \"body_params\": [\"tracks\", \"snapshot_id\"]}}]\n\nGraphQL schema:\n\ntype GET_me_playlists_ExternalUrls {\n  spotify: String\n}\n\ntype GET_me_playlists_ExternalUrls1 {\n  spotify: String\n}\n\ntype GET_me_playlists_ImagesEntry {\n  \"\"\"\n  Field \"height\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  height: JSON\n  url: String\n  \"\"\"\n  Field \"width\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  width: JSON\n}\n\ntype GET_me_playlists_ItemsEntry {\n  collaborative: Boolean\n  description: String\n  external_urls: GET_me_playlists_ExternalUrls\n  href: String\n  id: String\n  images: [GET_me_playlists_ImagesEntry]\n  name: String\n  owner: GET_me_playlists_Owner\n  \"\"\"\n  Field \"primary_color\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  primary_color: JSON\n  public: Boolean\n  snapshot_id: String\n  tracks: GET_me_playlists_Tracks\n  type: String\n  uri: String\n}\n\ntype GET_me_playlists_Owner {\n  display_name: String\n  external_urls: GET_me_playlists_ExternalUrls1\n  href: String\n  id: String\n  type: String\n  uri: String\n}\n\ntype GET_me_playlists_Root {\n  href: String\n  items: [GET_me_playlists_ItemsEntry]\n  limit: Int\n  \"\"\"\n  Field \"next\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  next: JSON\n  offset: Int\n  \"\"\"\n  Field \"previous\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  previous: JSON\n  total: Int\n}\n\ntype GET_me_playlists_Tracks {\n  href: String\n  total: Int\n}\n\ntype Query {\n  GET_me_playlists(spotify_access_token: String!): GET_me_playlists_Root\n    @rest(\n      endpoint: \"https://api.spotify.com/v1/me/playlists\"\n      headers: [\n        { name: \"authorization\", value: \"Bearer $spotify_access_token;\" }\n      ]\n    )\n}\ntype GET_playlists__playlist_id__tracks_AddedBy {\n  external_urls: GET_playlists__playlist_id__tracks_ExternalUrls\n  href: String\n  id: String\n  type: String\n  uri: String\n}\n\ntype GET_playlists__playlist_id__tracks_Album {\n  album_type: String\n  artists: [GET_playlists__playlist_id__tracks_ArtistsEntry]\n  available_markets: [String]\n  external_urls: GET_playlists__playlist_id__tracks_ExternalUrls2\n  href: String\n  id: String\n  images: [GET_playlists__playlist_id__tracks_ImagesEntry]\n  name: String\n  release_date: Int\n  release_date_precision: String\n  total_tracks: Int\n  type: String\n  uri: String\n}\n\ntype GET_playlists__playlist_id__tracks_Artists1Entry {\n  external_urls: GET_playlists__playlist_id__tracks_ExternalUrls3\n  href: String\n  id: String\n  name: String\n  type: String\n  uri: String\n}\n\ntype GET_playlists__playlist_id__tracks_ArtistsEntry {\n  external_urls: GET_playlists__playlist_id__tracks_ExternalUrls1\n  href: String\n  id: String\n  name: String\n  type: String\n  uri: String\n}\n\ntype GET_playlists__playlist_id__tracks_ExternalIds {\n  isrc: String\n}\n\ntype GET_playlists__playlist_id__tracks_ExternalUrls {\n  spotify: String\n}\n\ntype GET_playlists__playlist_id__tracks_ExternalUrls1 {\n  spotify: String\n}\n\ntype GET_playlists__playlist_id__tracks_ExternalUrls2 {\n  spotify: String\n}\n\ntype GET_playlists__playlist_id__tracks_ExternalUrls3 {\n  spotify: String\n}\n\ntype GET_playlists__playlist_id__tracks_ExternalUrls4 {\n  spotify: String\n}\n\ntype GET_playlists__playlist_id__tracks_ImagesEntry {\n  height: Int\n  url: String\n  width: Int\n}\n\ntype GET_playlists__playlist_id__tracks_ItemsEntry {\n  added_at: DateTime\n  added_by: GET_playlists__playlist_id__tracks_AddedBy\n  is_local: Boolean\n  \"\"\"\n  Field \"primary_color\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  primary_color: JSON\n  track: GET_playlists__playlist_id__tracks_Track\n  video_thumbnail: GET_playlists__playlist_id__tracks_VideoThumbnail\n}\n\ntype GET_playlists__playlist_id__tracks_Root {\n  href: String\n  items: [GET_playlists__playlist_id__tracks_ItemsEntry]\n  limit: Int\n  \"\"\"\n  Field \"next\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  next: JSON\n  offset: Int\n  \"\"\"\n  Field \"previous\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  previous: JSON\n  total: Int\n}\n\ntype GET_playlists__playlist_id__tracks_Track {\n  album: GET_playlists__playlist_id__tracks_Album\n  artists: [GET_playlists__playlist_id__tracks_Artists1Entry]\n  available_markets: [String]\n  disc_number: Int\n  duration_ms: Int\n  episode: Boolean\n  explicit: Boolean\n  external_ids: GET_playlists__playlist_id__tracks_ExternalIds\n  external_urls: GET_playlists__playlist_id__tracks_ExternalUrls4\n  href: String\n  id: String\n  is_local: Boolean\n  name: String\n  popularity: Int\n  preview_url: String\n  track: Boolean\n  track_number: Int\n  type: String\n  uri: String\n}\n\ntype GET_playlists__playlist_id__tracks_VideoThumbnail {\n  \"\"\"\n  Field \"url\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  url: JSON\n}\n\ntype Query {\n  GET_playlists__playlist_id__tracks(\n    playlist_id: String!\n    spotify_access_token: String!\n  ): GET_playlists__playlist_id__tracks_Root\n    @rest(\n      endpoint: \"https://api.spotify.com/v1/playlists/$playlist_id;/tracks\"\n      headers: [\n        { name: \"authorization\", value: \"Bearer $spotify_access_token;\" }\n      ]\n    )\n}\n\nUtterance: remove the second track from my playlist 'My R&B'", "output": "response_obj = GET_me_playlists()\nresponse_obj1 = GET_playlists__playlist_id__tracks(playlist_id=[item.id for item in response_obj.items if item.name == \"My R&B\"][0])\nDELETE_playlists__playlist_id__tracks(playlist_id=[item.id for item in response_obj.items if item.name == \"My R&B\"][0], tracks=[{\"uri\":response_obj1.items[1].track.uri}])\n", "function_specs": "[{\"name\": \"GET_me_playlists\", \"description\": \"Get a list of the playlists owned or followed by the current Spotify\\nuser.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"limit\": {\"type\": \"integer\", \"description\": \"The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50.\\n\"}, \"offset\": {\"type\": \"integer\", \"description\": \"'The index of the first playlist to return. Default:\\n0 (the first object). Maximum offset: 100.000\\\\. Use with `limit` to get the\\nnext set of playlists.'\\n\"}}, \"required\": []}}, {\"name\": \"GET_playlists__playlist_id__tracks\", \"description\": \"Get full details of the items of a playlist owned by a Spotify user.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"playlist_id\": {\"type\": \"string\", \"description\": \"The [Spotify ID](/documentation/web-api/#spotify-uris-and-ids) of the playlist.\\n\"}, \"market\": {\"type\": \"string\", \"description\": \"An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).\\n  If a country code is specified, only content that is available in that market will be returned.<br/>\\n  If a valid user access token is specified in the request header, the country associated with\\n  the user account will take priority over this parameter.<br/>\\n  _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>\\n  Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).\\n\"}, \"fields\": {\"type\": \"string\", \"description\": \"Filters for the query: a comma-separated list of the\\nfields to return. If omitted, all fields are returned. For example, to get\\njust the total number of items and the request limit:<br/>`fields=total,limit`<br/>A\\ndot separator can be used to specify non-reoccurring fields, while parentheses\\ncan be used to specify reoccurring fields within objects. For example, to\\nget just the added date and user ID of the adder:<br/>`fields=items(added_at,added_by.id)`<br/>Use\\nmultiple parentheses to drill down into nested objects, for example:<br/>`fields=items(track(name,href,album(name,href)))`<br/>Fields\\ncan be excluded by prefixing them with an exclamation mark, for example:<br/>`fields=items.track.album(!external_urls,images)`\\n\"}, \"limit\": {\"type\": \"integer\", \"description\": \"The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50.\\n\"}, \"offset\": {\"type\": \"integer\", \"description\": \"The index of the first item to return. Default: 0 (the first item). Use with limit to get the next set of items.\\n\"}, \"additional_types\": {\"type\": \"string\", \"description\": \"A comma-separated list of item types that your client supports besides the default `track` type. Valid types are: `track` and `episode`.<br/>\\n_**Note**: This parameter was introduced to allow existing clients to maintain their current behaviour and might be deprecated in the future._<br/>\\nIn addition to providing this parameter, make sure that your client properly handles cases of new types in the future by checking against the `type` field of each object.\\n\"}}, \"required\": [\"playlist_id\"]}}, {\"name\": \"DELETE_playlists__playlist_id__tracks\", \"description\": \"Remove one or more items from a user's playlist.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"playlist_id\": {\"type\": \"string\", \"description\": \"The [Spotify ID](/documentation/web-api/#spotify-uris-and-ids) of the playlist.\\n\"}, \"tracks\": {\"type\": \"array\", \"description\": \"An array of objects containing Spotify URIs of the tracks or episodes to remove. For example: { \\\"tracks\\\": [{ \\\"uri\\\": \\\"spotify:track:4iV5W9uYEdYUVa79Axb7Rh\\\" },{ \\\"uri\\\": \\\"spotify:track:1301WleyT98MSxVHPZCA6M\\\" }] }. A maximum of 100 objects can be sent at once.\"}, \"snapshot_id\": {\"type\": \"string\", \"description\": \"The playlist's snapshot ID against which you want to make the changes. The API will validate that the specified items exist and in the specified positions and make the changes, even if more recent changes have been made to the playlist.\"}}, \"required\": [\"playlist_id\", \"tracks\"], \"body_params\": [\"tracks\", \"snapshot_id\"]}}]", "GraphQL_schema": "type GET_me_playlists_ExternalUrls {\n  spotify: String\n}\n\ntype GET_me_playlists_ExternalUrls1 {\n  spotify: String\n}\n\ntype GET_me_playlists_ImagesEntry {\n  \"\"\"\n  Field \"height\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  height: JSON\n  url: String\n  \"\"\"\n  Field \"width\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  width: JSON\n}\n\ntype GET_me_playlists_ItemsEntry {\n  collaborative: Boolean\n  description: String\n  external_urls: GET_me_playlists_ExternalUrls\n  href: String\n  id: String\n  images: [GET_me_playlists_ImagesEntry]\n  name: String\n  owner: GET_me_playlists_Owner\n  \"\"\"\n  Field \"primary_color\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  primary_color: JSON\n  public: Boolean\n  snapshot_id: String\n  tracks: GET_me_playlists_Tracks\n  type: String\n  uri: String\n}\n\ntype GET_me_playlists_Owner {\n  display_name: String\n  external_urls: GET_me_playlists_ExternalUrls1\n  href: String\n  id: String\n  type: String\n  uri: String\n}\n\ntype GET_me_playlists_Root {\n  href: String\n  items: [GET_me_playlists_ItemsEntry]\n  limit: Int\n  \"\"\"\n  Field \"next\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  next: JSON\n  offset: Int\n  \"\"\"\n  Field \"previous\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  previous: JSON\n  total: Int\n}\n\ntype GET_me_playlists_Tracks {\n  href: String\n  total: Int\n}\n\ntype Query {\n  GET_me_playlists(spotify_access_token: String!): GET_me_playlists_Root\n    @rest(\n      endpoint: \"https://api.spotify.com/v1/me/playlists\"\n      headers: [\n        { name: \"authorization\", value: \"Bearer $spotify_access_token;\" }\n      ]\n    )\n}\ntype GET_playlists__playlist_id__tracks_AddedBy {\n  external_urls: GET_playlists__playlist_id__tracks_ExternalUrls\n  href: String\n  id: String\n  type: String\n  uri: String\n}\n\ntype GET_playlists__playlist_id__tracks_Album {\n  album_type: String\n  artists: [GET_playlists__playlist_id__tracks_ArtistsEntry]\n  available_markets: [String]\n  external_urls: GET_playlists__playlist_id__tracks_ExternalUrls2\n  href: String\n  id: String\n  images: [GET_playlists__playlist_id__tracks_ImagesEntry]\n  name: String\n  release_date: Int\n  release_date_precision: String\n  total_tracks: Int\n  type: String\n  uri: String\n}\n\ntype GET_playlists__playlist_id__tracks_Artists1Entry {\n  external_urls: GET_playlists__playlist_id__tracks_ExternalUrls3\n  href: String\n  id: String\n  name: String\n  type: String\n  uri: String\n}\n\ntype GET_playlists__playlist_id__tracks_ArtistsEntry {\n  external_urls: GET_playlists__playlist_id__tracks_ExternalUrls1\n  href: String\n  id: String\n  name: String\n  type: String\n  uri: String\n}\n\ntype GET_playlists__playlist_id__tracks_ExternalIds {\n  isrc: String\n}\n\ntype GET_playlists__playlist_id__tracks_ExternalUrls {\n  spotify: String\n}\n\ntype GET_playlists__playlist_id__tracks_ExternalUrls1 {\n  spotify: String\n}\n\ntype GET_playlists__playlist_id__tracks_ExternalUrls2 {\n  spotify: String\n}\n\ntype GET_playlists__playlist_id__tracks_ExternalUrls3 {\n  spotify: String\n}\n\ntype GET_playlists__playlist_id__tracks_ExternalUrls4 {\n  spotify: String\n}\n\ntype GET_playlists__playlist_id__tracks_ImagesEntry {\n  height: Int\n  url: String\n  width: Int\n}\n\ntype GET_playlists__playlist_id__tracks_ItemsEntry {\n  added_at: DateTime\n  added_by: GET_playlists__playlist_id__tracks_AddedBy\n  is_local: Boolean\n  \"\"\"\n  Field \"primary_color\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  primary_color: JSON\n  track: GET_playlists__playlist_id__tracks_Track\n  video_thumbnail: GET_playlists__playlist_id__tracks_VideoThumbnail\n}\n\ntype GET_playlists__playlist_id__tracks_Root {\n  href: String\n  items: [GET_playlists__playlist_id__tracks_ItemsEntry]\n  limit: Int\n  \"\"\"\n  Field \"next\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  next: JSON\n  offset: Int\n  \"\"\"\n  Field \"previous\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  previous: JSON\n  total: Int\n}\n\ntype GET_playlists__playlist_id__tracks_Track {\n  album: GET_playlists__playlist_id__tracks_Album\n  artists: [GET_playlists__playlist_id__tracks_Artists1Entry]\n  available_markets: [String]\n  disc_number: Int\n  duration_ms: Int\n  episode: Boolean\n  explicit: Boolean\n  external_ids: GET_playlists__playlist_id__tracks_ExternalIds\n  external_urls: GET_playlists__playlist_id__tracks_ExternalUrls4\n  href: String\n  id: String\n  is_local: Boolean\n  name: String\n  popularity: Int\n  preview_url: String\n  track: Boolean\n  track_number: Int\n  type: String\n  uri: String\n}\n\ntype GET_playlists__playlist_id__tracks_VideoThumbnail {\n  \"\"\"\n  Field \"url\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  url: JSON\n}\n\ntype Query {\n  GET_playlists__playlist_id__tracks(\n    playlist_id: String!\n    spotify_access_token: String!\n  ): GET_playlists__playlist_id__tracks_Root\n    @rest(\n      endpoint: \"https://api.spotify.com/v1/playlists/$playlist_id;/tracks\"\n      headers: [\n        { name: \"authorization\", value: \"Bearer $spotify_access_token;\" }\n      ]\n    )\n}\n", "utterance": "remove the second track from my playlist 'My R&B'"}
{"domain": "spotify", "input": "Function Signatures:\n\n[{\"name\": \"GET_me_player_devices\", \"description\": \"Get information about a user\\u2019s available devices.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {}, \"required\": []}}, {\"name\": \"PUT_me_player_pause\", \"description\": \"Pause playback on the user's account.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"device_id\": {\"type\": \"string\", \"description\": \"The id of the device this command is targeting. If not supplied, the user's currently active device is the target.\\nExample: device_id=0d1841b0976bae2a3a310dd74c0f3df354899bc8\"}}, \"required\": []}}]\n\nGraphQL schema:\n\ntype GET_me_player_devices_DevicesEntry {\n  id: String\n  is_active: Boolean\n  is_private_session: Boolean\n  is_restricted: Boolean\n  name: String\n  supports_volume: Boolean\n  type: String\n  volume_percent: Int\n}\n\ntype GET_me_player_devices_Root {\n  devices: [GET_me_player_devices_DevicesEntry]\n}\n\ntype Query {\n  GET_me_player_devices(\n    spotify_access_token: String!\n  ): GET_me_player_devices_Root\n    @rest(\n      endpoint: \"https://api.spotify.com/v1/me/player/devices\"\n      headers: [\n        { name: \"authorization\", value: \"Bearer $spotify_access_token;\" }\n      ]\n    )\n}\n\nUtterance: Pause device 'My PC' if it is now playing something", "output": "response_obj = GET_me_player_devices()\nPUT_me_player_pause(device_id=[device.id for device in response_obj.devices if device.name == \"My PC\"][0])\n", "function_specs": "[{\"name\": \"GET_me_player_devices\", \"description\": \"Get information about a user\\u2019s available devices.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {}, \"required\": []}}, {\"name\": \"PUT_me_player_pause\", \"description\": \"Pause playback on the user's account.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"device_id\": {\"type\": \"string\", \"description\": \"The id of the device this command is targeting. If not supplied, the user's currently active device is the target.\\nExample: device_id=0d1841b0976bae2a3a310dd74c0f3df354899bc8\"}}, \"required\": []}}]", "GraphQL_schema": "type GET_me_player_devices_DevicesEntry {\n  id: String\n  is_active: Boolean\n  is_private_session: Boolean\n  is_restricted: Boolean\n  name: String\n  supports_volume: Boolean\n  type: String\n  volume_percent: Int\n}\n\ntype GET_me_player_devices_Root {\n  devices: [GET_me_player_devices_DevicesEntry]\n}\n\ntype Query {\n  GET_me_player_devices(\n    spotify_access_token: String!\n  ): GET_me_player_devices_Root\n    @rest(\n      endpoint: \"https://api.spotify.com/v1/me/player/devices\"\n      headers: [\n        { name: \"authorization\", value: \"Bearer $spotify_access_token;\" }\n      ]\n    )\n}\n", "utterance": "Pause device 'My PC' if it is now playing something"}
{"domain": "spotify", "input": "Function Signatures:\n\n[{\"name\": \"PUT_me_player_repeat\", \"description\": \"Set the repeat mode for the user's playback. Options are repeat-track,\\nrepeat-context, and off.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"state\": {\"type\": \"string\", \"description\": \"**track**, **context** or **off**.<br/>\\n**track** will repeat the current track.<br/>\\n**context** will repeat the current context.<br/>\\n**off** will turn repeat off.\\n\"}}, \"required\": [\"state\"]}}]\n\nGraphQL schema:\n\n\nUtterance: Set the single track repeat mode", "output": "PUT_me_player_repeat(state=\"track\")\n", "function_specs": "[{\"name\": \"PUT_me_player_repeat\", \"description\": \"Set the repeat mode for the user's playback. Options are repeat-track,\\nrepeat-context, and off.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"state\": {\"type\": \"string\", \"description\": \"**track**, **context** or **off**.<br/>\\n**track** will repeat the current track.<br/>\\n**context** will repeat the current context.<br/>\\n**off** will turn repeat off.\\n\"}}, \"required\": [\"state\"]}}]", "GraphQL_schema": "", "utterance": "Set the single track repeat mode"}
{"domain": "spotify", "input": "Function Signatures:\n\n[{\"name\": \"GET_me_playlists\", \"description\": \"Get a list of the playlists owned or followed by the current Spotify\\nuser.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"limit\": {\"type\": \"integer\", \"description\": \"The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50.\\n\"}, \"offset\": {\"type\": \"integer\", \"description\": \"'The index of the first playlist to return. Default:\\n0 (the first object). Maximum offset: 100.000\\\\. Use with `limit` to get the\\nnext set of playlists.'\\n\"}}, \"required\": []}}, {\"name\": \"PUT_playlists__playlist_id_\", \"description\": \"Change a playlist's name and public/private state. (The user must, of\\ncourse, own the playlist.)\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"playlist_id\": {\"type\": \"string\", \"description\": \"The [Spotify ID](/documentation/web-api/#spotify-uris-and-ids) of the playlist.\\n\"}}, \"required\": [\"playlist_id\"]}}]\n\nGraphQL schema:\n\ntype GET_me_playlists_ExternalUrls {\n  spotify: String\n}\n\ntype GET_me_playlists_ExternalUrls1 {\n  spotify: String\n}\n\ntype GET_me_playlists_ImagesEntry {\n  \"\"\"\n  Field \"height\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  height: JSON\n  url: String\n  \"\"\"\n  Field \"width\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  width: JSON\n}\n\ntype GET_me_playlists_ItemsEntry {\n  collaborative: Boolean\n  description: String\n  external_urls: GET_me_playlists_ExternalUrls\n  href: String\n  id: String\n  images: [GET_me_playlists_ImagesEntry]\n  name: String\n  owner: GET_me_playlists_Owner\n  \"\"\"\n  Field \"primary_color\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  primary_color: JSON\n  public: Boolean\n  snapshot_id: String\n  tracks: GET_me_playlists_Tracks\n  type: String\n  uri: String\n}\n\ntype GET_me_playlists_Owner {\n  display_name: String\n  external_urls: GET_me_playlists_ExternalUrls1\n  href: String\n  id: String\n  type: String\n  uri: String\n}\n\ntype GET_me_playlists_Root {\n  href: String\n  items: [GET_me_playlists_ItemsEntry]\n  limit: Int\n  \"\"\"\n  Field \"next\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  next: JSON\n  offset: Int\n  \"\"\"\n  Field \"previous\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  previous: JSON\n  total: Int\n}\n\ntype GET_me_playlists_Tracks {\n  href: String\n  total: Int\n}\n\ntype Query {\n  GET_me_playlists(spotify_access_token: String!): GET_me_playlists_Root\n    @rest(\n      endpoint: \"https://api.spotify.com/v1/me/playlists\"\n      headers: [\n        { name: \"authorization\", value: \"Bearer $spotify_access_token;\" }\n      ]\n    )\n}\n\nUtterance: Rename my first playlist to \"My First\"", "output": "response_obj = GET_me_playlists()\nPUT_playlists__playlist_id_(playlist_id=response_obj.items[0].id)\n", "function_specs": "[{\"name\": \"GET_me_playlists\", \"description\": \"Get a list of the playlists owned or followed by the current Spotify\\nuser.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"limit\": {\"type\": \"integer\", \"description\": \"The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50.\\n\"}, \"offset\": {\"type\": \"integer\", \"description\": \"'The index of the first playlist to return. Default:\\n0 (the first object). Maximum offset: 100.000\\\\. Use with `limit` to get the\\nnext set of playlists.'\\n\"}}, \"required\": []}}, {\"name\": \"PUT_playlists__playlist_id_\", \"description\": \"Change a playlist's name and public/private state. (The user must, of\\ncourse, own the playlist.)\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"playlist_id\": {\"type\": \"string\", \"description\": \"The [Spotify ID](/documentation/web-api/#spotify-uris-and-ids) of the playlist.\\n\"}}, \"required\": [\"playlist_id\"]}}]", "GraphQL_schema": "type GET_me_playlists_ExternalUrls {\n  spotify: String\n}\n\ntype GET_me_playlists_ExternalUrls1 {\n  spotify: String\n}\n\ntype GET_me_playlists_ImagesEntry {\n  \"\"\"\n  Field \"height\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  height: JSON\n  url: String\n  \"\"\"\n  Field \"width\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  width: JSON\n}\n\ntype GET_me_playlists_ItemsEntry {\n  collaborative: Boolean\n  description: String\n  external_urls: GET_me_playlists_ExternalUrls\n  href: String\n  id: String\n  images: [GET_me_playlists_ImagesEntry]\n  name: String\n  owner: GET_me_playlists_Owner\n  \"\"\"\n  Field \"primary_color\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  primary_color: JSON\n  public: Boolean\n  snapshot_id: String\n  tracks: GET_me_playlists_Tracks\n  type: String\n  uri: String\n}\n\ntype GET_me_playlists_Owner {\n  display_name: String\n  external_urls: GET_me_playlists_ExternalUrls1\n  href: String\n  id: String\n  type: String\n  uri: String\n}\n\ntype GET_me_playlists_Root {\n  href: String\n  items: [GET_me_playlists_ItemsEntry]\n  limit: Int\n  \"\"\"\n  Field \"next\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  next: JSON\n  offset: Int\n  \"\"\"\n  Field \"previous\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  previous: JSON\n  total: Int\n}\n\ntype GET_me_playlists_Tracks {\n  href: String\n  total: Int\n}\n\ntype Query {\n  GET_me_playlists(spotify_access_token: String!): GET_me_playlists_Root\n    @rest(\n      endpoint: \"https://api.spotify.com/v1/me/playlists\"\n      headers: [\n        { name: \"authorization\", value: \"Bearer $spotify_access_token;\" }\n      ]\n    )\n}\n", "utterance": "Rename my first playlist to \"My First\""}
{"domain": "spotify", "input": "Function Signatures:\n\n[{\"name\": \"GET_me\", \"description\": \"Get detailed profile information about the current user (including the\\ncurrent user's username).\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {}, \"required\": []}}]\n\nGraphQL schema:\n\ntype GET_me_ExplicitContent {\n  filter_enabled: Boolean\n  filter_locked: Boolean\n}\n\ntype GET_me_ExternalUrls {\n  spotify: String\n}\n\ntype GET_me_Followers {\n  \"\"\"\n  Field \"href\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  href: JSON\n  total: Int\n}\n\ntype GET_me_Root {\n  country: String\n  display_name: String\n  email: String\n  explicit_content: GET_me_ExplicitContent\n  external_urls: GET_me_ExternalUrls\n  followers: GET_me_Followers\n  href: String\n  id: String\n  images: [JSON]\n  product: String\n  type: String\n  uri: String\n}\n\ntype Query {\n  GET_me(spotify_access_token: String!): GET_me_Root\n    @rest(\n      endpoint: \"https://api.spotify.com/v1/me\"\n      headers: [\n        { name: \"authorization\", value: \"Bearer $spotify_access_token;\" }\n      ]\n    )\n}\n\nUtterance: What is my user name?", "output": "GET_me()\n", "function_specs": "[{\"name\": \"GET_me\", \"description\": \"Get detailed profile information about the current user (including the\\ncurrent user's username).\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {}, \"required\": []}}]", "GraphQL_schema": "type GET_me_ExplicitContent {\n  filter_enabled: Boolean\n  filter_locked: Boolean\n}\n\ntype GET_me_ExternalUrls {\n  spotify: String\n}\n\ntype GET_me_Followers {\n  \"\"\"\n  Field \"href\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  href: JSON\n  total: Int\n}\n\ntype GET_me_Root {\n  country: String\n  display_name: String\n  email: String\n  explicit_content: GET_me_ExplicitContent\n  external_urls: GET_me_ExternalUrls\n  followers: GET_me_Followers\n  href: String\n  id: String\n  images: [JSON]\n  product: String\n  type: String\n  uri: String\n}\n\ntype Query {\n  GET_me(spotify_access_token: String!): GET_me_Root\n    @rest(\n      endpoint: \"https://api.spotify.com/v1/me\"\n      headers: [\n        { name: \"authorization\", value: \"Bearer $spotify_access_token;\" }\n      ]\n    )\n}\n", "utterance": "What is my user name?"}
{"domain": "spotify", "input": "Function Signatures:\n\n[{\"name\": \"POST_me_player_next\", \"description\": \"Skips to next track in the user\\u2019s queue.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {}, \"required\": []}}, {\"name\": \"PUT_me_player_volume\", \"description\": \"Set the volume for the user\\u2019s current playback device.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"volume_percent\": {\"type\": \"integer\", \"description\": \"The volume to set. Must be a value from 0 to 100 inclusive.\\n\"}}, \"required\": [\"volume_percent\"]}}]\n\nGraphQL schema:\n\n\nUtterance: Skip to the next track and set the volume to 60", "output": "POST_me_player_next()\nPUT_me_player_volume(volume_percent=60)\n", "function_specs": "[{\"name\": \"POST_me_player_next\", \"description\": \"Skips to next track in the user\\u2019s queue.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {}, \"required\": []}}, {\"name\": \"PUT_me_player_volume\", \"description\": \"Set the volume for the user\\u2019s current playback device.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"volume_percent\": {\"type\": \"integer\", \"description\": \"The volume to set. Must be a value from 0 to 100 inclusive.\\n\"}}, \"required\": [\"volume_percent\"]}}]", "GraphQL_schema": "", "utterance": "Skip to the next track and set the volume to 60"}
{"domain": "tmdb", "input": "Function Signatures:\n\n[{\"name\": \"GET_tv_popular\", \"description\": \"Get a list of the current popular TV shows on TMDb. This list updates daily.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"page\": {\"type\": \"integer\", \"description\": \"page\"}}, \"required\": []}}, {\"name\": \"GET_tv__tv_id_\", \"description\": \"Get the primary TV show details by id.\\n\\nSupports `append_to_response`. Read more about this [here](#docTextSection:JdZq8ctmcxNqyLQjp).\\n\\n#### Recent Changes\\n\\n| **Date** | **Change** |\\n| - | - |\\n| July 17, 2018 | We now return `last_episode_to_air` and `next_episode_to_air` fields. |\\n| March 12, 2018 | Networks return proper logos and we introduced SVG support. |\\n| March 8, 2018 | The `seasons` field now returns the translated names and overviews. |\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"tv_id\": {\"type\": \"integer\", \"description\": \"tv id\"}}, \"required\": [\"tv_id\"]}}, {\"name\": \"GET_company__company_id_\", \"description\": \"Get a companies details by id.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"company_id\": {\"type\": \"integer\", \"description\": \"company id\"}}, \"required\": [\"company_id\"]}}]\n\nGraphQL schema:\n\ntype GET_company__company_id_Root {\n  description: String\n  headquarters: String\n  homepage: String\n  id: Int\n  logo_path: String\n  name: String\n  origin_country: String\n  \"\"\"\n  Field \"parent_company\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  parent_company: JSON\n}\n\ntype Query {\n  GET_company__company_id_(\n    company_id: String!\n    tmdb_access_token: String!\n  ): GET_company__company_id_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/company/$company_id;\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_tv_popular_ResultsEntry {\n  adult: Boolean\n  backdrop_path: String\n  first_air_date: Date\n  genre_ids: [Int]\n  id: Int\n  name: String\n  origin_country: [String]\n  original_language: String\n  original_name: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_tv_popular_Root {\n  page: Int\n  results: [GET_tv_popular_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_tv_popular(tmdb_access_token: String!): GET_tv_popular_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/tv/popular\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_tv__tv_id_CreatedByEntry {\n  credit_id: String\n  gender: Int\n  id: Int\n  name: String\n  original_name: String\n  profile_path: String\n}\n\ntype GET_tv__tv_id_GenresEntry {\n  id: Int\n  name: String\n}\n\ntype GET_tv__tv_id_LastEpisodeToAir {\n  air_date: Date\n  episode_number: Int\n  episode_type: String\n  id: Int\n  name: String\n  overview: String\n  production_code: String\n  runtime: Int\n  season_number: Int\n  show_id: Int\n  still_path: String\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_tv__tv_id_NetworksEntry {\n  id: Int\n  logo_path: String\n  name: String\n  origin_country: String\n}\n\ntype GET_tv__tv_id_ProductionCompaniesEntry {\n  id: Int\n  logo_path: String\n  name: String\n  origin_country: String\n}\n\ntype GET_tv__tv_id_ProductionCountriesEntry {\n  iso_3166_1: String\n  name: String\n}\n\ntype GET_tv__tv_id_Root {\n  adult: Boolean\n  backdrop_path: String\n  created_by: [GET_tv__tv_id_CreatedByEntry]\n  episode_run_time: [Int]\n  first_air_date: Date\n  genres: [GET_tv__tv_id_GenresEntry]\n  homepage: String\n  id: Int\n  in_production: Boolean\n  languages: [String]\n  last_air_date: Date\n  last_episode_to_air: GET_tv__tv_id_LastEpisodeToAir\n  name: String\n  networks: [GET_tv__tv_id_NetworksEntry]\n  \"\"\"\n  Field \"next_episode_to_air\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  next_episode_to_air: JSON\n  number_of_episodes: Int\n  number_of_seasons: Int\n  origin_country: [String]\n  original_language: String\n  original_name: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  production_companies: [GET_tv__tv_id_ProductionCompaniesEntry]\n  production_countries: [GET_tv__tv_id_ProductionCountriesEntry]\n  seasons: [GET_tv__tv_id_SeasonsEntry]\n  spoken_languages: [GET_tv__tv_id_SpokenLanguagesEntry]\n  status: String\n  tagline: String\n  type: String\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_tv__tv_id_SeasonsEntry {\n  air_date: Date\n  episode_count: Int\n  id: Int\n  name: String\n  overview: String\n  poster_path: String\n  season_number: Int\n  vote_average: Float\n}\n\ntype GET_tv__tv_id_SpokenLanguagesEntry {\n  english_name: String\n  iso_639_1: String\n  name: String\n}\n\ntype Query {\n  GET_tv__tv_id_(\n    tmdb_access_token: String!\n    tv_id: String!\n  ): GET_tv__tv_id_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/tv/$tv_id;\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\n\nUtterance: Where is the headquarter of the company that produced currently the most popular TV show?", "output": "response_obj = GET_tv_popular()\nresponse_obj1 = GET_tv__tv_id_(tv_id=response_obj.results[0].id)\nGET_company__company_id_(company_id=response_obj1.production_companies[0].id)\n", "function_specs": "[{\"name\": \"GET_tv_popular\", \"description\": \"Get a list of the current popular TV shows on TMDb. This list updates daily.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"page\": {\"type\": \"integer\", \"description\": \"page\"}}, \"required\": []}}, {\"name\": \"GET_tv__tv_id_\", \"description\": \"Get the primary TV show details by id.\\n\\nSupports `append_to_response`. Read more about this [here](#docTextSection:JdZq8ctmcxNqyLQjp).\\n\\n#### Recent Changes\\n\\n| **Date** | **Change** |\\n| - | - |\\n| July 17, 2018 | We now return `last_episode_to_air` and `next_episode_to_air` fields. |\\n| March 12, 2018 | Networks return proper logos and we introduced SVG support. |\\n| March 8, 2018 | The `seasons` field now returns the translated names and overviews. |\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"tv_id\": {\"type\": \"integer\", \"description\": \"tv id\"}}, \"required\": [\"tv_id\"]}}, {\"name\": \"GET_company__company_id_\", \"description\": \"Get a companies details by id.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"company_id\": {\"type\": \"integer\", \"description\": \"company id\"}}, \"required\": [\"company_id\"]}}]", "GraphQL_schema": "type GET_company__company_id_Root {\n  description: String\n  headquarters: String\n  homepage: String\n  id: Int\n  logo_path: String\n  name: String\n  origin_country: String\n  \"\"\"\n  Field \"parent_company\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  parent_company: JSON\n}\n\ntype Query {\n  GET_company__company_id_(\n    company_id: String!\n    tmdb_access_token: String!\n  ): GET_company__company_id_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/company/$company_id;\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_tv_popular_ResultsEntry {\n  adult: Boolean\n  backdrop_path: String\n  first_air_date: Date\n  genre_ids: [Int]\n  id: Int\n  name: String\n  origin_country: [String]\n  original_language: String\n  original_name: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_tv_popular_Root {\n  page: Int\n  results: [GET_tv_popular_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_tv_popular(tmdb_access_token: String!): GET_tv_popular_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/tv/popular\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_tv__tv_id_CreatedByEntry {\n  credit_id: String\n  gender: Int\n  id: Int\n  name: String\n  original_name: String\n  profile_path: String\n}\n\ntype GET_tv__tv_id_GenresEntry {\n  id: Int\n  name: String\n}\n\ntype GET_tv__tv_id_LastEpisodeToAir {\n  air_date: Date\n  episode_number: Int\n  episode_type: String\n  id: Int\n  name: String\n  overview: String\n  production_code: String\n  runtime: Int\n  season_number: Int\n  show_id: Int\n  still_path: String\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_tv__tv_id_NetworksEntry {\n  id: Int\n  logo_path: String\n  name: String\n  origin_country: String\n}\n\ntype GET_tv__tv_id_ProductionCompaniesEntry {\n  id: Int\n  logo_path: String\n  name: String\n  origin_country: String\n}\n\ntype GET_tv__tv_id_ProductionCountriesEntry {\n  iso_3166_1: String\n  name: String\n}\n\ntype GET_tv__tv_id_Root {\n  adult: Boolean\n  backdrop_path: String\n  created_by: [GET_tv__tv_id_CreatedByEntry]\n  episode_run_time: [Int]\n  first_air_date: Date\n  genres: [GET_tv__tv_id_GenresEntry]\n  homepage: String\n  id: Int\n  in_production: Boolean\n  languages: [String]\n  last_air_date: Date\n  last_episode_to_air: GET_tv__tv_id_LastEpisodeToAir\n  name: String\n  networks: [GET_tv__tv_id_NetworksEntry]\n  \"\"\"\n  Field \"next_episode_to_air\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  next_episode_to_air: JSON\n  number_of_episodes: Int\n  number_of_seasons: Int\n  origin_country: [String]\n  original_language: String\n  original_name: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  production_companies: [GET_tv__tv_id_ProductionCompaniesEntry]\n  production_countries: [GET_tv__tv_id_ProductionCountriesEntry]\n  seasons: [GET_tv__tv_id_SeasonsEntry]\n  spoken_languages: [GET_tv__tv_id_SpokenLanguagesEntry]\n  status: String\n  tagline: String\n  type: String\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_tv__tv_id_SeasonsEntry {\n  air_date: Date\n  episode_count: Int\n  id: Int\n  name: String\n  overview: String\n  poster_path: String\n  season_number: Int\n  vote_average: Float\n}\n\ntype GET_tv__tv_id_SpokenLanguagesEntry {\n  english_name: String\n  iso_639_1: String\n  name: String\n}\n\ntype Query {\n  GET_tv__tv_id_(\n    tmdb_access_token: String!\n    tv_id: String!\n  ): GET_tv__tv_id_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/tv/$tv_id;\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\n", "utterance": "Where is the headquarter of the company that produced currently the most popular TV show?"}
{"domain": "tmdb", "input": "Function Signatures:\n\n[{\"name\": \"GET_search_tv\", \"description\": \"Search for a TV show.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"page\": {\"type\": \"integer\", \"description\": \"page\"}, \"query\": {\"type\": \"string\", \"description\": \"query\"}, \"include_adult\": {\"type\": \"boolean\", \"description\": \"include adult\"}, \"first_air_date_year\": {\"type\": \"integer\", \"description\": \"first air date year\"}}, \"required\": [\"query\"]}}, {\"name\": \"GET_tv__tv_id__season__season_number__credits\", \"description\": \"Get the credits for TV season.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"tv_id\": {\"type\": \"integer\", \"description\": \"tv id\"}, \"season_number\": {\"type\": \"integer\", \"description\": \"season number\"}}, \"required\": [\"tv_id\", \"season_number\"]}}]\n\nGraphQL schema:\n\ntype GET_search_tv_ResultsEntry {\n  adult: Boolean\n  backdrop_path: String\n  first_air_date: Date\n  genre_ids: [Int]\n  id: Int\n  name: String\n  origin_country: [String]\n  original_language: String\n  original_name: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_search_tv_Root {\n  page: Int\n  results: [GET_search_tv_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_search_tv(query: String, tmdb_access_token: String!): GET_search_tv_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/search/tv\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_tv__tv_id__season__season_number__credits_CastEntry {\n  adult: Boolean\n  character: String\n  credit_id: String\n  gender: Int\n  id: Int\n  known_for_department: String\n  name: String\n  order: Int\n  original_name: String\n  popularity: Float\n  profile_path: String\n}\n\ntype GET_tv__tv_id__season__season_number__credits_CrewEntry {\n  adult: Boolean\n  credit_id: String\n  department: String\n  gender: Int\n  id: Int\n  job: String\n  known_for_department: String\n  name: String\n  original_name: String\n  popularity: Float\n  profile_path: String\n}\n\ntype GET_tv__tv_id__season__season_number__credits_Root {\n  cast: [GET_tv__tv_id__season__season_number__credits_CastEntry]\n  crew: [GET_tv__tv_id__season__season_number__credits_CrewEntry]\n  id: Int\n}\n\ntype Query {\n  GET_tv__tv_id__season__season_number__credits(\n    season_number: String!\n    tmdb_access_token: String!\n    tv_id: String!\n  ): GET_tv__tv_id__season__season_number__credits_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/tv/$tv_id;/season/$season_number;/credits\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\n\nUtterance: tell me the directors of the first season of House of Cards", "output": "response_obj = GET_search_tv(query=\"House of Cards\")\nGET_tv__tv_id__season__season_number__credits(tv_id=response_obj.results[0].id, season_number=1)\n", "function_specs": "[{\"name\": \"GET_search_tv\", \"description\": \"Search for a TV show.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"page\": {\"type\": \"integer\", \"description\": \"page\"}, \"query\": {\"type\": \"string\", \"description\": \"query\"}, \"include_adult\": {\"type\": \"boolean\", \"description\": \"include adult\"}, \"first_air_date_year\": {\"type\": \"integer\", \"description\": \"first air date year\"}}, \"required\": [\"query\"]}}, {\"name\": \"GET_tv__tv_id__season__season_number__credits\", \"description\": \"Get the credits for TV season.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"tv_id\": {\"type\": \"integer\", \"description\": \"tv id\"}, \"season_number\": {\"type\": \"integer\", \"description\": \"season number\"}}, \"required\": [\"tv_id\", \"season_number\"]}}]", "GraphQL_schema": "type GET_search_tv_ResultsEntry {\n  adult: Boolean\n  backdrop_path: String\n  first_air_date: Date\n  genre_ids: [Int]\n  id: Int\n  name: String\n  origin_country: [String]\n  original_language: String\n  original_name: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_search_tv_Root {\n  page: Int\n  results: [GET_search_tv_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_search_tv(query: String, tmdb_access_token: String!): GET_search_tv_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/search/tv\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_tv__tv_id__season__season_number__credits_CastEntry {\n  adult: Boolean\n  character: String\n  credit_id: String\n  gender: Int\n  id: Int\n  known_for_department: String\n  name: String\n  order: Int\n  original_name: String\n  popularity: Float\n  profile_path: String\n}\n\ntype GET_tv__tv_id__season__season_number__credits_CrewEntry {\n  adult: Boolean\n  credit_id: String\n  department: String\n  gender: Int\n  id: Int\n  job: String\n  known_for_department: String\n  name: String\n  original_name: String\n  popularity: Float\n  profile_path: String\n}\n\ntype GET_tv__tv_id__season__season_number__credits_Root {\n  cast: [GET_tv__tv_id__season__season_number__credits_CastEntry]\n  crew: [GET_tv__tv_id__season__season_number__credits_CrewEntry]\n  id: Int\n}\n\ntype Query {\n  GET_tv__tv_id__season__season_number__credits(\n    season_number: String!\n    tmdb_access_token: String!\n    tv_id: String!\n  ): GET_tv__tv_id__season__season_number__credits_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/tv/$tv_id;/season/$season_number;/credits\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\n", "utterance": "tell me the directors of the first season of House of Cards"}
{"domain": "tmdb", "input": "Function Signatures:\n\n[{\"name\": \"GET_search_movie\", \"description\": \"Search for movies.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"query\": {\"type\": \"string\", \"description\": \"query\"}, \"page\": {\"type\": \"integer\", \"description\": \"page\"}, \"include_adult\": {\"type\": \"boolean\", \"description\": \"include adult\"}, \"region\": {\"type\": \"string\", \"description\": \"region\"}, \"year\": {\"type\": \"integer\", \"description\": \"year\"}, \"primary_release_year\": {\"type\": \"integer\", \"description\": \"primary release year\"}}, \"required\": [\"query\"]}}, {\"name\": \"GET_movie__movie_id__credits\", \"description\": \"Get the cast and crew for a movie.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"movie_id\": {\"type\": \"integer\", \"description\": \"movie id\"}}, \"required\": [\"movie_id\"]}}]\n\nGraphQL schema:\n\ntype GET_search_movie_ResultsEntry {\n  adult: Boolean\n  \"\"\"\n  Field \"backdrop_path\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  backdrop_path: JSON\n  genre_ids: [Int]\n  id: Int\n  original_language: String\n  original_title: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  release_date: Date\n  title: String\n  video: Boolean\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_search_movie_Root {\n  page: Int\n  results: [GET_search_movie_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_search_movie(\n    query: String\n    tmdb_access_token: String!\n  ): GET_search_movie_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/search/movie\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_movie__movie_id__credits_CastEntry {\n  adult: Boolean\n  cast_id: Int\n  character: String\n  credit_id: String\n  gender: Int\n  id: Int\n  known_for_department: String\n  name: String\n  order: Int\n  original_name: String\n  popularity: Float\n  profile_path: String\n}\n\ntype GET_movie__movie_id__credits_CrewEntry {\n  adult: Boolean\n  credit_id: String\n  department: String\n  gender: Int\n  id: Int\n  job: String\n  known_for_department: String\n  name: String\n  original_name: String\n  popularity: Float\n  profile_path: String\n}\n\ntype GET_movie__movie_id__credits_Root {\n  cast: [GET_movie__movie_id__credits_CastEntry]\n  crew: [GET_movie__movie_id__credits_CrewEntry]\n  id: Int\n}\n\ntype Query {\n  GET_movie__movie_id__credits(\n    movie_id: String!\n    tmdb_access_token: String!\n  ): GET_movie__movie_id__credits_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/movie/$movie_id;/credits\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\n\nUtterance: Are Yui Aragaki and Gen Hoshino co-starring in We Married as Job?", "output": "response_obj = GET_search_movie(query=\"We Married as Job\")\nGET_movie__movie_id__credits(movie_id=response_obj.results[0].id)\n", "function_specs": "[{\"name\": \"GET_search_movie\", \"description\": \"Search for movies.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"query\": {\"type\": \"string\", \"description\": \"query\"}, \"page\": {\"type\": \"integer\", \"description\": \"page\"}, \"include_adult\": {\"type\": \"boolean\", \"description\": \"include adult\"}, \"region\": {\"type\": \"string\", \"description\": \"region\"}, \"year\": {\"type\": \"integer\", \"description\": \"year\"}, \"primary_release_year\": {\"type\": \"integer\", \"description\": \"primary release year\"}}, \"required\": [\"query\"]}}, {\"name\": \"GET_movie__movie_id__credits\", \"description\": \"Get the cast and crew for a movie.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"movie_id\": {\"type\": \"integer\", \"description\": \"movie id\"}}, \"required\": [\"movie_id\"]}}]", "GraphQL_schema": "type GET_search_movie_ResultsEntry {\n  adult: Boolean\n  \"\"\"\n  Field \"backdrop_path\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  backdrop_path: JSON\n  genre_ids: [Int]\n  id: Int\n  original_language: String\n  original_title: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  release_date: Date\n  title: String\n  video: Boolean\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_search_movie_Root {\n  page: Int\n  results: [GET_search_movie_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_search_movie(\n    query: String\n    tmdb_access_token: String!\n  ): GET_search_movie_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/search/movie\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_movie__movie_id__credits_CastEntry {\n  adult: Boolean\n  cast_id: Int\n  character: String\n  credit_id: String\n  gender: Int\n  id: Int\n  known_for_department: String\n  name: String\n  order: Int\n  original_name: String\n  popularity: Float\n  profile_path: String\n}\n\ntype GET_movie__movie_id__credits_CrewEntry {\n  adult: Boolean\n  credit_id: String\n  department: String\n  gender: Int\n  id: Int\n  job: String\n  known_for_department: String\n  name: String\n  original_name: String\n  popularity: Float\n  profile_path: String\n}\n\ntype GET_movie__movie_id__credits_Root {\n  cast: [GET_movie__movie_id__credits_CastEntry]\n  crew: [GET_movie__movie_id__credits_CrewEntry]\n  id: Int\n}\n\ntype Query {\n  GET_movie__movie_id__credits(\n    movie_id: String!\n    tmdb_access_token: String!\n  ): GET_movie__movie_id__credits_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/movie/$movie_id;/credits\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\n", "utterance": "Are Yui Aragaki and Gen Hoshino co-starring in We Married as Job?"}
{"domain": "tmdb", "input": "Function Signatures:\n\n[{\"name\": \"GET_person_popular\", \"description\": \"Get the list of popular people on TMDb. This list updates daily.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"page\": {\"type\": \"integer\", \"description\": \"page\"}}, \"required\": []}}]\n\nGraphQL schema:\n\ntype GET_person_popular_KnownForEntry {\n  adult: Boolean\n  backdrop_path: String\n  first_air_date: Date\n  genre_ids: [Int]\n  id: Int\n  media_type: String\n  name: String\n  origin_country: [String]\n  original_language: String\n  original_name: String\n  original_title: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  release_date: Date\n  title: String\n  video: Boolean\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_person_popular_ResultsEntry {\n  adult: Boolean\n  gender: Int\n  id: Int\n  known_for: [GET_person_popular_KnownForEntry]\n  known_for_department: String\n  name: String\n  original_name: String\n  popularity: Float\n  profile_path: String\n}\n\ntype GET_person_popular_Root {\n  page: Int\n  results: [GET_person_popular_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_person_popular(tmdb_access_token: String!): GET_person_popular_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/person/popular\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\n\nUtterance: Who is the most popular person?", "output": "GET_person_popular()\n", "function_specs": "[{\"name\": \"GET_person_popular\", \"description\": \"Get the list of popular people on TMDb. This list updates daily.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"page\": {\"type\": \"integer\", \"description\": \"page\"}}, \"required\": []}}]", "GraphQL_schema": "type GET_person_popular_KnownForEntry {\n  adult: Boolean\n  backdrop_path: String\n  first_air_date: Date\n  genre_ids: [Int]\n  id: Int\n  media_type: String\n  name: String\n  origin_country: [String]\n  original_language: String\n  original_name: String\n  original_title: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  release_date: Date\n  title: String\n  video: Boolean\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_person_popular_ResultsEntry {\n  adult: Boolean\n  gender: Int\n  id: Int\n  known_for: [GET_person_popular_KnownForEntry]\n  known_for_department: String\n  name: String\n  original_name: String\n  popularity: Float\n  profile_path: String\n}\n\ntype GET_person_popular_Root {\n  page: Int\n  results: [GET_person_popular_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_person_popular(tmdb_access_token: String!): GET_person_popular_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/person/popular\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\n", "utterance": "Who is the most popular person?"}
{"domain": "tmdb", "input": "Function Signatures:\n\n[{\"name\": \"GET_search_person\", \"description\": \"Search for people.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"query\": {\"type\": \"string\", \"description\": \"query\"}, \"page\": {\"type\": \"integer\", \"description\": \"page\"}, \"include_adult\": {\"type\": \"boolean\", \"description\": \"include adult\"}, \"region\": {\"type\": \"string\", \"description\": \"region\"}}, \"required\": [\"query\"]}}, {\"name\": \"GET_person__person_id__movie_credits\", \"description\": \"Get the movie credits for a person, the results contains various information such as popularity and release date.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"person_id\": {\"type\": \"integer\", \"description\": \"person id\"}}, \"required\": [\"person_id\"]}}]\n\nGraphQL schema:\n\ntype GET_search_person_KnownForEntry {\n  adult: Boolean\n  backdrop_path: String\n  genre_ids: [Int]\n  id: Int\n  media_type: String\n  original_language: String\n  original_title: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  release_date: Date\n  title: String\n  video: Boolean\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_search_person_ResultsEntry {\n  adult: Boolean\n  gender: Int\n  id: Int\n  known_for: [GET_search_person_KnownForEntry]\n  known_for_department: String\n  name: String\n  original_name: String\n  popularity: Float\n  profile_path: String\n}\n\ntype GET_search_person_Root {\n  page: Int\n  results: [GET_search_person_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_search_person(\n    query: String\n    tmdb_access_token: String!\n  ): GET_search_person_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/search/person\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_person__person_id__movie_credits_CastEntry {\n  adult: Boolean\n  backdrop_path: String\n  character: String\n  credit_id: String\n  genre_ids: [Int]\n  id: Int\n  order: Int\n  original_language: String\n  original_title: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  release_date: String\n  title: String\n  video: Boolean\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_person__person_id__movie_credits_CrewEntry {\n  adult: Boolean\n  backdrop_path: String\n  credit_id: String\n  department: String\n  genre_ids: [Int]\n  id: Int\n  job: String\n  original_language: String\n  original_title: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  release_date: String\n  title: String\n  video: Boolean\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_person__person_id__movie_credits_Root {\n  cast: [GET_person__person_id__movie_credits_CastEntry]\n  crew: [GET_person__person_id__movie_credits_CrewEntry]\n  id: Int\n}\n\ntype Query {\n  GET_person__person_id__movie_credits(\n    person_id: String!\n    tmdb_access_token: String!\n  ): GET_person__person_id__movie_credits_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/person/$person_id;/movie_credits\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\n\nUtterance: Tell me about Katherine LaNasa's latest movie appearance.", "output": "response_obj = GET_search_person(query=\"Katherine LaNasa\")\nGET_person__person_id__movie_credits(person_id=response_obj.results[0].id)\n", "function_specs": "[{\"name\": \"GET_search_person\", \"description\": \"Search for people.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"query\": {\"type\": \"string\", \"description\": \"query\"}, \"page\": {\"type\": \"integer\", \"description\": \"page\"}, \"include_adult\": {\"type\": \"boolean\", \"description\": \"include adult\"}, \"region\": {\"type\": \"string\", \"description\": \"region\"}}, \"required\": [\"query\"]}}, {\"name\": \"GET_person__person_id__movie_credits\", \"description\": \"Get the movie credits for a person, the results contains various information such as popularity and release date.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"person_id\": {\"type\": \"integer\", \"description\": \"person id\"}}, \"required\": [\"person_id\"]}}]", "GraphQL_schema": "type GET_search_person_KnownForEntry {\n  adult: Boolean\n  backdrop_path: String\n  genre_ids: [Int]\n  id: Int\n  media_type: String\n  original_language: String\n  original_title: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  release_date: Date\n  title: String\n  video: Boolean\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_search_person_ResultsEntry {\n  adult: Boolean\n  gender: Int\n  id: Int\n  known_for: [GET_search_person_KnownForEntry]\n  known_for_department: String\n  name: String\n  original_name: String\n  popularity: Float\n  profile_path: String\n}\n\ntype GET_search_person_Root {\n  page: Int\n  results: [GET_search_person_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_search_person(\n    query: String\n    tmdb_access_token: String!\n  ): GET_search_person_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/search/person\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_person__person_id__movie_credits_CastEntry {\n  adult: Boolean\n  backdrop_path: String\n  character: String\n  credit_id: String\n  genre_ids: [Int]\n  id: Int\n  order: Int\n  original_language: String\n  original_title: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  release_date: String\n  title: String\n  video: Boolean\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_person__person_id__movie_credits_CrewEntry {\n  adult: Boolean\n  backdrop_path: String\n  credit_id: String\n  department: String\n  genre_ids: [Int]\n  id: Int\n  job: String\n  original_language: String\n  original_title: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  release_date: String\n  title: String\n  video: Boolean\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_person__person_id__movie_credits_Root {\n  cast: [GET_person__person_id__movie_credits_CastEntry]\n  crew: [GET_person__person_id__movie_credits_CrewEntry]\n  id: Int\n}\n\ntype Query {\n  GET_person__person_id__movie_credits(\n    person_id: String!\n    tmdb_access_token: String!\n  ): GET_person__person_id__movie_credits_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/person/$person_id;/movie_credits\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\n", "utterance": "Tell me about Katherine LaNasa's latest movie appearance."}
{"domain": "tmdb", "input": "Function Signatures:\n\n[{\"name\": \"GET_search_movie\", \"description\": \"Search for movies.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"query\": {\"type\": \"string\", \"description\": \"query\"}, \"page\": {\"type\": \"integer\", \"description\": \"page\"}, \"include_adult\": {\"type\": \"boolean\", \"description\": \"include adult\"}, \"region\": {\"type\": \"string\", \"description\": \"region\"}, \"year\": {\"type\": \"integer\", \"description\": \"year\"}, \"primary_release_year\": {\"type\": \"integer\", \"description\": \"primary release year\"}}, \"required\": [\"query\"]}}, {\"name\": \"GET_movie__movie_id__credits\", \"description\": \"Get the cast and crew for a movie.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"movie_id\": {\"type\": \"integer\", \"description\": \"movie id\"}}, \"required\": [\"movie_id\"]}}, {\"name\": \"GET_person__person_id_\", \"description\": \"Get the primary person details by id.\\n\\nSupports `append_to_response`. Read more about this [here](#docTextSection:JdZq8ctmcxNqyLQjp).\\n\\n#### Recent Changes\\n\\n| **Date** | **Change** |\\n| - | - |\\n| July 17, 2018 | Added the `known_for_department` field. |\\n| April 26, 2018 | Added the [translations](#endpoint:CSaMjCxXAtGpxNGfS) method. |\\n| November 9, 2016 | Biographies are now translatable on TMDb. This means you can query person details with a language parameter. |\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"person_id\": {\"type\": \"integer\", \"description\": \"person id\"}}, \"required\": [\"person_id\"]}}]\n\nGraphQL schema:\n\ntype GET_person__person_id_Root {\n  adult: Boolean\n  also_known_as: [String]\n  biography: String\n  birthday: Date\n  \"\"\"\n  Field \"deathday\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  deathday: JSON\n  gender: Int\n  \"\"\"\n  Field \"homepage\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  homepage: JSON\n  id: Int\n  imdb_id: String\n  known_for_department: String\n  name: String\n  place_of_birth: String\n  popularity: Float\n  profile_path: String\n}\n\ntype Query {\n  GET_person__person_id_(\n    person_id: String!\n    tmdb_access_token: String!\n  ): GET_person__person_id_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/person/$person_id;\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_search_movie_ResultsEntry {\n  adult: Boolean\n  backdrop_path: String\n  genre_ids: [Int]\n  id: Int\n  original_language: String\n  original_title: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  release_date: Date\n  title: String\n  video: Boolean\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_search_movie_Root {\n  page: Int\n  results: [GET_search_movie_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_search_movie(\n    query: String\n    tmdb_access_token: String!\n  ): GET_search_movie_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/search/movie\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_movie__movie_id__credits_CastEntry {\n  adult: Boolean\n  cast_id: Int\n  character: String\n  credit_id: String\n  gender: Int\n  id: Int\n  known_for_department: String\n  name: String\n  order: Int\n  original_name: String\n  popularity: Float\n  profile_path: String\n}\n\ntype GET_movie__movie_id__credits_CrewEntry {\n  adult: Boolean\n  credit_id: String\n  department: String\n  gender: Int\n  id: Int\n  job: String\n  known_for_department: String\n  name: String\n  original_name: String\n  popularity: Float\n  profile_path: String\n}\n\ntype GET_movie__movie_id__credits_Root {\n  cast: [GET_movie__movie_id__credits_CastEntry]\n  crew: [GET_movie__movie_id__credits_CrewEntry]\n  id: Int\n}\n\ntype Query {\n  GET_movie__movie_id__credits(\n    movie_id: String!\n    tmdb_access_token: String!\n  ): GET_movie__movie_id__credits_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/movie/$movie_id;/credits\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\n\nUtterance: When is the bitrhday of the lead actor of the movie The Shawshank Redemption?", "output": "response_obj = GET_search_movie(query=\"The Shawshank Redemption\")\nresponse_obj1 = GET_movie__movie_id__credits(movie_id=response_obj.results[0].id)\nGET_person__person_id_(person_id=response_obj1.cast[0].id)\n", "function_specs": "[{\"name\": \"GET_search_movie\", \"description\": \"Search for movies.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"query\": {\"type\": \"string\", \"description\": \"query\"}, \"page\": {\"type\": \"integer\", \"description\": \"page\"}, \"include_adult\": {\"type\": \"boolean\", \"description\": \"include adult\"}, \"region\": {\"type\": \"string\", \"description\": \"region\"}, \"year\": {\"type\": \"integer\", \"description\": \"year\"}, \"primary_release_year\": {\"type\": \"integer\", \"description\": \"primary release year\"}}, \"required\": [\"query\"]}}, {\"name\": \"GET_movie__movie_id__credits\", \"description\": \"Get the cast and crew for a movie.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"movie_id\": {\"type\": \"integer\", \"description\": \"movie id\"}}, \"required\": [\"movie_id\"]}}, {\"name\": \"GET_person__person_id_\", \"description\": \"Get the primary person details by id.\\n\\nSupports `append_to_response`. Read more about this [here](#docTextSection:JdZq8ctmcxNqyLQjp).\\n\\n#### Recent Changes\\n\\n| **Date** | **Change** |\\n| - | - |\\n| July 17, 2018 | Added the `known_for_department` field. |\\n| April 26, 2018 | Added the [translations](#endpoint:CSaMjCxXAtGpxNGfS) method. |\\n| November 9, 2016 | Biographies are now translatable on TMDb. This means you can query person details with a language parameter. |\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"person_id\": {\"type\": \"integer\", \"description\": \"person id\"}}, \"required\": [\"person_id\"]}}]", "GraphQL_schema": "type GET_person__person_id_Root {\n  adult: Boolean\n  also_known_as: [String]\n  biography: String\n  birthday: Date\n  \"\"\"\n  Field \"deathday\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  deathday: JSON\n  gender: Int\n  \"\"\"\n  Field \"homepage\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  homepage: JSON\n  id: Int\n  imdb_id: String\n  known_for_department: String\n  name: String\n  place_of_birth: String\n  popularity: Float\n  profile_path: String\n}\n\ntype Query {\n  GET_person__person_id_(\n    person_id: String!\n    tmdb_access_token: String!\n  ): GET_person__person_id_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/person/$person_id;\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_search_movie_ResultsEntry {\n  adult: Boolean\n  backdrop_path: String\n  genre_ids: [Int]\n  id: Int\n  original_language: String\n  original_title: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  release_date: Date\n  title: String\n  video: Boolean\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_search_movie_Root {\n  page: Int\n  results: [GET_search_movie_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_search_movie(\n    query: String\n    tmdb_access_token: String!\n  ): GET_search_movie_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/search/movie\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_movie__movie_id__credits_CastEntry {\n  adult: Boolean\n  cast_id: Int\n  character: String\n  credit_id: String\n  gender: Int\n  id: Int\n  known_for_department: String\n  name: String\n  order: Int\n  original_name: String\n  popularity: Float\n  profile_path: String\n}\n\ntype GET_movie__movie_id__credits_CrewEntry {\n  adult: Boolean\n  credit_id: String\n  department: String\n  gender: Int\n  id: Int\n  job: String\n  known_for_department: String\n  name: String\n  original_name: String\n  popularity: Float\n  profile_path: String\n}\n\ntype GET_movie__movie_id__credits_Root {\n  cast: [GET_movie__movie_id__credits_CastEntry]\n  crew: [GET_movie__movie_id__credits_CrewEntry]\n  id: Int\n}\n\ntype Query {\n  GET_movie__movie_id__credits(\n    movie_id: String!\n    tmdb_access_token: String!\n  ): GET_movie__movie_id__credits_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/movie/$movie_id;/credits\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\n", "utterance": "When is the bitrhday of the lead actor of the movie The Shawshank Redemption?"}
{"domain": "tmdb", "input": "Function Signatures:\n\n[{\"name\": \"GET_trending__media_type___time_window_\", \"description\": \"Get the daily or weekly trending items. The daily trending list tracks items over the period of a day while items have a 24 hour half life. The weekly list tracks items over a 7 day period, with a 7 day half life.\\n\\n#### Valid Media Types\\n\\n| **Media Type** | **Description** |\\n| - | - |\\n| all | Include all movies, TV shows and people in the results as a global trending list. |\\n| movie | Show the trending movies in the results. |\\n| tv | Show the trending TV shows in the results. |\\n| person | Show the trending people in the results. |\\n\\n#### Valid Time Windows\\n\\n| **Time Window** | **Description** |\\n| - | - |\\n| day | View the trending list for the day. |\\n| week | View the trending list for the week. |\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"media_type\": {\"type\": \"string\", \"description\": \"media type\\nValid values: all,movie,tv,person\"}, \"time_window\": {\"type\": \"string\", \"description\": \"time window\\nValid values: day,week\"}}, \"required\": [\"media_type\", \"time_window\"]}}, {\"name\": \"GET_tv__tv_id__credits\", \"description\": \"Get the credits (cast and crew) that have been added to a TV show.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"tv_id\": {\"type\": \"integer\", \"description\": \"tv id\"}}, \"required\": [\"tv_id\"]}}, {\"name\": \"GET_person__person_id_\", \"description\": \"Get the primary person details by id.\\n\\nSupports `append_to_response`. Read more about this [here](#docTextSection:JdZq8ctmcxNqyLQjp).\\n\\n#### Recent Changes\\n\\n| **Date** | **Change** |\\n| - | - |\\n| July 17, 2018 | Added the `known_for_department` field. |\\n| April 26, 2018 | Added the [translations](#endpoint:CSaMjCxXAtGpxNGfS) method. |\\n| November 9, 2016 | Biographies are now translatable on TMDb. This means you can query person details with a language parameter. |\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"person_id\": {\"type\": \"integer\", \"description\": \"person id\"}}, \"required\": [\"person_id\"]}}]\n\nGraphQL schema:\n\ntype GET_person__person_id_Root {\n  adult: Boolean\n  also_known_as: [String]\n  biography: String\n  birthday: Date\n  \"\"\"\n  Field \"deathday\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  deathday: JSON\n  gender: Int\n  \"\"\"\n  Field \"homepage\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  homepage: JSON\n  id: Int\n  imdb_id: String\n  known_for_department: String\n  name: String\n  place_of_birth: String\n  popularity: Float\n  profile_path: String\n}\n\ntype Query {\n  GET_person__person_id_(\n    person_id: String!\n    tmdb_access_token: String!\n  ): GET_person__person_id_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/person/$person_id;\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_trending__media_type___time_window_ResultsEntry {\n  adult: Boolean\n  backdrop_path: String\n  genre_ids: [Int]\n  id: Int\n  media_type: String\n  original_language: String\n  original_title: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  release_date: Date\n  title: String\n  video: Boolean\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_trending__media_type___time_window_Root {\n  page: Int\n  results: [GET_trending__media_type___time_window_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_trending__media_type___time_window_(\n    media_type: String!\n    time_window: String!\n    tmdb_access_token: String!\n  ): GET_trending__media_type___time_window_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/trending/$media_type;/$time_window;\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_tv__tv_id__credits_CastEntry {\n  adult: Boolean\n  character: String\n  credit_id: String\n  gender: Int\n  id: Int\n  known_for_department: String\n  name: String\n  order: Int\n  original_name: String\n  popularity: Float\n  profile_path: String\n}\n\ntype GET_tv__tv_id__credits_CrewEntry {\n  adult: Boolean\n  credit_id: String\n  department: String\n  gender: Int\n  id: Int\n  job: String\n  known_for_department: String\n  name: String\n  original_name: String\n  popularity: Float\n  profile_path: String\n}\n\ntype GET_tv__tv_id__credits_Root {\n  cast: [GET_tv__tv_id__credits_CastEntry]\n  crew: [GET_tv__tv_id__credits_CrewEntry]\n  id: Int\n}\n\ntype Query {\n  GET_tv__tv_id__credits(\n    tmdb_access_token: String!\n    tv_id: String!\n  ): GET_tv__tv_id__credits_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/tv/$tv_id;/credits\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\n\nUtterance: When is the birthday of the lead actor of today's most trending TV show?", "output": "response_obj = GET_trending__media_type___time_window_(media_type=\"tv\", time_window=\"day\")\nresponse_obj1 = GET_tv__tv_id__credits(tv_id=response_obj.results[0].id)\nGET_person__person_id_(person_id=response_obj1.cast[0].id)\n", "function_specs": "[{\"name\": \"GET_trending__media_type___time_window_\", \"description\": \"Get the daily or weekly trending items. The daily trending list tracks items over the period of a day while items have a 24 hour half life. The weekly list tracks items over a 7 day period, with a 7 day half life.\\n\\n#### Valid Media Types\\n\\n| **Media Type** | **Description** |\\n| - | - |\\n| all | Include all movies, TV shows and people in the results as a global trending list. |\\n| movie | Show the trending movies in the results. |\\n| tv | Show the trending TV shows in the results. |\\n| person | Show the trending people in the results. |\\n\\n#### Valid Time Windows\\n\\n| **Time Window** | **Description** |\\n| - | - |\\n| day | View the trending list for the day. |\\n| week | View the trending list for the week. |\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"media_type\": {\"type\": \"string\", \"description\": \"media type\\nValid values: all,movie,tv,person\"}, \"time_window\": {\"type\": \"string\", \"description\": \"time window\\nValid values: day,week\"}}, \"required\": [\"media_type\", \"time_window\"]}}, {\"name\": \"GET_tv__tv_id__credits\", \"description\": \"Get the credits (cast and crew) that have been added to a TV show.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"tv_id\": {\"type\": \"integer\", \"description\": \"tv id\"}}, \"required\": [\"tv_id\"]}}, {\"name\": \"GET_person__person_id_\", \"description\": \"Get the primary person details by id.\\n\\nSupports `append_to_response`. Read more about this [here](#docTextSection:JdZq8ctmcxNqyLQjp).\\n\\n#### Recent Changes\\n\\n| **Date** | **Change** |\\n| - | - |\\n| July 17, 2018 | Added the `known_for_department` field. |\\n| April 26, 2018 | Added the [translations](#endpoint:CSaMjCxXAtGpxNGfS) method. |\\n| November 9, 2016 | Biographies are now translatable on TMDb. This means you can query person details with a language parameter. |\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"person_id\": {\"type\": \"integer\", \"description\": \"person id\"}}, \"required\": [\"person_id\"]}}]", "GraphQL_schema": "type GET_person__person_id_Root {\n  adult: Boolean\n  also_known_as: [String]\n  biography: String\n  birthday: Date\n  \"\"\"\n  Field \"deathday\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  deathday: JSON\n  gender: Int\n  \"\"\"\n  Field \"homepage\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  homepage: JSON\n  id: Int\n  imdb_id: String\n  known_for_department: String\n  name: String\n  place_of_birth: String\n  popularity: Float\n  profile_path: String\n}\n\ntype Query {\n  GET_person__person_id_(\n    person_id: String!\n    tmdb_access_token: String!\n  ): GET_person__person_id_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/person/$person_id;\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_trending__media_type___time_window_ResultsEntry {\n  adult: Boolean\n  backdrop_path: String\n  genre_ids: [Int]\n  id: Int\n  media_type: String\n  original_language: String\n  original_title: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  release_date: Date\n  title: String\n  video: Boolean\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_trending__media_type___time_window_Root {\n  page: Int\n  results: [GET_trending__media_type___time_window_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_trending__media_type___time_window_(\n    media_type: String!\n    time_window: String!\n    tmdb_access_token: String!\n  ): GET_trending__media_type___time_window_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/trending/$media_type;/$time_window;\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_tv__tv_id__credits_CastEntry {\n  adult: Boolean\n  character: String\n  credit_id: String\n  gender: Int\n  id: Int\n  known_for_department: String\n  name: String\n  order: Int\n  original_name: String\n  popularity: Float\n  profile_path: String\n}\n\ntype GET_tv__tv_id__credits_CrewEntry {\n  adult: Boolean\n  credit_id: String\n  department: String\n  gender: Int\n  id: Int\n  job: String\n  known_for_department: String\n  name: String\n  original_name: String\n  popularity: Float\n  profile_path: String\n}\n\ntype GET_tv__tv_id__credits_Root {\n  cast: [GET_tv__tv_id__credits_CastEntry]\n  crew: [GET_tv__tv_id__credits_CrewEntry]\n  id: Int\n}\n\ntype Query {\n  GET_tv__tv_id__credits(\n    tmdb_access_token: String!\n    tv_id: String!\n  ): GET_tv__tv_id__credits_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/tv/$tv_id;/credits\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\n", "utterance": "When is the birthday of the lead actor of today's most trending TV show?"}
{"domain": "tmdb", "input": "Function Signatures:\n\n[{\"name\": \"GET_tv_on_the_air\", \"description\": \"Get a list of shows that are currently on the air.\\n\\nThis query looks for any TV show that has an episode with an air date in the next 7 days.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"page\": {\"type\": \"integer\", \"description\": \"page\"}}, \"required\": []}}, {\"name\": \"GET_tv__tv_id_\", \"description\": \"Get the primary TV show details by id.\\n\\nSupports `append_to_response`. Read more about this [here](#docTextSection:JdZq8ctmcxNqyLQjp).\\n\\n#### Recent Changes\\n\\n| **Date** | **Change** |\\n| - | - |\\n| July 17, 2018 | We now return `last_episode_to_air` and `next_episode_to_air` fields. |\\n| March 12, 2018 | Networks return proper logos and we introduced SVG support. |\\n| March 8, 2018 | The `seasons` field now returns the translated names and overviews. |\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"tv_id\": {\"type\": \"integer\", \"description\": \"tv id\"}}, \"required\": [\"tv_id\"]}}]\n\nGraphQL schema:\n\ntype GET_tv_on_the_air_ResultsEntry {\n  adult: Boolean\n  backdrop_path: String\n  first_air_date: Date\n  genre_ids: [Int]\n  id: Int\n  name: String\n  origin_country: [String]\n  original_language: String\n  original_name: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_tv_on_the_air_Root {\n  page: Int\n  results: [GET_tv_on_the_air_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_tv_on_the_air(tmdb_access_token: String!): GET_tv_on_the_air_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/tv/on_the_air\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_tv__tv_id_CreatedByEntry {\n  credit_id: String\n  gender: Int\n  id: Int\n  name: String\n  original_name: String\n  profile_path: String\n}\n\ntype GET_tv__tv_id_GenresEntry {\n  id: Int\n  name: String\n}\n\ntype GET_tv__tv_id_LastEpisodeToAir {\n  air_date: Date\n  episode_number: Int\n  episode_type: String\n  id: Int\n  name: String\n  overview: String\n  production_code: String\n  runtime: Int\n  season_number: Int\n  show_id: Int\n  still_path: String\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_tv__tv_id_NetworksEntry {\n  id: Int\n  logo_path: String\n  name: String\n  origin_country: String\n}\n\ntype GET_tv__tv_id_ProductionCompaniesEntry {\n  id: Int\n  logo_path: String\n  name: String\n  origin_country: String\n}\n\ntype GET_tv__tv_id_ProductionCountriesEntry {\n  iso_3166_1: String\n  name: String\n}\n\ntype GET_tv__tv_id_Root {\n  adult: Boolean\n  backdrop_path: String\n  created_by: [GET_tv__tv_id_CreatedByEntry]\n  episode_run_time: [Int]\n  first_air_date: Date\n  genres: [GET_tv__tv_id_GenresEntry]\n  homepage: String\n  id: Int\n  in_production: Boolean\n  languages: [String]\n  last_air_date: Date\n  last_episode_to_air: GET_tv__tv_id_LastEpisodeToAir\n  name: String\n  networks: [GET_tv__tv_id_NetworksEntry]\n  \"\"\"\n  Field \"next_episode_to_air\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  next_episode_to_air: JSON\n  number_of_episodes: Int\n  number_of_seasons: Int\n  origin_country: [String]\n  original_language: String\n  original_name: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  production_companies: [GET_tv__tv_id_ProductionCompaniesEntry]\n  production_countries: [GET_tv__tv_id_ProductionCountriesEntry]\n  seasons: [GET_tv__tv_id_SeasonsEntry]\n  spoken_languages: [GET_tv__tv_id_SpokenLanguagesEntry]\n  status: String\n  tagline: String\n  type: String\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_tv__tv_id_SeasonsEntry {\n  air_date: Date\n  episode_count: Int\n  id: Int\n  name: String\n  overview: String\n  poster_path: String\n  season_number: Int\n  vote_average: Float\n}\n\ntype GET_tv__tv_id_SpokenLanguagesEntry {\n  english_name: String\n  iso_639_1: String\n  name: String\n}\n\ntype Query {\n  GET_tv__tv_id_(\n    tmdb_access_token: String!\n    tv_id: String!\n  ): GET_tv__tv_id_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/tv/$tv_id;\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\n\nUtterance: When did the most popular TV show currently on the air start?", "output": "response_obj = GET_tv_on_the_air()\nGET_tv__tv_id_(tv_id=response_obj.results[0].id)\n", "function_specs": "[{\"name\": \"GET_tv_on_the_air\", \"description\": \"Get a list of shows that are currently on the air.\\n\\nThis query looks for any TV show that has an episode with an air date in the next 7 days.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"page\": {\"type\": \"integer\", \"description\": \"page\"}}, \"required\": []}}, {\"name\": \"GET_tv__tv_id_\", \"description\": \"Get the primary TV show details by id.\\n\\nSupports `append_to_response`. Read more about this [here](#docTextSection:JdZq8ctmcxNqyLQjp).\\n\\n#### Recent Changes\\n\\n| **Date** | **Change** |\\n| - | - |\\n| July 17, 2018 | We now return `last_episode_to_air` and `next_episode_to_air` fields. |\\n| March 12, 2018 | Networks return proper logos and we introduced SVG support. |\\n| March 8, 2018 | The `seasons` field now returns the translated names and overviews. |\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"tv_id\": {\"type\": \"integer\", \"description\": \"tv id\"}}, \"required\": [\"tv_id\"]}}]", "GraphQL_schema": "type GET_tv_on_the_air_ResultsEntry {\n  adult: Boolean\n  backdrop_path: String\n  first_air_date: Date\n  genre_ids: [Int]\n  id: Int\n  name: String\n  origin_country: [String]\n  original_language: String\n  original_name: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_tv_on_the_air_Root {\n  page: Int\n  results: [GET_tv_on_the_air_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_tv_on_the_air(tmdb_access_token: String!): GET_tv_on_the_air_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/tv/on_the_air\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_tv__tv_id_CreatedByEntry {\n  credit_id: String\n  gender: Int\n  id: Int\n  name: String\n  original_name: String\n  profile_path: String\n}\n\ntype GET_tv__tv_id_GenresEntry {\n  id: Int\n  name: String\n}\n\ntype GET_tv__tv_id_LastEpisodeToAir {\n  air_date: Date\n  episode_number: Int\n  episode_type: String\n  id: Int\n  name: String\n  overview: String\n  production_code: String\n  runtime: Int\n  season_number: Int\n  show_id: Int\n  still_path: String\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_tv__tv_id_NetworksEntry {\n  id: Int\n  logo_path: String\n  name: String\n  origin_country: String\n}\n\ntype GET_tv__tv_id_ProductionCompaniesEntry {\n  id: Int\n  logo_path: String\n  name: String\n  origin_country: String\n}\n\ntype GET_tv__tv_id_ProductionCountriesEntry {\n  iso_3166_1: String\n  name: String\n}\n\ntype GET_tv__tv_id_Root {\n  adult: Boolean\n  backdrop_path: String\n  created_by: [GET_tv__tv_id_CreatedByEntry]\n  episode_run_time: [Int]\n  first_air_date: Date\n  genres: [GET_tv__tv_id_GenresEntry]\n  homepage: String\n  id: Int\n  in_production: Boolean\n  languages: [String]\n  last_air_date: Date\n  last_episode_to_air: GET_tv__tv_id_LastEpisodeToAir\n  name: String\n  networks: [GET_tv__tv_id_NetworksEntry]\n  \"\"\"\n  Field \"next_episode_to_air\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  next_episode_to_air: JSON\n  number_of_episodes: Int\n  number_of_seasons: Int\n  origin_country: [String]\n  original_language: String\n  original_name: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  production_companies: [GET_tv__tv_id_ProductionCompaniesEntry]\n  production_countries: [GET_tv__tv_id_ProductionCountriesEntry]\n  seasons: [GET_tv__tv_id_SeasonsEntry]\n  spoken_languages: [GET_tv__tv_id_SpokenLanguagesEntry]\n  status: String\n  tagline: String\n  type: String\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_tv__tv_id_SeasonsEntry {\n  air_date: Date\n  episode_count: Int\n  id: Int\n  name: String\n  overview: String\n  poster_path: String\n  season_number: Int\n  vote_average: Float\n}\n\ntype GET_tv__tv_id_SpokenLanguagesEntry {\n  english_name: String\n  iso_639_1: String\n  name: String\n}\n\ntype Query {\n  GET_tv__tv_id_(\n    tmdb_access_token: String!\n    tv_id: String!\n  ): GET_tv__tv_id_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/tv/$tv_id;\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\n", "utterance": "When did the most popular TV show currently on the air start?"}
{"domain": "tmdb", "input": "Function Signatures:\n\n[{\"name\": \"GET_search_person\", \"description\": \"Search for people.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"query\": {\"type\": \"string\", \"description\": \"query\"}, \"page\": {\"type\": \"integer\", \"description\": \"page\"}, \"include_adult\": {\"type\": \"boolean\", \"description\": \"include adult\"}, \"region\": {\"type\": \"string\", \"description\": \"region\"}}, \"required\": [\"query\"]}}, {\"name\": \"GET_person__person_id__movie_credits\", \"description\": \"Get the movie credits for a person, the results contains various information such as popularity and release date.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"person_id\": {\"type\": \"integer\", \"description\": \"person id\"}}, \"required\": [\"person_id\"]}}]\n\nGraphQL schema:\n\ntype GET_search_person_KnownForEntry {\n  adult: Boolean\n  backdrop_path: String\n  genre_ids: [Int]\n  id: Int\n  media_type: String\n  original_language: String\n  original_title: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  release_date: Date\n  title: String\n  video: Boolean\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_search_person_ResultsEntry {\n  adult: Boolean\n  gender: Int\n  id: Int\n  known_for: [GET_search_person_KnownForEntry]\n  known_for_department: String\n  name: String\n  original_name: String\n  popularity: Float\n  profile_path: String\n}\n\ntype GET_search_person_Root {\n  page: Int\n  results: [GET_search_person_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_search_person(\n    query: String\n    tmdb_access_token: String!\n  ): GET_search_person_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/search/person\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_person__person_id__movie_credits_CastEntry {\n  adult: Boolean\n  backdrop_path: String\n  character: String\n  credit_id: String\n  genre_ids: [Int]\n  id: Int\n  order: Int\n  original_language: String\n  original_title: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  release_date: String\n  title: String\n  video: Boolean\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_person__person_id__movie_credits_CrewEntry {\n  adult: Boolean\n  backdrop_path: String\n  credit_id: String\n  department: String\n  genre_ids: [Int]\n  id: Int\n  job: String\n  original_language: String\n  original_title: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  release_date: String\n  title: String\n  video: Boolean\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_person__person_id__movie_credits_Root {\n  cast: [GET_person__person_id__movie_credits_CastEntry]\n  crew: [GET_person__person_id__movie_credits_CrewEntry]\n  id: Int\n}\n\ntype Query {\n  GET_person__person_id__movie_credits(\n    person_id: String!\n    tmdb_access_token: String!\n  ): GET_person__person_id__movie_credits_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/person/$person_id;/movie_credits\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\n\nUtterance: Who is the director of Leonardo DiCaprio's latest movie?", "output": "response_obj = GET_search_person(query=\"Leonardo DiCaprio\")\nGET_person__person_id__movie_credits(person_id=response_obj.results[0].id)\n", "function_specs": "[{\"name\": \"GET_search_person\", \"description\": \"Search for people.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"query\": {\"type\": \"string\", \"description\": \"query\"}, \"page\": {\"type\": \"integer\", \"description\": \"page\"}, \"include_adult\": {\"type\": \"boolean\", \"description\": \"include adult\"}, \"region\": {\"type\": \"string\", \"description\": \"region\"}}, \"required\": [\"query\"]}}, {\"name\": \"GET_person__person_id__movie_credits\", \"description\": \"Get the movie credits for a person, the results contains various information such as popularity and release date.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"person_id\": {\"type\": \"integer\", \"description\": \"person id\"}}, \"required\": [\"person_id\"]}}]", "GraphQL_schema": "type GET_search_person_KnownForEntry {\n  adult: Boolean\n  backdrop_path: String\n  genre_ids: [Int]\n  id: Int\n  media_type: String\n  original_language: String\n  original_title: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  release_date: Date\n  title: String\n  video: Boolean\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_search_person_ResultsEntry {\n  adult: Boolean\n  gender: Int\n  id: Int\n  known_for: [GET_search_person_KnownForEntry]\n  known_for_department: String\n  name: String\n  original_name: String\n  popularity: Float\n  profile_path: String\n}\n\ntype GET_search_person_Root {\n  page: Int\n  results: [GET_search_person_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_search_person(\n    query: String\n    tmdb_access_token: String!\n  ): GET_search_person_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/search/person\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_person__person_id__movie_credits_CastEntry {\n  adult: Boolean\n  backdrop_path: String\n  character: String\n  credit_id: String\n  genre_ids: [Int]\n  id: Int\n  order: Int\n  original_language: String\n  original_title: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  release_date: String\n  title: String\n  video: Boolean\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_person__person_id__movie_credits_CrewEntry {\n  adult: Boolean\n  backdrop_path: String\n  credit_id: String\n  department: String\n  genre_ids: [Int]\n  id: Int\n  job: String\n  original_language: String\n  original_title: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  release_date: String\n  title: String\n  video: Boolean\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_person__person_id__movie_credits_Root {\n  cast: [GET_person__person_id__movie_credits_CastEntry]\n  crew: [GET_person__person_id__movie_credits_CrewEntry]\n  id: Int\n}\n\ntype Query {\n  GET_person__person_id__movie_credits(\n    person_id: String!\n    tmdb_access_token: String!\n  ): GET_person__person_id__movie_credits_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/person/$person_id;/movie_credits\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\n", "utterance": "Who is the director of Leonardo DiCaprio's latest movie?"}
{"domain": "tmdb", "input": "Function Signatures:\n\n[{\"name\": \"GET_search_person\", \"description\": \"Search for people.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"query\": {\"type\": \"string\", \"description\": \"query\"}, \"page\": {\"type\": \"integer\", \"description\": \"page\"}, \"include_adult\": {\"type\": \"boolean\", \"description\": \"include adult\"}, \"region\": {\"type\": \"string\", \"description\": \"region\"}}, \"required\": [\"query\"]}}, {\"name\": \"GET_person__person_id__movie_credits\", \"description\": \"Get the movie credits for a person, the results contains various information such as popularity and release date.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"person_id\": {\"type\": \"integer\", \"description\": \"person id\"}}, \"required\": [\"person_id\"]}}]\n\nGraphQL schema:\n\ntype GET_search_person_KnownForEntry {\n  adult: Boolean\n  backdrop_path: String\n  genre_ids: [Int]\n  id: Int\n  media_type: String\n  original_language: String\n  original_title: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  release_date: Date\n  title: String\n  video: Boolean\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_search_person_ResultsEntry {\n  adult: Boolean\n  gender: Int\n  id: Int\n  known_for: [GET_search_person_KnownForEntry]\n  known_for_department: String\n  name: String\n  original_name: String\n  popularity: Float\n  profile_path: String\n}\n\ntype GET_search_person_Root {\n  page: Int\n  results: [GET_search_person_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_search_person(\n    query: String\n    tmdb_access_token: String!\n  ): GET_search_person_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/search/person\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_person__person_id__movie_credits_CastEntry {\n  adult: Boolean\n  backdrop_path: String\n  character: String\n  credit_id: String\n  genre_ids: [Int]\n  id: Int\n  order: Int\n  original_language: String\n  original_title: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  release_date: String\n  title: String\n  video: Boolean\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_person__person_id__movie_credits_CrewEntry {\n  adult: Boolean\n  backdrop_path: String\n  credit_id: String\n  department: String\n  genre_ids: [Int]\n  id: Int\n  job: String\n  original_language: String\n  original_title: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  release_date: String\n  title: String\n  video: Boolean\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_person__person_id__movie_credits_Root {\n  cast: [GET_person__person_id__movie_credits_CastEntry]\n  crew: [GET_person__person_id__movie_credits_CrewEntry]\n  id: Int\n}\n\ntype Query {\n  GET_person__person_id__movie_credits(\n    person_id: String!\n    tmdb_access_token: String!\n  ): GET_person__person_id__movie_credits_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/person/$person_id;/movie_credits\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\n\nUtterance: give me the number of movies directed by Sofia Coppola", "output": "response_obj = GET_search_person(query=\"Sofia Coppola\")\nGET_person__person_id__movie_credits(person_id=response_obj.results[0].id)\n", "function_specs": "[{\"name\": \"GET_search_person\", \"description\": \"Search for people.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"query\": {\"type\": \"string\", \"description\": \"query\"}, \"page\": {\"type\": \"integer\", \"description\": \"page\"}, \"include_adult\": {\"type\": \"boolean\", \"description\": \"include adult\"}, \"region\": {\"type\": \"string\", \"description\": \"region\"}}, \"required\": [\"query\"]}}, {\"name\": \"GET_person__person_id__movie_credits\", \"description\": \"Get the movie credits for a person, the results contains various information such as popularity and release date.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"person_id\": {\"type\": \"integer\", \"description\": \"person id\"}}, \"required\": [\"person_id\"]}}]", "GraphQL_schema": "type GET_search_person_KnownForEntry {\n  adult: Boolean\n  backdrop_path: String\n  genre_ids: [Int]\n  id: Int\n  media_type: String\n  original_language: String\n  original_title: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  release_date: Date\n  title: String\n  video: Boolean\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_search_person_ResultsEntry {\n  adult: Boolean\n  gender: Int\n  id: Int\n  known_for: [GET_search_person_KnownForEntry]\n  known_for_department: String\n  name: String\n  original_name: String\n  popularity: Float\n  profile_path: String\n}\n\ntype GET_search_person_Root {\n  page: Int\n  results: [GET_search_person_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_search_person(\n    query: String\n    tmdb_access_token: String!\n  ): GET_search_person_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/search/person\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_person__person_id__movie_credits_CastEntry {\n  adult: Boolean\n  backdrop_path: String\n  character: String\n  credit_id: String\n  genre_ids: [Int]\n  id: Int\n  order: Int\n  original_language: String\n  original_title: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  release_date: String\n  title: String\n  video: Boolean\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_person__person_id__movie_credits_CrewEntry {\n  adult: Boolean\n  backdrop_path: String\n  credit_id: String\n  department: String\n  genre_ids: [Int]\n  id: Int\n  job: String\n  original_language: String\n  original_title: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  release_date: String\n  title: String\n  video: Boolean\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_person__person_id__movie_credits_Root {\n  cast: [GET_person__person_id__movie_credits_CastEntry]\n  crew: [GET_person__person_id__movie_credits_CrewEntry]\n  id: Int\n}\n\ntype Query {\n  GET_person__person_id__movie_credits(\n    person_id: String!\n    tmdb_access_token: String!\n  ): GET_person__person_id__movie_credits_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/person/$person_id;/movie_credits\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\n", "utterance": "give me the number of movies directed by Sofia Coppola"}
{"domain": "tmdb", "input": "Function Signatures:\n\n[{\"name\": \"GET_search_company\", \"description\": \"Search for companies.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"query\": {\"type\": \"string\", \"description\": \"query\"}, \"page\": {\"type\": \"integer\", \"description\": \"page\"}}, \"required\": [\"query\"]}}, {\"name\": \"GET_company__company_id_\", \"description\": \"Get a companies details by id.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"company_id\": {\"type\": \"integer\", \"description\": \"company id\"}}, \"required\": [\"company_id\"]}}]\n\nGraphQL schema:\n\ntype GET_search_company_ResultsEntry {\n  id: Int\n  logo_path: String\n  name: String\n  origin_country: String\n}\n\ntype GET_search_company_Root {\n  page: Int\n  results: [GET_search_company_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_search_company(\n    query: String\n    tmdb_access_token: String!\n  ): GET_search_company_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/search/company\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_company__company_id_Root {\n  description: String\n  headquarters: String\n  homepage: String\n  id: Int\n  logo_path: String\n  name: String\n  origin_country: String\n  \"\"\"\n  Field \"parent_company\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  parent_company: JSON\n}\n\ntype Query {\n  GET_company__company_id_(\n    company_id: String!\n    tmdb_access_token: String!\n  ): GET_company__company_id_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/company/$company_id;\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\n\nUtterance: tell me where the company \"universal pictures\" was founded?", "output": "response_obj = GET_search_company(query=\"universal pictures\")\nGET_company__company_id_(company_id=response_obj.results[0].id)\n", "function_specs": "[{\"name\": \"GET_search_company\", \"description\": \"Search for companies.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"query\": {\"type\": \"string\", \"description\": \"query\"}, \"page\": {\"type\": \"integer\", \"description\": \"page\"}}, \"required\": [\"query\"]}}, {\"name\": \"GET_company__company_id_\", \"description\": \"Get a companies details by id.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"company_id\": {\"type\": \"integer\", \"description\": \"company id\"}}, \"required\": [\"company_id\"]}}]", "GraphQL_schema": "type GET_search_company_ResultsEntry {\n  id: Int\n  logo_path: String\n  name: String\n  origin_country: String\n}\n\ntype GET_search_company_Root {\n  page: Int\n  results: [GET_search_company_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_search_company(\n    query: String\n    tmdb_access_token: String!\n  ): GET_search_company_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/search/company\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_company__company_id_Root {\n  description: String\n  headquarters: String\n  homepage: String\n  id: Int\n  logo_path: String\n  name: String\n  origin_country: String\n  \"\"\"\n  Field \"parent_company\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  parent_company: JSON\n}\n\ntype Query {\n  GET_company__company_id_(\n    company_id: String!\n    tmdb_access_token: String!\n  ): GET_company__company_id_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/company/$company_id;\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\n", "utterance": "tell me where the company \"universal pictures\" was founded?"}
{"domain": "tmdb", "input": "Function Signatures:\n\n[{\"name\": \"GET_search_tv\", \"description\": \"Search for a TV show.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"page\": {\"type\": \"integer\", \"description\": \"page\"}, \"query\": {\"type\": \"string\", \"description\": \"query\"}, \"include_adult\": {\"type\": \"boolean\", \"description\": \"include adult\"}, \"first_air_date_year\": {\"type\": \"integer\", \"description\": \"first air date year\"}}, \"required\": [\"query\"]}}, {\"name\": \"GET_tv__tv_id__season__season_number__credits\", \"description\": \"Get the credits for TV season.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"tv_id\": {\"type\": \"integer\", \"description\": \"tv id\"}, \"season_number\": {\"type\": \"integer\", \"description\": \"season number\"}}, \"required\": [\"tv_id\", \"season_number\"]}}]\n\nGraphQL schema:\n\ntype GET_search_tv_ResultsEntry {\n  adult: Boolean\n  backdrop_path: String\n  first_air_date: Date\n  genre_ids: [Int]\n  id: Int\n  name: String\n  origin_country: [String]\n  original_language: String\n  original_name: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_search_tv_Root {\n  page: Int\n  results: [GET_search_tv_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_search_tv(query: String, tmdb_access_token: String!): GET_search_tv_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/search/tv\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_tv__tv_id__season__season_number__credits_CastEntry {\n  adult: Boolean\n  character: String\n  credit_id: String\n  gender: Int\n  id: Int\n  known_for_department: String\n  name: String\n  order: Int\n  original_name: String\n  popularity: Float\n  profile_path: String\n}\n\ntype GET_tv__tv_id__season__season_number__credits_CrewEntry {\n  adult: Boolean\n  credit_id: String\n  department: String\n  gender: Int\n  id: Int\n  job: String\n  known_for_department: String\n  name: String\n  original_name: String\n  popularity: Float\n  profile_path: String\n}\n\ntype GET_tv__tv_id__season__season_number__credits_Root {\n  cast: [GET_tv__tv_id__season__season_number__credits_CastEntry]\n  crew: [GET_tv__tv_id__season__season_number__credits_CrewEntry]\n  id: Int\n}\n\ntype Query {\n  GET_tv__tv_id__season__season_number__credits(\n    season_number: String!\n    tmdb_access_token: String!\n    tv_id: String!\n  ): GET_tv__tv_id__season__season_number__credits_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/tv/$tv_id;/season/$season_number;/credits\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\n\nUtterance: Who directed the third episode of the second season of Black Mirror?", "output": "response_obj = GET_search_tv(query=\"Black Mirror\")\nGET_tv__tv_id__season__season_number__credits(tv_id=response_obj.results[0].id, season_number=2)\n", "function_specs": "[{\"name\": \"GET_search_tv\", \"description\": \"Search for a TV show.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"page\": {\"type\": \"integer\", \"description\": \"page\"}, \"query\": {\"type\": \"string\", \"description\": \"query\"}, \"include_adult\": {\"type\": \"boolean\", \"description\": \"include adult\"}, \"first_air_date_year\": {\"type\": \"integer\", \"description\": \"first air date year\"}}, \"required\": [\"query\"]}}, {\"name\": \"GET_tv__tv_id__season__season_number__credits\", \"description\": \"Get the credits for TV season.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"tv_id\": {\"type\": \"integer\", \"description\": \"tv id\"}, \"season_number\": {\"type\": \"integer\", \"description\": \"season number\"}}, \"required\": [\"tv_id\", \"season_number\"]}}]", "GraphQL_schema": "type GET_search_tv_ResultsEntry {\n  adult: Boolean\n  backdrop_path: String\n  first_air_date: Date\n  genre_ids: [Int]\n  id: Int\n  name: String\n  origin_country: [String]\n  original_language: String\n  original_name: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_search_tv_Root {\n  page: Int\n  results: [GET_search_tv_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_search_tv(query: String, tmdb_access_token: String!): GET_search_tv_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/search/tv\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_tv__tv_id__season__season_number__credits_CastEntry {\n  adult: Boolean\n  character: String\n  credit_id: String\n  gender: Int\n  id: Int\n  known_for_department: String\n  name: String\n  order: Int\n  original_name: String\n  popularity: Float\n  profile_path: String\n}\n\ntype GET_tv__tv_id__season__season_number__credits_CrewEntry {\n  adult: Boolean\n  credit_id: String\n  department: String\n  gender: Int\n  id: Int\n  job: String\n  known_for_department: String\n  name: String\n  original_name: String\n  popularity: Float\n  profile_path: String\n}\n\ntype GET_tv__tv_id__season__season_number__credits_Root {\n  cast: [GET_tv__tv_id__season__season_number__credits_CastEntry]\n  crew: [GET_tv__tv_id__season__season_number__credits_CrewEntry]\n  id: Int\n}\n\ntype Query {\n  GET_tv__tv_id__season__season_number__credits(\n    season_number: String!\n    tmdb_access_token: String!\n    tv_id: String!\n  ): GET_tv__tv_id__season__season_number__credits_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/tv/$tv_id;/season/$season_number;/credits\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\n", "utterance": "Who directed the third episode of the second season of Black Mirror?"}
{"domain": "tmdb", "input": "Function Signatures:\n\n[{\"name\": \"GET_search_tv\", \"description\": \"Search for a TV show.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"page\": {\"type\": \"integer\", \"description\": \"page\"}, \"query\": {\"type\": \"string\", \"description\": \"query\"}, \"include_adult\": {\"type\": \"boolean\", \"description\": \"include adult\"}, \"first_air_date_year\": {\"type\": \"integer\", \"description\": \"first air date year\"}}, \"required\": [\"query\"]}}, {\"name\": \"GET_tv__tv_id__recommendations\", \"description\": \"Get the list of TV show recommendations for this item.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"tv_id\": {\"type\": \"integer\", \"description\": \"tv id\"}, \"page\": {\"type\": \"integer\", \"description\": \"page\"}}, \"required\": [\"tv_id\"]}}]\n\nGraphQL schema:\n\ntype GET_search_tv_ResultsEntry {\n  adult: Boolean\n  backdrop_path: String\n  first_air_date: Date\n  genre_ids: [Int]\n  id: Int\n  name: String\n  origin_country: [String]\n  original_language: String\n  original_name: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_search_tv_Root {\n  page: Int\n  results: [GET_search_tv_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_search_tv(query: String, tmdb_access_token: String!): GET_search_tv_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/search/tv\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_tv__tv_id__recommendations_ResultsEntry {\n  adult: Boolean\n  backdrop_path: String\n  first_air_date: Date\n  genre_ids: [Int]\n  id: Int\n  media_type: String\n  name: String\n  origin_country: [String]\n  original_language: String\n  original_name: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_tv__tv_id__recommendations_Root {\n  page: Int\n  results: [GET_tv__tv_id__recommendations_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_tv__tv_id__recommendations(\n    tmdb_access_token: String!\n    tv_id: String!\n  ): GET_tv__tv_id__recommendations_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/tv/$tv_id;/recommendations\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\n\nUtterance: I'm watching a TV show called The Last Of Us and I need some more recommendations", "output": "response_obj = GET_search_tv(query=\"The Last Of Us\")\nGET_tv__tv_id__recommendations(tv_id=response_obj.results[0].id)\n", "function_specs": "[{\"name\": \"GET_search_tv\", \"description\": \"Search for a TV show.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"page\": {\"type\": \"integer\", \"description\": \"page\"}, \"query\": {\"type\": \"string\", \"description\": \"query\"}, \"include_adult\": {\"type\": \"boolean\", \"description\": \"include adult\"}, \"first_air_date_year\": {\"type\": \"integer\", \"description\": \"first air date year\"}}, \"required\": [\"query\"]}}, {\"name\": \"GET_tv__tv_id__recommendations\", \"description\": \"Get the list of TV show recommendations for this item.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"tv_id\": {\"type\": \"integer\", \"description\": \"tv id\"}, \"page\": {\"type\": \"integer\", \"description\": \"page\"}}, \"required\": [\"tv_id\"]}}]", "GraphQL_schema": "type GET_search_tv_ResultsEntry {\n  adult: Boolean\n  backdrop_path: String\n  first_air_date: Date\n  genre_ids: [Int]\n  id: Int\n  name: String\n  origin_country: [String]\n  original_language: String\n  original_name: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_search_tv_Root {\n  page: Int\n  results: [GET_search_tv_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_search_tv(query: String, tmdb_access_token: String!): GET_search_tv_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/search/tv\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_tv__tv_id__recommendations_ResultsEntry {\n  adult: Boolean\n  backdrop_path: String\n  first_air_date: Date\n  genre_ids: [Int]\n  id: Int\n  media_type: String\n  name: String\n  origin_country: [String]\n  original_language: String\n  original_name: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_tv__tv_id__recommendations_Root {\n  page: Int\n  results: [GET_tv__tv_id__recommendations_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_tv__tv_id__recommendations(\n    tmdb_access_token: String!\n    tv_id: String!\n  ): GET_tv__tv_id__recommendations_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/tv/$tv_id;/recommendations\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\n", "utterance": "I'm watching a TV show called The Last Of Us and I need some more recommendations"}
{"domain": "tmdb", "input": "Function Signatures:\n\n[{\"name\": \"GET_movie_now_playing\", \"description\": \"Get a list of movies in theatres. This is a release type query that looks for all movies that have a release type of 2 or 3 within the specified date range.\\n\\nYou can optionally specify a `region` prameter which will narrow the search to only look for theatrical release dates within the specified country.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"page\": {\"type\": \"integer\", \"description\": \"page\"}, \"region\": {\"type\": \"string\", \"description\": \"region\"}}, \"required\": []}}, {\"name\": \"GET_movie__movie_id__images\", \"description\": \"Get the images that belong to a movie.\\n\\nQuerying images with a `language` parameter will filter the results. If you want to include a fallback language (especially useful for backdrops) you can use the `include_image_language` parameter. This should be a comma seperated value like so: `include_image_language=en,null`.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"movie_id\": {\"type\": \"integer\", \"description\": \"movie id\"}, \"include_image_language\": {\"type\": \"string\", \"description\": \"include image language\"}}, \"required\": [\"movie_id\"]}}]\n\nGraphQL schema:\n\ntype GET_movie_now_playing_Dates {\n  maximum: Date\n  minimum: Date\n}\n\ntype GET_movie_now_playing_ResultsEntry {\n  adult: Boolean\n  backdrop_path: String\n  genre_ids: [Int]\n  id: Int\n  original_language: String\n  original_title: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  release_date: Date\n  title: String\n  video: Boolean\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_movie_now_playing_Root {\n  dates: GET_movie_now_playing_Dates\n  page: Int\n  results: [GET_movie_now_playing_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_movie_now_playing(tmdb_access_token: String!): GET_movie_now_playing_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/movie/now_playing\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_movie__movie_id__images_BackdropsEntry {\n  aspect_ratio: Float\n  file_path: String\n  height: Int\n  iso_639_1: String\n  vote_average: Float\n  vote_count: Int\n  width: Int\n}\n\ntype GET_movie__movie_id__images_LogosEntry {\n  aspect_ratio: Float\n  file_path: String\n  height: Int\n  iso_639_1: String\n  vote_average: Float\n  vote_count: Int\n  width: Int\n}\n\ntype GET_movie__movie_id__images_PostersEntry {\n  aspect_ratio: Float\n  file_path: String\n  height: Int\n  iso_639_1: String\n  vote_average: Float\n  vote_count: Int\n  width: Int\n}\n\ntype GET_movie__movie_id__images_Root {\n  backdrops: [GET_movie__movie_id__images_BackdropsEntry]\n  id: Int\n  logos: [GET_movie__movie_id__images_LogosEntry]\n  posters: [GET_movie__movie_id__images_PostersEntry]\n}\n\ntype Query {\n  GET_movie__movie_id__images(\n    movie_id: String!\n    tmdb_access_token: String!\n  ): GET_movie__movie_id__images_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/movie/$movie_id;/images\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\n\nUtterance: give me one image of the movie that is currently showing in theaters", "output": "response_obj = GET_movie_now_playing()\nGET_movie__movie_id__images(movie_id=response_obj.results[0].id)\n", "function_specs": "[{\"name\": \"GET_movie_now_playing\", \"description\": \"Get a list of movies in theatres. This is a release type query that looks for all movies that have a release type of 2 or 3 within the specified date range.\\n\\nYou can optionally specify a `region` prameter which will narrow the search to only look for theatrical release dates within the specified country.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"page\": {\"type\": \"integer\", \"description\": \"page\"}, \"region\": {\"type\": \"string\", \"description\": \"region\"}}, \"required\": []}}, {\"name\": \"GET_movie__movie_id__images\", \"description\": \"Get the images that belong to a movie.\\n\\nQuerying images with a `language` parameter will filter the results. If you want to include a fallback language (especially useful for backdrops) you can use the `include_image_language` parameter. This should be a comma seperated value like so: `include_image_language=en,null`.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"movie_id\": {\"type\": \"integer\", \"description\": \"movie id\"}, \"include_image_language\": {\"type\": \"string\", \"description\": \"include image language\"}}, \"required\": [\"movie_id\"]}}]", "GraphQL_schema": "type GET_movie_now_playing_Dates {\n  maximum: Date\n  minimum: Date\n}\n\ntype GET_movie_now_playing_ResultsEntry {\n  adult: Boolean\n  backdrop_path: String\n  genre_ids: [Int]\n  id: Int\n  original_language: String\n  original_title: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  release_date: Date\n  title: String\n  video: Boolean\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_movie_now_playing_Root {\n  dates: GET_movie_now_playing_Dates\n  page: Int\n  results: [GET_movie_now_playing_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_movie_now_playing(tmdb_access_token: String!): GET_movie_now_playing_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/movie/now_playing\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_movie__movie_id__images_BackdropsEntry {\n  aspect_ratio: Float\n  file_path: String\n  height: Int\n  iso_639_1: String\n  vote_average: Float\n  vote_count: Int\n  width: Int\n}\n\ntype GET_movie__movie_id__images_LogosEntry {\n  aspect_ratio: Float\n  file_path: String\n  height: Int\n  iso_639_1: String\n  vote_average: Float\n  vote_count: Int\n  width: Int\n}\n\ntype GET_movie__movie_id__images_PostersEntry {\n  aspect_ratio: Float\n  file_path: String\n  height: Int\n  iso_639_1: String\n  vote_average: Float\n  vote_count: Int\n  width: Int\n}\n\ntype GET_movie__movie_id__images_Root {\n  backdrops: [GET_movie__movie_id__images_BackdropsEntry]\n  id: Int\n  logos: [GET_movie__movie_id__images_LogosEntry]\n  posters: [GET_movie__movie_id__images_PostersEntry]\n}\n\ntype Query {\n  GET_movie__movie_id__images(\n    movie_id: String!\n    tmdb_access_token: String!\n  ): GET_movie__movie_id__images_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/movie/$movie_id;/images\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\n", "utterance": "give me one image of the movie that is currently showing in theaters"}
{"domain": "tmdb", "input": "Function Signatures:\n\n[{\"name\": \"GET_tv_on_the_air\", \"description\": \"Get a list of shows that are currently on the air.\\n\\nThis query looks for any TV show that has an episode with an air date in the next 7 days.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"page\": {\"type\": \"integer\", \"description\": \"page\"}}, \"required\": []}}, {\"name\": \"GET_tv__tv_id__credits\", \"description\": \"Get the credits (cast and crew) that have been added to a TV show.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"tv_id\": {\"type\": \"integer\", \"description\": \"tv id\"}}, \"required\": [\"tv_id\"]}}]\n\nGraphQL schema:\n\ntype GET_tv_on_the_air_ResultsEntry {\n  adult: Boolean\n  backdrop_path: String\n  first_air_date: Date\n  genre_ids: [Int]\n  id: Int\n  name: String\n  origin_country: [String]\n  original_language: String\n  original_name: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_tv_on_the_air_Root {\n  page: Int\n  results: [GET_tv_on_the_air_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_tv_on_the_air(tmdb_access_token: String!): GET_tv_on_the_air_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/tv/on_the_air\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_tv__tv_id__credits_CastEntry {\n  adult: Boolean\n  character: String\n  credit_id: String\n  gender: Int\n  id: Int\n  known_for_department: String\n  name: String\n  order: Int\n  original_name: String\n  popularity: Float\n  profile_path: String\n}\n\ntype GET_tv__tv_id__credits_CrewEntry {\n  adult: Boolean\n  credit_id: String\n  department: String\n  gender: Int\n  id: Int\n  job: String\n  known_for_department: String\n  name: String\n  original_name: String\n  popularity: Float\n  profile_path: String\n}\n\ntype GET_tv__tv_id__credits_Root {\n  cast: [GET_tv__tv_id__credits_CastEntry]\n  crew: [GET_tv__tv_id__credits_CrewEntry]\n  id: Int\n}\n\ntype Query {\n  GET_tv__tv_id__credits(\n    tmdb_access_token: String!\n    tv_id: String!\n  ): GET_tv__tv_id__credits_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/tv/$tv_id;/credits\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\n\nUtterance: tell me the cast of a TV show on the air", "output": "response_obj = GET_tv_on_the_air()\nGET_tv__tv_id__credits(tv_id=response_obj.results[0].id)\n", "function_specs": "[{\"name\": \"GET_tv_on_the_air\", \"description\": \"Get a list of shows that are currently on the air.\\n\\nThis query looks for any TV show that has an episode with an air date in the next 7 days.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"page\": {\"type\": \"integer\", \"description\": \"page\"}}, \"required\": []}}, {\"name\": \"GET_tv__tv_id__credits\", \"description\": \"Get the credits (cast and crew) that have been added to a TV show.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"tv_id\": {\"type\": \"integer\", \"description\": \"tv id\"}}, \"required\": [\"tv_id\"]}}]", "GraphQL_schema": "type GET_tv_on_the_air_ResultsEntry {\n  adult: Boolean\n  backdrop_path: String\n  first_air_date: Date\n  genre_ids: [Int]\n  id: Int\n  name: String\n  origin_country: [String]\n  original_language: String\n  original_name: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_tv_on_the_air_Root {\n  page: Int\n  results: [GET_tv_on_the_air_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_tv_on_the_air(tmdb_access_token: String!): GET_tv_on_the_air_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/tv/on_the_air\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_tv__tv_id__credits_CastEntry {\n  adult: Boolean\n  character: String\n  credit_id: String\n  gender: Int\n  id: Int\n  known_for_department: String\n  name: String\n  order: Int\n  original_name: String\n  popularity: Float\n  profile_path: String\n}\n\ntype GET_tv__tv_id__credits_CrewEntry {\n  adult: Boolean\n  credit_id: String\n  department: String\n  gender: Int\n  id: Int\n  job: String\n  known_for_department: String\n  name: String\n  original_name: String\n  popularity: Float\n  profile_path: String\n}\n\ntype GET_tv__tv_id__credits_Root {\n  cast: [GET_tv__tv_id__credits_CastEntry]\n  crew: [GET_tv__tv_id__credits_CrewEntry]\n  id: Int\n}\n\ntype Query {\n  GET_tv__tv_id__credits(\n    tmdb_access_token: String!\n    tv_id: String!\n  ): GET_tv__tv_id__credits_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/tv/$tv_id;/credits\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\n", "utterance": "tell me the cast of a TV show on the air"}
{"domain": "tmdb", "input": "Function Signatures:\n\n[{\"name\": \"GET_search_company\", \"description\": \"Search for companies.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"query\": {\"type\": \"string\", \"description\": \"query\"}, \"page\": {\"type\": \"integer\", \"description\": \"page\"}}, \"required\": [\"query\"]}}, {\"name\": \"GET_company__company_id__images\", \"description\": \"Get a companies logos by id.\\n\\nThere are two image formats that are supported for companies, PNG's and SVG's. You can see which type the original file is by looking at the `file_type` field. We prefer SVG's as they are resolution independent and as such, the width and height are only there to reflect the original asset that was uploaded. An SVG can be scaled properly beyond those dimensions if you call them as a PNG.\\n\\nFor more information about how SVG's and PNG's can be used, take a read through [this document](#docTextSection:mXP9B2uzoDJFguDZv).\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"company_id\": {\"type\": \"integer\", \"description\": \"company id\"}}, \"required\": [\"company_id\"]}}]\n\nGraphQL schema:\n\ntype GET_search_company_ResultsEntry {\n  id: Int\n  logo_path: String\n  name: String\n  origin_country: String\n}\n\ntype GET_search_company_Root {\n  page: Int\n  results: [GET_search_company_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_search_company(\n    query: String\n    tmdb_access_token: String!\n  ): GET_search_company_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/search/company\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_company__company_id__images_LogosEntry {\n  aspect_ratio: Float\n  file_path: String\n  file_type: String\n  height: Int\n  id: String\n  vote_average: Float\n  vote_count: Int\n  width: Int\n}\n\ntype GET_company__company_id__images_Root {\n  id: Int\n  logos: [GET_company__company_id__images_LogosEntry]\n}\n\ntype Query {\n  GET_company__company_id__images(\n    company_id: String!\n    tmdb_access_token: String!\n  ): GET_company__company_id__images_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/company/$company_id;/images\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\n\nUtterance: What is the logo of the Walt Disney?", "output": "response_obj = GET_search_company(query=\"Walt Disney\")\nGET_company__company_id__images(company_id=response_obj.results[0].id)\n", "function_specs": "[{\"name\": \"GET_search_company\", \"description\": \"Search for companies.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"query\": {\"type\": \"string\", \"description\": \"query\"}, \"page\": {\"type\": \"integer\", \"description\": \"page\"}}, \"required\": [\"query\"]}}, {\"name\": \"GET_company__company_id__images\", \"description\": \"Get a companies logos by id.\\n\\nThere are two image formats that are supported for companies, PNG's and SVG's. You can see which type the original file is by looking at the `file_type` field. We prefer SVG's as they are resolution independent and as such, the width and height are only there to reflect the original asset that was uploaded. An SVG can be scaled properly beyond those dimensions if you call them as a PNG.\\n\\nFor more information about how SVG's and PNG's can be used, take a read through [this document](#docTextSection:mXP9B2uzoDJFguDZv).\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"company_id\": {\"type\": \"integer\", \"description\": \"company id\"}}, \"required\": [\"company_id\"]}}]", "GraphQL_schema": "type GET_search_company_ResultsEntry {\n  id: Int\n  logo_path: String\n  name: String\n  origin_country: String\n}\n\ntype GET_search_company_Root {\n  page: Int\n  results: [GET_search_company_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_search_company(\n    query: String\n    tmdb_access_token: String!\n  ): GET_search_company_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/search/company\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_company__company_id__images_LogosEntry {\n  aspect_ratio: Float\n  file_path: String\n  file_type: String\n  height: Int\n  id: String\n  vote_average: Float\n  vote_count: Int\n  width: Int\n}\n\ntype GET_company__company_id__images_Root {\n  id: Int\n  logos: [GET_company__company_id__images_LogosEntry]\n}\n\ntype Query {\n  GET_company__company_id__images(\n    company_id: String!\n    tmdb_access_token: String!\n  ): GET_company__company_id__images_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/company/$company_id;/images\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\n", "utterance": "What is the logo of the Walt Disney?"}
{"domain": "tmdb", "input": "Function Signatures:\n\n[{\"name\": \"GET_search_person\", \"description\": \"Search for people.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"query\": {\"type\": \"string\", \"description\": \"query\"}, \"page\": {\"type\": \"integer\", \"description\": \"page\"}, \"include_adult\": {\"type\": \"boolean\", \"description\": \"include adult\"}, \"region\": {\"type\": \"string\", \"description\": \"region\"}}, \"required\": [\"query\"]}}, {\"name\": \"GET_person__person_id__movie_credits\", \"description\": \"Get the movie credits for a person, the results contains various information such as popularity and release date.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"person_id\": {\"type\": \"integer\", \"description\": \"person id\"}}, \"required\": [\"person_id\"]}}, {\"name\": \"GET_movie__movie_id__release_dates\", \"description\": \"Get the release date along with the certification for a movie.\\n\\nRelease dates support different types:\\n\\n1. Premiere\\n2. Theatrical (limited)\\n3. Theatrical\\n4. Digital\\n5. Physical\\n6. TV\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"movie_id\": {\"type\": \"integer\", \"description\": \"movie id\"}}, \"required\": [\"movie_id\"]}}]\n\nGraphQL schema:\n\ntype GET_movie__movie_id__release_dates_ReleaseDatesEntry {\n  certification: String\n  descriptors: [String]\n  iso_639_1: String\n  note: String\n  release_date: DateTime\n  type: Int\n}\n\ntype GET_movie__movie_id__release_dates_ResultsEntry {\n  iso_3166_1: String\n  release_dates: [GET_movie__movie_id__release_dates_ReleaseDatesEntry]\n}\n\ntype GET_movie__movie_id__release_dates_Root {\n  id: Int\n  results: [GET_movie__movie_id__release_dates_ResultsEntry]\n}\n\ntype Query {\n  GET_movie__movie_id__release_dates(\n    movie_id: String!\n    tmdb_access_token: String!\n  ): GET_movie__movie_id__release_dates_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/movie/$movie_id;/release_dates\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_search_person_KnownForEntry {\n  adult: Boolean\n  backdrop_path: String\n  genre_ids: [Int]\n  id: Int\n  media_type: String\n  original_language: String\n  original_title: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  release_date: Date\n  title: String\n  video: Boolean\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_search_person_ResultsEntry {\n  adult: Boolean\n  gender: Int\n  id: Int\n  known_for: [GET_search_person_KnownForEntry]\n  known_for_department: String\n  name: String\n  original_name: String\n  popularity: Float\n  profile_path: String\n}\n\ntype GET_search_person_Root {\n  page: Int\n  results: [GET_search_person_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_search_person(\n    query: String\n    tmdb_access_token: String!\n  ): GET_search_person_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/search/person\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_person__person_id__movie_credits_CastEntry {\n  adult: Boolean\n  backdrop_path: String\n  character: String\n  credit_id: String\n  genre_ids: [Int]\n  id: Int\n  order: Int\n  original_language: String\n  original_title: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  release_date: String\n  title: String\n  video: Boolean\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_person__person_id__movie_credits_CrewEntry {\n  adult: Boolean\n  backdrop_path: String\n  credit_id: String\n  department: String\n  genre_ids: [Int]\n  id: Int\n  job: String\n  original_language: String\n  original_title: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  release_date: String\n  title: String\n  video: Boolean\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_person__person_id__movie_credits_Root {\n  cast: [GET_person__person_id__movie_credits_CastEntry]\n  crew: [GET_person__person_id__movie_credits_CrewEntry]\n  id: Int\n}\n\ntype Query {\n  GET_person__person_id__movie_credits(\n    person_id: String!\n    tmdb_access_token: String!\n  ): GET_person__person_id__movie_credits_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/person/$person_id;/movie_credits\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\n\nUtterance: When is Clint Eastwood's latest movie scheduled to be released?", "output": "response_obj = GET_search_person(query=\"Clint Eastwood\")\nresponse_obj1 = GET_person__person_id__movie_credits(person_id=response_obj.results[0].id)\nGET_movie__movie_id__release_dates(movie_id=response_obj1.cast[0].id)\n", "function_specs": "[{\"name\": \"GET_search_person\", \"description\": \"Search for people.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"query\": {\"type\": \"string\", \"description\": \"query\"}, \"page\": {\"type\": \"integer\", \"description\": \"page\"}, \"include_adult\": {\"type\": \"boolean\", \"description\": \"include adult\"}, \"region\": {\"type\": \"string\", \"description\": \"region\"}}, \"required\": [\"query\"]}}, {\"name\": \"GET_person__person_id__movie_credits\", \"description\": \"Get the movie credits for a person, the results contains various information such as popularity and release date.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"person_id\": {\"type\": \"integer\", \"description\": \"person id\"}}, \"required\": [\"person_id\"]}}, {\"name\": \"GET_movie__movie_id__release_dates\", \"description\": \"Get the release date along with the certification for a movie.\\n\\nRelease dates support different types:\\n\\n1. Premiere\\n2. Theatrical (limited)\\n3. Theatrical\\n4. Digital\\n5. Physical\\n6. TV\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"movie_id\": {\"type\": \"integer\", \"description\": \"movie id\"}}, \"required\": [\"movie_id\"]}}]", "GraphQL_schema": "type GET_movie__movie_id__release_dates_ReleaseDatesEntry {\n  certification: String\n  descriptors: [String]\n  iso_639_1: String\n  note: String\n  release_date: DateTime\n  type: Int\n}\n\ntype GET_movie__movie_id__release_dates_ResultsEntry {\n  iso_3166_1: String\n  release_dates: [GET_movie__movie_id__release_dates_ReleaseDatesEntry]\n}\n\ntype GET_movie__movie_id__release_dates_Root {\n  id: Int\n  results: [GET_movie__movie_id__release_dates_ResultsEntry]\n}\n\ntype Query {\n  GET_movie__movie_id__release_dates(\n    movie_id: String!\n    tmdb_access_token: String!\n  ): GET_movie__movie_id__release_dates_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/movie/$movie_id;/release_dates\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_search_person_KnownForEntry {\n  adult: Boolean\n  backdrop_path: String\n  genre_ids: [Int]\n  id: Int\n  media_type: String\n  original_language: String\n  original_title: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  release_date: Date\n  title: String\n  video: Boolean\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_search_person_ResultsEntry {\n  adult: Boolean\n  gender: Int\n  id: Int\n  known_for: [GET_search_person_KnownForEntry]\n  known_for_department: String\n  name: String\n  original_name: String\n  popularity: Float\n  profile_path: String\n}\n\ntype GET_search_person_Root {\n  page: Int\n  results: [GET_search_person_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_search_person(\n    query: String\n    tmdb_access_token: String!\n  ): GET_search_person_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/search/person\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_person__person_id__movie_credits_CastEntry {\n  adult: Boolean\n  backdrop_path: String\n  character: String\n  credit_id: String\n  genre_ids: [Int]\n  id: Int\n  order: Int\n  original_language: String\n  original_title: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  release_date: String\n  title: String\n  video: Boolean\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_person__person_id__movie_credits_CrewEntry {\n  adult: Boolean\n  backdrop_path: String\n  credit_id: String\n  department: String\n  genre_ids: [Int]\n  id: Int\n  job: String\n  original_language: String\n  original_title: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  release_date: String\n  title: String\n  video: Boolean\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_person__person_id__movie_credits_Root {\n  cast: [GET_person__person_id__movie_credits_CastEntry]\n  crew: [GET_person__person_id__movie_credits_CrewEntry]\n  id: Int\n}\n\ntype Query {\n  GET_person__person_id__movie_credits(\n    person_id: String!\n    tmdb_access_token: String!\n  ): GET_person__person_id__movie_credits_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/person/$person_id;/movie_credits\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\n", "utterance": "When is Clint Eastwood's latest movie scheduled to be released?"}
{"domain": "tmdb", "input": "Function Signatures:\n\n[{\"name\": \"GET_search_tv\", \"description\": \"Search for a TV show.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"page\": {\"type\": \"integer\", \"description\": \"page\"}, \"query\": {\"type\": \"string\", \"description\": \"query\"}, \"include_adult\": {\"type\": \"boolean\", \"description\": \"include adult\"}, \"first_air_date_year\": {\"type\": \"integer\", \"description\": \"first air date year\"}}, \"required\": [\"query\"]}}, {\"name\": \"GET_tv__tv_id__recommendations\", \"description\": \"Get the list of TV show recommendations for this item.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"tv_id\": {\"type\": \"integer\", \"description\": \"tv id\"}, \"page\": {\"type\": \"integer\", \"description\": \"page\"}}, \"required\": [\"tv_id\"]}}]\n\nGraphQL schema:\n\ntype GET_search_tv_ResultsEntry {\n  adult: Boolean\n  backdrop_path: String\n  first_air_date: Date\n  genre_ids: [Int]\n  id: Int\n  name: String\n  origin_country: [String]\n  original_language: String\n  original_name: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_search_tv_Root {\n  page: Int\n  results: [GET_search_tv_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_search_tv(query: String, tmdb_access_token: String!): GET_search_tv_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/search/tv\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_tv__tv_id__recommendations_ResultsEntry {\n  adult: Boolean\n  backdrop_path: String\n  first_air_date: Date\n  genre_ids: [Int]\n  id: Int\n  media_type: String\n  name: String\n  origin_country: [String]\n  original_language: String\n  original_name: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_tv__tv_id__recommendations_Root {\n  page: Int\n  results: [GET_tv__tv_id__recommendations_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_tv__tv_id__recommendations(\n    tmdb_access_token: String!\n    tv_id: String!\n  ): GET_tv__tv_id__recommendations_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/tv/$tv_id;/recommendations\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\n\nUtterance: Please recommend me some TV shows similar to Breaking Bad", "output": "response_obj = GET_search_tv(query=\"Breaking Bad\")\nGET_tv__tv_id__recommendations(tv_id=response_obj.results[0].id)\n", "function_specs": "[{\"name\": \"GET_search_tv\", \"description\": \"Search for a TV show.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"page\": {\"type\": \"integer\", \"description\": \"page\"}, \"query\": {\"type\": \"string\", \"description\": \"query\"}, \"include_adult\": {\"type\": \"boolean\", \"description\": \"include adult\"}, \"first_air_date_year\": {\"type\": \"integer\", \"description\": \"first air date year\"}}, \"required\": [\"query\"]}}, {\"name\": \"GET_tv__tv_id__recommendations\", \"description\": \"Get the list of TV show recommendations for this item.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"tv_id\": {\"type\": \"integer\", \"description\": \"tv id\"}, \"page\": {\"type\": \"integer\", \"description\": \"page\"}}, \"required\": [\"tv_id\"]}}]", "GraphQL_schema": "type GET_search_tv_ResultsEntry {\n  adult: Boolean\n  backdrop_path: String\n  first_air_date: Date\n  genre_ids: [Int]\n  id: Int\n  name: String\n  origin_country: [String]\n  original_language: String\n  original_name: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_search_tv_Root {\n  page: Int\n  results: [GET_search_tv_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_search_tv(query: String, tmdb_access_token: String!): GET_search_tv_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/search/tv\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_tv__tv_id__recommendations_ResultsEntry {\n  adult: Boolean\n  backdrop_path: String\n  first_air_date: Date\n  genre_ids: [Int]\n  id: Int\n  media_type: String\n  name: String\n  origin_country: [String]\n  original_language: String\n  original_name: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_tv__tv_id__recommendations_Root {\n  page: Int\n  results: [GET_tv__tv_id__recommendations_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_tv__tv_id__recommendations(\n    tmdb_access_token: String!\n    tv_id: String!\n  ): GET_tv__tv_id__recommendations_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/tv/$tv_id;/recommendations\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\n", "utterance": "Please recommend me some TV shows similar to Breaking Bad"}
{"domain": "tmdb", "input": "Function Signatures:\n\n[{\"name\": \"GET_search_tv\", \"description\": \"Search for a TV show.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"page\": {\"type\": \"integer\", \"description\": \"page\"}, \"query\": {\"type\": \"string\", \"description\": \"query\"}, \"include_adult\": {\"type\": \"boolean\", \"description\": \"include adult\"}, \"first_air_date_year\": {\"type\": \"integer\", \"description\": \"first air date year\"}}, \"required\": [\"query\"]}}, {\"name\": \"GET_search_movie\", \"description\": \"Search for movies.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"query\": {\"type\": \"string\", \"description\": \"query\"}, \"page\": {\"type\": \"integer\", \"description\": \"page\"}, \"include_adult\": {\"type\": \"boolean\", \"description\": \"include adult\"}, \"region\": {\"type\": \"string\", \"description\": \"region\"}, \"year\": {\"type\": \"integer\", \"description\": \"year\"}, \"primary_release_year\": {\"type\": \"integer\", \"description\": \"primary release year\"}}, \"required\": [\"query\"]}}, {\"name\": \"GET_movie__movie_id__credits\", \"description\": \"Get the cast and crew for a movie.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"movie_id\": {\"type\": \"integer\", \"description\": \"movie id\"}}, \"required\": [\"movie_id\"]}}, {\"name\": \"GET_tv__tv_id__season__season_number__credits\", \"description\": \"Get the credits for TV season.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"tv_id\": {\"type\": \"integer\", \"description\": \"tv id\"}, \"season_number\": {\"type\": \"integer\", \"description\": \"season number\"}}, \"required\": [\"tv_id\", \"season_number\"]}}]\n\nGraphQL schema:\n\ntype GET_movie__movie_id__credits_CastEntry {\n  adult: Boolean\n  cast_id: Int\n  character: String\n  credit_id: String\n  gender: Int\n  id: Int\n  known_for_department: String\n  name: String\n  order: Int\n  original_name: String\n  popularity: Float\n  profile_path: String\n}\n\ntype GET_movie__movie_id__credits_CrewEntry {\n  adult: Boolean\n  credit_id: String\n  department: String\n  gender: Int\n  id: Int\n  job: String\n  known_for_department: String\n  name: String\n  original_name: String\n  popularity: Float\n  profile_path: String\n}\n\ntype GET_movie__movie_id__credits_Root {\n  cast: [GET_movie__movie_id__credits_CastEntry]\n  crew: [GET_movie__movie_id__credits_CrewEntry]\n  id: Int\n}\n\ntype Query {\n  GET_movie__movie_id__credits(\n    movie_id: String!\n    tmdb_access_token: String!\n  ): GET_movie__movie_id__credits_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/movie/$movie_id;/credits\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_tv__tv_id__season__season_number__credits_CastEntry {\n  adult: Boolean\n  character: String\n  credit_id: String\n  gender: Int\n  id: Int\n  known_for_department: String\n  name: String\n  order: Int\n  original_name: String\n  popularity: Float\n  profile_path: String\n}\n\ntype GET_tv__tv_id__season__season_number__credits_CrewEntry {\n  adult: Boolean\n  credit_id: String\n  department: String\n  gender: Int\n  id: Int\n  job: String\n  known_for_department: String\n  name: String\n  original_name: String\n  popularity: Float\n  profile_path: String\n}\n\ntype GET_tv__tv_id__season__season_number__credits_Root {\n  cast: [GET_tv__tv_id__season__season_number__credits_CastEntry]\n  crew: [GET_tv__tv_id__season__season_number__credits_CrewEntry]\n  id: Int\n}\n\ntype Query {\n  GET_tv__tv_id__season__season_number__credits(\n    season_number: String!\n    tmdb_access_token: String!\n    tv_id: String!\n  ): GET_tv__tv_id__season__season_number__credits_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/tv/$tv_id;/season/$season_number;/credits\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_search_tv_ResultsEntry {\n  adult: Boolean\n  backdrop_path: String\n  first_air_date: Date\n  genre_ids: [Int]\n  id: Int\n  name: String\n  origin_country: [String]\n  original_language: String\n  original_name: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_search_tv_Root {\n  page: Int\n  results: [GET_search_tv_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_search_tv(query: String, tmdb_access_token: String!): GET_search_tv_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/search/tv\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_search_movie_ResultsEntry {\n  adult: Boolean\n  backdrop_path: String\n  genre_ids: [Int]\n  id: Int\n  original_language: String\n  original_title: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  release_date: Date\n  title: String\n  video: Boolean\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_search_movie_Root {\n  page: Int\n  results: [GET_search_movie_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_search_movie(\n    query: String\n    tmdb_access_token: String!\n  ): GET_search_movie_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/search/movie\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\n\nUtterance: Is the director of Twin Peaks Season 1 and Mulholland Drive the same person?", "output": "response_obj = GET_search_tv(query=\"Twin Peaks\")\nresponse_obj1 = GET_search_movie(query=\"Mulholland Drive\")\nGET_movie__movie_id__credits(movie_id=response_obj1.results[0].id)\nGET_tv__tv_id__season__season_number__credits(tv_id=response_obj.results[0].id, season_number=1)\n", "function_specs": "[{\"name\": \"GET_search_tv\", \"description\": \"Search for a TV show.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"page\": {\"type\": \"integer\", \"description\": \"page\"}, \"query\": {\"type\": \"string\", \"description\": \"query\"}, \"include_adult\": {\"type\": \"boolean\", \"description\": \"include adult\"}, \"first_air_date_year\": {\"type\": \"integer\", \"description\": \"first air date year\"}}, \"required\": [\"query\"]}}, {\"name\": \"GET_search_movie\", \"description\": \"Search for movies.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"query\": {\"type\": \"string\", \"description\": \"query\"}, \"page\": {\"type\": \"integer\", \"description\": \"page\"}, \"include_adult\": {\"type\": \"boolean\", \"description\": \"include adult\"}, \"region\": {\"type\": \"string\", \"description\": \"region\"}, \"year\": {\"type\": \"integer\", \"description\": \"year\"}, \"primary_release_year\": {\"type\": \"integer\", \"description\": \"primary release year\"}}, \"required\": [\"query\"]}}, {\"name\": \"GET_movie__movie_id__credits\", \"description\": \"Get the cast and crew for a movie.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"movie_id\": {\"type\": \"integer\", \"description\": \"movie id\"}}, \"required\": [\"movie_id\"]}}, {\"name\": \"GET_tv__tv_id__season__season_number__credits\", \"description\": \"Get the credits for TV season.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"tv_id\": {\"type\": \"integer\", \"description\": \"tv id\"}, \"season_number\": {\"type\": \"integer\", \"description\": \"season number\"}}, \"required\": [\"tv_id\", \"season_number\"]}}]", "GraphQL_schema": "type GET_movie__movie_id__credits_CastEntry {\n  adult: Boolean\n  cast_id: Int\n  character: String\n  credit_id: String\n  gender: Int\n  id: Int\n  known_for_department: String\n  name: String\n  order: Int\n  original_name: String\n  popularity: Float\n  profile_path: String\n}\n\ntype GET_movie__movie_id__credits_CrewEntry {\n  adult: Boolean\n  credit_id: String\n  department: String\n  gender: Int\n  id: Int\n  job: String\n  known_for_department: String\n  name: String\n  original_name: String\n  popularity: Float\n  profile_path: String\n}\n\ntype GET_movie__movie_id__credits_Root {\n  cast: [GET_movie__movie_id__credits_CastEntry]\n  crew: [GET_movie__movie_id__credits_CrewEntry]\n  id: Int\n}\n\ntype Query {\n  GET_movie__movie_id__credits(\n    movie_id: String!\n    tmdb_access_token: String!\n  ): GET_movie__movie_id__credits_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/movie/$movie_id;/credits\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_tv__tv_id__season__season_number__credits_CastEntry {\n  adult: Boolean\n  character: String\n  credit_id: String\n  gender: Int\n  id: Int\n  known_for_department: String\n  name: String\n  order: Int\n  original_name: String\n  popularity: Float\n  profile_path: String\n}\n\ntype GET_tv__tv_id__season__season_number__credits_CrewEntry {\n  adult: Boolean\n  credit_id: String\n  department: String\n  gender: Int\n  id: Int\n  job: String\n  known_for_department: String\n  name: String\n  original_name: String\n  popularity: Float\n  profile_path: String\n}\n\ntype GET_tv__tv_id__season__season_number__credits_Root {\n  cast: [GET_tv__tv_id__season__season_number__credits_CastEntry]\n  crew: [GET_tv__tv_id__season__season_number__credits_CrewEntry]\n  id: Int\n}\n\ntype Query {\n  GET_tv__tv_id__season__season_number__credits(\n    season_number: String!\n    tmdb_access_token: String!\n    tv_id: String!\n  ): GET_tv__tv_id__season__season_number__credits_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/tv/$tv_id;/season/$season_number;/credits\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_search_tv_ResultsEntry {\n  adult: Boolean\n  backdrop_path: String\n  first_air_date: Date\n  genre_ids: [Int]\n  id: Int\n  name: String\n  origin_country: [String]\n  original_language: String\n  original_name: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_search_tv_Root {\n  page: Int\n  results: [GET_search_tv_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_search_tv(query: String, tmdb_access_token: String!): GET_search_tv_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/search/tv\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_search_movie_ResultsEntry {\n  adult: Boolean\n  backdrop_path: String\n  genre_ids: [Int]\n  id: Int\n  original_language: String\n  original_title: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  release_date: Date\n  title: String\n  video: Boolean\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_search_movie_Root {\n  page: Int\n  results: [GET_search_movie_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_search_movie(\n    query: String\n    tmdb_access_token: String!\n  ): GET_search_movie_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/search/movie\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\n", "utterance": "Is the director of Twin Peaks Season 1 and Mulholland Drive the same person?"}
{"domain": "tmdb", "input": "Function Signatures:\n\n[{\"name\": \"GET_tv_popular\", \"description\": \"Get a list of the current popular TV shows on TMDb. This list updates daily.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"page\": {\"type\": \"integer\", \"description\": \"page\"}}, \"required\": []}}, {\"name\": \"GET_tv__tv_id__credits\", \"description\": \"Get the credits (cast and crew) that have been added to a TV show.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"tv_id\": {\"type\": \"integer\", \"description\": \"tv id\"}}, \"required\": [\"tv_id\"]}}, {\"name\": \"GET_person__person_id__images\", \"description\": \"Get the images for a person.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"person_id\": {\"type\": \"integer\", \"description\": \"person id\"}}, \"required\": [\"person_id\"]}}]\n\nGraphQL schema:\n\ntype GET_person__person_id__images_ProfilesEntry {\n  aspect_ratio: Float\n  file_path: String\n  height: Int\n  \"\"\"\n  Field \"iso_639_1\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  iso_639_1: JSON\n  vote_average: Float\n  vote_count: Int\n  width: Int\n}\n\ntype GET_person__person_id__images_Root {\n  id: Int\n  profiles: [GET_person__person_id__images_ProfilesEntry]\n}\n\ntype Query {\n  GET_person__person_id__images(\n    person_id: String!\n    tmdb_access_token: String!\n  ): GET_person__person_id__images_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/person/$person_id;/images\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_tv_popular_ResultsEntry {\n  adult: Boolean\n  backdrop_path: String\n  first_air_date: Date\n  genre_ids: [Int]\n  id: Int\n  name: String\n  origin_country: [String]\n  original_language: String\n  original_name: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_tv_popular_Root {\n  page: Int\n  results: [GET_tv_popular_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_tv_popular(tmdb_access_token: String!): GET_tv_popular_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/tv/popular\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_tv__tv_id__credits_CastEntry {\n  adult: Boolean\n  character: String\n  credit_id: String\n  gender: Int\n  id: Int\n  known_for_department: String\n  name: String\n  order: Int\n  original_name: String\n  popularity: Float\n  profile_path: String\n}\n\ntype GET_tv__tv_id__credits_CrewEntry {\n  adult: Boolean\n  credit_id: String\n  department: String\n  gender: Int\n  id: Int\n  job: String\n  known_for_department: String\n  name: String\n  original_name: String\n  popularity: Float\n  profile_path: String\n}\n\ntype GET_tv__tv_id__credits_Root {\n  cast: [GET_tv__tv_id__credits_CastEntry]\n  crew: [GET_tv__tv_id__credits_CrewEntry]\n  id: Int\n}\n\ntype Query {\n  GET_tv__tv_id__credits(\n    tmdb_access_token: String!\n    tv_id: String!\n  ): GET_tv__tv_id__credits_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/tv/$tv_id;/credits\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\n\nUtterance: give me a photo of the lead actor of the most popular TV show of this week", "output": "response_obj = GET_tv_popular()\nresponse_obj1 = GET_tv__tv_id__credits(tv_id=response_obj.results[0].id)\nGET_person__person_id__images(person_id=response_obj1.cast[0].id)\n", "function_specs": "[{\"name\": \"GET_tv_popular\", \"description\": \"Get a list of the current popular TV shows on TMDb. This list updates daily.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"page\": {\"type\": \"integer\", \"description\": \"page\"}}, \"required\": []}}, {\"name\": \"GET_tv__tv_id__credits\", \"description\": \"Get the credits (cast and crew) that have been added to a TV show.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"tv_id\": {\"type\": \"integer\", \"description\": \"tv id\"}}, \"required\": [\"tv_id\"]}}, {\"name\": \"GET_person__person_id__images\", \"description\": \"Get the images for a person.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"person_id\": {\"type\": \"integer\", \"description\": \"person id\"}}, \"required\": [\"person_id\"]}}]", "GraphQL_schema": "type GET_person__person_id__images_ProfilesEntry {\n  aspect_ratio: Float\n  file_path: String\n  height: Int\n  \"\"\"\n  Field \"iso_639_1\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  iso_639_1: JSON\n  vote_average: Float\n  vote_count: Int\n  width: Int\n}\n\ntype GET_person__person_id__images_Root {\n  id: Int\n  profiles: [GET_person__person_id__images_ProfilesEntry]\n}\n\ntype Query {\n  GET_person__person_id__images(\n    person_id: String!\n    tmdb_access_token: String!\n  ): GET_person__person_id__images_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/person/$person_id;/images\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_tv_popular_ResultsEntry {\n  adult: Boolean\n  backdrop_path: String\n  first_air_date: Date\n  genre_ids: [Int]\n  id: Int\n  name: String\n  origin_country: [String]\n  original_language: String\n  original_name: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_tv_popular_Root {\n  page: Int\n  results: [GET_tv_popular_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_tv_popular(tmdb_access_token: String!): GET_tv_popular_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/tv/popular\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_tv__tv_id__credits_CastEntry {\n  adult: Boolean\n  character: String\n  credit_id: String\n  gender: Int\n  id: Int\n  known_for_department: String\n  name: String\n  order: Int\n  original_name: String\n  popularity: Float\n  profile_path: String\n}\n\ntype GET_tv__tv_id__credits_CrewEntry {\n  adult: Boolean\n  credit_id: String\n  department: String\n  gender: Int\n  id: Int\n  job: String\n  known_for_department: String\n  name: String\n  original_name: String\n  popularity: Float\n  profile_path: String\n}\n\ntype GET_tv__tv_id__credits_Root {\n  cast: [GET_tv__tv_id__credits_CastEntry]\n  crew: [GET_tv__tv_id__credits_CrewEntry]\n  id: Int\n}\n\ntype Query {\n  GET_tv__tv_id__credits(\n    tmdb_access_token: String!\n    tv_id: String!\n  ): GET_tv__tv_id__credits_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/tv/$tv_id;/credits\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\n", "utterance": "give me a photo of the lead actor of the most popular TV show of this week"}
