{"domain": "spotify", "input": "Function Signatures:\n\n[{\"name\": \"GET_search\", \"description\": \"Get Spotify catalog information about albums, artists, playlists, tracks, shows, episodes or audiobooks\\nthat match a keyword string.<br />\\n**Note: Audiobooks are only available for the US, UK, Ireland, New Zealand and Australia markets.**\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"q\": {\"type\": \"string\", \"description\": \"Your search query.\\n\\nYou can narrow down your search using field filters. The available filters are `album`, `artist`, `track`, `year`, `upc`, `tag:hipster`, `tag:new`, `isrc`, and `genre`. Each field filter only applies to certain result types.\\n\\nThe `artist` and `year` filters can be used while searching albums, artists and tracks. You can filter on a single `year` or a range (e.g. 1955-1960).<br />\\nThe `album` filter can be used while searching albums and tracks.<br />\\nThe `genre` filter can be used while searching artists and tracks.<br />\\nThe `isrc` and `track` filters can be used while searching tracks.<br />\\nThe `upc`, `tag:new` and `tag:hipster` filters can only be used while searching albums. The `tag:new` filter will return albums released in the past two weeks and `tag:hipster` can be used to return only albums with the lowest 10% popularity.<br />\\n\"}, \"type\": {\"type\": \"array\", \"description\": \"A comma-separated list of item types to search across. Search results include hits\\nfrom all the specified item types. For example: `q=abacab&type=album,track` returns\\nboth albums and tracks matching \\\"abacab\\\".\\n\"}, \"market\": {\"type\": \"string\", \"description\": \"An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).\\n  If a country code is specified, only content that is available in that market will be returned.<br/>\\n  If a valid user access token is specified in the request header, the country associated with\\n  the user account will take priority over this parameter.<br/>\\n  _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>\\n  Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).\\n\"}, \"limit\": {\"type\": \"integer\", \"description\": \"The maximum number of results to return in each item type.\\n\"}, \"offset\": {\"type\": \"integer\", \"description\": \"The index of the first result to return. Use\\nwith limit to get the next page of search results.\\n\"}, \"include_external\": {\"type\": \"string\", \"description\": \"If `include_external=audio` is specified it signals that the client can play externally hosted audio content, and marks\\nthe content as playable in the response. By default externally hosted audio content is marked as unplayable in the response.\\n\"}}, \"required\": [\"q\", \"type\"]}}, {\"name\": \"GET_artists__id__albums\", \"description\": \"Get Spotify catalog information about an artist's albums.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"id\": {\"type\": \"string\", \"description\": \"The [Spotify ID](/documentation/web-api/#spotify-uris-and-ids) of the artist.\\n\"}, \"include_groups\": {\"type\": \"string\", \"description\": \"A comma-separated list of keywords that will be used to filter the response. If not supplied, all album types will be returned. <br/>\\nValid values are:<br/>- `album`<br/>- `single`<br/>- `appears_on`<br/>- `compilation`<br/>For example: `include_groups=album,single`.\\n\"}, \"market\": {\"type\": \"string\", \"description\": \"An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).\\n  If a country code is specified, only content that is available in that market will be returned.<br/>\\n  If a valid user access token is specified in the request header, the country associated with\\n  the user account will take priority over this parameter.<br/>\\n  _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>\\n  Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).\\n\"}, \"limit\": {\"type\": \"integer\", \"description\": \"The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50.\\n\"}, \"offset\": {\"type\": \"integer\", \"description\": \"The index of the first item to return. Default: 0 (the first item). Use with limit to get the next set of items.\\n\"}}, \"required\": [\"id\"]}}, {\"name\": \"GET_me_playlists\", \"description\": \"Get a list of the playlists owned or followed by the current Spotify\\nuser.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"limit\": {\"type\": \"integer\", \"description\": \"The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50.\\n\"}, \"offset\": {\"type\": \"integer\", \"description\": \"'The index of the first playlist to return. Default:\\n0 (the first object). Maximum offset: 100.000\\\\. Use with `limit` to get the\\nnext set of playlists.'\\n\"}}, \"required\": []}}, {\"name\": \"POST_playlists__playlist_id__tracks\", \"description\": \"Add one or more items to a user's playlist.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"playlist_id\": {\"type\": \"string\", \"description\": \"The [Spotify ID](/documentation/web-api/#spotify-uris-and-ids) of the playlist.\\n\"}, \"position\": {\"type\": \"integer\", \"description\": \"The position to insert the items, a zero-based index. For example, to insert the items in the first position: `position=0`; to insert the items in the third position: `position=2`. If omitted, the items will be appended to the playlist. Items are added in the order they are listed in the query string or request body.\\n\"}, \"uris\": {\"type\": \"string\", \"description\": \"A comma-separated list of [Spotify URIs](/documentation/web-api/#spotify-uris-and-ids) to add, can be track or episode URIs. For example:<br/>`uris=spotify:track:4iV5W9uYEdYUVa79Axb7Rh, spotify:track:1301WleyT98MSxVHPZCA6M, spotify:episode:512ojhOuo1ktJprKbVcKyQ`<br/>A maximum of 100 items can be added in one request. <br/>\\n_**Note**: it is likely that passing a large number of item URIs as a query parameter will exceed the maximum length of the request URI. When adding a large number of items, it is recommended to pass them in the request body, see below._\\n\"}}, \"required\": [\"playlist_id\"]}}]\n\nGraphQL schema:\n\ntype GET_me_playlists_ExternalUrls {\n  spotify: String\n}\n\ntype GET_me_playlists_ExternalUrls1 {\n  spotify: String\n}\n\ntype GET_me_playlists_ImagesEntry {\n  \"\"\"\n  Field \"height\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  height: JSON\n  url: String\n  \"\"\"\n  Field \"width\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  width: JSON\n}\n\ntype GET_me_playlists_ItemsEntry {\n  collaborative: Boolean\n  description: String\n  external_urls: GET_me_playlists_ExternalUrls\n  href: String\n  id: String\n  images: [GET_me_playlists_ImagesEntry]\n  name: String\n  owner: GET_me_playlists_Owner\n  \"\"\"\n  Field \"primary_color\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  primary_color: JSON\n  public: Boolean\n  snapshot_id: String\n  tracks: GET_me_playlists_Tracks\n  type: String\n  uri: String\n}\n\ntype GET_me_playlists_Owner {\n  display_name: String\n  external_urls: GET_me_playlists_ExternalUrls1\n  href: String\n  id: String\n  type: String\n  uri: String\n}\n\ntype GET_me_playlists_Root {\n  href: String\n  items: [GET_me_playlists_ItemsEntry]\n  limit: Int\n  \"\"\"\n  Field \"next\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  next: JSON\n  offset: Int\n  \"\"\"\n  Field \"previous\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  previous: JSON\n  total: Int\n}\n\ntype GET_me_playlists_Tracks {\n  href: String\n  total: Int\n}\n\ntype Query {\n  GET_me_playlists(spotify_access_token: String!): GET_me_playlists_Root\n    @rest(\n      endpoint: \"https://api.spotify.com/v1/me/playlists\"\n      headers: [\n        { name: \"authorization\", value: \"Bearer $spotify_access_token;\" }\n      ]\n    )\n}\ntype GET_search_Albums {\n  href: String\n  items: [GET_search_ItemsEntry]\n  limit: Int\n  next: String\n  offset: Int\n  \"\"\"\n  Field \"previous\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  previous: JSON\n  total: Int\n}\n\ntype GET_search_ArtistsEntry {\n  external_urls: GET_search_ExternalUrls\n  href: String\n  id: String\n  name: String\n  type: String\n  uri: String\n}\n\ntype GET_search_ExternalUrls {\n  spotify: String\n}\n\ntype GET_search_ExternalUrls1 {\n  spotify: String\n}\n\ntype GET_search_ImagesEntry {\n  height: Int\n  url: String\n  width: Int\n}\n\ntype GET_search_ItemsEntry {\n  album_type: String\n  artists: [GET_search_ArtistsEntry]\n  available_markets: [String]\n  external_urls: GET_search_ExternalUrls1\n  href: String\n  id: String\n  images: [GET_search_ImagesEntry]\n  name: String\n  release_date: Date\n  release_date_precision: String\n  total_tracks: Int\n  type: String\n  uri: String\n}\n\ntype GET_search_Root {\n  albums: GET_search_Albums\n}\n\ntype Query {\n  GET_search(\n    q: String\n    spotify_access_token: String!\n    type: String\n  ): GET_search_Root\n    @rest(\n      endpoint: \"https://api.spotify.com/v1/search\"\n      headers: [\n        { name: \"authorization\", value: \"Bearer $spotify_access_token;\" }\n      ]\n    )\n}\ntype GET_artists__id__albums_ArtistsEntry {\n  external_urls: GET_artists__id__albums_ExternalUrls1\n  href: String\n  id: String\n  name: String\n  type: String\n  uri: String\n}\n\ntype GET_artists__id__albums_ExternalUrls {\n  spotify: String\n}\n\ntype GET_artists__id__albums_ExternalUrls1 {\n  spotify: String\n}\n\ntype GET_artists__id__albums_ImagesEntry {\n  height: Int\n  url: String\n  width: Int\n}\n\ntype GET_artists__id__albums_ItemsEntry {\n  album_group: String\n  album_type: String\n  artists: [GET_artists__id__albums_ArtistsEntry]\n  available_markets: [String]\n  external_urls: GET_artists__id__albums_ExternalUrls\n  href: String\n  id: String\n  images: [GET_artists__id__albums_ImagesEntry]\n  name: String\n  release_date: String\n  release_date_precision: String\n  total_tracks: Int\n  type: String\n  uri: String\n}\n\ntype GET_artists__id__albums_Root {\n  href: String\n  items: [GET_artists__id__albums_ItemsEntry]\n  limit: Int\n  next: String\n  offset: Int\n  \"\"\"\n  Field \"previous\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  previous: JSON\n  total: Int\n}\n\ntype Query {\n  GET_artists__id__albums(\n    id: String!\n    spotify_access_token: String!\n  ): GET_artists__id__albums_Root\n    @rest(\n      endpoint: \"https://api.spotify.com/v1/artists/$id;/albums\"\n      headers: [\n        { name: \"authorization\", value: \"Bearer $spotify_access_token;\" }\n      ]\n    )\n}\n\nUtterance: Append the first track in The Beatle's newest album to my 'My Rock' playlist", "output": "response_obj = GET_search(q=\"The Beatle\", type=\"artist\")\nresponse_obj1 = GET_artists__id__albums(id=response_obj.artists.items[0].id)\nresponse_obj2 = GET_me_playlists()\nPOST_playlists__playlist_id__tracks(playlist_id=[item.id for response_obj2.items if item.name == 'My Rock'][0], uris = response_obj1.items[0].uri)\nPUT_playlists__playlist_id_(playlist_id=response_obj2.items[0].id)\n", "function_specs": "[{\"name\": \"GET_search\", \"description\": \"Get Spotify catalog information about albums, artists, playlists, tracks, shows, episodes or audiobooks\\nthat match a keyword string.<br />\\n**Note: Audiobooks are only available for the US, UK, Ireland, New Zealand and Australia markets.**\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"q\": {\"type\": \"string\", \"description\": \"Your search query.\\n\\nYou can narrow down your search using field filters. The available filters are `album`, `artist`, `track`, `year`, `upc`, `tag:hipster`, `tag:new`, `isrc`, and `genre`. Each field filter only applies to certain result types.\\n\\nThe `artist` and `year` filters can be used while searching albums, artists and tracks. You can filter on a single `year` or a range (e.g. 1955-1960).<br />\\nThe `album` filter can be used while searching albums and tracks.<br />\\nThe `genre` filter can be used while searching artists and tracks.<br />\\nThe `isrc` and `track` filters can be used while searching tracks.<br />\\nThe `upc`, `tag:new` and `tag:hipster` filters can only be used while searching albums. The `tag:new` filter will return albums released in the past two weeks and `tag:hipster` can be used to return only albums with the lowest 10% popularity.<br />\\n\"}, \"type\": {\"type\": \"array\", \"description\": \"A comma-separated list of item types to search across. Search results include hits\\nfrom all the specified item types. For example: `q=abacab&type=album,track` returns\\nboth albums and tracks matching \\\"abacab\\\".\\n\"}, \"market\": {\"type\": \"string\", \"description\": \"An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).\\n  If a country code is specified, only content that is available in that market will be returned.<br/>\\n  If a valid user access token is specified in the request header, the country associated with\\n  the user account will take priority over this parameter.<br/>\\n  _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>\\n  Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).\\n\"}, \"limit\": {\"type\": \"integer\", \"description\": \"The maximum number of results to return in each item type.\\n\"}, \"offset\": {\"type\": \"integer\", \"description\": \"The index of the first result to return. Use\\nwith limit to get the next page of search results.\\n\"}, \"include_external\": {\"type\": \"string\", \"description\": \"If `include_external=audio` is specified it signals that the client can play externally hosted audio content, and marks\\nthe content as playable in the response. By default externally hosted audio content is marked as unplayable in the response.\\n\"}}, \"required\": [\"q\", \"type\"]}}, {\"name\": \"GET_artists__id__albums\", \"description\": \"Get Spotify catalog information about an artist's albums.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"id\": {\"type\": \"string\", \"description\": \"The [Spotify ID](/documentation/web-api/#spotify-uris-and-ids) of the artist.\\n\"}, \"include_groups\": {\"type\": \"string\", \"description\": \"A comma-separated list of keywords that will be used to filter the response. If not supplied, all album types will be returned. <br/>\\nValid values are:<br/>- `album`<br/>- `single`<br/>- `appears_on`<br/>- `compilation`<br/>For example: `include_groups=album,single`.\\n\"}, \"market\": {\"type\": \"string\", \"description\": \"An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).\\n  If a country code is specified, only content that is available in that market will be returned.<br/>\\n  If a valid user access token is specified in the request header, the country associated with\\n  the user account will take priority over this parameter.<br/>\\n  _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>\\n  Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).\\n\"}, \"limit\": {\"type\": \"integer\", \"description\": \"The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50.\\n\"}, \"offset\": {\"type\": \"integer\", \"description\": \"The index of the first item to return. Default: 0 (the first item). Use with limit to get the next set of items.\\n\"}}, \"required\": [\"id\"]}}, {\"name\": \"GET_me_playlists\", \"description\": \"Get a list of the playlists owned or followed by the current Spotify\\nuser.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"limit\": {\"type\": \"integer\", \"description\": \"The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50.\\n\"}, \"offset\": {\"type\": \"integer\", \"description\": \"'The index of the first playlist to return. Default:\\n0 (the first object). Maximum offset: 100.000\\\\. Use with `limit` to get the\\nnext set of playlists.'\\n\"}}, \"required\": []}}, {\"name\": \"POST_playlists__playlist_id__tracks\", \"description\": \"Add one or more items to a user's playlist.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"playlist_id\": {\"type\": \"string\", \"description\": \"The [Spotify ID](/documentation/web-api/#spotify-uris-and-ids) of the playlist.\\n\"}, \"position\": {\"type\": \"integer\", \"description\": \"The position to insert the items, a zero-based index. For example, to insert the items in the first position: `position=0`; to insert the items in the third position: `position=2`. If omitted, the items will be appended to the playlist. Items are added in the order they are listed in the query string or request body.\\n\"}, \"uris\": {\"type\": \"string\", \"description\": \"A comma-separated list of [Spotify URIs](/documentation/web-api/#spotify-uris-and-ids) to add, can be track or episode URIs. For example:<br/>`uris=spotify:track:4iV5W9uYEdYUVa79Axb7Rh, spotify:track:1301WleyT98MSxVHPZCA6M, spotify:episode:512ojhOuo1ktJprKbVcKyQ`<br/>A maximum of 100 items can be added in one request. <br/>\\n_**Note**: it is likely that passing a large number of item URIs as a query parameter will exceed the maximum length of the request URI. When adding a large number of items, it is recommended to pass them in the request body, see below._\\n\"}}, \"required\": [\"playlist_id\"]}}]", "GraphQL_schema": "type GET_me_playlists_ExternalUrls {\n  spotify: String\n}\n\ntype GET_me_playlists_ExternalUrls1 {\n  spotify: String\n}\n\ntype GET_me_playlists_ImagesEntry {\n  \"\"\"\n  Field \"height\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  height: JSON\n  url: String\n  \"\"\"\n  Field \"width\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  width: JSON\n}\n\ntype GET_me_playlists_ItemsEntry {\n  collaborative: Boolean\n  description: String\n  external_urls: GET_me_playlists_ExternalUrls\n  href: String\n  id: String\n  images: [GET_me_playlists_ImagesEntry]\n  name: String\n  owner: GET_me_playlists_Owner\n  \"\"\"\n  Field \"primary_color\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  primary_color: JSON\n  public: Boolean\n  snapshot_id: String\n  tracks: GET_me_playlists_Tracks\n  type: String\n  uri: String\n}\n\ntype GET_me_playlists_Owner {\n  display_name: String\n  external_urls: GET_me_playlists_ExternalUrls1\n  href: String\n  id: String\n  type: String\n  uri: String\n}\n\ntype GET_me_playlists_Root {\n  href: String\n  items: [GET_me_playlists_ItemsEntry]\n  limit: Int\n  \"\"\"\n  Field \"next\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  next: JSON\n  offset: Int\n  \"\"\"\n  Field \"previous\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  previous: JSON\n  total: Int\n}\n\ntype GET_me_playlists_Tracks {\n  href: String\n  total: Int\n}\n\ntype Query {\n  GET_me_playlists(spotify_access_token: String!): GET_me_playlists_Root\n    @rest(\n      endpoint: \"https://api.spotify.com/v1/me/playlists\"\n      headers: [\n        { name: \"authorization\", value: \"Bearer $spotify_access_token;\" }\n      ]\n    )\n}\ntype GET_search_Albums {\n  href: String\n  items: [GET_search_ItemsEntry]\n  limit: Int\n  next: String\n  offset: Int\n  \"\"\"\n  Field \"previous\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  previous: JSON\n  total: Int\n}\n\ntype GET_search_ArtistsEntry {\n  external_urls: GET_search_ExternalUrls\n  href: String\n  id: String\n  name: String\n  type: String\n  uri: String\n}\n\ntype GET_search_ExternalUrls {\n  spotify: String\n}\n\ntype GET_search_ExternalUrls1 {\n  spotify: String\n}\n\ntype GET_search_ImagesEntry {\n  height: Int\n  url: String\n  width: Int\n}\n\ntype GET_search_ItemsEntry {\n  album_type: String\n  artists: [GET_search_ArtistsEntry]\n  available_markets: [String]\n  external_urls: GET_search_ExternalUrls1\n  href: String\n  id: String\n  images: [GET_search_ImagesEntry]\n  name: String\n  release_date: Date\n  release_date_precision: String\n  total_tracks: Int\n  type: String\n  uri: String\n}\n\ntype GET_search_Root {\n  albums: GET_search_Albums\n}\n\ntype Query {\n  GET_search(\n    q: String\n    spotify_access_token: String!\n    type: String\n  ): GET_search_Root\n    @rest(\n      endpoint: \"https://api.spotify.com/v1/search\"\n      headers: [\n        { name: \"authorization\", value: \"Bearer $spotify_access_token;\" }\n      ]\n    )\n}\ntype GET_artists__id__albums_ArtistsEntry {\n  external_urls: GET_artists__id__albums_ExternalUrls1\n  href: String\n  id: String\n  name: String\n  type: String\n  uri: String\n}\n\ntype GET_artists__id__albums_ExternalUrls {\n  spotify: String\n}\n\ntype GET_artists__id__albums_ExternalUrls1 {\n  spotify: String\n}\n\ntype GET_artists__id__albums_ImagesEntry {\n  height: Int\n  url: String\n  width: Int\n}\n\ntype GET_artists__id__albums_ItemsEntry {\n  album_group: String\n  album_type: String\n  artists: [GET_artists__id__albums_ArtistsEntry]\n  available_markets: [String]\n  external_urls: GET_artists__id__albums_ExternalUrls\n  href: String\n  id: String\n  images: [GET_artists__id__albums_ImagesEntry]\n  name: String\n  release_date: String\n  release_date_precision: String\n  total_tracks: Int\n  type: String\n  uri: String\n}\n\ntype GET_artists__id__albums_Root {\n  href: String\n  items: [GET_artists__id__albums_ItemsEntry]\n  limit: Int\n  next: String\n  offset: Int\n  \"\"\"\n  Field \"previous\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  previous: JSON\n  total: Int\n}\n\ntype Query {\n  GET_artists__id__albums(\n    id: String!\n    spotify_access_token: String!\n  ): GET_artists__id__albums_Root\n    @rest(\n      endpoint: \"https://api.spotify.com/v1/artists/$id;/albums\"\n      headers: [\n        { name: \"authorization\", value: \"Bearer $spotify_access_token;\" }\n      ]\n    )\n}\n", "utterance": "Append the first track in The Beatle's newest album to my 'My Rock' playlist"}
{"domain": "spotify", "input": "Function Signatures:\n\n[{\"name\": \"GET_me_playlists\", \"description\": \"Get a list of the playlists owned or followed by the current Spotify\\nuser.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"limit\": {\"type\": \"integer\", \"description\": \"The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50.\\n\"}, \"offset\": {\"type\": \"integer\", \"description\": \"'The index of the first playlist to return. Default:\\n0 (the first object). Maximum offset: 100.000\\\\. Use with `limit` to get the\\nnext set of playlists.'\\n\"}}, \"required\": []}}, {\"name\": \"PUT_me_player_play\", \"description\": \"Start a new context or resume current playback on the user's active device.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"context_uri\": {\"type\": \"string\", \"description\": \"Optional. Spotify URI of the context to play. Valid contexts are albums, artists & playlists. {context_uri:\\\"spotify:album:1Je1IMUlBXcx1Fz0WE7oPT\\\"}\"}, \"uris\": {\"type\": \"array\", \"description\": \"Optional. A JSON array of the Spotify track URIs to play. For example: {\\\"uris\\\": [\\\"spotify:track:4iV5W9uYEdYUVa79Axb7Rh\\\", \\\"spotify:track:1301WleyT98MSxVHPZCA6M\\\"]}\"}, \"offset\": {\"type\": \"array\", \"description\": \"Optional. Indicates from where in the context playback should start. Only available when context_uri corresponds to an album or playlist object \\\"position\\\" is zero based and can\\u2019t be negative. Example: \\\"offset\\\": {\\\"position\\\": 5} \\\"uri\\\" is a string representing the uri of the item to start at. Example: \\\"offset\\\": {\\\"uri\\\": \\\"spotify:track:1301WleyT98MSxVHPZCA6M\\\"}\"}, \"position_ms\": {\"type\": \"integer\", \"description\": \"\"}}, \"required\": [], \"body_params\": [\"context_uri\", \"uris\", \"offset\", \"position_ms\"]}}]\n\nGraphQL schema:\n\ntype GET_me_playlists_ExternalUrls {\n  spotify: String\n}\n\ntype GET_me_playlists_ExternalUrls1 {\n  spotify: String\n}\n\ntype GET_me_playlists_ImagesEntry {\n  \"\"\"\n  Field \"height\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  height: JSON\n  url: String\n  \"\"\"\n  Field \"width\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  width: JSON\n}\n\ntype GET_me_playlists_ItemsEntry {\n  collaborative: Boolean\n  description: String\n  external_urls: GET_me_playlists_ExternalUrls\n  href: String\n  id: String\n  images: [GET_me_playlists_ImagesEntry]\n  name: String\n  owner: GET_me_playlists_Owner\n  \"\"\"\n  Field \"primary_color\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  primary_color: JSON\n  public: Boolean\n  snapshot_id: String\n  tracks: GET_me_playlists_Tracks\n  type: String\n  uri: String\n}\n\ntype GET_me_playlists_Owner {\n  display_name: String\n  external_urls: GET_me_playlists_ExternalUrls1\n  href: String\n  id: String\n  type: String\n  uri: String\n}\n\ntype GET_me_playlists_Root {\n  href: String\n  items: [GET_me_playlists_ItemsEntry]\n  limit: Int\n  \"\"\"\n  Field \"next\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  next: JSON\n  offset: Int\n  \"\"\"\n  Field \"previous\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  previous: JSON\n  total: Int\n}\n\ntype GET_me_playlists_Tracks {\n  href: String\n  total: Int\n}\n\ntype Query {\n  GET_me_playlists(spotify_access_token: String!): GET_me_playlists_Root\n    @rest(\n      endpoint: \"https://api.spotify.com/v1/me/playlists\"\n      headers: [\n        { name: \"authorization\", value: \"Bearer $spotify_access_token;\" }\n      ]\n    )\n}\n\nUtterance: Play my playlist 'My Rock'", "output": "response_obj = GET_me_playlists()\nPUT_me_player_play(context_uri=response_obj.items[0].uri)\n", "function_specs": "[{\"name\": \"GET_me_playlists\", \"description\": \"Get a list of the playlists owned or followed by the current Spotify\\nuser.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"limit\": {\"type\": \"integer\", \"description\": \"The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50.\\n\"}, \"offset\": {\"type\": \"integer\", \"description\": \"'The index of the first playlist to return. Default:\\n0 (the first object). Maximum offset: 100.000\\\\. Use with `limit` to get the\\nnext set of playlists.'\\n\"}}, \"required\": []}}, {\"name\": \"PUT_me_player_play\", \"description\": \"Start a new context or resume current playback on the user's active device.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"context_uri\": {\"type\": \"string\", \"description\": \"Optional. Spotify URI of the context to play. Valid contexts are albums, artists & playlists. {context_uri:\\\"spotify:album:1Je1IMUlBXcx1Fz0WE7oPT\\\"}\"}, \"uris\": {\"type\": \"array\", \"description\": \"Optional. A JSON array of the Spotify track URIs to play. For example: {\\\"uris\\\": [\\\"spotify:track:4iV5W9uYEdYUVa79Axb7Rh\\\", \\\"spotify:track:1301WleyT98MSxVHPZCA6M\\\"]}\"}, \"offset\": {\"type\": \"array\", \"description\": \"Optional. Indicates from where in the context playback should start. Only available when context_uri corresponds to an album or playlist object \\\"position\\\" is zero based and can\\u2019t be negative. Example: \\\"offset\\\": {\\\"position\\\": 5} \\\"uri\\\" is a string representing the uri of the item to start at. Example: \\\"offset\\\": {\\\"uri\\\": \\\"spotify:track:1301WleyT98MSxVHPZCA6M\\\"}\"}, \"position_ms\": {\"type\": \"integer\", \"description\": \"\"}}, \"required\": [], \"body_params\": [\"context_uri\", \"uris\", \"offset\", \"position_ms\"]}}]", "GraphQL_schema": "type GET_me_playlists_ExternalUrls {\n  spotify: String\n}\n\ntype GET_me_playlists_ExternalUrls1 {\n  spotify: String\n}\n\ntype GET_me_playlists_ImagesEntry {\n  \"\"\"\n  Field \"height\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  height: JSON\n  url: String\n  \"\"\"\n  Field \"width\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  width: JSON\n}\n\ntype GET_me_playlists_ItemsEntry {\n  collaborative: Boolean\n  description: String\n  external_urls: GET_me_playlists_ExternalUrls\n  href: String\n  id: String\n  images: [GET_me_playlists_ImagesEntry]\n  name: String\n  owner: GET_me_playlists_Owner\n  \"\"\"\n  Field \"primary_color\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  primary_color: JSON\n  public: Boolean\n  snapshot_id: String\n  tracks: GET_me_playlists_Tracks\n  type: String\n  uri: String\n}\n\ntype GET_me_playlists_Owner {\n  display_name: String\n  external_urls: GET_me_playlists_ExternalUrls1\n  href: String\n  id: String\n  type: String\n  uri: String\n}\n\ntype GET_me_playlists_Root {\n  href: String\n  items: [GET_me_playlists_ItemsEntry]\n  limit: Int\n  \"\"\"\n  Field \"next\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  next: JSON\n  offset: Int\n  \"\"\"\n  Field \"previous\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  previous: JSON\n  total: Int\n}\n\ntype GET_me_playlists_Tracks {\n  href: String\n  total: Int\n}\n\ntype Query {\n  GET_me_playlists(spotify_access_token: String!): GET_me_playlists_Root\n    @rest(\n      endpoint: \"https://api.spotify.com/v1/me/playlists\"\n      headers: [\n        { name: \"authorization\", value: \"Bearer $spotify_access_token;\" }\n      ]\n    )\n}\n", "utterance": "Play my playlist 'My Rock'"}
{"domain": "spotify", "input": "Function Signatures:\n\n[{\"name\": \"GET_search\", \"description\": \"Get Spotify catalog information about albums, artists, playlists, tracks, shows, episodes or audiobooks\\nthat match a keyword string.<br />\\n**Note: Audiobooks are only available for the US, UK, Ireland, New Zealand and Australia markets.**\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"q\": {\"type\": \"string\", \"description\": \"Your search query.\\n\\nYou can narrow down your search using field filters. The available filters are `album`, `artist`, `track`, `year`, `upc`, `tag:hipster`, `tag:new`, `isrc`, and `genre`. Each field filter only applies to certain result types.\\n\\nThe `artist` and `year` filters can be used while searching albums, artists and tracks. You can filter on a single `year` or a range (e.g. 1955-1960).<br />\\nThe `album` filter can be used while searching albums and tracks.<br />\\nThe `genre` filter can be used while searching artists and tracks.<br />\\nThe `isrc` and `track` filters can be used while searching tracks.<br />\\nThe `upc`, `tag:new` and `tag:hipster` filters can only be used while searching albums. The `tag:new` filter will return albums released in the past two weeks and `tag:hipster` can be used to return only albums with the lowest 10% popularity.<br />\\n\"}, \"type\": {\"type\": \"array\", \"description\": \"A comma-separated list of item types to search across. Search results include hits\\nfrom all the specified item types. For example: `q=abacab&type=album,track` returns\\nboth albums and tracks matching \\\"abacab\\\".\\n\"}, \"market\": {\"type\": \"string\", \"description\": \"An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).\\n  If a country code is specified, only content that is available in that market will be returned.<br/>\\n  If a valid user access token is specified in the request header, the country associated with\\n  the user account will take priority over this parameter.<br/>\\n  _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>\\n  Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).\\n\"}, \"limit\": {\"type\": \"integer\", \"description\": \"The maximum number of results to return in each item type.\\n\"}, \"offset\": {\"type\": \"integer\", \"description\": \"The index of the first result to return. Use\\nwith limit to get the next page of search results.\\n\"}, \"include_external\": {\"type\": \"string\", \"description\": \"If `include_external=audio` is specified it signals that the client can play externally hosted audio content, and marks\\nthe content as playable in the response. By default externally hosted audio content is marked as unplayable in the response.\\n\"}}, \"required\": [\"q\", \"type\"]}}, {\"name\": \"GET_albums__id__tracks\", \"description\": \"Get Spotify catalog information about an album\\u2019s tracks.\\nOptional parameters can be used to limit the number of tracks returned.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"id\": {\"type\": \"string\", \"description\": \"The [Spotify ID](/documentation/web-api/#spotify-uris-and-ids) of the album.\\n\"}, \"market\": {\"type\": \"string\", \"description\": \"An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).\\n  If a country code is specified, only content that is available in that market will be returned.<br/>\\n  If a valid user access token is specified in the request header, the country associated with\\n  the user account will take priority over this parameter.<br/>\\n  _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>\\n  Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).\\n\"}, \"limit\": {\"type\": \"integer\", \"description\": \"The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50.\\n\"}, \"offset\": {\"type\": \"integer\", \"description\": \"The index of the first item to return. Default: 0 (the first item). Use with limit to get the next set of items.\\n\"}}, \"required\": [\"id\"]}}, {\"name\": \"POST_me_player_queue\", \"description\": \"Add an item to the end of the user's current playback queue.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"uri\": {\"type\": \"string\", \"description\": \"The uri of the item to add to the queue. Must be a track or an episode uri.\\n\"}, \"device_id\": {\"type\": \"string\", \"description\": \"The id of the device this command is targeting. If\\nnot supplied, the user's currently active device is the target.\\n\"}}, \"required\": [\"uri\"]}}]\n\nGraphQL schema:\n\ntype GET_search_Album {\n  album_type: String\n  artists: [GET_search_ArtistsEntry]\n  available_markets: [String]\n  external_urls: GET_search_ExternalUrls1\n  href: String\n  id: String\n  images: [GET_search_ImagesEntry]\n  name: String\n  release_date: Date\n  release_date_precision: String\n  total_tracks: Int\n  type: String\n  uri: String\n}\n\ntype GET_search_Artists1Entry {\n  external_urls: GET_search_ExternalUrls2\n  href: String\n  id: String\n  name: String\n  type: String\n  uri: String\n}\n\ntype GET_search_ArtistsEntry {\n  external_urls: GET_search_ExternalUrls\n  href: String\n  id: String\n  name: String\n  type: String\n  uri: String\n}\n\ntype GET_search_ExternalIds {\n  isrc: String\n}\n\ntype GET_search_ExternalUrls {\n  spotify: String\n}\n\ntype GET_search_ExternalUrls1 {\n  spotify: String\n}\n\ntype GET_search_ExternalUrls2 {\n  spotify: String\n}\n\ntype GET_search_ExternalUrls3 {\n  spotify: String\n}\n\ntype GET_search_ImagesEntry {\n  height: Int\n  url: String\n  width: Int\n}\n\ntype GET_search_ItemsEntry {\n  album: GET_search_Album\n  artists: [GET_search_Artists1Entry]\n  available_markets: [String]\n  disc_number: Int\n  duration_ms: Int\n  explicit: Boolean\n  external_ids: GET_search_ExternalIds\n  external_urls: GET_search_ExternalUrls3\n  href: String\n  id: String\n  is_local: Boolean\n  name: String\n  popularity: Int\n  preview_url: String\n  track_number: Int\n  type: String\n  uri: String\n}\n\ntype GET_search_Root {\n  tracks: GET_search_Tracks\n}\n\ntype GET_search_Tracks {\n  href: String\n  items: [GET_search_ItemsEntry]\n  limit: Int\n  next: String\n  offset: Int\n  \"\"\"\n  Field \"previous\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  previous: JSON\n  total: Int\n}\n\ntype Query {\n  GET_search(\n    q: String\n    spotify_access_token: String!\n    type: String\n  ): GET_search_Root\n    @rest(\n      endpoint: \"https://api.spotify.com/v1/search\"\n      headers: [\n        { name: \"authorization\", value: \"Bearer $spotify_access_token;\" }\n      ]\n    )\n}\ntype GET_albums__id__tracks_ArtistsEntry {\n  external_urls: GET_albums__id__tracks_ExternalUrls\n  href: String\n  id: String\n  name: String\n  type: String\n  uri: String\n}\n\ntype GET_albums__id__tracks_ExternalUrls {\n  spotify: String\n}\n\ntype GET_albums__id__tracks_ExternalUrls1 {\n  spotify: String\n}\n\ntype GET_albums__id__tracks_ItemsEntry {\n  artists: [GET_albums__id__tracks_ArtistsEntry]\n  disc_number: Int\n  duration_ms: Int\n  explicit: Boolean\n  external_urls: GET_albums__id__tracks_ExternalUrls1\n  href: String\n  id: String\n  is_local: Boolean\n  is_playable: Boolean\n  name: String\n  preview_url: String\n  track_number: Int\n  type: String\n  uri: String\n}\n\ntype GET_albums__id__tracks_Root {\n  href: String\n  items: [GET_albums__id__tracks_ItemsEntry]\n  limit: Int\n  \"\"\"\n  Field \"next\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  next: JSON\n  offset: Int\n  \"\"\"\n  Field \"previous\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  previous: JSON\n  total: Int\n}\n\ntype Query {\n  GET_albums__id__tracks(\n    id: String!\n    spotify_access_token: String!\n  ): GET_albums__id__tracks_Root\n    @rest(\n      endpoint: \"https://api.spotify.com/v1/albums/$id;/tracks\"\n      headers: [\n        { name: \"authorization\", value: \"Bearer $spotify_access_token;\" }\n      ]\n    )\n}\n\nUtterance: Add the first song of The Dark Side of the Moon in my playback queue", "output": "response_obj = GET_search(q=\"The Dark Side of the Moon\", type=\"album\")\nresponse_obj1 = GET_albums__id__tracks(id=response_obj.tracks.items[0].id)\nPOST_me_player_queue(uri=response_obj1.items[0].uri)\n", "function_specs": "[{\"name\": \"GET_search\", \"description\": \"Get Spotify catalog information about albums, artists, playlists, tracks, shows, episodes or audiobooks\\nthat match a keyword string.<br />\\n**Note: Audiobooks are only available for the US, UK, Ireland, New Zealand and Australia markets.**\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"q\": {\"type\": \"string\", \"description\": \"Your search query.\\n\\nYou can narrow down your search using field filters. The available filters are `album`, `artist`, `track`, `year`, `upc`, `tag:hipster`, `tag:new`, `isrc`, and `genre`. Each field filter only applies to certain result types.\\n\\nThe `artist` and `year` filters can be used while searching albums, artists and tracks. You can filter on a single `year` or a range (e.g. 1955-1960).<br />\\nThe `album` filter can be used while searching albums and tracks.<br />\\nThe `genre` filter can be used while searching artists and tracks.<br />\\nThe `isrc` and `track` filters can be used while searching tracks.<br />\\nThe `upc`, `tag:new` and `tag:hipster` filters can only be used while searching albums. The `tag:new` filter will return albums released in the past two weeks and `tag:hipster` can be used to return only albums with the lowest 10% popularity.<br />\\n\"}, \"type\": {\"type\": \"array\", \"description\": \"A comma-separated list of item types to search across. Search results include hits\\nfrom all the specified item types. For example: `q=abacab&type=album,track` returns\\nboth albums and tracks matching \\\"abacab\\\".\\n\"}, \"market\": {\"type\": \"string\", \"description\": \"An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).\\n  If a country code is specified, only content that is available in that market will be returned.<br/>\\n  If a valid user access token is specified in the request header, the country associated with\\n  the user account will take priority over this parameter.<br/>\\n  _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>\\n  Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).\\n\"}, \"limit\": {\"type\": \"integer\", \"description\": \"The maximum number of results to return in each item type.\\n\"}, \"offset\": {\"type\": \"integer\", \"description\": \"The index of the first result to return. Use\\nwith limit to get the next page of search results.\\n\"}, \"include_external\": {\"type\": \"string\", \"description\": \"If `include_external=audio` is specified it signals that the client can play externally hosted audio content, and marks\\nthe content as playable in the response. By default externally hosted audio content is marked as unplayable in the response.\\n\"}}, \"required\": [\"q\", \"type\"]}}, {\"name\": \"GET_albums__id__tracks\", \"description\": \"Get Spotify catalog information about an album\\u2019s tracks.\\nOptional parameters can be used to limit the number of tracks returned.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"id\": {\"type\": \"string\", \"description\": \"The [Spotify ID](/documentation/web-api/#spotify-uris-and-ids) of the album.\\n\"}, \"market\": {\"type\": \"string\", \"description\": \"An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).\\n  If a country code is specified, only content that is available in that market will be returned.<br/>\\n  If a valid user access token is specified in the request header, the country associated with\\n  the user account will take priority over this parameter.<br/>\\n  _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>\\n  Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).\\n\"}, \"limit\": {\"type\": \"integer\", \"description\": \"The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50.\\n\"}, \"offset\": {\"type\": \"integer\", \"description\": \"The index of the first item to return. Default: 0 (the first item). Use with limit to get the next set of items.\\n\"}}, \"required\": [\"id\"]}}, {\"name\": \"POST_me_player_queue\", \"description\": \"Add an item to the end of the user's current playback queue.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"uri\": {\"type\": \"string\", \"description\": \"The uri of the item to add to the queue. Must be a track or an episode uri.\\n\"}, \"device_id\": {\"type\": \"string\", \"description\": \"The id of the device this command is targeting. If\\nnot supplied, the user's currently active device is the target.\\n\"}}, \"required\": [\"uri\"]}}]", "GraphQL_schema": "type GET_search_Album {\n  album_type: String\n  artists: [GET_search_ArtistsEntry]\n  available_markets: [String]\n  external_urls: GET_search_ExternalUrls1\n  href: String\n  id: String\n  images: [GET_search_ImagesEntry]\n  name: String\n  release_date: Date\n  release_date_precision: String\n  total_tracks: Int\n  type: String\n  uri: String\n}\n\ntype GET_search_Artists1Entry {\n  external_urls: GET_search_ExternalUrls2\n  href: String\n  id: String\n  name: String\n  type: String\n  uri: String\n}\n\ntype GET_search_ArtistsEntry {\n  external_urls: GET_search_ExternalUrls\n  href: String\n  id: String\n  name: String\n  type: String\n  uri: String\n}\n\ntype GET_search_ExternalIds {\n  isrc: String\n}\n\ntype GET_search_ExternalUrls {\n  spotify: String\n}\n\ntype GET_search_ExternalUrls1 {\n  spotify: String\n}\n\ntype GET_search_ExternalUrls2 {\n  spotify: String\n}\n\ntype GET_search_ExternalUrls3 {\n  spotify: String\n}\n\ntype GET_search_ImagesEntry {\n  height: Int\n  url: String\n  width: Int\n}\n\ntype GET_search_ItemsEntry {\n  album: GET_search_Album\n  artists: [GET_search_Artists1Entry]\n  available_markets: [String]\n  disc_number: Int\n  duration_ms: Int\n  explicit: Boolean\n  external_ids: GET_search_ExternalIds\n  external_urls: GET_search_ExternalUrls3\n  href: String\n  id: String\n  is_local: Boolean\n  name: String\n  popularity: Int\n  preview_url: String\n  track_number: Int\n  type: String\n  uri: String\n}\n\ntype GET_search_Root {\n  tracks: GET_search_Tracks\n}\n\ntype GET_search_Tracks {\n  href: String\n  items: [GET_search_ItemsEntry]\n  limit: Int\n  next: String\n  offset: Int\n  \"\"\"\n  Field \"previous\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  previous: JSON\n  total: Int\n}\n\ntype Query {\n  GET_search(\n    q: String\n    spotify_access_token: String!\n    type: String\n  ): GET_search_Root\n    @rest(\n      endpoint: \"https://api.spotify.com/v1/search\"\n      headers: [\n        { name: \"authorization\", value: \"Bearer $spotify_access_token;\" }\n      ]\n    )\n}\ntype GET_albums__id__tracks_ArtistsEntry {\n  external_urls: GET_albums__id__tracks_ExternalUrls\n  href: String\n  id: String\n  name: String\n  type: String\n  uri: String\n}\n\ntype GET_albums__id__tracks_ExternalUrls {\n  spotify: String\n}\n\ntype GET_albums__id__tracks_ExternalUrls1 {\n  spotify: String\n}\n\ntype GET_albums__id__tracks_ItemsEntry {\n  artists: [GET_albums__id__tracks_ArtistsEntry]\n  disc_number: Int\n  duration_ms: Int\n  explicit: Boolean\n  external_urls: GET_albums__id__tracks_ExternalUrls1\n  href: String\n  id: String\n  is_local: Boolean\n  is_playable: Boolean\n  name: String\n  preview_url: String\n  track_number: Int\n  type: String\n  uri: String\n}\n\ntype GET_albums__id__tracks_Root {\n  href: String\n  items: [GET_albums__id__tracks_ItemsEntry]\n  limit: Int\n  \"\"\"\n  Field \"next\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  next: JSON\n  offset: Int\n  \"\"\"\n  Field \"previous\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  previous: JSON\n  total: Int\n}\n\ntype Query {\n  GET_albums__id__tracks(\n    id: String!\n    spotify_access_token: String!\n  ): GET_albums__id__tracks_Root\n    @rest(\n      endpoint: \"https://api.spotify.com/v1/albums/$id;/tracks\"\n      headers: [\n        { name: \"authorization\", value: \"Bearer $spotify_access_token;\" }\n      ]\n    )\n}\n", "utterance": "Add the first song of The Dark Side of the Moon in my playback queue"}
{"domain": "spotify", "input": "Function Signatures:\n\n[{\"name\": \"PUT_me_player_pause\", \"description\": \"Pause playback on the user's account.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {}, \"required\": []}}]\n\nGraphQL schema:\n\n\nUtterance: Pause the player", "output": "PUT_me_player_pause()\n", "function_specs": "[{\"name\": \"PUT_me_player_pause\", \"description\": \"Pause playback on the user's account.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {}, \"required\": []}}]", "GraphQL_schema": "", "utterance": "Pause the player"}
{"domain": "spotify", "input": "Function Signatures:\n\n[{\"name\": \"GET_me_top__type_\", \"description\": \"Get the current user's top artists or tracks based on calculated affinity.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"type\": {\"type\": \"string\", \"description\": \"The type of entity to return. Valid values: `artists` or `tracks`\\n\"}, \"time_range\": {\"type\": \"string\", \"description\": \"Over what time frame the affinities are computed. Valid values: `long_term` (calculated from several years of data and including all new data as it becomes available), `medium_term` (approximately last 6 months), `short_term` (approximately last 4 weeks). Default: `medium_term`\\n\"}, \"limit\": {\"type\": \"integer\", \"description\": \"The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50.\\n\"}, \"offset\": {\"type\": \"integer\", \"description\": \"The index of the first item to return. Default: 0 (the first item). Use with limit to get the next set of items.\\n\"}}, \"required\": [\"type\"]}}]\n\nGraphQL schema:\n\ntype GET_me_top__type_Root {\n  href: String\n  items: [JSON]\n  limit: Int\n  \"\"\"\n  Field \"next\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  next: JSON\n  offset: Int\n  \"\"\"\n  Field \"previous\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  previous: JSON\n  total: Int\n}\n\ntype Query {\n  GET_me_top__type_(\n    spotify_access_token: String!\n    type: String!\n  ): GET_me_top__type_Root\n    @rest(\n      endpoint: \"https://api.spotify.com/v1/me/top/$type;\"\n      headers: [\n        { name: \"authorization\", value: \"Bearer $spotify_access_token;\" }\n      ]\n    )\n}\n\nUtterance: Who is my favorite artist?", "output": "GET_me_top__type_(type=\"artists\")\n", "function_specs": "[{\"name\": \"GET_me_top__type_\", \"description\": \"Get the current user's top artists or tracks based on calculated affinity.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"type\": {\"type\": \"string\", \"description\": \"The type of entity to return. Valid values: `artists` or `tracks`\\n\"}, \"time_range\": {\"type\": \"string\", \"description\": \"Over what time frame the affinities are computed. Valid values: `long_term` (calculated from several years of data and including all new data as it becomes available), `medium_term` (approximately last 6 months), `short_term` (approximately last 4 weeks). Default: `medium_term`\\n\"}, \"limit\": {\"type\": \"integer\", \"description\": \"The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50.\\n\"}, \"offset\": {\"type\": \"integer\", \"description\": \"The index of the first item to return. Default: 0 (the first item). Use with limit to get the next set of items.\\n\"}}, \"required\": [\"type\"]}}]", "GraphQL_schema": "type GET_me_top__type_Root {\n  href: String\n  items: [JSON]\n  limit: Int\n  \"\"\"\n  Field \"next\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  next: JSON\n  offset: Int\n  \"\"\"\n  Field \"previous\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  previous: JSON\n  total: Int\n}\n\ntype Query {\n  GET_me_top__type_(\n    spotify_access_token: String!\n    type: String!\n  ): GET_me_top__type_Root\n    @rest(\n      endpoint: \"https://api.spotify.com/v1/me/top/$type;\"\n      headers: [\n        { name: \"authorization\", value: \"Bearer $spotify_access_token;\" }\n      ]\n    )\n}\n", "utterance": "Who is my favorite artist?"}
{"domain": "spotify", "input": "Function Signatures:\n\n[{\"name\": \"PUT_me_player_pause\", \"description\": \"Pause playback on the user's account.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {}, \"required\": []}}, {\"name\": \"PUT_me_player_volume\", \"description\": \"Set the volume for the user\\u2019s current playback device.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"volume_percent\": {\"type\": \"integer\", \"description\": \"The volume to set. Must be a value from 0 to 100 inclusive.\\n\"}}, \"required\": [\"volume_percent\"]}}, {\"name\": \"PUT_me_player_play\", \"description\": \"Start a new context or resume current playback on the user's active device.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"context_uri\": {\"type\": \"string\", \"description\": \"Optional. Spotify URI of the context to play. Valid contexts are albums, artists & playlists. {context_uri:\\\"spotify:album:1Je1IMUlBXcx1Fz0WE7oPT\\\"}\"}, \"uris\": {\"type\": \"array\", \"description\": \"Optional. A JSON array of the Spotify track URIs to play. For example: {\\\"uris\\\": [\\\"spotify:track:4iV5W9uYEdYUVa79Axb7Rh\\\", \\\"spotify:track:1301WleyT98MSxVHPZCA6M\\\"]}\"}, \"offset\": {\"type\": \"array\", \"description\": \"Optional. Indicates from where in the context playback should start. Only available when context_uri corresponds to an album or playlist object \\\"position\\\" is zero based and can\\u2019t be negative. Example: \\\"offset\\\": {\\\"position\\\": 5} \\\"uri\\\" is a string representing the uri of the item to start at. Example: \\\"offset\\\": {\\\"uri\\\": \\\"spotify:track:1301WleyT98MSxVHPZCA6M\\\"}\"}, \"position_ms\": {\"type\": \"integer\", \"description\": \"\"}}, \"required\": [], \"body_params\": [\"context_uri\", \"uris\", \"offset\", \"position_ms\"]}}]\n\nGraphQL schema:\n\n\nUtterance: Pause playback, turn down the volume to 10 and resume playing", "output": "PUT_me_player_pause()\nPUT_me_player_volume(volume_percent=10)\nPUT_me_player_play()\n", "function_specs": "[{\"name\": \"PUT_me_player_pause\", \"description\": \"Pause playback on the user's account.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {}, \"required\": []}}, {\"name\": \"PUT_me_player_volume\", \"description\": \"Set the volume for the user\\u2019s current playback device.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"volume_percent\": {\"type\": \"integer\", \"description\": \"The volume to set. Must be a value from 0 to 100 inclusive.\\n\"}}, \"required\": [\"volume_percent\"]}}, {\"name\": \"PUT_me_player_play\", \"description\": \"Start a new context or resume current playback on the user's active device.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"context_uri\": {\"type\": \"string\", \"description\": \"Optional. Spotify URI of the context to play. Valid contexts are albums, artists & playlists. {context_uri:\\\"spotify:album:1Je1IMUlBXcx1Fz0WE7oPT\\\"}\"}, \"uris\": {\"type\": \"array\", \"description\": \"Optional. A JSON array of the Spotify track URIs to play. For example: {\\\"uris\\\": [\\\"spotify:track:4iV5W9uYEdYUVa79Axb7Rh\\\", \\\"spotify:track:1301WleyT98MSxVHPZCA6M\\\"]}\"}, \"offset\": {\"type\": \"array\", \"description\": \"Optional. Indicates from where in the context playback should start. Only available when context_uri corresponds to an album or playlist object \\\"position\\\" is zero based and can\\u2019t be negative. Example: \\\"offset\\\": {\\\"position\\\": 5} \\\"uri\\\" is a string representing the uri of the item to start at. Example: \\\"offset\\\": {\\\"uri\\\": \\\"spotify:track:1301WleyT98MSxVHPZCA6M\\\"}\"}, \"position_ms\": {\"type\": \"integer\", \"description\": \"\"}}, \"required\": [], \"body_params\": [\"context_uri\", \"uris\", \"offset\", \"position_ms\"]}}]", "GraphQL_schema": "", "utterance": "Pause playback, turn down the volume to 10 and resume playing"}
{"domain": "tmdb", "input": "Function Signatures:\n\n[{\"name\": \"GET_search_collection\", \"description\": \"Search for collections.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"query\": {\"type\": \"string\", \"description\": \"query\"}, \"page\": {\"type\": \"integer\", \"description\": \"page\"}}, \"required\": [\"query\"]}}, {\"name\": \"GET_collection__collection_id__images\", \"description\": \"Get the images for a collection by id.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"collection_id\": {\"type\": \"integer\", \"description\": \"collection id\"}}, \"required\": [\"collection_id\"]}}]\n\nGraphQL schema:\n\ntype GET_search_collection_ResultsEntry {\n  adult: Boolean\n  backdrop_path: String\n  id: Int\n  name: String\n  original_language: String\n  original_name: String\n  overview: String\n  poster_path: String\n}\n\ntype GET_search_collection_Root {\n  page: Int\n  results: [GET_search_collection_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_search_collection(\n    query: String\n    tmdb_access_token: String!\n  ): GET_search_collection_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/search/collection\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_collection__collection_id__images_BackdropsEntry {\n  aspect_ratio: Float\n  file_path: String\n  height: Int\n  iso_639_1: String\n  vote_average: Float\n  vote_count: Int\n  width: Int\n}\n\ntype GET_collection__collection_id__images_PostersEntry {\n  aspect_ratio: Float\n  file_path: String\n  height: Int\n  iso_639_1: String\n  vote_average: Float\n  vote_count: Int\n  width: Int\n}\n\ntype GET_collection__collection_id__images_Root {\n  backdrops: [GET_collection__collection_id__images_BackdropsEntry]\n  id: Int\n  posters: [GET_collection__collection_id__images_PostersEntry]\n}\n\ntype Query {\n  GET_collection__collection_id__images(\n    collection_id: String!\n    tmdb_access_token: String!\n  ): GET_collection__collection_id__images_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/collection/$collection_id;/images\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\n\nUtterance: give me an image for the collection Star Wars", "output": "response_obj = GET_search_collection(query=\"Star Wars\")\nGET_collection__collection_id__images(collection_id=response_obj.results[0].id)\n", "function_specs": "[{\"name\": \"GET_search_collection\", \"description\": \"Search for collections.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"query\": {\"type\": \"string\", \"description\": \"query\"}, \"page\": {\"type\": \"integer\", \"description\": \"page\"}}, \"required\": [\"query\"]}}, {\"name\": \"GET_collection__collection_id__images\", \"description\": \"Get the images for a collection by id.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"collection_id\": {\"type\": \"integer\", \"description\": \"collection id\"}}, \"required\": [\"collection_id\"]}}]", "GraphQL_schema": "type GET_search_collection_ResultsEntry {\n  adult: Boolean\n  backdrop_path: String\n  id: Int\n  name: String\n  original_language: String\n  original_name: String\n  overview: String\n  poster_path: String\n}\n\ntype GET_search_collection_Root {\n  page: Int\n  results: [GET_search_collection_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_search_collection(\n    query: String\n    tmdb_access_token: String!\n  ): GET_search_collection_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/search/collection\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_collection__collection_id__images_BackdropsEntry {\n  aspect_ratio: Float\n  file_path: String\n  height: Int\n  iso_639_1: String\n  vote_average: Float\n  vote_count: Int\n  width: Int\n}\n\ntype GET_collection__collection_id__images_PostersEntry {\n  aspect_ratio: Float\n  file_path: String\n  height: Int\n  iso_639_1: String\n  vote_average: Float\n  vote_count: Int\n  width: Int\n}\n\ntype GET_collection__collection_id__images_Root {\n  backdrops: [GET_collection__collection_id__images_BackdropsEntry]\n  id: Int\n  posters: [GET_collection__collection_id__images_PostersEntry]\n}\n\ntype Query {\n  GET_collection__collection_id__images(\n    collection_id: String!\n    tmdb_access_token: String!\n  ): GET_collection__collection_id__images_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/collection/$collection_id;/images\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\n", "utterance": "give me an image for the collection Star Wars"}
{"domain": "tmdb", "input": "Function Signatures:\n\n[{\"name\": \"GET_tv_popular\", \"description\": \"Get a list of the current popular TV shows on TMDb. This list updates daily.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"page\": {\"type\": \"integer\", \"description\": \"page\"}}, \"required\": []}}, {\"name\": \"GET_tv__tv_id__credits\", \"description\": \"Get the credits (cast and crew) that have been added to a TV show.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"tv_id\": {\"type\": \"integer\", \"description\": \"tv id\"}}, \"required\": [\"tv_id\"]}}]\n\nGraphQL schema:\n\ntype GET_tv_popular_ResultsEntry {\n  adult: Boolean\n  backdrop_path: String\n  first_air_date: Date\n  genre_ids: [Int]\n  id: Int\n  name: String\n  origin_country: [String]\n  original_language: String\n  original_name: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_tv_popular_Root {\n  page: Int\n  results: [GET_tv_popular_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_tv_popular(tmdb_access_token: String!): GET_tv_popular_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/tv/popular\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_tv__tv_id__credits_CastEntry {\n  adult: Boolean\n  character: String\n  credit_id: String\n  gender: Int\n  id: Int\n  known_for_department: String\n  name: String\n  order: Int\n  original_name: String\n  popularity: Float\n  profile_path: String\n}\n\ntype GET_tv__tv_id__credits_CrewEntry {\n  adult: Boolean\n  credit_id: String\n  department: String\n  gender: Int\n  id: Int\n  job: String\n  known_for_department: String\n  name: String\n  original_name: String\n  popularity: Float\n  profile_path: String\n}\n\ntype GET_tv__tv_id__credits_Root {\n  cast: [GET_tv__tv_id__credits_CastEntry]\n  crew: [GET_tv__tv_id__credits_CrewEntry]\n  id: Int\n}\n\ntype Query {\n  GET_tv__tv_id__credits(\n    tmdb_access_token: String!\n    tv_id: String!\n  ): GET_tv__tv_id__credits_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/tv/$tv_id;/credits\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\n\nUtterance: Who is the lead actor in the most popular TV show?", "output": "response_obj = GET_tv_popular()\nGET_tv__tv_id__credits(tv_id=response_obj.results[0].id)\n", "function_specs": "[{\"name\": \"GET_tv_popular\", \"description\": \"Get a list of the current popular TV shows on TMDb. This list updates daily.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"page\": {\"type\": \"integer\", \"description\": \"page\"}}, \"required\": []}}, {\"name\": \"GET_tv__tv_id__credits\", \"description\": \"Get the credits (cast and crew) that have been added to a TV show.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"tv_id\": {\"type\": \"integer\", \"description\": \"tv id\"}}, \"required\": [\"tv_id\"]}}]", "GraphQL_schema": "type GET_tv_popular_ResultsEntry {\n  adult: Boolean\n  backdrop_path: String\n  first_air_date: Date\n  genre_ids: [Int]\n  id: Int\n  name: String\n  origin_country: [String]\n  original_language: String\n  original_name: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_tv_popular_Root {\n  page: Int\n  results: [GET_tv_popular_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_tv_popular(tmdb_access_token: String!): GET_tv_popular_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/tv/popular\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_tv__tv_id__credits_CastEntry {\n  adult: Boolean\n  character: String\n  credit_id: String\n  gender: Int\n  id: Int\n  known_for_department: String\n  name: String\n  order: Int\n  original_name: String\n  popularity: Float\n  profile_path: String\n}\n\ntype GET_tv__tv_id__credits_CrewEntry {\n  adult: Boolean\n  credit_id: String\n  department: String\n  gender: Int\n  id: Int\n  job: String\n  known_for_department: String\n  name: String\n  original_name: String\n  popularity: Float\n  profile_path: String\n}\n\ntype GET_tv__tv_id__credits_Root {\n  cast: [GET_tv__tv_id__credits_CastEntry]\n  crew: [GET_tv__tv_id__credits_CrewEntry]\n  id: Int\n}\n\ntype Query {\n  GET_tv__tv_id__credits(\n    tmdb_access_token: String!\n    tv_id: String!\n  ): GET_tv__tv_id__credits_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/tv/$tv_id;/credits\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\n", "utterance": "Who is the lead actor in the most popular TV show?"}
{"domain": "tmdb", "input": "Function Signatures:\n\n[{\"name\": \"GET_tv_popular\", \"description\": \"Get a list of the current popular TV shows on TMDb. This list updates daily.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"page\": {\"type\": \"integer\", \"description\": \"page\"}}, \"required\": []}}, {\"name\": \"GET_tv__tv_id__keywords\", \"description\": \"Get the keywords that have been added to a TV show.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"tv_id\": {\"type\": \"integer\", \"description\": \"tv id\"}}, \"required\": [\"tv_id\"]}}]\n\nGraphQL schema:\n\ntype GET_tv_popular_ResultsEntry {\n  adult: Boolean\n  backdrop_path: String\n  first_air_date: Date\n  genre_ids: [Int]\n  id: Int\n  name: String\n  origin_country: [String]\n  original_language: String\n  original_name: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_tv_popular_Root {\n  page: Int\n  results: [GET_tv_popular_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_tv_popular(tmdb_access_token: String!): GET_tv_popular_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/tv/popular\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_tv__tv_id__keywords_ResultsEntry {\n  id: Int\n  name: String\n}\n\ntype GET_tv__tv_id__keywords_Root {\n  id: Int\n  results: [GET_tv__tv_id__keywords_ResultsEntry]\n}\n\ntype Query {\n  GET_tv__tv_id__keywords(\n    tmdb_access_token: String!\n    tv_id: String!\n  ): GET_tv__tv_id__keywords_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/tv/$tv_id;/keywords\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\n\nUtterance: give me a keyword of the most popular TV show", "output": "response_obj = GET_tv_popular()\nGET_tv__tv_id__keywords(tv_id=response_obj.results[0].id)\n", "function_specs": "[{\"name\": \"GET_tv_popular\", \"description\": \"Get a list of the current popular TV shows on TMDb. This list updates daily.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"page\": {\"type\": \"integer\", \"description\": \"page\"}}, \"required\": []}}, {\"name\": \"GET_tv__tv_id__keywords\", \"description\": \"Get the keywords that have been added to a TV show.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"tv_id\": {\"type\": \"integer\", \"description\": \"tv id\"}}, \"required\": [\"tv_id\"]}}]", "GraphQL_schema": "type GET_tv_popular_ResultsEntry {\n  adult: Boolean\n  backdrop_path: String\n  first_air_date: Date\n  genre_ids: [Int]\n  id: Int\n  name: String\n  origin_country: [String]\n  original_language: String\n  original_name: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_tv_popular_Root {\n  page: Int\n  results: [GET_tv_popular_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_tv_popular(tmdb_access_token: String!): GET_tv_popular_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/tv/popular\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_tv__tv_id__keywords_ResultsEntry {\n  id: Int\n  name: String\n}\n\ntype GET_tv__tv_id__keywords_Root {\n  id: Int\n  results: [GET_tv__tv_id__keywords_ResultsEntry]\n}\n\ntype Query {\n  GET_tv__tv_id__keywords(\n    tmdb_access_token: String!\n    tv_id: String!\n  ): GET_tv__tv_id__keywords_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/tv/$tv_id;/keywords\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\n", "utterance": "give me a keyword of the most popular TV show"}
{"domain": "tmdb", "input": "Function Signatures:\n\n[{\"name\": \"GET_search_movie\", \"description\": \"Search for movies.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"query\": {\"type\": \"string\", \"description\": \"query\"}, \"page\": {\"type\": \"integer\", \"description\": \"page\"}, \"include_adult\": {\"type\": \"boolean\", \"description\": \"include adult\"}, \"region\": {\"type\": \"string\", \"description\": \"region\"}, \"year\": {\"type\": \"integer\", \"description\": \"year\"}, \"primary_release_year\": {\"type\": \"integer\", \"description\": \"primary release year\"}}, \"required\": [\"query\"]}}, {\"name\": \"GET_movie__movie_id__release_dates\", \"description\": \"Get the release date along with the certification for a movie.\\n\\nRelease dates support different types:\\n\\n1. Premiere\\n2. Theatrical (limited)\\n3. Theatrical\\n4. Digital\\n5. Physical\\n6. TV\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"movie_id\": {\"type\": \"integer\", \"description\": \"movie id\"}}, \"required\": [\"movie_id\"]}}]\n\nGraphQL schema:\n\ntype GET_search_movie_ResultsEntry {\n  adult: Boolean\n  backdrop_path: String\n  genre_ids: [Int]\n  id: Int\n  original_language: String\n  original_title: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  release_date: String\n  title: String\n  video: Boolean\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_search_movie_Root {\n  page: Int\n  results: [GET_search_movie_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_search_movie(\n    query: String\n    tmdb_access_token: String!\n  ): GET_search_movie_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/search/movie\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_movie__movie_id__release_dates_ReleaseDatesEntry {\n  certification: String\n  descriptors: [String]\n  iso_639_1: String\n  note: String\n  release_date: DateTime\n  type: Int\n}\n\ntype GET_movie__movie_id__release_dates_ResultsEntry {\n  iso_3166_1: String\n  release_dates: [GET_movie__movie_id__release_dates_ReleaseDatesEntry]\n}\n\ntype GET_movie__movie_id__release_dates_Root {\n  id: Int\n  results: [GET_movie__movie_id__release_dates_ResultsEntry]\n}\n\ntype Query {\n  GET_movie__movie_id__release_dates(\n    movie_id: String!\n    tmdb_access_token: String!\n  ): GET_movie__movie_id__release_dates_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/movie/$movie_id;/release_dates\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\n\nUtterance: What is the release date of the movie \"The Matrix\"?", "output": "response_obj = GET_search_movie(query=\"The Matrix\")\nGET_movie__movie_id__release_dates(movie_id=response_obj.results[0].id)\n", "function_specs": "[{\"name\": \"GET_search_movie\", \"description\": \"Search for movies.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"query\": {\"type\": \"string\", \"description\": \"query\"}, \"page\": {\"type\": \"integer\", \"description\": \"page\"}, \"include_adult\": {\"type\": \"boolean\", \"description\": \"include adult\"}, \"region\": {\"type\": \"string\", \"description\": \"region\"}, \"year\": {\"type\": \"integer\", \"description\": \"year\"}, \"primary_release_year\": {\"type\": \"integer\", \"description\": \"primary release year\"}}, \"required\": [\"query\"]}}, {\"name\": \"GET_movie__movie_id__release_dates\", \"description\": \"Get the release date along with the certification for a movie.\\n\\nRelease dates support different types:\\n\\n1. Premiere\\n2. Theatrical (limited)\\n3. Theatrical\\n4. Digital\\n5. Physical\\n6. TV\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"movie_id\": {\"type\": \"integer\", \"description\": \"movie id\"}}, \"required\": [\"movie_id\"]}}]", "GraphQL_schema": "type GET_search_movie_ResultsEntry {\n  adult: Boolean\n  backdrop_path: String\n  genre_ids: [Int]\n  id: Int\n  original_language: String\n  original_title: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  release_date: String\n  title: String\n  video: Boolean\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_search_movie_Root {\n  page: Int\n  results: [GET_search_movie_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_search_movie(\n    query: String\n    tmdb_access_token: String!\n  ): GET_search_movie_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/search/movie\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_movie__movie_id__release_dates_ReleaseDatesEntry {\n  certification: String\n  descriptors: [String]\n  iso_639_1: String\n  note: String\n  release_date: DateTime\n  type: Int\n}\n\ntype GET_movie__movie_id__release_dates_ResultsEntry {\n  iso_3166_1: String\n  release_dates: [GET_movie__movie_id__release_dates_ReleaseDatesEntry]\n}\n\ntype GET_movie__movie_id__release_dates_Root {\n  id: Int\n  results: [GET_movie__movie_id__release_dates_ResultsEntry]\n}\n\ntype Query {\n  GET_movie__movie_id__release_dates(\n    movie_id: String!\n    tmdb_access_token: String!\n  ): GET_movie__movie_id__release_dates_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/movie/$movie_id;/release_dates\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\n", "utterance": "What is the release date of the movie \"The Matrix\"?"}
{"domain": "tmdb", "input": "Function Signatures:\n\n[{\"name\": \"GET_movie_top_rated\", \"description\": \"Get the top rated movies on TMDb.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"page\": {\"type\": \"integer\", \"description\": \"page\"}, \"region\": {\"type\": \"string\", \"description\": \"region\"}}, \"required\": []}}]\n\nGraphQL schema:\n\ntype GET_movie_top_rated_ResultsEntry {\n  adult: Boolean\n  backdrop_path: String\n  genre_ids: [Int]\n  id: Int\n  original_language: String\n  original_title: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  release_date: Date\n  title: String\n  video: Boolean\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_movie_top_rated_Root {\n  page: Int\n  results: [GET_movie_top_rated_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_movie_top_rated(tmdb_access_token: String!): GET_movie_top_rated_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/movie/top_rated\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\n\nUtterance: What is top-1 rated movie?", "output": "GET_movie_top_rated()\n", "function_specs": "[{\"name\": \"GET_movie_top_rated\", \"description\": \"Get the top rated movies on TMDb.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"page\": {\"type\": \"integer\", \"description\": \"page\"}, \"region\": {\"type\": \"string\", \"description\": \"region\"}}, \"required\": []}}]", "GraphQL_schema": "type GET_movie_top_rated_ResultsEntry {\n  adult: Boolean\n  backdrop_path: String\n  genre_ids: [Int]\n  id: Int\n  original_language: String\n  original_title: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  release_date: Date\n  title: String\n  video: Boolean\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_movie_top_rated_Root {\n  page: Int\n  results: [GET_movie_top_rated_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_movie_top_rated(tmdb_access_token: String!): GET_movie_top_rated_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/movie/top_rated\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\n", "utterance": "What is top-1 rated movie?"}
{"domain": "tmdb", "input": "Function Signatures:\n\n[{\"name\": \"GET_trending__media_type___time_window_\", \"description\": \"Get the daily or weekly trending items. The daily trending list tracks items over the period of a day while items have a 24 hour half life. The weekly list tracks items over a 7 day period, with a 7 day half life.\\n\\n#### Valid Media Types\\n\\n| **Media Type** | **Description** |\\n| - | - |\\n| all | Include all movies, TV shows and people in the results as a global trending list. |\\n| movie | Show the trending movies in the results. |\\n| tv | Show the trending TV shows in the results. |\\n| person | Show the trending people in the results. |\\n\\n#### Valid Time Windows\\n\\n| **Time Window** | **Description** |\\n| - | - |\\n| day | View the trending list for the day. |\\n| week | View the trending list for the week. |\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"media_type\": {\"type\": \"string\", \"description\": \"media type\\nValid values: all,movie,tv,person\"}, \"time_window\": {\"type\": \"string\", \"description\": \"time window\\nValid values: day,week\"}}, \"required\": [\"media_type\", \"time_window\"]}}, {\"name\": \"GET_movie__movie_id__credits\", \"description\": \"Get the cast and crew for a movie.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"movie_id\": {\"type\": \"integer\", \"description\": \"movie id\"}}, \"required\": [\"movie_id\"]}}]\n\nGraphQL schema:\n\ntype GET_trending__media_type___time_window_ResultsEntry {\n  adult: Boolean\n  backdrop_path: String\n  genre_ids: [Int]\n  id: Int\n  media_type: String\n  original_language: String\n  original_title: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  release_date: Date\n  title: String\n  video: Boolean\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_trending__media_type___time_window_Root {\n  page: Int\n  results: [GET_trending__media_type___time_window_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_trending__media_type___time_window_(\n    media_type: String!\n    time_window: String!\n    tmdb_access_token: String!\n  ): GET_trending__media_type___time_window_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/trending/$media_type;/$time_window;\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_movie__movie_id__credits_CastEntry {\n  adult: Boolean\n  cast_id: Int\n  character: String\n  credit_id: String\n  gender: Int\n  id: Int\n  known_for_department: String\n  name: String\n  order: Int\n  original_name: String\n  popularity: Float\n  profile_path: String\n}\n\ntype GET_movie__movie_id__credits_CrewEntry {\n  adult: Boolean\n  credit_id: String\n  department: String\n  gender: Int\n  id: Int\n  job: String\n  known_for_department: String\n  name: String\n  original_name: String\n  popularity: Float\n  profile_path: String\n}\n\ntype GET_movie__movie_id__credits_Root {\n  cast: [GET_movie__movie_id__credits_CastEntry]\n  crew: [GET_movie__movie_id__credits_CrewEntry]\n  id: Int\n}\n\ntype Query {\n  GET_movie__movie_id__credits(\n    movie_id: String!\n    tmdb_access_token: String!\n  ): GET_movie__movie_id__credits_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/movie/$movie_id;/credits\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\n\nUtterance: Who is the director of today's most trending movie?", "output": "response_obj = GET_trending__media_type___time_window_(media_type=\"movie\", time_window=\"day\")\nGET_movie__movie_id__credits(movie_id=response_obj.results[0].id)\n", "function_specs": "[{\"name\": \"GET_trending__media_type___time_window_\", \"description\": \"Get the daily or weekly trending items. The daily trending list tracks items over the period of a day while items have a 24 hour half life. The weekly list tracks items over a 7 day period, with a 7 day half life.\\n\\n#### Valid Media Types\\n\\n| **Media Type** | **Description** |\\n| - | - |\\n| all | Include all movies, TV shows and people in the results as a global trending list. |\\n| movie | Show the trending movies in the results. |\\n| tv | Show the trending TV shows in the results. |\\n| person | Show the trending people in the results. |\\n\\n#### Valid Time Windows\\n\\n| **Time Window** | **Description** |\\n| - | - |\\n| day | View the trending list for the day. |\\n| week | View the trending list for the week. |\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"media_type\": {\"type\": \"string\", \"description\": \"media type\\nValid values: all,movie,tv,person\"}, \"time_window\": {\"type\": \"string\", \"description\": \"time window\\nValid values: day,week\"}}, \"required\": [\"media_type\", \"time_window\"]}}, {\"name\": \"GET_movie__movie_id__credits\", \"description\": \"Get the cast and crew for a movie.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"movie_id\": {\"type\": \"integer\", \"description\": \"movie id\"}}, \"required\": [\"movie_id\"]}}]", "GraphQL_schema": "type GET_trending__media_type___time_window_ResultsEntry {\n  adult: Boolean\n  backdrop_path: String\n  genre_ids: [Int]\n  id: Int\n  media_type: String\n  original_language: String\n  original_title: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  release_date: Date\n  title: String\n  video: Boolean\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_trending__media_type___time_window_Root {\n  page: Int\n  results: [GET_trending__media_type___time_window_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_trending__media_type___time_window_(\n    media_type: String!\n    time_window: String!\n    tmdb_access_token: String!\n  ): GET_trending__media_type___time_window_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/trending/$media_type;/$time_window;\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_movie__movie_id__credits_CastEntry {\n  adult: Boolean\n  cast_id: Int\n  character: String\n  credit_id: String\n  gender: Int\n  id: Int\n  known_for_department: String\n  name: String\n  order: Int\n  original_name: String\n  popularity: Float\n  profile_path: String\n}\n\ntype GET_movie__movie_id__credits_CrewEntry {\n  adult: Boolean\n  credit_id: String\n  department: String\n  gender: Int\n  id: Int\n  job: String\n  known_for_department: String\n  name: String\n  original_name: String\n  popularity: Float\n  profile_path: String\n}\n\ntype GET_movie__movie_id__credits_Root {\n  cast: [GET_movie__movie_id__credits_CastEntry]\n  crew: [GET_movie__movie_id__credits_CrewEntry]\n  id: Int\n}\n\ntype Query {\n  GET_movie__movie_id__credits(\n    movie_id: String!\n    tmdb_access_token: String!\n  ): GET_movie__movie_id__credits_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/movie/$movie_id;/credits\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\n", "utterance": "Who is the director of today's most trending movie?"}
{"domain": "tmdb", "input": "Function Signatures:\n\n[{\"name\": \"GET_search_tv\", \"description\": \"Search for a TV show.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"page\": {\"type\": \"integer\", \"description\": \"page\"}, \"query\": {\"type\": \"string\", \"description\": \"query\"}, \"include_adult\": {\"type\": \"boolean\", \"description\": \"include adult\"}, \"first_air_date_year\": {\"type\": \"integer\", \"description\": \"first air date year\"}}, \"required\": [\"query\"]}}, {\"name\": \"GET_tv__tv_id_\", \"description\": \"Get the primary TV show details by id.\\n\\nSupports `append_to_response`. Read more about this [here](#docTextSection:JdZq8ctmcxNqyLQjp).\\n\\n#### Recent Changes\\n\\n| **Date** | **Change** |\\n| - | - |\\n| July 17, 2018 | We now return `last_episode_to_air` and `next_episode_to_air` fields. |\\n| March 12, 2018 | Networks return proper logos and we introduced SVG support. |\\n| March 8, 2018 | The `seasons` field now returns the translated names and overviews. |\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"tv_id\": {\"type\": \"integer\", \"description\": \"tv id\"}}, \"required\": [\"tv_id\"]}}]\n\nGraphQL schema:\n\ntype GET_search_tv_ResultsEntry {\n  adult: Boolean\n  backdrop_path: String\n  first_air_date: Date\n  genre_ids: [Int]\n  id: Int\n  name: String\n  origin_country: [String]\n  original_language: String\n  original_name: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_search_tv_Root {\n  page: Int\n  results: [GET_search_tv_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_search_tv(query: String, tmdb_access_token: String!): GET_search_tv_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/search/tv\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_tv__tv_id_CreatedByEntry {\n  credit_id: String\n  gender: Int\n  id: Int\n  name: String\n  original_name: String\n  profile_path: String\n}\n\ntype GET_tv__tv_id_GenresEntry {\n  id: Int\n  name: String\n}\n\ntype GET_tv__tv_id_LastEpisodeToAir {\n  air_date: Date\n  episode_number: Int\n  episode_type: String\n  id: Int\n  name: String\n  overview: String\n  production_code: String\n  runtime: Int\n  season_number: Int\n  show_id: Int\n  still_path: String\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_tv__tv_id_NetworksEntry {\n  id: Int\n  logo_path: String\n  name: String\n  origin_country: String\n}\n\ntype GET_tv__tv_id_ProductionCompaniesEntry {\n  id: Int\n  logo_path: String\n  name: String\n  origin_country: String\n}\n\ntype GET_tv__tv_id_ProductionCountriesEntry {\n  iso_3166_1: String\n  name: String\n}\n\ntype GET_tv__tv_id_Root {\n  adult: Boolean\n  backdrop_path: String\n  created_by: [GET_tv__tv_id_CreatedByEntry]\n  episode_run_time: [Int]\n  first_air_date: Date\n  genres: [GET_tv__tv_id_GenresEntry]\n  homepage: String\n  id: Int\n  in_production: Boolean\n  languages: [String]\n  last_air_date: Date\n  last_episode_to_air: GET_tv__tv_id_LastEpisodeToAir\n  name: String\n  networks: [GET_tv__tv_id_NetworksEntry]\n  \"\"\"\n  Field \"next_episode_to_air\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  next_episode_to_air: JSON\n  number_of_episodes: Int\n  number_of_seasons: Int\n  origin_country: [String]\n  original_language: String\n  original_name: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  production_companies: [GET_tv__tv_id_ProductionCompaniesEntry]\n  production_countries: [GET_tv__tv_id_ProductionCountriesEntry]\n  seasons: [GET_tv__tv_id_SeasonsEntry]\n  spoken_languages: [GET_tv__tv_id_SpokenLanguagesEntry]\n  status: String\n  tagline: String\n  type: String\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_tv__tv_id_SeasonsEntry {\n  air_date: Date\n  episode_count: Int\n  id: Int\n  name: String\n  overview: String\n  poster_path: String\n  season_number: Int\n  vote_average: Float\n}\n\ntype GET_tv__tv_id_SpokenLanguagesEntry {\n  english_name: String\n  iso_639_1: String\n  name: String\n}\n\ntype Query {\n  GET_tv__tv_id_(\n    tmdb_access_token: String!\n    tv_id: String!\n  ): GET_tv__tv_id_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/tv/$tv_id;\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\n\nUtterance: How many seasons of Sword Art Online are there?", "output": "response_obj = GET_search_tv(query=\"Sword Art Online\")\nGET_tv__tv_id_(tv_id=response_obj.results[0].id)\n", "function_specs": "[{\"name\": \"GET_search_tv\", \"description\": \"Search for a TV show.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"page\": {\"type\": \"integer\", \"description\": \"page\"}, \"query\": {\"type\": \"string\", \"description\": \"query\"}, \"include_adult\": {\"type\": \"boolean\", \"description\": \"include adult\"}, \"first_air_date_year\": {\"type\": \"integer\", \"description\": \"first air date year\"}}, \"required\": [\"query\"]}}, {\"name\": \"GET_tv__tv_id_\", \"description\": \"Get the primary TV show details by id.\\n\\nSupports `append_to_response`. Read more about this [here](#docTextSection:JdZq8ctmcxNqyLQjp).\\n\\n#### Recent Changes\\n\\n| **Date** | **Change** |\\n| - | - |\\n| July 17, 2018 | We now return `last_episode_to_air` and `next_episode_to_air` fields. |\\n| March 12, 2018 | Networks return proper logos and we introduced SVG support. |\\n| March 8, 2018 | The `seasons` field now returns the translated names and overviews. |\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"tv_id\": {\"type\": \"integer\", \"description\": \"tv id\"}}, \"required\": [\"tv_id\"]}}]", "GraphQL_schema": "type GET_search_tv_ResultsEntry {\n  adult: Boolean\n  backdrop_path: String\n  first_air_date: Date\n  genre_ids: [Int]\n  id: Int\n  name: String\n  origin_country: [String]\n  original_language: String\n  original_name: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_search_tv_Root {\n  page: Int\n  results: [GET_search_tv_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_search_tv(query: String, tmdb_access_token: String!): GET_search_tv_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/search/tv\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_tv__tv_id_CreatedByEntry {\n  credit_id: String\n  gender: Int\n  id: Int\n  name: String\n  original_name: String\n  profile_path: String\n}\n\ntype GET_tv__tv_id_GenresEntry {\n  id: Int\n  name: String\n}\n\ntype GET_tv__tv_id_LastEpisodeToAir {\n  air_date: Date\n  episode_number: Int\n  episode_type: String\n  id: Int\n  name: String\n  overview: String\n  production_code: String\n  runtime: Int\n  season_number: Int\n  show_id: Int\n  still_path: String\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_tv__tv_id_NetworksEntry {\n  id: Int\n  logo_path: String\n  name: String\n  origin_country: String\n}\n\ntype GET_tv__tv_id_ProductionCompaniesEntry {\n  id: Int\n  logo_path: String\n  name: String\n  origin_country: String\n}\n\ntype GET_tv__tv_id_ProductionCountriesEntry {\n  iso_3166_1: String\n  name: String\n}\n\ntype GET_tv__tv_id_Root {\n  adult: Boolean\n  backdrop_path: String\n  created_by: [GET_tv__tv_id_CreatedByEntry]\n  episode_run_time: [Int]\n  first_air_date: Date\n  genres: [GET_tv__tv_id_GenresEntry]\n  homepage: String\n  id: Int\n  in_production: Boolean\n  languages: [String]\n  last_air_date: Date\n  last_episode_to_air: GET_tv__tv_id_LastEpisodeToAir\n  name: String\n  networks: [GET_tv__tv_id_NetworksEntry]\n  \"\"\"\n  Field \"next_episode_to_air\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  next_episode_to_air: JSON\n  number_of_episodes: Int\n  number_of_seasons: Int\n  origin_country: [String]\n  original_language: String\n  original_name: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  production_companies: [GET_tv__tv_id_ProductionCompaniesEntry]\n  production_countries: [GET_tv__tv_id_ProductionCountriesEntry]\n  seasons: [GET_tv__tv_id_SeasonsEntry]\n  spoken_languages: [GET_tv__tv_id_SpokenLanguagesEntry]\n  status: String\n  tagline: String\n  type: String\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_tv__tv_id_SeasonsEntry {\n  air_date: Date\n  episode_count: Int\n  id: Int\n  name: String\n  overview: String\n  poster_path: String\n  season_number: Int\n  vote_average: Float\n}\n\ntype GET_tv__tv_id_SpokenLanguagesEntry {\n  english_name: String\n  iso_639_1: String\n  name: String\n}\n\ntype Query {\n  GET_tv__tv_id_(\n    tmdb_access_token: String!\n    tv_id: String!\n  ): GET_tv__tv_id_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/tv/$tv_id;\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\n", "utterance": "How many seasons of Sword Art Online are there?"}
{"domain": "tmdb", "input": "Function Signatures:\n\n[{\"name\": \"GET_search_person\", \"description\": \"Search for people.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"query\": {\"type\": \"string\", \"description\": \"query\"}, \"page\": {\"type\": \"integer\", \"description\": \"page\"}, \"include_adult\": {\"type\": \"boolean\", \"description\": \"include adult\"}, \"region\": {\"type\": \"string\", \"description\": \"region\"}}, \"required\": [\"query\"]}}, {\"name\": \"GET_person__person_id__tv_credits\", \"description\": \"Get the TV show credits for a person.\\n\\nYou can query for some extra details about the credit with the [credit method](#endpoint:xPWdEBLkvCNZSicLN).\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"person_id\": {\"type\": \"integer\", \"description\": \"person id\"}}, \"required\": [\"person_id\"]}}, {\"name\": \"GET_tv__tv_id__reviews\", \"description\": \"Get the reviews for a TV show.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"tv_id\": {\"type\": \"integer\", \"description\": \"tv id\"}, \"page\": {\"type\": \"integer\", \"description\": \"page\"}}, \"required\": [\"tv_id\"]}}]\n\nGraphQL schema:\n\ntype GET_tv__tv_id__reviews_AuthorDetails {\n  avatar_path: String\n  name: String\n  rating: Int\n  username: String\n}\n\ntype GET_tv__tv_id__reviews_ResultsEntry {\n  author: String\n  author_details: GET_tv__tv_id__reviews_AuthorDetails\n  content: String\n  created_at: DateTime\n  id: String\n  updated_at: DateTime\n  url: String\n}\n\ntype GET_tv__tv_id__reviews_Root {\n  id: Int\n  page: Int\n  results: [GET_tv__tv_id__reviews_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_tv__tv_id__reviews(\n    tmdb_access_token: String!\n    tv_id: String!\n  ): GET_tv__tv_id__reviews_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/tv/$tv_id;/reviews\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_search_person_KnownForEntry {\n  adult: Boolean\n  backdrop_path: String\n  genre_ids: [Int]\n  id: Int\n  media_type: String\n  original_language: String\n  original_title: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  release_date: Date\n  title: String\n  video: Boolean\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_search_person_ResultsEntry {\n  adult: Boolean\n  gender: Int\n  id: Int\n  known_for: [GET_search_person_KnownForEntry]\n  known_for_department: String\n  name: String\n  original_name: String\n  popularity: Float\n  profile_path: String\n}\n\ntype GET_search_person_Root {\n  page: Int\n  results: [GET_search_person_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_search_person(\n    query: String\n    tmdb_access_token: String!\n  ): GET_search_person_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/search/person\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_person__person_id__tv_credits_CastEntry {\n  adult: Boolean\n  backdrop_path: String\n  character: String\n  credit_id: String\n  episode_count: Int\n  first_air_date: Date\n  genre_ids: [Int]\n  id: Int\n  name: String\n  origin_country: [String]\n  original_language: String\n  original_name: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_person__person_id__tv_credits_CrewEntry {\n  adult: Boolean\n  backdrop_path: String\n  credit_id: String\n  department: String\n  episode_count: Int\n  first_air_date: String\n  genre_ids: [Int]\n  id: Int\n  job: String\n  name: String\n  origin_country: [String]\n  original_language: String\n  original_name: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_person__person_id__tv_credits_Root {\n  cast: [GET_person__person_id__tv_credits_CastEntry]\n  crew: [GET_person__person_id__tv_credits_CrewEntry]\n  id: Int\n}\n\ntype Query {\n  GET_person__person_id__tv_credits(\n    person_id: String!\n    tmdb_access_token: String!\n  ): GET_person__person_id__tv_credits_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/person/$person_id;/tv_credits\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\n\nUtterance: give me some reviews of Cate Blanchett's latest TV show", "output": "response_obj = GET_search_person(query=\"Cate Blanchett\")\nresponse_obj1 = GET_person__person_id__tv_credits(person_id=response_obj.results[0].id)\nGET_tv__tv_id__reviews(tv_id=response_obj1.cast[0].id)\n", "function_specs": "[{\"name\": \"GET_search_person\", \"description\": \"Search for people.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"query\": {\"type\": \"string\", \"description\": \"query\"}, \"page\": {\"type\": \"integer\", \"description\": \"page\"}, \"include_adult\": {\"type\": \"boolean\", \"description\": \"include adult\"}, \"region\": {\"type\": \"string\", \"description\": \"region\"}}, \"required\": [\"query\"]}}, {\"name\": \"GET_person__person_id__tv_credits\", \"description\": \"Get the TV show credits for a person.\\n\\nYou can query for some extra details about the credit with the [credit method](#endpoint:xPWdEBLkvCNZSicLN).\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"person_id\": {\"type\": \"integer\", \"description\": \"person id\"}}, \"required\": [\"person_id\"]}}, {\"name\": \"GET_tv__tv_id__reviews\", \"description\": \"Get the reviews for a TV show.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"tv_id\": {\"type\": \"integer\", \"description\": \"tv id\"}, \"page\": {\"type\": \"integer\", \"description\": \"page\"}}, \"required\": [\"tv_id\"]}}]", "GraphQL_schema": "type GET_tv__tv_id__reviews_AuthorDetails {\n  avatar_path: String\n  name: String\n  rating: Int\n  username: String\n}\n\ntype GET_tv__tv_id__reviews_ResultsEntry {\n  author: String\n  author_details: GET_tv__tv_id__reviews_AuthorDetails\n  content: String\n  created_at: DateTime\n  id: String\n  updated_at: DateTime\n  url: String\n}\n\ntype GET_tv__tv_id__reviews_Root {\n  id: Int\n  page: Int\n  results: [GET_tv__tv_id__reviews_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_tv__tv_id__reviews(\n    tmdb_access_token: String!\n    tv_id: String!\n  ): GET_tv__tv_id__reviews_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/tv/$tv_id;/reviews\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_search_person_KnownForEntry {\n  adult: Boolean\n  backdrop_path: String\n  genre_ids: [Int]\n  id: Int\n  media_type: String\n  original_language: String\n  original_title: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  release_date: Date\n  title: String\n  video: Boolean\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_search_person_ResultsEntry {\n  adult: Boolean\n  gender: Int\n  id: Int\n  known_for: [GET_search_person_KnownForEntry]\n  known_for_department: String\n  name: String\n  original_name: String\n  popularity: Float\n  profile_path: String\n}\n\ntype GET_search_person_Root {\n  page: Int\n  results: [GET_search_person_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_search_person(\n    query: String\n    tmdb_access_token: String!\n  ): GET_search_person_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/search/person\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_person__person_id__tv_credits_CastEntry {\n  adult: Boolean\n  backdrop_path: String\n  character: String\n  credit_id: String\n  episode_count: Int\n  first_air_date: Date\n  genre_ids: [Int]\n  id: Int\n  name: String\n  origin_country: [String]\n  original_language: String\n  original_name: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_person__person_id__tv_credits_CrewEntry {\n  adult: Boolean\n  backdrop_path: String\n  credit_id: String\n  department: String\n  episode_count: Int\n  first_air_date: String\n  genre_ids: [Int]\n  id: Int\n  job: String\n  name: String\n  origin_country: [String]\n  original_language: String\n  original_name: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_person__person_id__tv_credits_Root {\n  cast: [GET_person__person_id__tv_credits_CastEntry]\n  crew: [GET_person__person_id__tv_credits_CrewEntry]\n  id: Int\n}\n\ntype Query {\n  GET_person__person_id__tv_credits(\n    person_id: String!\n    tmdb_access_token: String!\n  ): GET_person__person_id__tv_credits_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/person/$person_id;/tv_credits\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\n", "utterance": "give me some reviews of Cate Blanchett's latest TV show"}
{"domain": "tmdb", "input": "Function Signatures:\n\n[{\"name\": \"GET_search_collection\", \"description\": \"Search for collections.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"query\": {\"type\": \"string\", \"description\": \"query\"}, \"page\": {\"type\": \"integer\", \"description\": \"page\"}}, \"required\": [\"query\"]}}, {\"name\": \"GET_collection__collection_id_\", \"description\": \"Get collection details by id.\\n\\n#### Recent Changes\\n\\n| **Date** | **Change** |\\n| - | - |\\n| March 16, 2018 | Added the [translations](#endpoint:bhcsxEgRvyk3N7FnD) method. |\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"collection_id\": {\"type\": \"integer\", \"description\": \"collection id\"}}, \"required\": [\"collection_id\"]}}]\n\nGraphQL schema:\n\ntype GET_search_collection_ResultsEntry {\n  adult: Boolean\n  backdrop_path: String\n  id: Int\n  name: String\n  original_language: String\n  original_name: String\n  overview: String\n  poster_path: String\n}\n\ntype GET_search_collection_Root {\n  page: Int\n  results: [GET_search_collection_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_search_collection(\n    query: String\n    tmdb_access_token: String!\n  ): GET_search_collection_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/search/collection\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_collection__collection_id_PartsEntry {\n  adult: Boolean\n  backdrop_path: String\n  genre_ids: [Int]\n  id: Int\n  media_type: String\n  original_language: String\n  original_title: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  release_date: Date\n  title: String\n  video: Boolean\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_collection__collection_id_Root {\n  backdrop_path: String\n  id: Int\n  name: String\n  overview: String\n  parts: [GET_collection__collection_id_PartsEntry]\n  poster_path: String\n}\n\ntype Query {\n  GET_collection__collection_id_(\n    collection_id: String!\n    tmdb_access_token: String!\n  ): GET_collection__collection_id_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/collection/$collection_id;\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\n\nUtterance: When was the first movie of the collection Lord of the Rings released?", "output": "response_obj = GET_search_collection(query=\"Lord of the Rings\")\nGET_collection__collection_id_(collection_id=response_obj.results[0].id)\n", "function_specs": "[{\"name\": \"GET_search_collection\", \"description\": \"Search for collections.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"query\": {\"type\": \"string\", \"description\": \"query\"}, \"page\": {\"type\": \"integer\", \"description\": \"page\"}}, \"required\": [\"query\"]}}, {\"name\": \"GET_collection__collection_id_\", \"description\": \"Get collection details by id.\\n\\n#### Recent Changes\\n\\n| **Date** | **Change** |\\n| - | - |\\n| March 16, 2018 | Added the [translations](#endpoint:bhcsxEgRvyk3N7FnD) method. |\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"collection_id\": {\"type\": \"integer\", \"description\": \"collection id\"}}, \"required\": [\"collection_id\"]}}]", "GraphQL_schema": "type GET_search_collection_ResultsEntry {\n  adult: Boolean\n  backdrop_path: String\n  id: Int\n  name: String\n  original_language: String\n  original_name: String\n  overview: String\n  poster_path: String\n}\n\ntype GET_search_collection_Root {\n  page: Int\n  results: [GET_search_collection_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_search_collection(\n    query: String\n    tmdb_access_token: String!\n  ): GET_search_collection_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/search/collection\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_collection__collection_id_PartsEntry {\n  adult: Boolean\n  backdrop_path: String\n  genre_ids: [Int]\n  id: Int\n  media_type: String\n  original_language: String\n  original_title: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  release_date: Date\n  title: String\n  video: Boolean\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_collection__collection_id_Root {\n  backdrop_path: String\n  id: Int\n  name: String\n  overview: String\n  parts: [GET_collection__collection_id_PartsEntry]\n  poster_path: String\n}\n\ntype Query {\n  GET_collection__collection_id_(\n    collection_id: String!\n    tmdb_access_token: String!\n  ): GET_collection__collection_id_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/collection/$collection_id;\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\n", "utterance": "When was the first movie of the collection Lord of the Rings released?"}
{"domain": "tmdb", "input": "Function Signatures:\n\n[{\"name\": \"GET_movie_popular\", \"description\": \"Get a list of the current popular movies on TMDb. This list updates daily.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"page\": {\"type\": \"integer\", \"description\": \"page\"}, \"region\": {\"type\": \"string\", \"description\": \"region\"}}, \"required\": []}}, {\"name\": \"GET_movie__movie_id__keywords\", \"description\": \"Get the keywords that have been added to a movie.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"movie_id\": {\"type\": \"integer\", \"description\": \"movie id\"}}, \"required\": [\"movie_id\"]}}]\n\nGraphQL schema:\n\ntype GET_movie_popular_ResultsEntry {\n  adult: Boolean\n  backdrop_path: String\n  genre_ids: [Int]\n  id: Int\n  original_language: String\n  original_title: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  release_date: Date\n  title: String\n  video: Boolean\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_movie_popular_Root {\n  page: Int\n  results: [GET_movie_popular_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_movie_popular(tmdb_access_token: String!): GET_movie_popular_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/movie/popular\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_movie__movie_id__keywords_KeywordsEntry {\n  id: Int\n  name: String\n}\n\ntype GET_movie__movie_id__keywords_Root {\n  id: Int\n  keywords: [GET_movie__movie_id__keywords_KeywordsEntry]\n}\n\ntype Query {\n  GET_movie__movie_id__keywords(\n    movie_id: String!\n    tmdb_access_token: String!\n  ): GET_movie__movie_id__keywords_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/movie/$movie_id;/keywords\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\n\nUtterance: What are the keywords of the most popular movie right now", "output": "response_obj = GET_movie_popular()\nGET_movie__movie_id__keywords(movie_id=response_obj.results[0].id)\n", "function_specs": "[{\"name\": \"GET_movie_popular\", \"description\": \"Get a list of the current popular movies on TMDb. This list updates daily.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"page\": {\"type\": \"integer\", \"description\": \"page\"}, \"region\": {\"type\": \"string\", \"description\": \"region\"}}, \"required\": []}}, {\"name\": \"GET_movie__movie_id__keywords\", \"description\": \"Get the keywords that have been added to a movie.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"movie_id\": {\"type\": \"integer\", \"description\": \"movie id\"}}, \"required\": [\"movie_id\"]}}]", "GraphQL_schema": "type GET_movie_popular_ResultsEntry {\n  adult: Boolean\n  backdrop_path: String\n  genre_ids: [Int]\n  id: Int\n  original_language: String\n  original_title: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  release_date: Date\n  title: String\n  video: Boolean\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_movie_popular_Root {\n  page: Int\n  results: [GET_movie_popular_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_movie_popular(tmdb_access_token: String!): GET_movie_popular_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/movie/popular\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_movie__movie_id__keywords_KeywordsEntry {\n  id: Int\n  name: String\n}\n\ntype GET_movie__movie_id__keywords_Root {\n  id: Int\n  keywords: [GET_movie__movie_id__keywords_KeywordsEntry]\n}\n\ntype Query {\n  GET_movie__movie_id__keywords(\n    movie_id: String!\n    tmdb_access_token: String!\n  ): GET_movie__movie_id__keywords_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/movie/$movie_id;/keywords\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\n", "utterance": "What are the keywords of the most popular movie right now"}
