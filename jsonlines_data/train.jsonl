{"domain": "spotify", "input": "Function Signatures:\n\n[{\"name\": \"GET_me_player_currently_playing\", \"description\": \"Get the track currently being played on the user's Spotify account.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"market\": {\"type\": \"string\", \"description\": \"An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).\\n  If a country code is specified, only content that is available in that market will be returned.<br/>\\n  If a valid user access token is specified in the request header, the country associated with\\n  the user account will take priority over this parameter.<br/>\\n  _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>\\n  Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).\\n\"}, \"additional_types\": {\"type\": \"string\", \"description\": \"A comma-separated list of item types that your client supports besides the default `track` type. Valid types are: `track` and `episode`.<br/>\\n_**Note**: This parameter was introduced to allow existing clients to maintain their current behaviour and might be deprecated in the future._<br/>\\nIn addition to providing this parameter, make sure that your client properly handles cases of new types in the future by checking against the `type` field of each object.\\n\"}}, \"required\": []}}, {\"name\": \"GET_tracks__id_\", \"description\": \"Get Spotify catalog information for a single track identified by its\\nunique Spotify ID.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"id\": {\"type\": \"string\", \"description\": \"The [Spotify ID](/documentation/web-api/#spotify-uris-and-ids)\\nfor the track.\\n\"}, \"market\": {\"type\": \"string\", \"description\": \"An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).\\n  If a country code is specified, only content that is available in that market will be returned.<br/>\\n  If a valid user access token is specified in the request header, the country associated with\\n  the user account will take priority over this parameter.<br/>\\n  _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>\\n  Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).\\n\"}}, \"required\": [\"id\"]}}, {\"name\": \"PUT_me_following\", \"description\": \"Add the current user as a follower of one or more artists or other Spotify users.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"type\": {\"type\": \"string\", \"description\": \"The ID type.\\n\"}, \"ids\": {\"type\": \"string\", \"description\": \"A comma-separated list of the artist or the user [Spotify IDs](/documentation/web-api/#spotify-uris-and-ids).\\nA maximum of 50 IDs can be sent in one request.\\n\"}}, \"required\": [\"type\", \"ids\"]}}]\n\nGraphQL schema:\n\ntype GET_me_player_currently_playing_Actions {\n  disallows: GET_me_player_currently_playing_Disallows\n}\n\ntype GET_me_player_currently_playing_Album {\n  album_type: String\n  artists: [GET_me_player_currently_playing_ArtistsEntry]\n  available_markets: [String]\n  external_urls: GET_me_player_currently_playing_ExternalUrls2\n  href: String\n  id: String\n  images: [GET_me_player_currently_playing_ImagesEntry]\n  name: String\n  release_date: Int\n  release_date_precision: String\n  total_tracks: Int\n  type: String\n  uri: String\n}\n\ntype GET_me_player_currently_playing_Artists1Entry {\n  external_urls: GET_me_player_currently_playing_ExternalUrls3\n  href: String\n  id: String\n  name: String\n  type: String\n  uri: String\n}\n\ntype GET_me_player_currently_playing_ArtistsEntry {\n  external_urls: GET_me_player_currently_playing_ExternalUrls1\n  href: String\n  id: String\n  name: String\n  type: String\n  uri: String\n}\n\ntype GET_me_player_currently_playing_Context {\n  external_urls: GET_me_player_currently_playing_ExternalUrls\n  href: String\n  type: String\n  uri: String\n}\n\ntype GET_me_player_currently_playing_Disallows {\n  resuming: Boolean\n}\n\ntype GET_me_player_currently_playing_ExternalIds {\n  isrc: String\n}\n\ntype GET_me_player_currently_playing_ExternalUrls {\n  spotify: String\n}\n\ntype GET_me_player_currently_playing_ExternalUrls1 {\n  spotify: String\n}\n\ntype GET_me_player_currently_playing_ExternalUrls2 {\n  spotify: String\n}\n\ntype GET_me_player_currently_playing_ExternalUrls3 {\n  spotify: String\n}\n\ntype GET_me_player_currently_playing_ExternalUrls4 {\n  spotify: String\n}\n\ntype GET_me_player_currently_playing_ImagesEntry {\n  height: Int\n  url: String\n  width: Int\n}\n\ntype GET_me_player_currently_playing_Item {\n  album: GET_me_player_currently_playing_Album\n  artists: [GET_me_player_currently_playing_Artists1Entry]\n  available_markets: [String]\n  disc_number: Int\n  duration_ms: Int\n  explicit: Boolean\n  external_ids: GET_me_player_currently_playing_ExternalIds\n  external_urls: GET_me_player_currently_playing_ExternalUrls4\n  href: String\n  id: String\n  is_local: Boolean\n  name: String\n  popularity: Int\n  preview_url: String\n  track_number: Int\n  type: String\n  uri: String\n}\n\ntype GET_me_player_currently_playing_Root {\n  actions: GET_me_player_currently_playing_Actions\n  context: GET_me_player_currently_playing_Context\n  currently_playing_type: String\n  is_playing: Boolean\n  item: GET_me_player_currently_playing_Item\n  progress_ms: Int\n  timestamp: ID\n}\n\ntype Query {\n  GET_me_player_currently_playing(\n    spotify_access_token: String!\n  ): GET_me_player_currently_playing_Root\n    @rest(\n      endpoint: \"https://api.spotify.com/v1/me/player/currently-playing\"\n      headers: [\n        { name: \"authorization\", value: \"Bearer $spotify_access_token;\" }\n      ]\n    )\n}\ntype GET_tracks__id_Album {\n  album_type: String\n  artists: [GET_tracks__id_ArtistsEntry]\n  available_markets: [String]\n  external_urls: GET_tracks__id_ExternalUrls1\n  href: String\n  id: String\n  images: [GET_tracks__id_ImagesEntry]\n  name: String\n  release_date: Date\n  release_date_precision: String\n  total_tracks: Int\n  type: String\n  uri: String\n}\n\ntype GET_tracks__id_Artists1Entry {\n  external_urls: GET_tracks__id_ExternalUrls2\n  href: String\n  id: String\n  name: String\n  type: String\n  uri: String\n}\n\ntype GET_tracks__id_ArtistsEntry {\n  external_urls: GET_tracks__id_ExternalUrls\n  href: String\n  id: String\n  name: String\n  type: String\n  uri: String\n}\n\ntype GET_tracks__id_ExternalIds {\n  isrc: String\n}\n\ntype GET_tracks__id_ExternalUrls {\n  spotify: String\n}\n\ntype GET_tracks__id_ExternalUrls1 {\n  spotify: String\n}\n\ntype GET_tracks__id_ExternalUrls2 {\n  spotify: String\n}\n\ntype GET_tracks__id_ExternalUrls3 {\n  spotify: String\n}\n\ntype GET_tracks__id_ImagesEntry {\n  height: Int\n  url: String\n  width: Int\n}\n\ntype GET_tracks__id_Root {\n  album: GET_tracks__id_Album\n  artists: [GET_tracks__id_Artists1Entry]\n  available_markets: [String]\n  disc_number: Int\n  duration_ms: Int\n  explicit: Boolean\n  external_ids: GET_tracks__id_ExternalIds\n  external_urls: GET_tracks__id_ExternalUrls3\n  href: String\n  id: String\n  is_local: Boolean\n  name: String\n  popularity: Int\n  preview_url: String\n  track_number: Int\n  type: String\n  uri: String\n}\n\ntype Query {\n  GET_tracks__id_(\n    id: String!\n    spotify_access_token: String!\n  ): GET_tracks__id_Root\n    @rest(\n      endpoint: \"https://api.spotify.com/v1/tracks/$id;\"\n      headers: [\n        { name: \"authorization\", value: \"Bearer $spotify_access_token;\" }\n      ]\n    )\n}\n\nUtterance: Follow the artist of the song now playing", "output": "response_obj = GET_me_player_currently_playing()\nresponse_obj1 = GET_tracks__id_(id=response_obj.item.id)\nPUT_me_following(type=\"artist\", ids=response_obj1.artists[0].id)\n", "function_specs": "[{\"name\": \"GET_me_player_currently_playing\", \"description\": \"Get the track currently being played on the user's Spotify account.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"market\": {\"type\": \"string\", \"description\": \"An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).\\n  If a country code is specified, only content that is available in that market will be returned.<br/>\\n  If a valid user access token is specified in the request header, the country associated with\\n  the user account will take priority over this parameter.<br/>\\n  _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>\\n  Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).\\n\"}, \"additional_types\": {\"type\": \"string\", \"description\": \"A comma-separated list of item types that your client supports besides the default `track` type. Valid types are: `track` and `episode`.<br/>\\n_**Note**: This parameter was introduced to allow existing clients to maintain their current behaviour and might be deprecated in the future._<br/>\\nIn addition to providing this parameter, make sure that your client properly handles cases of new types in the future by checking against the `type` field of each object.\\n\"}}, \"required\": []}}, {\"name\": \"GET_tracks__id_\", \"description\": \"Get Spotify catalog information for a single track identified by its\\nunique Spotify ID.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"id\": {\"type\": \"string\", \"description\": \"The [Spotify ID](/documentation/web-api/#spotify-uris-and-ids)\\nfor the track.\\n\"}, \"market\": {\"type\": \"string\", \"description\": \"An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).\\n  If a country code is specified, only content that is available in that market will be returned.<br/>\\n  If a valid user access token is specified in the request header, the country associated with\\n  the user account will take priority over this parameter.<br/>\\n  _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>\\n  Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).\\n\"}}, \"required\": [\"id\"]}}, {\"name\": \"PUT_me_following\", \"description\": \"Add the current user as a follower of one or more artists or other Spotify users.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"type\": {\"type\": \"string\", \"description\": \"The ID type.\\n\"}, \"ids\": {\"type\": \"string\", \"description\": \"A comma-separated list of the artist or the user [Spotify IDs](/documentation/web-api/#spotify-uris-and-ids).\\nA maximum of 50 IDs can be sent in one request.\\n\"}}, \"required\": [\"type\", \"ids\"]}}]", "GraphQL_schema": "type GET_me_player_currently_playing_Actions {\n  disallows: GET_me_player_currently_playing_Disallows\n}\n\ntype GET_me_player_currently_playing_Album {\n  album_type: String\n  artists: [GET_me_player_currently_playing_ArtistsEntry]\n  available_markets: [String]\n  external_urls: GET_me_player_currently_playing_ExternalUrls2\n  href: String\n  id: String\n  images: [GET_me_player_currently_playing_ImagesEntry]\n  name: String\n  release_date: Int\n  release_date_precision: String\n  total_tracks: Int\n  type: String\n  uri: String\n}\n\ntype GET_me_player_currently_playing_Artists1Entry {\n  external_urls: GET_me_player_currently_playing_ExternalUrls3\n  href: String\n  id: String\n  name: String\n  type: String\n  uri: String\n}\n\ntype GET_me_player_currently_playing_ArtistsEntry {\n  external_urls: GET_me_player_currently_playing_ExternalUrls1\n  href: String\n  id: String\n  name: String\n  type: String\n  uri: String\n}\n\ntype GET_me_player_currently_playing_Context {\n  external_urls: GET_me_player_currently_playing_ExternalUrls\n  href: String\n  type: String\n  uri: String\n}\n\ntype GET_me_player_currently_playing_Disallows {\n  resuming: Boolean\n}\n\ntype GET_me_player_currently_playing_ExternalIds {\n  isrc: String\n}\n\ntype GET_me_player_currently_playing_ExternalUrls {\n  spotify: String\n}\n\ntype GET_me_player_currently_playing_ExternalUrls1 {\n  spotify: String\n}\n\ntype GET_me_player_currently_playing_ExternalUrls2 {\n  spotify: String\n}\n\ntype GET_me_player_currently_playing_ExternalUrls3 {\n  spotify: String\n}\n\ntype GET_me_player_currently_playing_ExternalUrls4 {\n  spotify: String\n}\n\ntype GET_me_player_currently_playing_ImagesEntry {\n  height: Int\n  url: String\n  width: Int\n}\n\ntype GET_me_player_currently_playing_Item {\n  album: GET_me_player_currently_playing_Album\n  artists: [GET_me_player_currently_playing_Artists1Entry]\n  available_markets: [String]\n  disc_number: Int\n  duration_ms: Int\n  explicit: Boolean\n  external_ids: GET_me_player_currently_playing_ExternalIds\n  external_urls: GET_me_player_currently_playing_ExternalUrls4\n  href: String\n  id: String\n  is_local: Boolean\n  name: String\n  popularity: Int\n  preview_url: String\n  track_number: Int\n  type: String\n  uri: String\n}\n\ntype GET_me_player_currently_playing_Root {\n  actions: GET_me_player_currently_playing_Actions\n  context: GET_me_player_currently_playing_Context\n  currently_playing_type: String\n  is_playing: Boolean\n  item: GET_me_player_currently_playing_Item\n  progress_ms: Int\n  timestamp: ID\n}\n\ntype Query {\n  GET_me_player_currently_playing(\n    spotify_access_token: String!\n  ): GET_me_player_currently_playing_Root\n    @rest(\n      endpoint: \"https://api.spotify.com/v1/me/player/currently-playing\"\n      headers: [\n        { name: \"authorization\", value: \"Bearer $spotify_access_token;\" }\n      ]\n    )\n}\ntype GET_tracks__id_Album {\n  album_type: String\n  artists: [GET_tracks__id_ArtistsEntry]\n  available_markets: [String]\n  external_urls: GET_tracks__id_ExternalUrls1\n  href: String\n  id: String\n  images: [GET_tracks__id_ImagesEntry]\n  name: String\n  release_date: Date\n  release_date_precision: String\n  total_tracks: Int\n  type: String\n  uri: String\n}\n\ntype GET_tracks__id_Artists1Entry {\n  external_urls: GET_tracks__id_ExternalUrls2\n  href: String\n  id: String\n  name: String\n  type: String\n  uri: String\n}\n\ntype GET_tracks__id_ArtistsEntry {\n  external_urls: GET_tracks__id_ExternalUrls\n  href: String\n  id: String\n  name: String\n  type: String\n  uri: String\n}\n\ntype GET_tracks__id_ExternalIds {\n  isrc: String\n}\n\ntype GET_tracks__id_ExternalUrls {\n  spotify: String\n}\n\ntype GET_tracks__id_ExternalUrls1 {\n  spotify: String\n}\n\ntype GET_tracks__id_ExternalUrls2 {\n  spotify: String\n}\n\ntype GET_tracks__id_ExternalUrls3 {\n  spotify: String\n}\n\ntype GET_tracks__id_ImagesEntry {\n  height: Int\n  url: String\n  width: Int\n}\n\ntype GET_tracks__id_Root {\n  album: GET_tracks__id_Album\n  artists: [GET_tracks__id_Artists1Entry]\n  available_markets: [String]\n  disc_number: Int\n  duration_ms: Int\n  explicit: Boolean\n  external_ids: GET_tracks__id_ExternalIds\n  external_urls: GET_tracks__id_ExternalUrls3\n  href: String\n  id: String\n  is_local: Boolean\n  name: String\n  popularity: Int\n  preview_url: String\n  track_number: Int\n  type: String\n  uri: String\n}\n\ntype Query {\n  GET_tracks__id_(\n    id: String!\n    spotify_access_token: String!\n  ): GET_tracks__id_Root\n    @rest(\n      endpoint: \"https://api.spotify.com/v1/tracks/$id;\"\n      headers: [\n        { name: \"authorization\", value: \"Bearer $spotify_access_token;\" }\n      ]\n    )\n}\n", "utterance": "Follow the artist of the song now playing"}
{"domain": "spotify", "input": "Function Signatures:\n\n[{\"name\": \"GET_me_player_currently_playing\", \"description\": \"Get the track currently being played on the user's Spotify account.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"market\": {\"type\": \"string\", \"description\": \"An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).\\n  If a country code is specified, only content that is available in that market will be returned.<br/>\\n  If a valid user access token is specified in the request header, the country associated with\\n  the user account will take priority over this parameter.<br/>\\n  _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>\\n  Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).\\n\"}, \"additional_types\": {\"type\": \"string\", \"description\": \"A comma-separated list of item types that your client supports besides the default `track` type. Valid types are: `track` and `episode`.<br/>\\n_**Note**: This parameter was introduced to allow existing clients to maintain their current behaviour and might be deprecated in the future._<br/>\\nIn addition to providing this parameter, make sure that your client properly handles cases of new types in the future by checking against the `type` field of each object.\\n\"}}, \"required\": []}}, {\"name\": \"GET_tracks__id_\", \"description\": \"Get Spotify catalog information for a single track identified by its\\nunique Spotify ID.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"id\": {\"type\": \"string\", \"description\": \"The [Spotify ID](/documentation/web-api/#spotify-uris-and-ids)\\nfor the track.\\n\"}, \"market\": {\"type\": \"string\", \"description\": \"An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).\\n  If a country code is specified, only content that is available in that market will be returned.<br/>\\n  If a valid user access token is specified in the request header, the country associated with\\n  the user account will take priority over this parameter.<br/>\\n  _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>\\n  Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).\\n\"}}, \"required\": [\"id\"]}}, {\"name\": \"PUT_me_following\", \"description\": \"Add the current user as a follower of one or more artists or other Spotify users.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"type\": {\"type\": \"string\", \"description\": \"The ID type: either `artist` or `user`.\\n\"}, \"ids\": {\"type\": \"string\", \"description\": \"A comma-separated list of the artist or the user [Spotify IDs](/documentation/web-api/#spotify-uris-and-ids).\\nA maximum of 50 IDs can be sent in one request.\\n\"}}, \"required\": [\"type\", \"ids\"]}}]\n\nGraphQL schema:\n\ntype GET_me_player_currently_playing_Actions {\n  disallows: GET_me_player_currently_playing_Disallows\n}\n\ntype GET_me_player_currently_playing_Album {\n  album_type: String\n  artists: [GET_me_player_currently_playing_ArtistsEntry]\n  available_markets: [String]\n  external_urls: GET_me_player_currently_playing_ExternalUrls2\n  href: String\n  id: String\n  images: [GET_me_player_currently_playing_ImagesEntry]\n  name: String\n  release_date: Int\n  release_date_precision: String\n  total_tracks: Int\n  type: String\n  uri: String\n}\n\ntype GET_me_player_currently_playing_Artists1Entry {\n  external_urls: GET_me_player_currently_playing_ExternalUrls3\n  href: String\n  id: String\n  name: String\n  type: String\n  uri: String\n}\n\ntype GET_me_player_currently_playing_ArtistsEntry {\n  external_urls: GET_me_player_currently_playing_ExternalUrls1\n  href: String\n  id: String\n  name: String\n  type: String\n  uri: String\n}\n\ntype GET_me_player_currently_playing_Context {\n  external_urls: GET_me_player_currently_playing_ExternalUrls\n  href: String\n  type: String\n  uri: String\n}\n\ntype GET_me_player_currently_playing_Disallows {\n  resuming: Boolean\n}\n\ntype GET_me_player_currently_playing_ExternalIds {\n  isrc: String\n}\n\ntype GET_me_player_currently_playing_ExternalUrls {\n  spotify: String\n}\n\ntype GET_me_player_currently_playing_ExternalUrls1 {\n  spotify: String\n}\n\ntype GET_me_player_currently_playing_ExternalUrls2 {\n  spotify: String\n}\n\ntype GET_me_player_currently_playing_ExternalUrls3 {\n  spotify: String\n}\n\ntype GET_me_player_currently_playing_ExternalUrls4 {\n  spotify: String\n}\n\ntype GET_me_player_currently_playing_ImagesEntry {\n  height: Int\n  url: String\n  width: Int\n}\n\ntype GET_me_player_currently_playing_Item {\n  album: GET_me_player_currently_playing_Album\n  artists: [GET_me_player_currently_playing_Artists1Entry]\n  available_markets: [String]\n  disc_number: Int\n  duration_ms: Int\n  explicit: Boolean\n  external_ids: GET_me_player_currently_playing_ExternalIds\n  external_urls: GET_me_player_currently_playing_ExternalUrls4\n  href: String\n  id: String\n  is_local: Boolean\n  name: String\n  popularity: Int\n  preview_url: String\n  track_number: Int\n  type: String\n  uri: String\n}\n\ntype GET_me_player_currently_playing_Root {\n  actions: GET_me_player_currently_playing_Actions\n  context: GET_me_player_currently_playing_Context\n  currently_playing_type: String\n  is_playing: Boolean\n  item: GET_me_player_currently_playing_Item\n  progress_ms: Int\n  timestamp: ID\n}\n\ntype Query {\n  GET_me_player_currently_playing(\n    spotify_access_token: String!\n  ): GET_me_player_currently_playing_Root\n    @rest(\n      endpoint: \"https://api.spotify.com/v1/me/player/currently-playing\"\n      headers: [\n        { name: \"authorization\", value: \"Bearer $spotify_access_token;\" }\n      ]\n    )\n}\ntype GET_tracks__id_Album {\n  album_type: String\n  artists: [GET_tracks__id_ArtistsEntry]\n  available_markets: [String]\n  external_urls: GET_tracks__id_ExternalUrls1\n  href: String\n  id: String\n  images: [GET_tracks__id_ImagesEntry]\n  name: String\n  release_date: Date\n  release_date_precision: String\n  total_tracks: Int\n  type: String\n  uri: String\n}\n\ntype GET_tracks__id_Artists1Entry {\n  external_urls: GET_tracks__id_ExternalUrls2\n  href: String\n  id: String\n  name: String\n  type: String\n  uri: String\n}\n\ntype GET_tracks__id_ArtistsEntry {\n  external_urls: GET_tracks__id_ExternalUrls\n  href: String\n  id: String\n  name: String\n  type: String\n  uri: String\n}\n\ntype GET_tracks__id_ExternalIds {\n  isrc: String\n}\n\ntype GET_tracks__id_ExternalUrls {\n  spotify: String\n}\n\ntype GET_tracks__id_ExternalUrls1 {\n  spotify: String\n}\n\ntype GET_tracks__id_ExternalUrls2 {\n  spotify: String\n}\n\ntype GET_tracks__id_ExternalUrls3 {\n  spotify: String\n}\n\ntype GET_tracks__id_ImagesEntry {\n  height: Int\n  url: String\n  width: Int\n}\n\ntype GET_tracks__id_Root {\n  album: GET_tracks__id_Album\n  artists: [GET_tracks__id_Artists1Entry]\n  available_markets: [String]\n  disc_number: Int\n  duration_ms: Int\n  explicit: Boolean\n  external_ids: GET_tracks__id_ExternalIds\n  external_urls: GET_tracks__id_ExternalUrls3\n  href: String\n  id: String\n  is_local: Boolean\n  name: String\n  popularity: Int\n  preview_url: String\n  track_number: Int\n  type: String\n  uri: String\n}\n\ntype Query {\n  GET_tracks__id_(\n    id: String!\n    spotify_access_token: String!\n  ): GET_tracks__id_Root\n    @rest(\n      endpoint: \"https://api.spotify.com/v1/tracks/$id;\"\n      headers: [\n        { name: \"authorization\", value: \"Bearer $spotify_access_token;\" }\n      ]\n    )\n}\n\nUtterance: Follow the artist of the first song recently played", "output": "response_obj = GET_me_player_currently_playing()\nresponse_obj1 = GET_tracks__id_(id=response_obj.item.id)\nPUT_me_following(type=\"artist\", ids=response_obj1.artists[0].id)\n", "function_specs": "[{\"name\": \"GET_me_player_currently_playing\", \"description\": \"Get the track currently being played on the user's Spotify account.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"market\": {\"type\": \"string\", \"description\": \"An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).\\n  If a country code is specified, only content that is available in that market will be returned.<br/>\\n  If a valid user access token is specified in the request header, the country associated with\\n  the user account will take priority over this parameter.<br/>\\n  _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>\\n  Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).\\n\"}, \"additional_types\": {\"type\": \"string\", \"description\": \"A comma-separated list of item types that your client supports besides the default `track` type. Valid types are: `track` and `episode`.<br/>\\n_**Note**: This parameter was introduced to allow existing clients to maintain their current behaviour and might be deprecated in the future._<br/>\\nIn addition to providing this parameter, make sure that your client properly handles cases of new types in the future by checking against the `type` field of each object.\\n\"}}, \"required\": []}}, {\"name\": \"GET_tracks__id_\", \"description\": \"Get Spotify catalog information for a single track identified by its\\nunique Spotify ID.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"id\": {\"type\": \"string\", \"description\": \"The [Spotify ID](/documentation/web-api/#spotify-uris-and-ids)\\nfor the track.\\n\"}, \"market\": {\"type\": \"string\", \"description\": \"An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).\\n  If a country code is specified, only content that is available in that market will be returned.<br/>\\n  If a valid user access token is specified in the request header, the country associated with\\n  the user account will take priority over this parameter.<br/>\\n  _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>\\n  Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).\\n\"}}, \"required\": [\"id\"]}}, {\"name\": \"PUT_me_following\", \"description\": \"Add the current user as a follower of one or more artists or other Spotify users.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"type\": {\"type\": \"string\", \"description\": \"The ID type: either `artist` or `user`.\\n\"}, \"ids\": {\"type\": \"string\", \"description\": \"A comma-separated list of the artist or the user [Spotify IDs](/documentation/web-api/#spotify-uris-and-ids).\\nA maximum of 50 IDs can be sent in one request.\\n\"}}, \"required\": [\"type\", \"ids\"]}}]", "GraphQL_schema": "type GET_me_player_currently_playing_Actions {\n  disallows: GET_me_player_currently_playing_Disallows\n}\n\ntype GET_me_player_currently_playing_Album {\n  album_type: String\n  artists: [GET_me_player_currently_playing_ArtistsEntry]\n  available_markets: [String]\n  external_urls: GET_me_player_currently_playing_ExternalUrls2\n  href: String\n  id: String\n  images: [GET_me_player_currently_playing_ImagesEntry]\n  name: String\n  release_date: Int\n  release_date_precision: String\n  total_tracks: Int\n  type: String\n  uri: String\n}\n\ntype GET_me_player_currently_playing_Artists1Entry {\n  external_urls: GET_me_player_currently_playing_ExternalUrls3\n  href: String\n  id: String\n  name: String\n  type: String\n  uri: String\n}\n\ntype GET_me_player_currently_playing_ArtistsEntry {\n  external_urls: GET_me_player_currently_playing_ExternalUrls1\n  href: String\n  id: String\n  name: String\n  type: String\n  uri: String\n}\n\ntype GET_me_player_currently_playing_Context {\n  external_urls: GET_me_player_currently_playing_ExternalUrls\n  href: String\n  type: String\n  uri: String\n}\n\ntype GET_me_player_currently_playing_Disallows {\n  resuming: Boolean\n}\n\ntype GET_me_player_currently_playing_ExternalIds {\n  isrc: String\n}\n\ntype GET_me_player_currently_playing_ExternalUrls {\n  spotify: String\n}\n\ntype GET_me_player_currently_playing_ExternalUrls1 {\n  spotify: String\n}\n\ntype GET_me_player_currently_playing_ExternalUrls2 {\n  spotify: String\n}\n\ntype GET_me_player_currently_playing_ExternalUrls3 {\n  spotify: String\n}\n\ntype GET_me_player_currently_playing_ExternalUrls4 {\n  spotify: String\n}\n\ntype GET_me_player_currently_playing_ImagesEntry {\n  height: Int\n  url: String\n  width: Int\n}\n\ntype GET_me_player_currently_playing_Item {\n  album: GET_me_player_currently_playing_Album\n  artists: [GET_me_player_currently_playing_Artists1Entry]\n  available_markets: [String]\n  disc_number: Int\n  duration_ms: Int\n  explicit: Boolean\n  external_ids: GET_me_player_currently_playing_ExternalIds\n  external_urls: GET_me_player_currently_playing_ExternalUrls4\n  href: String\n  id: String\n  is_local: Boolean\n  name: String\n  popularity: Int\n  preview_url: String\n  track_number: Int\n  type: String\n  uri: String\n}\n\ntype GET_me_player_currently_playing_Root {\n  actions: GET_me_player_currently_playing_Actions\n  context: GET_me_player_currently_playing_Context\n  currently_playing_type: String\n  is_playing: Boolean\n  item: GET_me_player_currently_playing_Item\n  progress_ms: Int\n  timestamp: ID\n}\n\ntype Query {\n  GET_me_player_currently_playing(\n    spotify_access_token: String!\n  ): GET_me_player_currently_playing_Root\n    @rest(\n      endpoint: \"https://api.spotify.com/v1/me/player/currently-playing\"\n      headers: [\n        { name: \"authorization\", value: \"Bearer $spotify_access_token;\" }\n      ]\n    )\n}\ntype GET_tracks__id_Album {\n  album_type: String\n  artists: [GET_tracks__id_ArtistsEntry]\n  available_markets: [String]\n  external_urls: GET_tracks__id_ExternalUrls1\n  href: String\n  id: String\n  images: [GET_tracks__id_ImagesEntry]\n  name: String\n  release_date: Date\n  release_date_precision: String\n  total_tracks: Int\n  type: String\n  uri: String\n}\n\ntype GET_tracks__id_Artists1Entry {\n  external_urls: GET_tracks__id_ExternalUrls2\n  href: String\n  id: String\n  name: String\n  type: String\n  uri: String\n}\n\ntype GET_tracks__id_ArtistsEntry {\n  external_urls: GET_tracks__id_ExternalUrls\n  href: String\n  id: String\n  name: String\n  type: String\n  uri: String\n}\n\ntype GET_tracks__id_ExternalIds {\n  isrc: String\n}\n\ntype GET_tracks__id_ExternalUrls {\n  spotify: String\n}\n\ntype GET_tracks__id_ExternalUrls1 {\n  spotify: String\n}\n\ntype GET_tracks__id_ExternalUrls2 {\n  spotify: String\n}\n\ntype GET_tracks__id_ExternalUrls3 {\n  spotify: String\n}\n\ntype GET_tracks__id_ImagesEntry {\n  height: Int\n  url: String\n  width: Int\n}\n\ntype GET_tracks__id_Root {\n  album: GET_tracks__id_Album\n  artists: [GET_tracks__id_Artists1Entry]\n  available_markets: [String]\n  disc_number: Int\n  duration_ms: Int\n  explicit: Boolean\n  external_ids: GET_tracks__id_ExternalIds\n  external_urls: GET_tracks__id_ExternalUrls3\n  href: String\n  id: String\n  is_local: Boolean\n  name: String\n  popularity: Int\n  preview_url: String\n  track_number: Int\n  type: String\n  uri: String\n}\n\ntype Query {\n  GET_tracks__id_(\n    id: String!\n    spotify_access_token: String!\n  ): GET_tracks__id_Root\n    @rest(\n      endpoint: \"https://api.spotify.com/v1/tracks/$id;\"\n      headers: [\n        { name: \"authorization\", value: \"Bearer $spotify_access_token;\" }\n      ]\n    )\n}\n", "utterance": "Follow the artist of the first song recently played"}
{"domain": "spotify", "input": "Function Signatures:\n\n[{\"name\": \"GET_search\", \"description\": \"Get Spotify catalog information about albums, artists, playlists, tracks, shows, episodes or audiobooks\\nthat match a keyword string.<br />\\n**Note: Audiobooks are only available for the US, UK, Ireland, New Zealand and Australia markets.**\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"q\": {\"type\": \"string\", \"description\": \"Your search query.\\n\\nYou can narrow down your search using field filters. The available filters are `album`, `artist`, `track`, `year`, `upc`, `tag:hipster`, `tag:new`, `isrc`, and `genre`. Each field filter only applies to certain result types.\\n\\nThe `artist` and `year` filters can be used while searching albums, artists and tracks. You can filter on a single `year` or a range (e.g. 1955-1960).<br />\\nThe `album` filter can be used while searching albums and tracks.<br />\\nThe `genre` filter can be used while searching artists and tracks.<br />\\nThe `isrc` and `track` filters can be used while searching tracks.<br />\\nThe `upc`, `tag:new` and `tag:hipster` filters can only be used while searching albums. The `tag:new` filter will return albums released in the past two weeks and `tag:hipster` can be used to return only albums with the lowest 10% popularity.<br />\\n\"}, \"type\": {\"type\": \"array\", \"description\": \"A comma-separated list of item types to search across. Search results include hits\\nfrom all the specified item types. For example: `q=abacab&type=album,track` returns\\nboth albums and tracks matching \\\"abacab\\\".\\n\"}, \"market\": {\"type\": \"string\", \"description\": \"An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).\\n  If a country code is specified, only content that is available in that market will be returned.<br/>\\n  If a valid user access token is specified in the request header, the country associated with\\n  the user account will take priority over this parameter.<br/>\\n  _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>\\n  Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).\\n\"}, \"limit\": {\"type\": \"integer\", \"description\": \"The maximum number of results to return in each item type.\\n\"}, \"offset\": {\"type\": \"integer\", \"description\": \"The index of the first result to return. Use\\nwith limit to get the next page of search results.\\n\"}, \"include_external\": {\"type\": \"string\", \"description\": \"If `include_external=audio` is specified it signals that the client can play externally hosted audio content, and marks\\nthe content as playable in the response. By default externally hosted audio content is marked as unplayable in the response.\\n\"}}, \"required\": [\"q\", \"type\"]}}, {\"name\": \"GET_albums__id_\", \"description\": \"Get Spotify catalog information for a single album.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"id\": {\"type\": \"string\", \"description\": \"The [Spotify ID](/documentation/web-api/#spotify-uris-and-ids) of the album.\\n\"}, \"market\": {\"type\": \"string\", \"description\": \"An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).\\n  If a country code is specified, only content that is available in that market will be returned.<br/>\\n  If a valid user access token is specified in the request header, the country associated with\\n  the user account will take priority over this parameter.<br/>\\n  _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>\\n  Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).\\n\"}}, \"required\": [\"id\"]}}, {\"name\": \"PUT_me_following\", \"description\": \"Add the current user as a follower of one or more artists or other Spotify users.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"type\": {\"type\": \"string\", \"description\": \"The ID type: either `artist` or `user`.\\n\"}, \"ids\": {\"type\": \"string\", \"description\": \"A comma-separated list of the artist or the user [Spotify IDs](/documentation/web-api/#spotify-uris-and-ids).\\nA maximum of 50 IDs can be sent in one request.\\n\"}}, \"required\": [\"type\", \"ids\"]}}]\n\nGraphQL schema:\n\ntype GET_search_Albums {\n  href: String\n  items: [GET_search_ItemsEntry]\n  limit: Int\n  next: String\n  offset: Int\n  \"\"\"\n  Field \"previous\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  previous: JSON\n  total: Int\n}\n\ntype GET_search_ArtistsEntry {\n  external_urls: GET_search_ExternalUrls\n  href: String\n  id: String\n  name: String\n  type: String\n  uri: String\n}\n\ntype GET_search_ExternalUrls {\n  spotify: String\n}\n\ntype GET_search_ExternalUrls1 {\n  spotify: String\n}\n\ntype GET_search_ImagesEntry {\n  height: Int\n  url: String\n  width: Int\n}\n\ntype GET_search_ItemsEntry {\n  album_type: String\n  artists: [GET_search_ArtistsEntry]\n  available_markets: [String]\n  external_urls: GET_search_ExternalUrls1\n  href: String\n  id: String\n  images: [GET_search_ImagesEntry]\n  name: String\n  release_date: Date\n  release_date_precision: String\n  total_tracks: Int\n  type: String\n  uri: String\n}\n\ntype GET_search_Root {\n  albums: GET_search_Albums\n}\n\ntype Query {\n  GET_search(\n    q: String\n    spotify_access_token: String!\n    type: String\n  ): GET_search_Root\n    @rest(\n      endpoint: \"https://api.spotify.com/v1/search\"\n      headers: [\n        { name: \"authorization\", value: \"Bearer $spotify_access_token;\" }\n      ]\n    )\n}\ntype GET_albums__id_Artists1Entry {\n  external_urls: GET_albums__id_ExternalUrls2\n  href: String\n  id: String\n  name: String\n  type: String\n  uri: String\n}\n\ntype GET_albums__id_ArtistsEntry {\n  external_urls: GET_albums__id_ExternalUrls1\n  href: String\n  id: String\n  name: String\n  type: String\n  uri: String\n}\n\ntype GET_albums__id_CopyrightsEntry {\n  text: String\n  type: String\n}\n\ntype GET_albums__id_ExternalIds {\n  upc: Float\n}\n\ntype GET_albums__id_ExternalUrls {\n  spotify: String\n}\n\ntype GET_albums__id_ExternalUrls1 {\n  spotify: String\n}\n\ntype GET_albums__id_ExternalUrls2 {\n  spotify: String\n}\n\ntype GET_albums__id_ExternalUrls3 {\n  spotify: String\n}\n\ntype GET_albums__id_ImagesEntry {\n  height: Int\n  url: String\n  width: Int\n}\n\ntype GET_albums__id_ItemsEntry {\n  artists: [GET_albums__id_Artists1Entry]\n  available_markets: [String]\n  disc_number: Int\n  duration_ms: Int\n  explicit: Boolean\n  external_urls: GET_albums__id_ExternalUrls3\n  href: String\n  id: String\n  is_local: Boolean\n  name: String\n  preview_url: String\n  track_number: Int\n  type: String\n  uri: String\n}\n\ntype GET_albums__id_Root {\n  album_type: String\n  artists: [GET_albums__id_ArtistsEntry]\n  available_markets: [String]\n  copyrights: [GET_albums__id_CopyrightsEntry]\n  external_ids: GET_albums__id_ExternalIds\n  external_urls: GET_albums__id_ExternalUrls\n  genres: [JSON]\n  href: String\n  id: String\n  images: [GET_albums__id_ImagesEntry]\n  label: String\n  name: String\n  popularity: Int\n  release_date: Int\n  release_date_precision: String\n  total_tracks: Int\n  tracks: GET_albums__id_Tracks\n  type: String\n  uri: String\n}\n\ntype GET_albums__id_Tracks {\n  href: String\n  items: [GET_albums__id_ItemsEntry]\n  limit: Int\n  \"\"\"\n  Field \"next\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  next: JSON\n  offset: Int\n  \"\"\"\n  Field \"previous\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  previous: JSON\n  total: Int\n}\n\ntype Query {\n  GET_albums__id_(\n    id: String!\n    spotify_access_token: String!\n  ): GET_albums__id_Root\n    @rest(\n      endpoint: \"https://api.spotify.com/v1/albums/$id;\"\n      headers: [\n        { name: \"authorization\", value: \"Bearer $spotify_access_token;\" }\n      ]\n    )\n}\n\nUtterance: Follow the artist of the album Mojito", "output": "response_obj = GET_search(q=\"Mojito\", type=\"album\")\nresponse_obj1 = GET_albums__id_(id=response_obj.albums.items[0].id)\nPUT_me_following(type, ids=\",\".join([artist.id for artist in response_obj1.artists]))\n", "function_specs": "[{\"name\": \"GET_search\", \"description\": \"Get Spotify catalog information about albums, artists, playlists, tracks, shows, episodes or audiobooks\\nthat match a keyword string.<br />\\n**Note: Audiobooks are only available for the US, UK, Ireland, New Zealand and Australia markets.**\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"q\": {\"type\": \"string\", \"description\": \"Your search query.\\n\\nYou can narrow down your search using field filters. The available filters are `album`, `artist`, `track`, `year`, `upc`, `tag:hipster`, `tag:new`, `isrc`, and `genre`. Each field filter only applies to certain result types.\\n\\nThe `artist` and `year` filters can be used while searching albums, artists and tracks. You can filter on a single `year` or a range (e.g. 1955-1960).<br />\\nThe `album` filter can be used while searching albums and tracks.<br />\\nThe `genre` filter can be used while searching artists and tracks.<br />\\nThe `isrc` and `track` filters can be used while searching tracks.<br />\\nThe `upc`, `tag:new` and `tag:hipster` filters can only be used while searching albums. The `tag:new` filter will return albums released in the past two weeks and `tag:hipster` can be used to return only albums with the lowest 10% popularity.<br />\\n\"}, \"type\": {\"type\": \"array\", \"description\": \"A comma-separated list of item types to search across. Search results include hits\\nfrom all the specified item types. For example: `q=abacab&type=album,track` returns\\nboth albums and tracks matching \\\"abacab\\\".\\n\"}, \"market\": {\"type\": \"string\", \"description\": \"An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).\\n  If a country code is specified, only content that is available in that market will be returned.<br/>\\n  If a valid user access token is specified in the request header, the country associated with\\n  the user account will take priority over this parameter.<br/>\\n  _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>\\n  Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).\\n\"}, \"limit\": {\"type\": \"integer\", \"description\": \"The maximum number of results to return in each item type.\\n\"}, \"offset\": {\"type\": \"integer\", \"description\": \"The index of the first result to return. Use\\nwith limit to get the next page of search results.\\n\"}, \"include_external\": {\"type\": \"string\", \"description\": \"If `include_external=audio` is specified it signals that the client can play externally hosted audio content, and marks\\nthe content as playable in the response. By default externally hosted audio content is marked as unplayable in the response.\\n\"}}, \"required\": [\"q\", \"type\"]}}, {\"name\": \"GET_albums__id_\", \"description\": \"Get Spotify catalog information for a single album.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"id\": {\"type\": \"string\", \"description\": \"The [Spotify ID](/documentation/web-api/#spotify-uris-and-ids) of the album.\\n\"}, \"market\": {\"type\": \"string\", \"description\": \"An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).\\n  If a country code is specified, only content that is available in that market will be returned.<br/>\\n  If a valid user access token is specified in the request header, the country associated with\\n  the user account will take priority over this parameter.<br/>\\n  _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>\\n  Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).\\n\"}}, \"required\": [\"id\"]}}, {\"name\": \"PUT_me_following\", \"description\": \"Add the current user as a follower of one or more artists or other Spotify users.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"type\": {\"type\": \"string\", \"description\": \"The ID type: either `artist` or `user`.\\n\"}, \"ids\": {\"type\": \"string\", \"description\": \"A comma-separated list of the artist or the user [Spotify IDs](/documentation/web-api/#spotify-uris-and-ids).\\nA maximum of 50 IDs can be sent in one request.\\n\"}}, \"required\": [\"type\", \"ids\"]}}]", "GraphQL_schema": "type GET_search_Albums {\n  href: String\n  items: [GET_search_ItemsEntry]\n  limit: Int\n  next: String\n  offset: Int\n  \"\"\"\n  Field \"previous\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  previous: JSON\n  total: Int\n}\n\ntype GET_search_ArtistsEntry {\n  external_urls: GET_search_ExternalUrls\n  href: String\n  id: String\n  name: String\n  type: String\n  uri: String\n}\n\ntype GET_search_ExternalUrls {\n  spotify: String\n}\n\ntype GET_search_ExternalUrls1 {\n  spotify: String\n}\n\ntype GET_search_ImagesEntry {\n  height: Int\n  url: String\n  width: Int\n}\n\ntype GET_search_ItemsEntry {\n  album_type: String\n  artists: [GET_search_ArtistsEntry]\n  available_markets: [String]\n  external_urls: GET_search_ExternalUrls1\n  href: String\n  id: String\n  images: [GET_search_ImagesEntry]\n  name: String\n  release_date: Date\n  release_date_precision: String\n  total_tracks: Int\n  type: String\n  uri: String\n}\n\ntype GET_search_Root {\n  albums: GET_search_Albums\n}\n\ntype Query {\n  GET_search(\n    q: String\n    spotify_access_token: String!\n    type: String\n  ): GET_search_Root\n    @rest(\n      endpoint: \"https://api.spotify.com/v1/search\"\n      headers: [\n        { name: \"authorization\", value: \"Bearer $spotify_access_token;\" }\n      ]\n    )\n}\ntype GET_albums__id_Artists1Entry {\n  external_urls: GET_albums__id_ExternalUrls2\n  href: String\n  id: String\n  name: String\n  type: String\n  uri: String\n}\n\ntype GET_albums__id_ArtistsEntry {\n  external_urls: GET_albums__id_ExternalUrls1\n  href: String\n  id: String\n  name: String\n  type: String\n  uri: String\n}\n\ntype GET_albums__id_CopyrightsEntry {\n  text: String\n  type: String\n}\n\ntype GET_albums__id_ExternalIds {\n  upc: Float\n}\n\ntype GET_albums__id_ExternalUrls {\n  spotify: String\n}\n\ntype GET_albums__id_ExternalUrls1 {\n  spotify: String\n}\n\ntype GET_albums__id_ExternalUrls2 {\n  spotify: String\n}\n\ntype GET_albums__id_ExternalUrls3 {\n  spotify: String\n}\n\ntype GET_albums__id_ImagesEntry {\n  height: Int\n  url: String\n  width: Int\n}\n\ntype GET_albums__id_ItemsEntry {\n  artists: [GET_albums__id_Artists1Entry]\n  available_markets: [String]\n  disc_number: Int\n  duration_ms: Int\n  explicit: Boolean\n  external_urls: GET_albums__id_ExternalUrls3\n  href: String\n  id: String\n  is_local: Boolean\n  name: String\n  preview_url: String\n  track_number: Int\n  type: String\n  uri: String\n}\n\ntype GET_albums__id_Root {\n  album_type: String\n  artists: [GET_albums__id_ArtistsEntry]\n  available_markets: [String]\n  copyrights: [GET_albums__id_CopyrightsEntry]\n  external_ids: GET_albums__id_ExternalIds\n  external_urls: GET_albums__id_ExternalUrls\n  genres: [JSON]\n  href: String\n  id: String\n  images: [GET_albums__id_ImagesEntry]\n  label: String\n  name: String\n  popularity: Int\n  release_date: Int\n  release_date_precision: String\n  total_tracks: Int\n  tracks: GET_albums__id_Tracks\n  type: String\n  uri: String\n}\n\ntype GET_albums__id_Tracks {\n  href: String\n  items: [GET_albums__id_ItemsEntry]\n  limit: Int\n  \"\"\"\n  Field \"next\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  next: JSON\n  offset: Int\n  \"\"\"\n  Field \"previous\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  previous: JSON\n  total: Int\n}\n\ntype Query {\n  GET_albums__id_(\n    id: String!\n    spotify_access_token: String!\n  ): GET_albums__id_Root\n    @rest(\n      endpoint: \"https://api.spotify.com/v1/albums/$id;\"\n      headers: [\n        { name: \"authorization\", value: \"Bearer $spotify_access_token;\" }\n      ]\n    )\n}\n", "utterance": "Follow the artist of the album Mojito"}
{"domain": "spotify", "input": "Function Signatures:\n\n[{\"name\": \"GET_me_albums\", \"description\": \"Get a list of the albums saved in the current Spotify user's 'Your Music' library.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"limit\": {\"type\": \"integer\", \"description\": \"The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50.\\n\"}, \"offset\": {\"type\": \"integer\", \"description\": \"The index of the first item to return. Default: 0 (the first item). Use with limit to get the next set of items.\\n\"}, \"market\": {\"type\": \"string\", \"description\": \"An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).\\n  If a country code is specified, only content that is available in that market will be returned.<br/>\\n  If a valid user access token is specified in the request header, the country associated with\\n  the user account will take priority over this parameter.<br/>\\n  _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>\\n  Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).\\n\"}}, \"required\": []}}]\n\nGraphQL schema:\n\ntype GET_me_albums_Album {\n  album_type: String\n  artists: [GET_me_albums_ArtistsEntry]\n  available_markets: [String]\n  copyrights: [GET_me_albums_CopyrightsEntry]\n  external_ids: GET_me_albums_ExternalIds\n  external_urls: GET_me_albums_ExternalUrls1\n  genres: [JSON]\n  href: String\n  id: String\n  images: [GET_me_albums_ImagesEntry]\n  label: String\n  name: String\n  popularity: Int\n  release_date: Int\n  release_date_precision: String\n  total_tracks: Int\n  tracks: GET_me_albums_Tracks\n  type: String\n  uri: String\n}\n\ntype GET_me_albums_Artists1Entry {\n  external_urls: GET_me_albums_ExternalUrls2\n  href: String\n  id: String\n  name: String\n  type: String\n  uri: String\n}\n\ntype GET_me_albums_ArtistsEntry {\n  external_urls: GET_me_albums_ExternalUrls\n  href: String\n  id: String\n  name: String\n  type: String\n  uri: String\n}\n\ntype GET_me_albums_CopyrightsEntry {\n  text: String\n  type: String\n}\n\ntype GET_me_albums_ExternalIds {\n  upc: Float\n}\n\ntype GET_me_albums_ExternalUrls {\n  spotify: String\n}\n\ntype GET_me_albums_ExternalUrls1 {\n  spotify: String\n}\n\ntype GET_me_albums_ExternalUrls2 {\n  spotify: String\n}\n\ntype GET_me_albums_ExternalUrls3 {\n  spotify: String\n}\n\ntype GET_me_albums_ImagesEntry {\n  height: Int\n  url: String\n  width: Int\n}\n\ntype GET_me_albums_Items1Entry {\n  artists: [GET_me_albums_Artists1Entry]\n  available_markets: [String]\n  disc_number: Int\n  duration_ms: Int\n  explicit: Boolean\n  external_urls: GET_me_albums_ExternalUrls3\n  href: String\n  id: String\n  is_local: Boolean\n  name: String\n  preview_url: String\n  track_number: Int\n  type: String\n  uri: String\n}\n\ntype GET_me_albums_ItemsEntry {\n  added_at: DateTime\n  album: GET_me_albums_Album\n}\n\ntype GET_me_albums_Root {\n  href: String\n  items: [GET_me_albums_ItemsEntry]\n  limit: Int\n  \"\"\"\n  Field \"next\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  next: JSON\n  offset: Int\n  \"\"\"\n  Field \"previous\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  previous: JSON\n  total: Int\n}\n\ntype GET_me_albums_Tracks {\n  href: String\n  items: [GET_me_albums_Items1Entry]\n  limit: Int\n  \"\"\"\n  Field \"next\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  next: JSON\n  offset: Int\n  \"\"\"\n  Field \"previous\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  previous: JSON\n  total: Int\n}\n\ntype Query {\n  GET_me_albums(spotify_access_token: String!): GET_me_albums_Root\n    @rest(\n      endpoint: \"https://api.spotify.com/v1/me/albums\"\n      headers: [\n        { name: \"authorization\", value: \"Bearer $spotify_access_token;\" }\n      ]\n    )\n}\n\nUtterance: Show me the albums I saved", "output": "GET_me_albums()\n", "function_specs": "[{\"name\": \"GET_me_albums\", \"description\": \"Get a list of the albums saved in the current Spotify user's 'Your Music' library.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"limit\": {\"type\": \"integer\", \"description\": \"The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50.\\n\"}, \"offset\": {\"type\": \"integer\", \"description\": \"The index of the first item to return. Default: 0 (the first item). Use with limit to get the next set of items.\\n\"}, \"market\": {\"type\": \"string\", \"description\": \"An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).\\n  If a country code is specified, only content that is available in that market will be returned.<br/>\\n  If a valid user access token is specified in the request header, the country associated with\\n  the user account will take priority over this parameter.<br/>\\n  _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>\\n  Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).\\n\"}}, \"required\": []}}]", "GraphQL_schema": "type GET_me_albums_Album {\n  album_type: String\n  artists: [GET_me_albums_ArtistsEntry]\n  available_markets: [String]\n  copyrights: [GET_me_albums_CopyrightsEntry]\n  external_ids: GET_me_albums_ExternalIds\n  external_urls: GET_me_albums_ExternalUrls1\n  genres: [JSON]\n  href: String\n  id: String\n  images: [GET_me_albums_ImagesEntry]\n  label: String\n  name: String\n  popularity: Int\n  release_date: Int\n  release_date_precision: String\n  total_tracks: Int\n  tracks: GET_me_albums_Tracks\n  type: String\n  uri: String\n}\n\ntype GET_me_albums_Artists1Entry {\n  external_urls: GET_me_albums_ExternalUrls2\n  href: String\n  id: String\n  name: String\n  type: String\n  uri: String\n}\n\ntype GET_me_albums_ArtistsEntry {\n  external_urls: GET_me_albums_ExternalUrls\n  href: String\n  id: String\n  name: String\n  type: String\n  uri: String\n}\n\ntype GET_me_albums_CopyrightsEntry {\n  text: String\n  type: String\n}\n\ntype GET_me_albums_ExternalIds {\n  upc: Float\n}\n\ntype GET_me_albums_ExternalUrls {\n  spotify: String\n}\n\ntype GET_me_albums_ExternalUrls1 {\n  spotify: String\n}\n\ntype GET_me_albums_ExternalUrls2 {\n  spotify: String\n}\n\ntype GET_me_albums_ExternalUrls3 {\n  spotify: String\n}\n\ntype GET_me_albums_ImagesEntry {\n  height: Int\n  url: String\n  width: Int\n}\n\ntype GET_me_albums_Items1Entry {\n  artists: [GET_me_albums_Artists1Entry]\n  available_markets: [String]\n  disc_number: Int\n  duration_ms: Int\n  explicit: Boolean\n  external_urls: GET_me_albums_ExternalUrls3\n  href: String\n  id: String\n  is_local: Boolean\n  name: String\n  preview_url: String\n  track_number: Int\n  type: String\n  uri: String\n}\n\ntype GET_me_albums_ItemsEntry {\n  added_at: DateTime\n  album: GET_me_albums_Album\n}\n\ntype GET_me_albums_Root {\n  href: String\n  items: [GET_me_albums_ItemsEntry]\n  limit: Int\n  \"\"\"\n  Field \"next\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  next: JSON\n  offset: Int\n  \"\"\"\n  Field \"previous\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  previous: JSON\n  total: Int\n}\n\ntype GET_me_albums_Tracks {\n  href: String\n  items: [GET_me_albums_Items1Entry]\n  limit: Int\n  \"\"\"\n  Field \"next\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  next: JSON\n  offset: Int\n  \"\"\"\n  Field \"previous\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  previous: JSON\n  total: Int\n}\n\ntype Query {\n  GET_me_albums(spotify_access_token: String!): GET_me_albums_Root\n    @rest(\n      endpoint: \"https://api.spotify.com/v1/me/albums\"\n      headers: [\n        { name: \"authorization\", value: \"Bearer $spotify_access_token;\" }\n      ]\n    )\n}\n", "utterance": "Show me the albums I saved"}
{"domain": "spotify", "input": "Function Signatures:\n\n[{\"name\": \"GET_me_tracks\", \"description\": \"Get a list of the songs saved in the current Spotify user's 'Your Music' library.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"market\": {\"type\": \"string\", \"description\": \"An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).\\n  If a country code is specified, only content that is available in that market will be returned.<br/>\\n  If a valid user access token is specified in the request header, the country associated with\\n  the user account will take priority over this parameter.<br/>\\n  _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>\\n  Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).\\n\"}, \"limit\": {\"type\": \"integer\", \"description\": \"The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50.\\n\"}, \"offset\": {\"type\": \"integer\", \"description\": \"The index of the first item to return. Default: 0 (the first item). Use with limit to get the next set of items.\\n\"}}, \"required\": []}}, {\"name\": \"DELETE_me_tracks\", \"description\": \"Remove one or more tracks from the current user's 'Your Music' library.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"ids\": {\"type\": \"string\", \"description\": \"A comma-separated list of the [Spotify IDs](/documentation/web-api/#spotify-uris-and-ids). For example: `ids=4iV5W9uYEdYUVa79Axb7Rh,1301WleyT98MSxVHPZCA6M`. Maximum: 50 IDs.\\n\"}}, \"required\": [\"ids\"]}}, {\"name\": \"GET_me_following\", \"description\": \"Get the current user's followed artists.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"type\": {\"type\": \"string\", \"description\": \"The ID type: currently only `artist` is supported.\\n\"}, \"after\": {\"type\": \"string\", \"description\": \"The last artist ID retrieved from the previous request.\\n\"}, \"limit\": {\"type\": \"integer\", \"description\": \"The maximum number of items to return. Default: 20\\\\. Minimum: 1\\\\. Maximum: 50\\\\.\\n\"}}, \"required\": [\"type\"]}}, {\"name\": \"DELETE_me_following\", \"description\": \"Remove the current user as a follower of one or more artists or other Spotify users.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"type\": {\"type\": \"string\", \"description\": \"The ID type: either `artist` or `user`.\\n\"}, \"ids\": {\"type\": \"string\", \"description\": \"A comma-separated list of the artist or the user [Spotify IDs](/documentation/web-api/#spotify-uris-and-ids). For example: `ids=74ASZWbe4lXaubB36ztrGX,08td7MxkoHQkXnWAYD8d6Q`. A maximum of 50 IDs can be sent in one request.\\n\"}}, \"required\": [\"type\", \"ids\"]}}]\n\nGraphQL schema:\n\ntype GET_me_tracks_Album {\n  album_type: String\n  artists: [GET_me_tracks_ArtistsEntry]\n  available_markets: [String]\n  external_urls: GET_me_tracks_ExternalUrls1\n  href: String\n  id: String\n  images: [GET_me_tracks_ImagesEntry]\n  name: String\n  release_date: Date\n  release_date_precision: String\n  total_tracks: Int\n  type: String\n  uri: String\n}\n\ntype GET_me_tracks_Artists1Entry {\n  external_urls: GET_me_tracks_ExternalUrls2\n  href: String\n  id: String\n  name: String\n  type: String\n  uri: String\n}\n\ntype GET_me_tracks_ArtistsEntry {\n  external_urls: GET_me_tracks_ExternalUrls\n  href: String\n  id: String\n  name: String\n  type: String\n  uri: String\n}\n\ntype GET_me_tracks_ExternalIds {\n  isrc: String\n}\n\ntype GET_me_tracks_ExternalUrls {\n  spotify: String\n}\n\ntype GET_me_tracks_ExternalUrls1 {\n  spotify: String\n}\n\ntype GET_me_tracks_ExternalUrls2 {\n  spotify: String\n}\n\ntype GET_me_tracks_ExternalUrls3 {\n  spotify: String\n}\n\ntype GET_me_tracks_ImagesEntry {\n  height: Int\n  url: String\n  width: Int\n}\n\ntype GET_me_tracks_ItemsEntry {\n  added_at: DateTime\n  track: GET_me_tracks_Track\n}\n\ntype GET_me_tracks_Root {\n  href: String\n  items: [GET_me_tracks_ItemsEntry]\n  limit: Int\n  \"\"\"\n  Field \"next\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  next: JSON\n  offset: Int\n  \"\"\"\n  Field \"previous\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  previous: JSON\n  total: Int\n}\n\ntype GET_me_tracks_Track {\n  album: GET_me_tracks_Album\n  artists: [GET_me_tracks_Artists1Entry]\n  available_markets: [String]\n  disc_number: Int\n  duration_ms: Int\n  explicit: Boolean\n  external_ids: GET_me_tracks_ExternalIds\n  external_urls: GET_me_tracks_ExternalUrls3\n  href: String\n  id: String\n  is_local: Boolean\n  name: String\n  popularity: Int\n  preview_url: String\n  track_number: Int\n  type: String\n  uri: String\n}\n\ntype Query {\n  GET_me_tracks(spotify_access_token: String!): GET_me_tracks_Root\n    @rest(\n      endpoint: \"https://api.spotify.com/v1/me/tracks\"\n      headers: [\n        { name: \"authorization\", value: \"Bearer $spotify_access_token;\" }\n      ]\n    )\n}\ntype GET_me_following_Artists {\n  cursors: GET_me_following_Cursors\n  href: String\n  items: [GET_me_following_ItemsEntry]\n  limit: Int\n  \"\"\"\n  Field \"next\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  next: JSON\n  total: Int\n}\n\ntype GET_me_following_Cursors {\n  \"\"\"\n  Field \"after\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  after: JSON\n}\n\ntype GET_me_following_ExternalUrls {\n  spotify: String\n}\n\ntype GET_me_following_Followers {\n  \"\"\"\n  Field \"href\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  href: JSON\n  total: Int\n}\n\ntype GET_me_following_ImagesEntry {\n  height: Int\n  url: String\n  width: Int\n}\n\ntype GET_me_following_ItemsEntry {\n  external_urls: GET_me_following_ExternalUrls\n  followers: GET_me_following_Followers\n  genres: [String]\n  href: String\n  id: String\n  images: [GET_me_following_ImagesEntry]\n  name: String\n  popularity: Int\n  type: String\n  uri: String\n}\n\ntype GET_me_following_Root {\n  artists: GET_me_following_Artists\n}\n\ntype Query {\n  GET_me_following(\n    spotify_access_token: String!\n    type: String\n  ): GET_me_following_Root\n    @rest(\n      endpoint: \"https://api.spotify.com/v1/me/following\"\n      headers: [\n        { name: \"authorization\", value: \"Bearer $spotify_access_token;\" }\n      ]\n    )\n}\n\nUtterance: Clear my music library and cancel all following singers", "output": "response_obj = GET_me_tracks()\nDELETE_me_tracks(ids=\",\".join([item.track.id for item in response_obj.items]))\nresponse_obj1 = GET_me_following(type=\"artist\")\nDELETE_me_following(type=\"artist\", ids=\",\".join([item.id for item in response_obj1.artists.items]))\n", "function_specs": "[{\"name\": \"GET_me_tracks\", \"description\": \"Get a list of the songs saved in the current Spotify user's 'Your Music' library.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"market\": {\"type\": \"string\", \"description\": \"An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).\\n  If a country code is specified, only content that is available in that market will be returned.<br/>\\n  If a valid user access token is specified in the request header, the country associated with\\n  the user account will take priority over this parameter.<br/>\\n  _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>\\n  Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).\\n\"}, \"limit\": {\"type\": \"integer\", \"description\": \"The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50.\\n\"}, \"offset\": {\"type\": \"integer\", \"description\": \"The index of the first item to return. Default: 0 (the first item). Use with limit to get the next set of items.\\n\"}}, \"required\": []}}, {\"name\": \"DELETE_me_tracks\", \"description\": \"Remove one or more tracks from the current user's 'Your Music' library.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"ids\": {\"type\": \"string\", \"description\": \"A comma-separated list of the [Spotify IDs](/documentation/web-api/#spotify-uris-and-ids). For example: `ids=4iV5W9uYEdYUVa79Axb7Rh,1301WleyT98MSxVHPZCA6M`. Maximum: 50 IDs.\\n\"}}, \"required\": [\"ids\"]}}, {\"name\": \"GET_me_following\", \"description\": \"Get the current user's followed artists.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"type\": {\"type\": \"string\", \"description\": \"The ID type: currently only `artist` is supported.\\n\"}, \"after\": {\"type\": \"string\", \"description\": \"The last artist ID retrieved from the previous request.\\n\"}, \"limit\": {\"type\": \"integer\", \"description\": \"The maximum number of items to return. Default: 20\\\\. Minimum: 1\\\\. Maximum: 50\\\\.\\n\"}}, \"required\": [\"type\"]}}, {\"name\": \"DELETE_me_following\", \"description\": \"Remove the current user as a follower of one or more artists or other Spotify users.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"type\": {\"type\": \"string\", \"description\": \"The ID type: either `artist` or `user`.\\n\"}, \"ids\": {\"type\": \"string\", \"description\": \"A comma-separated list of the artist or the user [Spotify IDs](/documentation/web-api/#spotify-uris-and-ids). For example: `ids=74ASZWbe4lXaubB36ztrGX,08td7MxkoHQkXnWAYD8d6Q`. A maximum of 50 IDs can be sent in one request.\\n\"}}, \"required\": [\"type\", \"ids\"]}}]", "GraphQL_schema": "type GET_me_tracks_Album {\n  album_type: String\n  artists: [GET_me_tracks_ArtistsEntry]\n  available_markets: [String]\n  external_urls: GET_me_tracks_ExternalUrls1\n  href: String\n  id: String\n  images: [GET_me_tracks_ImagesEntry]\n  name: String\n  release_date: Date\n  release_date_precision: String\n  total_tracks: Int\n  type: String\n  uri: String\n}\n\ntype GET_me_tracks_Artists1Entry {\n  external_urls: GET_me_tracks_ExternalUrls2\n  href: String\n  id: String\n  name: String\n  type: String\n  uri: String\n}\n\ntype GET_me_tracks_ArtistsEntry {\n  external_urls: GET_me_tracks_ExternalUrls\n  href: String\n  id: String\n  name: String\n  type: String\n  uri: String\n}\n\ntype GET_me_tracks_ExternalIds {\n  isrc: String\n}\n\ntype GET_me_tracks_ExternalUrls {\n  spotify: String\n}\n\ntype GET_me_tracks_ExternalUrls1 {\n  spotify: String\n}\n\ntype GET_me_tracks_ExternalUrls2 {\n  spotify: String\n}\n\ntype GET_me_tracks_ExternalUrls3 {\n  spotify: String\n}\n\ntype GET_me_tracks_ImagesEntry {\n  height: Int\n  url: String\n  width: Int\n}\n\ntype GET_me_tracks_ItemsEntry {\n  added_at: DateTime\n  track: GET_me_tracks_Track\n}\n\ntype GET_me_tracks_Root {\n  href: String\n  items: [GET_me_tracks_ItemsEntry]\n  limit: Int\n  \"\"\"\n  Field \"next\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  next: JSON\n  offset: Int\n  \"\"\"\n  Field \"previous\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  previous: JSON\n  total: Int\n}\n\ntype GET_me_tracks_Track {\n  album: GET_me_tracks_Album\n  artists: [GET_me_tracks_Artists1Entry]\n  available_markets: [String]\n  disc_number: Int\n  duration_ms: Int\n  explicit: Boolean\n  external_ids: GET_me_tracks_ExternalIds\n  external_urls: GET_me_tracks_ExternalUrls3\n  href: String\n  id: String\n  is_local: Boolean\n  name: String\n  popularity: Int\n  preview_url: String\n  track_number: Int\n  type: String\n  uri: String\n}\n\ntype Query {\n  GET_me_tracks(spotify_access_token: String!): GET_me_tracks_Root\n    @rest(\n      endpoint: \"https://api.spotify.com/v1/me/tracks\"\n      headers: [\n        { name: \"authorization\", value: \"Bearer $spotify_access_token;\" }\n      ]\n    )\n}\ntype GET_me_following_Artists {\n  cursors: GET_me_following_Cursors\n  href: String\n  items: [GET_me_following_ItemsEntry]\n  limit: Int\n  \"\"\"\n  Field \"next\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  next: JSON\n  total: Int\n}\n\ntype GET_me_following_Cursors {\n  \"\"\"\n  Field \"after\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  after: JSON\n}\n\ntype GET_me_following_ExternalUrls {\n  spotify: String\n}\n\ntype GET_me_following_Followers {\n  \"\"\"\n  Field \"href\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  href: JSON\n  total: Int\n}\n\ntype GET_me_following_ImagesEntry {\n  height: Int\n  url: String\n  width: Int\n}\n\ntype GET_me_following_ItemsEntry {\n  external_urls: GET_me_following_ExternalUrls\n  followers: GET_me_following_Followers\n  genres: [String]\n  href: String\n  id: String\n  images: [GET_me_following_ImagesEntry]\n  name: String\n  popularity: Int\n  type: String\n  uri: String\n}\n\ntype GET_me_following_Root {\n  artists: GET_me_following_Artists\n}\n\ntype Query {\n  GET_me_following(\n    spotify_access_token: String!\n    type: String\n  ): GET_me_following_Root\n    @rest(\n      endpoint: \"https://api.spotify.com/v1/me/following\"\n      headers: [\n        { name: \"authorization\", value: \"Bearer $spotify_access_token;\" }\n      ]\n    )\n}\n", "utterance": "Clear my music library and cancel all following singers"}
{"domain": "spotify", "input": "Function Signatures:\n\n[{\"name\": \"GET_search\", \"description\": \"Get Spotify catalog information about albums, artists, playlists, tracks, shows, episodes or audiobooks\\nthat match a keyword string.<br />\\n**Note: Audiobooks are only available for the US, UK, Ireland, New Zealand and Australia markets.**\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"q\": {\"type\": \"string\", \"description\": \"Your search query.\\n\\nYou can narrow down your search using field filters. The available filters are `album`, `artist`, `track`, `year`, `upc`, `tag:hipster`, `tag:new`, `isrc`, and `genre`. Each field filter only applies to certain result types.\\n\\nThe `artist` and `year` filters can be used while searching albums, artists and tracks. You can filter on a single `year` or a range (e.g. 1955-1960).<br />\\nThe `album` filter can be used while searching albums and tracks.<br />\\nThe `genre` filter can be used while searching artists and tracks.<br />\\nThe `isrc` and `track` filters can be used while searching tracks.<br />\\nThe `upc`, `tag:new` and `tag:hipster` filters can only be used while searching albums. The `tag:new` filter will return albums released in the past two weeks and `tag:hipster` can be used to return only albums with the lowest 10% popularity.<br />\\n\"}, \"type\": {\"type\": \"array\", \"description\": \"A comma-separated list of item types to search across. Search results include hits\\nfrom all the specified item types. For example: `q=abacab&type=album,track` returns\\nboth albums and tracks matching \\\"abacab\\\".\\n\"}, \"market\": {\"type\": \"string\", \"description\": \"An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).\\n  If a country code is specified, only content that is available in that market will be returned.<br/>\\n  If a valid user access token is specified in the request header, the country associated with\\n  the user account will take priority over this parameter.<br/>\\n  _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>\\n  Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).\\n\"}, \"limit\": {\"type\": \"integer\", \"description\": \"The maximum number of results to return in each item type.\\n\"}, \"offset\": {\"type\": \"integer\", \"description\": \"The index of the first result to return. Use\\nwith limit to get the next page of search results.\\n\"}, \"include_external\": {\"type\": \"string\", \"description\": \"If `include_external=audio` is specified it signals that the client can play externally hosted audio content, and marks\\nthe content as playable in the response. By default externally hosted audio content is marked as unplayable in the response.\\n\"}}, \"required\": [\"q\", \"type\"]}}, {\"name\": \"GET_me_playlists\", \"description\": \"Get a list of the playlists owned or followed by the current Spotify\\nuser.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"limit\": {\"type\": \"integer\", \"description\": \"The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50.\\n\"}, \"offset\": {\"type\": \"integer\", \"description\": \"'The index of the first playlist to return. Default:\\n0 (the first object). Maximum offset: 100.000\\\\. Use with `limit` to get the\\nnext set of playlists.'\\n\"}}, \"required\": []}}, {\"name\": \"POST_playlists__playlist_id__tracks\", \"description\": \"Add one or more items to a user's playlist.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"playlist_id\": {\"type\": \"string\", \"description\": \"The [Spotify ID](/documentation/web-api/#spotify-uris-and-ids) of the playlist.\\n\"}, \"position\": {\"type\": \"integer\", \"description\": \"The position to insert the items, a zero-based index. For example, to insert the items in the first position: `position=0`; to insert the items in the third position: `position=2`. If omitted, the items will be appended to the playlist. Items are added in the order they are listed in the query string or request body.\\n\"}, \"uris\": {\"type\": \"string\", \"description\": \"A comma-separated list of [Spotify URIs](/documentation/web-api/#spotify-uris-and-ids) to add, can be track or episode URIs. For example:<br/>`uris=spotify:track:4iV5W9uYEdYUVa79Axb7Rh, spotify:track:1301WleyT98MSxVHPZCA6M, spotify:episode:512ojhOuo1ktJprKbVcKyQ`<br/>A maximum of 100 items can be added in one request. <br/>\\n_**Note**: it is likely that passing a large number of item URIs as a query parameter will exceed the maximum length of the request URI. When adding a large number of items, it is recommended to pass them in the request body, see below._\\n\"}}, \"required\": [\"playlist_id\"]}}]\n\nGraphQL schema:\n\ntype GET_search_Album {\n  album_type: String\n  artists: [GET_search_ArtistsEntry]\n  available_markets: [String]\n  external_urls: GET_search_ExternalUrls1\n  href: String\n  id: String\n  images: [GET_search_ImagesEntry]\n  name: String\n  release_date: Date\n  release_date_precision: String\n  total_tracks: Int\n  type: String\n  uri: String\n}\n\ntype GET_search_Artists1Entry {\n  external_urls: GET_search_ExternalUrls2\n  href: String\n  id: String\n  name: String\n  type: String\n  uri: String\n}\n\ntype GET_search_ArtistsEntry {\n  external_urls: GET_search_ExternalUrls\n  href: String\n  id: String\n  name: String\n  type: String\n  uri: String\n}\n\ntype GET_search_ExternalIds {\n  isrc: String\n}\n\ntype GET_search_ExternalUrls {\n  spotify: String\n}\n\ntype GET_search_ExternalUrls1 {\n  spotify: String\n}\n\ntype GET_search_ExternalUrls2 {\n  spotify: String\n}\n\ntype GET_search_ExternalUrls3 {\n  spotify: String\n}\n\ntype GET_search_ImagesEntry {\n  height: Int\n  url: String\n  width: Int\n}\n\ntype GET_search_ItemsEntry {\n  album: GET_search_Album\n  artists: [GET_search_Artists1Entry]\n  available_markets: [String]\n  disc_number: Int\n  duration_ms: Int\n  explicit: Boolean\n  external_ids: GET_search_ExternalIds\n  external_urls: GET_search_ExternalUrls3\n  href: String\n  id: String\n  is_local: Boolean\n  name: String\n  popularity: Int\n  preview_url: String\n  track_number: Int\n  type: String\n  uri: String\n}\n\ntype GET_search_Root {\n  tracks: GET_search_Tracks\n}\n\ntype GET_search_Tracks {\n  href: String\n  items: [GET_search_ItemsEntry]\n  limit: Int\n  next: String\n  offset: Int\n  \"\"\"\n  Field \"previous\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  previous: JSON\n  total: Int\n}\n\ntype Query {\n  GET_search(\n    q: String\n    spotify_access_token: String!\n    type: String\n  ): GET_search_Root\n    @rest(\n      endpoint: \"https://api.spotify.com/v1/search\"\n      headers: [\n        { name: \"authorization\", value: \"Bearer $spotify_access_token;\" }\n      ]\n    )\n}\ntype GET_me_playlists_ExternalUrls {\n  spotify: String\n}\n\ntype GET_me_playlists_ExternalUrls1 {\n  spotify: String\n}\n\ntype GET_me_playlists_ImagesEntry {\n  \"\"\"\n  Field \"height\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  height: JSON\n  url: String\n  \"\"\"\n  Field \"width\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  width: JSON\n}\n\ntype GET_me_playlists_ItemsEntry {\n  collaborative: Boolean\n  description: String\n  external_urls: GET_me_playlists_ExternalUrls\n  href: String\n  id: String\n  images: [GET_me_playlists_ImagesEntry]\n  name: String\n  owner: GET_me_playlists_Owner\n  \"\"\"\n  Field \"primary_color\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  primary_color: JSON\n  public: Boolean\n  snapshot_id: String\n  tracks: GET_me_playlists_Tracks\n  type: String\n  uri: String\n}\n\ntype GET_me_playlists_Owner {\n  display_name: String\n  external_urls: GET_me_playlists_ExternalUrls1\n  href: String\n  id: String\n  type: String\n  uri: String\n}\n\ntype GET_me_playlists_Root {\n  href: String\n  items: [GET_me_playlists_ItemsEntry]\n  limit: Int\n  \"\"\"\n  Field \"next\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  next: JSON\n  offset: Int\n  \"\"\"\n  Field \"previous\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  previous: JSON\n  total: Int\n}\n\ntype GET_me_playlists_Tracks {\n  href: String\n  total: Int\n}\n\ntype Query {\n  GET_me_playlists(spotify_access_token: String!): GET_me_playlists_Root\n    @rest(\n      endpoint: \"https://api.spotify.com/v1/me/playlists\"\n      headers: [\n        { name: \"authorization\", value: \"Bearer $spotify_access_token;\" }\n      ]\n    )\n}\n\nUtterance: Add Summertime Sadness by Lana Del Rey in my first playlist", "output": "response_obj = GET_search(q=\"Lana Del Rey Summertime Sadness\", type=\"track\")\nresponse_obj1 = GET_me_playlists(response_obj.tracks.items[0].id)\nPOST_playlists__playlist_id__tracks(playlist_id=response_obj1.items[0].id,uris=response_obj.tracks.items[0].uri)\n", "function_specs": "[{\"name\": \"GET_search\", \"description\": \"Get Spotify catalog information about albums, artists, playlists, tracks, shows, episodes or audiobooks\\nthat match a keyword string.<br />\\n**Note: Audiobooks are only available for the US, UK, Ireland, New Zealand and Australia markets.**\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"q\": {\"type\": \"string\", \"description\": \"Your search query.\\n\\nYou can narrow down your search using field filters. The available filters are `album`, `artist`, `track`, `year`, `upc`, `tag:hipster`, `tag:new`, `isrc`, and `genre`. Each field filter only applies to certain result types.\\n\\nThe `artist` and `year` filters can be used while searching albums, artists and tracks. You can filter on a single `year` or a range (e.g. 1955-1960).<br />\\nThe `album` filter can be used while searching albums and tracks.<br />\\nThe `genre` filter can be used while searching artists and tracks.<br />\\nThe `isrc` and `track` filters can be used while searching tracks.<br />\\nThe `upc`, `tag:new` and `tag:hipster` filters can only be used while searching albums. The `tag:new` filter will return albums released in the past two weeks and `tag:hipster` can be used to return only albums with the lowest 10% popularity.<br />\\n\"}, \"type\": {\"type\": \"array\", \"description\": \"A comma-separated list of item types to search across. Search results include hits\\nfrom all the specified item types. For example: `q=abacab&type=album,track` returns\\nboth albums and tracks matching \\\"abacab\\\".\\n\"}, \"market\": {\"type\": \"string\", \"description\": \"An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).\\n  If a country code is specified, only content that is available in that market will be returned.<br/>\\n  If a valid user access token is specified in the request header, the country associated with\\n  the user account will take priority over this parameter.<br/>\\n  _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>\\n  Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).\\n\"}, \"limit\": {\"type\": \"integer\", \"description\": \"The maximum number of results to return in each item type.\\n\"}, \"offset\": {\"type\": \"integer\", \"description\": \"The index of the first result to return. Use\\nwith limit to get the next page of search results.\\n\"}, \"include_external\": {\"type\": \"string\", \"description\": \"If `include_external=audio` is specified it signals that the client can play externally hosted audio content, and marks\\nthe content as playable in the response. By default externally hosted audio content is marked as unplayable in the response.\\n\"}}, \"required\": [\"q\", \"type\"]}}, {\"name\": \"GET_me_playlists\", \"description\": \"Get a list of the playlists owned or followed by the current Spotify\\nuser.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"limit\": {\"type\": \"integer\", \"description\": \"The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50.\\n\"}, \"offset\": {\"type\": \"integer\", \"description\": \"'The index of the first playlist to return. Default:\\n0 (the first object). Maximum offset: 100.000\\\\. Use with `limit` to get the\\nnext set of playlists.'\\n\"}}, \"required\": []}}, {\"name\": \"POST_playlists__playlist_id__tracks\", \"description\": \"Add one or more items to a user's playlist.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"playlist_id\": {\"type\": \"string\", \"description\": \"The [Spotify ID](/documentation/web-api/#spotify-uris-and-ids) of the playlist.\\n\"}, \"position\": {\"type\": \"integer\", \"description\": \"The position to insert the items, a zero-based index. For example, to insert the items in the first position: `position=0`; to insert the items in the third position: `position=2`. If omitted, the items will be appended to the playlist. Items are added in the order they are listed in the query string or request body.\\n\"}, \"uris\": {\"type\": \"string\", \"description\": \"A comma-separated list of [Spotify URIs](/documentation/web-api/#spotify-uris-and-ids) to add, can be track or episode URIs. For example:<br/>`uris=spotify:track:4iV5W9uYEdYUVa79Axb7Rh, spotify:track:1301WleyT98MSxVHPZCA6M, spotify:episode:512ojhOuo1ktJprKbVcKyQ`<br/>A maximum of 100 items can be added in one request. <br/>\\n_**Note**: it is likely that passing a large number of item URIs as a query parameter will exceed the maximum length of the request URI. When adding a large number of items, it is recommended to pass them in the request body, see below._\\n\"}}, \"required\": [\"playlist_id\"]}}]", "GraphQL_schema": "type GET_search_Album {\n  album_type: String\n  artists: [GET_search_ArtistsEntry]\n  available_markets: [String]\n  external_urls: GET_search_ExternalUrls1\n  href: String\n  id: String\n  images: [GET_search_ImagesEntry]\n  name: String\n  release_date: Date\n  release_date_precision: String\n  total_tracks: Int\n  type: String\n  uri: String\n}\n\ntype GET_search_Artists1Entry {\n  external_urls: GET_search_ExternalUrls2\n  href: String\n  id: String\n  name: String\n  type: String\n  uri: String\n}\n\ntype GET_search_ArtistsEntry {\n  external_urls: GET_search_ExternalUrls\n  href: String\n  id: String\n  name: String\n  type: String\n  uri: String\n}\n\ntype GET_search_ExternalIds {\n  isrc: String\n}\n\ntype GET_search_ExternalUrls {\n  spotify: String\n}\n\ntype GET_search_ExternalUrls1 {\n  spotify: String\n}\n\ntype GET_search_ExternalUrls2 {\n  spotify: String\n}\n\ntype GET_search_ExternalUrls3 {\n  spotify: String\n}\n\ntype GET_search_ImagesEntry {\n  height: Int\n  url: String\n  width: Int\n}\n\ntype GET_search_ItemsEntry {\n  album: GET_search_Album\n  artists: [GET_search_Artists1Entry]\n  available_markets: [String]\n  disc_number: Int\n  duration_ms: Int\n  explicit: Boolean\n  external_ids: GET_search_ExternalIds\n  external_urls: GET_search_ExternalUrls3\n  href: String\n  id: String\n  is_local: Boolean\n  name: String\n  popularity: Int\n  preview_url: String\n  track_number: Int\n  type: String\n  uri: String\n}\n\ntype GET_search_Root {\n  tracks: GET_search_Tracks\n}\n\ntype GET_search_Tracks {\n  href: String\n  items: [GET_search_ItemsEntry]\n  limit: Int\n  next: String\n  offset: Int\n  \"\"\"\n  Field \"previous\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  previous: JSON\n  total: Int\n}\n\ntype Query {\n  GET_search(\n    q: String\n    spotify_access_token: String!\n    type: String\n  ): GET_search_Root\n    @rest(\n      endpoint: \"https://api.spotify.com/v1/search\"\n      headers: [\n        { name: \"authorization\", value: \"Bearer $spotify_access_token;\" }\n      ]\n    )\n}\ntype GET_me_playlists_ExternalUrls {\n  spotify: String\n}\n\ntype GET_me_playlists_ExternalUrls1 {\n  spotify: String\n}\n\ntype GET_me_playlists_ImagesEntry {\n  \"\"\"\n  Field \"height\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  height: JSON\n  url: String\n  \"\"\"\n  Field \"width\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  width: JSON\n}\n\ntype GET_me_playlists_ItemsEntry {\n  collaborative: Boolean\n  description: String\n  external_urls: GET_me_playlists_ExternalUrls\n  href: String\n  id: String\n  images: [GET_me_playlists_ImagesEntry]\n  name: String\n  owner: GET_me_playlists_Owner\n  \"\"\"\n  Field \"primary_color\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  primary_color: JSON\n  public: Boolean\n  snapshot_id: String\n  tracks: GET_me_playlists_Tracks\n  type: String\n  uri: String\n}\n\ntype GET_me_playlists_Owner {\n  display_name: String\n  external_urls: GET_me_playlists_ExternalUrls1\n  href: String\n  id: String\n  type: String\n  uri: String\n}\n\ntype GET_me_playlists_Root {\n  href: String\n  items: [GET_me_playlists_ItemsEntry]\n  limit: Int\n  \"\"\"\n  Field \"next\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  next: JSON\n  offset: Int\n  \"\"\"\n  Field \"previous\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  previous: JSON\n  total: Int\n}\n\ntype GET_me_playlists_Tracks {\n  href: String\n  total: Int\n}\n\ntype Query {\n  GET_me_playlists(spotify_access_token: String!): GET_me_playlists_Root\n    @rest(\n      endpoint: \"https://api.spotify.com/v1/me/playlists\"\n      headers: [\n        { name: \"authorization\", value: \"Bearer $spotify_access_token;\" }\n      ]\n    )\n}\n", "utterance": "Add Summertime Sadness by Lana Del Rey in my first playlist"}
{"domain": "spotify", "input": "Function Signatures:\n\n[{\"name\": \"GET_me_top__type_\", \"description\": \"Get the current user's top artists or tracks based on calculated affinity.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"type\": {\"type\": \"string\", \"description\": \"The type of entity to return. Valid values: `artists` or `tracks`\\n\"}, \"time_range\": {\"type\": \"string\", \"description\": \"Over what time frame the affinities are computed. Valid values: `long_term` (calculated from several years of data and including all new data as it becomes available), `medium_term` (approximately last 6 months), `short_term` (approximately last 4 weeks). Default: `medium_term`\\n\"}, \"limit\": {\"type\": \"integer\", \"description\": \"The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50.\\n\"}, \"offset\": {\"type\": \"integer\", \"description\": \"The index of the first item to return. Default: 0 (the first item). Use with limit to get the next set of items.\\n\"}}, \"required\": [\"type\"]}}, {\"name\": \"GET_artists__id_\", \"description\": \"Get Spotify catalog information for a single artist identified by their unique Spotify ID.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"id\": {\"type\": \"string\", \"description\": \"The [Spotify ID](/documentation/web-api/#spotify-uris-and-ids) of the artist.\\n\"}}, \"required\": [\"id\"]}}]\n\nGraphQL schema:\n\ntype GET_me_top__type_Root {\n  href: String\n  items: [JSON]\n  limit: Int\n  \"\"\"\n  Field \"next\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  next: JSON\n  offset: Int\n  \"\"\"\n  Field \"previous\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  previous: JSON\n  total: Int\n}\n\ntype Query {\n  GET_me_top__type_(\n    spotify_access_token: String!\n    type: String!\n  ): GET_me_top__type_Root\n    @rest(\n      endpoint: \"https://api.spotify.com/v1/me/top/$type;\"\n      headers: [\n        { name: \"authorization\", value: \"Bearer $spotify_access_token;\" }\n      ]\n    )\n}\ntype GET_artists__id__top_tracks_Album {\n  album_type: String\n  artists: [GET_artists__id__top_tracks_ArtistsEntry]\n  external_urls: GET_artists__id__top_tracks_ExternalUrls1\n  href: String\n  id: String\n  images: [GET_artists__id__top_tracks_ImagesEntry]\n  is_playable: Boolean\n  name: String\n  release_date: String\n  release_date_precision: String\n  total_tracks: Int\n  type: String\n  uri: String\n}\n\ntype GET_artists__id__top_tracks_Artists1Entry {\n  external_urls: GET_artists__id__top_tracks_ExternalUrls2\n  href: String\n  id: String\n  name: String\n  type: String\n  uri: String\n}\n\ntype GET_artists__id__top_tracks_ArtistsEntry {\n  external_urls: GET_artists__id__top_tracks_ExternalUrls\n  href: String\n  id: String\n  name: String\n  type: String\n  uri: String\n}\n\ntype GET_artists__id__top_tracks_ExternalIds {\n  isrc: String\n}\n\ntype GET_artists__id__top_tracks_ExternalUrls {\n  spotify: String\n}\n\ntype GET_artists__id__top_tracks_ExternalUrls1 {\n  spotify: String\n}\n\ntype GET_artists__id__top_tracks_ExternalUrls2 {\n  spotify: String\n}\n\ntype GET_artists__id__top_tracks_ExternalUrls3 {\n  spotify: String\n}\n\ntype GET_artists__id__top_tracks_ImagesEntry {\n  height: Int\n  url: String\n  width: Int\n}\n\ntype GET_artists__id__top_tracks_Root {\n  tracks: [GET_artists__id__top_tracks_TracksEntry]\n}\n\ntype GET_artists__id__top_tracks_TracksEntry {\n  album: GET_artists__id__top_tracks_Album\n  artists: [GET_artists__id__top_tracks_Artists1Entry]\n  disc_number: Int\n  duration_ms: Int\n  explicit: Boolean\n  external_ids: GET_artists__id__top_tracks_ExternalIds\n  external_urls: GET_artists__id__top_tracks_ExternalUrls3\n  href: String\n  id: String\n  is_local: Boolean\n  is_playable: Boolean\n  name: String\n  popularity: Int\n  \"\"\"\n  Field \"preview_url\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  preview_url: JSON\n  track_number: Int\n  type: String\n  uri: String\n}\n\ntype Query {\n  GET_artists__id__top_tracks(\n    id: String!\n    spotify_access_token: String!\n  ): GET_artists__id__top_tracks_Root\n    @rest(\n      endpoint: \"https://api.spotify.com/v1/artists/$id;/top-tracks\"\n      headers: [\n        { name: \"authorization\", value: \"Bearer $spotify_access_token;\" }\n      ]\n    )\n}\n\nUtterance: Give me a song of my favorite artist", "output": "response_obj = GET_me_top__type_(type=\"artists\")\nGET_artists__id__top_tracks(id=response_obj.items[0].id)\n", "function_specs": "[{\"name\": \"GET_me_top__type_\", \"description\": \"Get the current user's top artists or tracks based on calculated affinity.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"type\": {\"type\": \"string\", \"description\": \"The type of entity to return. Valid values: `artists` or `tracks`\\n\"}, \"time_range\": {\"type\": \"string\", \"description\": \"Over what time frame the affinities are computed. Valid values: `long_term` (calculated from several years of data and including all new data as it becomes available), `medium_term` (approximately last 6 months), `short_term` (approximately last 4 weeks). Default: `medium_term`\\n\"}, \"limit\": {\"type\": \"integer\", \"description\": \"The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50.\\n\"}, \"offset\": {\"type\": \"integer\", \"description\": \"The index of the first item to return. Default: 0 (the first item). Use with limit to get the next set of items.\\n\"}}, \"required\": [\"type\"]}}, {\"name\": \"GET_artists__id_\", \"description\": \"Get Spotify catalog information for a single artist identified by their unique Spotify ID.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"id\": {\"type\": \"string\", \"description\": \"The [Spotify ID](/documentation/web-api/#spotify-uris-and-ids) of the artist.\\n\"}}, \"required\": [\"id\"]}}]", "GraphQL_schema": "type GET_me_top__type_Root {\n  href: String\n  items: [JSON]\n  limit: Int\n  \"\"\"\n  Field \"next\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  next: JSON\n  offset: Int\n  \"\"\"\n  Field \"previous\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  previous: JSON\n  total: Int\n}\n\ntype Query {\n  GET_me_top__type_(\n    spotify_access_token: String!\n    type: String!\n  ): GET_me_top__type_Root\n    @rest(\n      endpoint: \"https://api.spotify.com/v1/me/top/$type;\"\n      headers: [\n        { name: \"authorization\", value: \"Bearer $spotify_access_token;\" }\n      ]\n    )\n}\ntype GET_artists__id__top_tracks_Album {\n  album_type: String\n  artists: [GET_artists__id__top_tracks_ArtistsEntry]\n  external_urls: GET_artists__id__top_tracks_ExternalUrls1\n  href: String\n  id: String\n  images: [GET_artists__id__top_tracks_ImagesEntry]\n  is_playable: Boolean\n  name: String\n  release_date: String\n  release_date_precision: String\n  total_tracks: Int\n  type: String\n  uri: String\n}\n\ntype GET_artists__id__top_tracks_Artists1Entry {\n  external_urls: GET_artists__id__top_tracks_ExternalUrls2\n  href: String\n  id: String\n  name: String\n  type: String\n  uri: String\n}\n\ntype GET_artists__id__top_tracks_ArtistsEntry {\n  external_urls: GET_artists__id__top_tracks_ExternalUrls\n  href: String\n  id: String\n  name: String\n  type: String\n  uri: String\n}\n\ntype GET_artists__id__top_tracks_ExternalIds {\n  isrc: String\n}\n\ntype GET_artists__id__top_tracks_ExternalUrls {\n  spotify: String\n}\n\ntype GET_artists__id__top_tracks_ExternalUrls1 {\n  spotify: String\n}\n\ntype GET_artists__id__top_tracks_ExternalUrls2 {\n  spotify: String\n}\n\ntype GET_artists__id__top_tracks_ExternalUrls3 {\n  spotify: String\n}\n\ntype GET_artists__id__top_tracks_ImagesEntry {\n  height: Int\n  url: String\n  width: Int\n}\n\ntype GET_artists__id__top_tracks_Root {\n  tracks: [GET_artists__id__top_tracks_TracksEntry]\n}\n\ntype GET_artists__id__top_tracks_TracksEntry {\n  album: GET_artists__id__top_tracks_Album\n  artists: [GET_artists__id__top_tracks_Artists1Entry]\n  disc_number: Int\n  duration_ms: Int\n  explicit: Boolean\n  external_ids: GET_artists__id__top_tracks_ExternalIds\n  external_urls: GET_artists__id__top_tracks_ExternalUrls3\n  href: String\n  id: String\n  is_local: Boolean\n  is_playable: Boolean\n  name: String\n  popularity: Int\n  \"\"\"\n  Field \"preview_url\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  preview_url: JSON\n  track_number: Int\n  type: String\n  uri: String\n}\n\ntype Query {\n  GET_artists__id__top_tracks(\n    id: String!\n    spotify_access_token: String!\n  ): GET_artists__id__top_tracks_Root\n    @rest(\n      endpoint: \"https://api.spotify.com/v1/artists/$id;/top-tracks\"\n      headers: [\n        { name: \"authorization\", value: \"Bearer $spotify_access_token;\" }\n      ]\n    )\n}\n", "utterance": "Give me a song of my favorite artist"}
{"domain": "spotify", "input": "Function Signatures:\n\n[{\"name\": \"GET_search\", \"description\": \"Get Spotify catalog information about albums, artists, playlists, tracks, shows, episodes or audiobooks\\nthat match a keyword string.<br />\\n**Note: Audiobooks are only available for the US, UK, Ireland, New Zealand and Australia markets.**\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"q\": {\"type\": \"string\", \"description\": \"Your search query.\\n\\nYou can narrow down your search using field filters. The available filters are `album`, `artist`, `track`, `year`, `upc`, `tag:hipster`, `tag:new`, `isrc`, and `genre`. Each field filter only applies to certain result types.\\n\\nThe `artist` and `year` filters can be used while searching albums, artists and tracks. You can filter on a single `year` or a range (e.g. 1955-1960).<br />\\nThe `album` filter can be used while searching albums and tracks.<br />\\nThe `genre` filter can be used while searching artists and tracks.<br />\\nThe `isrc` and `track` filters can be used while searching tracks.<br />\\nThe `upc`, `tag:new` and `tag:hipster` filters can only be used while searching albums. The `tag:new` filter will return albums released in the past two weeks and `tag:hipster` can be used to return only albums with the lowest 10% popularity.<br />\\n\"}, \"type\": {\"type\": \"array\", \"description\": \"A comma-separated list of item types to search across. Search results include hits\\nfrom all the specified item types. For example: `q=abacab&type=album,track` returns\\nboth albums and tracks matching \\\"abacab\\\".\\n\"}, \"market\": {\"type\": \"string\", \"description\": \"An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).\\n  If a country code is specified, only content that is available in that market will be returned.<br/>\\n  If a valid user access token is specified in the request header, the country associated with\\n  the user account will take priority over this parameter.<br/>\\n  _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>\\n  Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).\\n\"}, \"limit\": {\"type\": \"integer\", \"description\": \"The maximum number of results to return in each item type.\\n\"}, \"offset\": {\"type\": \"integer\", \"description\": \"The index of the first result to return. Use\\nwith limit to get the next page of search results.\\n\"}, \"include_external\": {\"type\": \"string\", \"description\": \"If `include_external=audio` is specified it signals that the client can play externally hosted audio content, and marks\\nthe content as playable in the response. By default externally hosted audio content is marked as unplayable in the response.\\n\"}}, \"required\": [\"q\", \"type\"]}}, {\"name\": \"PUT_me_albums\", \"description\": \"Save one or more albums to the current user's 'Your Music' library.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"ids\": {\"type\": \"string\", \"description\": \"A comma-separated list of the [Spotify IDs](/documentation/web-api/#spotify-uris-and-ids) for the albums. Maximum: 20 IDs.\\n\"}}, \"required\": [\"ids\"]}}]\n\nGraphQL schema:\n\ntype GET_search_Albums {\n  href: String\n  items: [GET_search_ItemsEntry]\n  limit: Int\n  next: String\n  offset: Int\n  \"\"\"\n  Field \"previous\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  previous: JSON\n  total: Int\n}\n\ntype GET_search_ArtistsEntry {\n  external_urls: GET_search_ExternalUrls\n  href: String\n  id: String\n  name: String\n  type: String\n  uri: String\n}\n\ntype GET_search_ExternalUrls {\n  spotify: String\n}\n\ntype GET_search_ExternalUrls1 {\n  spotify: String\n}\n\ntype GET_search_ImagesEntry {\n  height: Int\n  url: String\n  width: Int\n}\n\ntype GET_search_ItemsEntry {\n  album_type: String\n  artists: [GET_search_ArtistsEntry]\n  available_markets: [String]\n  external_urls: GET_search_ExternalUrls1\n  href: String\n  id: String\n  images: [GET_search_ImagesEntry]\n  name: String\n  release_date: Date\n  release_date_precision: String\n  total_tracks: Int\n  type: String\n  uri: String\n}\n\ntype GET_search_Root {\n  albums: GET_search_Albums\n}\n\ntype Query {\n  GET_search(\n    q: String\n    spotify_access_token: String!\n    type: String\n  ): GET_search_Root\n    @rest(\n      endpoint: \"https://api.spotify.com/v1/search\"\n      headers: [\n        { name: \"authorization\", value: \"Bearer $spotify_access_token;\" }\n      ]\n    )\n}\n\nUtterance: Save Jay Chou's album Mojito", "output": "response_obj = GET_search(q=\"Jay Chou Mojito\", type=\"album\")\nPUT_me_albums(ids=response_obj.albums.items[0].id)\n", "function_specs": "[{\"name\": \"GET_search\", \"description\": \"Get Spotify catalog information about albums, artists, playlists, tracks, shows, episodes or audiobooks\\nthat match a keyword string.<br />\\n**Note: Audiobooks are only available for the US, UK, Ireland, New Zealand and Australia markets.**\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"q\": {\"type\": \"string\", \"description\": \"Your search query.\\n\\nYou can narrow down your search using field filters. The available filters are `album`, `artist`, `track`, `year`, `upc`, `tag:hipster`, `tag:new`, `isrc`, and `genre`. Each field filter only applies to certain result types.\\n\\nThe `artist` and `year` filters can be used while searching albums, artists and tracks. You can filter on a single `year` or a range (e.g. 1955-1960).<br />\\nThe `album` filter can be used while searching albums and tracks.<br />\\nThe `genre` filter can be used while searching artists and tracks.<br />\\nThe `isrc` and `track` filters can be used while searching tracks.<br />\\nThe `upc`, `tag:new` and `tag:hipster` filters can only be used while searching albums. The `tag:new` filter will return albums released in the past two weeks and `tag:hipster` can be used to return only albums with the lowest 10% popularity.<br />\\n\"}, \"type\": {\"type\": \"array\", \"description\": \"A comma-separated list of item types to search across. Search results include hits\\nfrom all the specified item types. For example: `q=abacab&type=album,track` returns\\nboth albums and tracks matching \\\"abacab\\\".\\n\"}, \"market\": {\"type\": \"string\", \"description\": \"An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).\\n  If a country code is specified, only content that is available in that market will be returned.<br/>\\n  If a valid user access token is specified in the request header, the country associated with\\n  the user account will take priority over this parameter.<br/>\\n  _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>\\n  Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).\\n\"}, \"limit\": {\"type\": \"integer\", \"description\": \"The maximum number of results to return in each item type.\\n\"}, \"offset\": {\"type\": \"integer\", \"description\": \"The index of the first result to return. Use\\nwith limit to get the next page of search results.\\n\"}, \"include_external\": {\"type\": \"string\", \"description\": \"If `include_external=audio` is specified it signals that the client can play externally hosted audio content, and marks\\nthe content as playable in the response. By default externally hosted audio content is marked as unplayable in the response.\\n\"}}, \"required\": [\"q\", \"type\"]}}, {\"name\": \"PUT_me_albums\", \"description\": \"Save one or more albums to the current user's 'Your Music' library.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"ids\": {\"type\": \"string\", \"description\": \"A comma-separated list of the [Spotify IDs](/documentation/web-api/#spotify-uris-and-ids) for the albums. Maximum: 20 IDs.\\n\"}}, \"required\": [\"ids\"]}}]", "GraphQL_schema": "type GET_search_Albums {\n  href: String\n  items: [GET_search_ItemsEntry]\n  limit: Int\n  next: String\n  offset: Int\n  \"\"\"\n  Field \"previous\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  previous: JSON\n  total: Int\n}\n\ntype GET_search_ArtistsEntry {\n  external_urls: GET_search_ExternalUrls\n  href: String\n  id: String\n  name: String\n  type: String\n  uri: String\n}\n\ntype GET_search_ExternalUrls {\n  spotify: String\n}\n\ntype GET_search_ExternalUrls1 {\n  spotify: String\n}\n\ntype GET_search_ImagesEntry {\n  height: Int\n  url: String\n  width: Int\n}\n\ntype GET_search_ItemsEntry {\n  album_type: String\n  artists: [GET_search_ArtistsEntry]\n  available_markets: [String]\n  external_urls: GET_search_ExternalUrls1\n  href: String\n  id: String\n  images: [GET_search_ImagesEntry]\n  name: String\n  release_date: Date\n  release_date_precision: String\n  total_tracks: Int\n  type: String\n  uri: String\n}\n\ntype GET_search_Root {\n  albums: GET_search_Albums\n}\n\ntype Query {\n  GET_search(\n    q: String\n    spotify_access_token: String!\n    type: String\n  ): GET_search_Root\n    @rest(\n      endpoint: \"https://api.spotify.com/v1/search\"\n      headers: [\n        { name: \"authorization\", value: \"Bearer $spotify_access_token;\" }\n      ]\n    )\n}\n", "utterance": "Save Jay Chou's album Mojito"}
{"domain": "spotify", "input": "Function Signatures:\n\n[{\"name\": \"GET_me_tracks\", \"description\": \"Get a list of the songs saved in the current Spotify user's 'Your Music' library.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"market\": {\"type\": \"string\", \"description\": \"An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).\\n  If a country code is specified, only content that is available in that market will be returned.<br/>\\n  If a valid user access token is specified in the request header, the country associated with\\n  the user account will take priority over this parameter.<br/>\\n  _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>\\n  Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).\\n\"}, \"limit\": {\"type\": \"integer\", \"description\": \"The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50.\\n\"}, \"offset\": {\"type\": \"integer\", \"description\": \"The index of the first item to return. Default: 0 (the first item). Use with limit to get the next set of items.\\n\"}}, \"required\": []}}, {\"name\": \"GET_tracks__id_\", \"description\": \"Get Spotify catalog information for a single track identified by its\\nunique Spotify ID.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"id\": {\"type\": \"string\", \"description\": \"The [Spotify ID](/documentation/web-api/#spotify-uris-and-ids)\\nfor the track.\\n\"}, \"market\": {\"type\": \"string\", \"description\": \"An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).\\n  If a country code is specified, only content that is available in that market will be returned.<br/>\\n  If a valid user access token is specified in the request header, the country associated with\\n  the user account will take priority over this parameter.<br/>\\n  _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>\\n  Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).\\n\"}}, \"required\": [\"id\"]}}, {\"name\": \"PUT_me_player_play\", \"description\": \"Start a new context or resume current playback on the user's active device.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"context_uri\": {\"type\": \"string\", \"description\": \"Optional. Spotify URI of the context to play. Valid contexts are albums, artists & playlists. {context_uri:\\\"spotify:album:1Je1IMUlBXcx1Fz0WE7oPT\\\"}\"}, \"uris\": {\"type\": \"array\", \"description\": \"Optional. A JSON array of the Spotify track URIs to play. For example: {\\\"uris\\\": [\\\"spotify:track:4iV5W9uYEdYUVa79Axb7Rh\\\", \\\"spotify:track:1301WleyT98MSxVHPZCA6M\\\"]}\"}, \"offset\": {\"type\": \"array\", \"description\": \"Optional. Indicates from where in the context playback should start. Only available when context_uri corresponds to an album or playlist object \\\"position\\\" is zero based and can\\u2019t be negative. Example: \\\"offset\\\": {\\\"position\\\": 5} \\\"uri\\\" is a string representing the uri of the item to start at. Example: \\\"offset\\\": {\\\"uri\\\": \\\"spotify:track:1301WleyT98MSxVHPZCA6M\\\"}\"}, \"position_ms\": {\"type\": \"integer\", \"description\": \"\"}}, \"required\": [], \"body_params\": [\"context_uri\", \"uris\", \"offset\", \"position_ms\"]}}, {\"name\": \"PUT_me_player_repeat\", \"description\": \"Set the repeat mode for the user's playback. Options are repeat-track,\\nrepeat-context, and off.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"state\": {\"type\": \"string\", \"description\": \"**track**, **context** or **off**.<br/>\\n**track** will repeat the current track.<br/>\\n**context** will repeat the current context.<br/>\\n**off** will turn repeat off.\\n\"}}, \"required\": [\"state\"]}}]\n\nGraphQL schema:\n\ntype GET_me_tracks_Album {\n  album_type: String\n  artists: [GET_me_tracks_ArtistsEntry]\n  available_markets: [String]\n  external_urls: GET_me_tracks_ExternalUrls1\n  href: String\n  id: String\n  images: [GET_me_tracks_ImagesEntry]\n  name: String\n  release_date: Date\n  release_date_precision: String\n  total_tracks: Int\n  type: String\n  uri: String\n}\n\ntype GET_me_tracks_Artists1Entry {\n  external_urls: GET_me_tracks_ExternalUrls2\n  href: String\n  id: String\n  name: String\n  type: String\n  uri: String\n}\n\ntype GET_me_tracks_ArtistsEntry {\n  external_urls: GET_me_tracks_ExternalUrls\n  href: String\n  id: String\n  name: String\n  type: String\n  uri: String\n}\n\ntype GET_me_tracks_ExternalIds {\n  isrc: String\n}\n\ntype GET_me_tracks_ExternalUrls {\n  spotify: String\n}\n\ntype GET_me_tracks_ExternalUrls1 {\n  spotify: String\n}\n\ntype GET_me_tracks_ExternalUrls2 {\n  spotify: String\n}\n\ntype GET_me_tracks_ExternalUrls3 {\n  spotify: String\n}\n\ntype GET_me_tracks_ImagesEntry {\n  height: Int\n  url: String\n  width: Int\n}\n\ntype GET_me_tracks_ItemsEntry {\n  added_at: DateTime\n  track: GET_me_tracks_Track\n}\n\ntype GET_me_tracks_Root {\n  href: String\n  items: [GET_me_tracks_ItemsEntry]\n  limit: Int\n  \"\"\"\n  Field \"next\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  next: JSON\n  offset: Int\n  \"\"\"\n  Field \"previous\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  previous: JSON\n  total: Int\n}\n\ntype GET_me_tracks_Track {\n  album: GET_me_tracks_Album\n  artists: [GET_me_tracks_Artists1Entry]\n  available_markets: [String]\n  disc_number: Int\n  duration_ms: Int\n  explicit: Boolean\n  external_ids: GET_me_tracks_ExternalIds\n  external_urls: GET_me_tracks_ExternalUrls3\n  href: String\n  id: String\n  is_local: Boolean\n  name: String\n  popularity: Int\n  preview_url: String\n  track_number: Int\n  type: String\n  uri: String\n}\n\ntype Query {\n  GET_me_tracks(spotify_access_token: String!): GET_me_tracks_Root\n    @rest(\n      endpoint: \"https://api.spotify.com/v1/me/tracks\"\n      headers: [\n        { name: \"authorization\", value: \"Bearer $spotify_access_token;\" }\n      ]\n    )\n}\ntype GET_tracks__id_Album {\n  album_type: String\n  artists: [GET_tracks__id_ArtistsEntry]\n  available_markets: [String]\n  external_urls: GET_tracks__id_ExternalUrls1\n  href: String\n  id: String\n  images: [GET_tracks__id_ImagesEntry]\n  name: String\n  release_date: Date\n  release_date_precision: String\n  total_tracks: Int\n  type: String\n  uri: String\n}\n\ntype GET_tracks__id_Artists1Entry {\n  external_urls: GET_tracks__id_ExternalUrls2\n  href: String\n  id: String\n  name: String\n  type: String\n  uri: String\n}\n\ntype GET_tracks__id_ArtistsEntry {\n  external_urls: GET_tracks__id_ExternalUrls\n  href: String\n  id: String\n  name: String\n  type: String\n  uri: String\n}\n\ntype GET_tracks__id_ExternalIds {\n  isrc: String\n}\n\ntype GET_tracks__id_ExternalUrls {\n  spotify: String\n}\n\ntype GET_tracks__id_ExternalUrls1 {\n  spotify: String\n}\n\ntype GET_tracks__id_ExternalUrls2 {\n  spotify: String\n}\n\ntype GET_tracks__id_ExternalUrls3 {\n  spotify: String\n}\n\ntype GET_tracks__id_ImagesEntry {\n  height: Int\n  url: String\n  width: Int\n}\n\ntype GET_tracks__id_Root {\n  album: GET_tracks__id_Album\n  artists: [GET_tracks__id_Artists1Entry]\n  available_markets: [String]\n  disc_number: Int\n  duration_ms: Int\n  explicit: Boolean\n  external_ids: GET_tracks__id_ExternalIds\n  external_urls: GET_tracks__id_ExternalUrls3\n  href: String\n  id: String\n  is_local: Boolean\n  name: String\n  popularity: Int\n  preview_url: String\n  track_number: Int\n  type: String\n  uri: String\n}\n\ntype Query {\n  GET_tracks__id_(\n    id: String!\n    spotify_access_token: String!\n  ): GET_tracks__id_Root\n    @rest(\n      endpoint: \"https://api.spotify.com/v1/tracks/$id;\"\n      headers: [\n        { name: \"authorization\", value: \"Bearer $spotify_access_token;\" }\n      ]\n    )\n}\n\nUtterance: Play the third song from my music library and set the single track repeat mode", "output": "response_obj = GET_me_tracks()\nresponse_obj1 = GET_tracks__id_(id=response_obj.items[2].track.id)\nPUT_me_player_play(context_uri=response_obj1.uri)\nPUT_me_player_repeat(state=\"track\")\n", "function_specs": "[{\"name\": \"GET_me_tracks\", \"description\": \"Get a list of the songs saved in the current Spotify user's 'Your Music' library.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"market\": {\"type\": \"string\", \"description\": \"An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).\\n  If a country code is specified, only content that is available in that market will be returned.<br/>\\n  If a valid user access token is specified in the request header, the country associated with\\n  the user account will take priority over this parameter.<br/>\\n  _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>\\n  Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).\\n\"}, \"limit\": {\"type\": \"integer\", \"description\": \"The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50.\\n\"}, \"offset\": {\"type\": \"integer\", \"description\": \"The index of the first item to return. Default: 0 (the first item). Use with limit to get the next set of items.\\n\"}}, \"required\": []}}, {\"name\": \"GET_tracks__id_\", \"description\": \"Get Spotify catalog information for a single track identified by its\\nunique Spotify ID.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"id\": {\"type\": \"string\", \"description\": \"The [Spotify ID](/documentation/web-api/#spotify-uris-and-ids)\\nfor the track.\\n\"}, \"market\": {\"type\": \"string\", \"description\": \"An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).\\n  If a country code is specified, only content that is available in that market will be returned.<br/>\\n  If a valid user access token is specified in the request header, the country associated with\\n  the user account will take priority over this parameter.<br/>\\n  _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>\\n  Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).\\n\"}}, \"required\": [\"id\"]}}, {\"name\": \"PUT_me_player_play\", \"description\": \"Start a new context or resume current playback on the user's active device.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"context_uri\": {\"type\": \"string\", \"description\": \"Optional. Spotify URI of the context to play. Valid contexts are albums, artists & playlists. {context_uri:\\\"spotify:album:1Je1IMUlBXcx1Fz0WE7oPT\\\"}\"}, \"uris\": {\"type\": \"array\", \"description\": \"Optional. A JSON array of the Spotify track URIs to play. For example: {\\\"uris\\\": [\\\"spotify:track:4iV5W9uYEdYUVa79Axb7Rh\\\", \\\"spotify:track:1301WleyT98MSxVHPZCA6M\\\"]}\"}, \"offset\": {\"type\": \"array\", \"description\": \"Optional. Indicates from where in the context playback should start. Only available when context_uri corresponds to an album or playlist object \\\"position\\\" is zero based and can\\u2019t be negative. Example: \\\"offset\\\": {\\\"position\\\": 5} \\\"uri\\\" is a string representing the uri of the item to start at. Example: \\\"offset\\\": {\\\"uri\\\": \\\"spotify:track:1301WleyT98MSxVHPZCA6M\\\"}\"}, \"position_ms\": {\"type\": \"integer\", \"description\": \"\"}}, \"required\": [], \"body_params\": [\"context_uri\", \"uris\", \"offset\", \"position_ms\"]}}, {\"name\": \"PUT_me_player_repeat\", \"description\": \"Set the repeat mode for the user's playback. Options are repeat-track,\\nrepeat-context, and off.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"state\": {\"type\": \"string\", \"description\": \"**track**, **context** or **off**.<br/>\\n**track** will repeat the current track.<br/>\\n**context** will repeat the current context.<br/>\\n**off** will turn repeat off.\\n\"}}, \"required\": [\"state\"]}}]", "GraphQL_schema": "type GET_me_tracks_Album {\n  album_type: String\n  artists: [GET_me_tracks_ArtistsEntry]\n  available_markets: [String]\n  external_urls: GET_me_tracks_ExternalUrls1\n  href: String\n  id: String\n  images: [GET_me_tracks_ImagesEntry]\n  name: String\n  release_date: Date\n  release_date_precision: String\n  total_tracks: Int\n  type: String\n  uri: String\n}\n\ntype GET_me_tracks_Artists1Entry {\n  external_urls: GET_me_tracks_ExternalUrls2\n  href: String\n  id: String\n  name: String\n  type: String\n  uri: String\n}\n\ntype GET_me_tracks_ArtistsEntry {\n  external_urls: GET_me_tracks_ExternalUrls\n  href: String\n  id: String\n  name: String\n  type: String\n  uri: String\n}\n\ntype GET_me_tracks_ExternalIds {\n  isrc: String\n}\n\ntype GET_me_tracks_ExternalUrls {\n  spotify: String\n}\n\ntype GET_me_tracks_ExternalUrls1 {\n  spotify: String\n}\n\ntype GET_me_tracks_ExternalUrls2 {\n  spotify: String\n}\n\ntype GET_me_tracks_ExternalUrls3 {\n  spotify: String\n}\n\ntype GET_me_tracks_ImagesEntry {\n  height: Int\n  url: String\n  width: Int\n}\n\ntype GET_me_tracks_ItemsEntry {\n  added_at: DateTime\n  track: GET_me_tracks_Track\n}\n\ntype GET_me_tracks_Root {\n  href: String\n  items: [GET_me_tracks_ItemsEntry]\n  limit: Int\n  \"\"\"\n  Field \"next\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  next: JSON\n  offset: Int\n  \"\"\"\n  Field \"previous\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  previous: JSON\n  total: Int\n}\n\ntype GET_me_tracks_Track {\n  album: GET_me_tracks_Album\n  artists: [GET_me_tracks_Artists1Entry]\n  available_markets: [String]\n  disc_number: Int\n  duration_ms: Int\n  explicit: Boolean\n  external_ids: GET_me_tracks_ExternalIds\n  external_urls: GET_me_tracks_ExternalUrls3\n  href: String\n  id: String\n  is_local: Boolean\n  name: String\n  popularity: Int\n  preview_url: String\n  track_number: Int\n  type: String\n  uri: String\n}\n\ntype Query {\n  GET_me_tracks(spotify_access_token: String!): GET_me_tracks_Root\n    @rest(\n      endpoint: \"https://api.spotify.com/v1/me/tracks\"\n      headers: [\n        { name: \"authorization\", value: \"Bearer $spotify_access_token;\" }\n      ]\n    )\n}\ntype GET_tracks__id_Album {\n  album_type: String\n  artists: [GET_tracks__id_ArtistsEntry]\n  available_markets: [String]\n  external_urls: GET_tracks__id_ExternalUrls1\n  href: String\n  id: String\n  images: [GET_tracks__id_ImagesEntry]\n  name: String\n  release_date: Date\n  release_date_precision: String\n  total_tracks: Int\n  type: String\n  uri: String\n}\n\ntype GET_tracks__id_Artists1Entry {\n  external_urls: GET_tracks__id_ExternalUrls2\n  href: String\n  id: String\n  name: String\n  type: String\n  uri: String\n}\n\ntype GET_tracks__id_ArtistsEntry {\n  external_urls: GET_tracks__id_ExternalUrls\n  href: String\n  id: String\n  name: String\n  type: String\n  uri: String\n}\n\ntype GET_tracks__id_ExternalIds {\n  isrc: String\n}\n\ntype GET_tracks__id_ExternalUrls {\n  spotify: String\n}\n\ntype GET_tracks__id_ExternalUrls1 {\n  spotify: String\n}\n\ntype GET_tracks__id_ExternalUrls2 {\n  spotify: String\n}\n\ntype GET_tracks__id_ExternalUrls3 {\n  spotify: String\n}\n\ntype GET_tracks__id_ImagesEntry {\n  height: Int\n  url: String\n  width: Int\n}\n\ntype GET_tracks__id_Root {\n  album: GET_tracks__id_Album\n  artists: [GET_tracks__id_Artists1Entry]\n  available_markets: [String]\n  disc_number: Int\n  duration_ms: Int\n  explicit: Boolean\n  external_ids: GET_tracks__id_ExternalIds\n  external_urls: GET_tracks__id_ExternalUrls3\n  href: String\n  id: String\n  is_local: Boolean\n  name: String\n  popularity: Int\n  preview_url: String\n  track_number: Int\n  type: String\n  uri: String\n}\n\ntype Query {\n  GET_tracks__id_(\n    id: String!\n    spotify_access_token: String!\n  ): GET_tracks__id_Root\n    @rest(\n      endpoint: \"https://api.spotify.com/v1/tracks/$id;\"\n      headers: [\n        { name: \"authorization\", value: \"Bearer $spotify_access_token;\" }\n      ]\n    )\n}\n", "utterance": "Play the third song from my music library and set the single track repeat mode"}
{"domain": "spotify", "input": "Function Signatures:\n\n[{\"name\": \"GET_me_albums\", \"description\": \"Get a list of the albums saved in the current Spotify user's 'Your Music' library.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"limit\": {\"type\": \"integer\", \"description\": \"The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50.\\n\"}, \"offset\": {\"type\": \"integer\", \"description\": \"The index of the first item to return. Default: 0 (the first item). Use with limit to get the next set of items.\\n\"}, \"market\": {\"type\": \"string\", \"description\": \"An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).\\n  If a country code is specified, only content that is available in that market will be returned.<br/>\\n  If a valid user access token is specified in the request header, the country associated with\\n  the user account will take priority over this parameter.<br/>\\n  _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>\\n  Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).\\n\"}}, \"required\": []}}, {\"name\": \"DELETE_me_albums\", \"description\": \"Remove one or more albums from the current user's 'Your Music' library.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"ids\": {\"type\": \"string\", \"description\": \"A comma-separated list of the [Spotify IDs](/documentation/web-api/#spotify-uris-and-ids) for the albums. Maximum: 20 IDs.\\n\"}}, \"required\": [\"ids\"]}}]\n\nGraphQL schema:\n\ntype GET_me_albums_Album {\n  album_type: String\n  artists: [GET_me_albums_ArtistsEntry]\n  available_markets: [String]\n  copyrights: [GET_me_albums_CopyrightsEntry]\n  external_ids: GET_me_albums_ExternalIds\n  external_urls: GET_me_albums_ExternalUrls1\n  genres: [JSON]\n  href: String\n  id: String\n  images: [GET_me_albums_ImagesEntry]\n  label: String\n  name: String\n  popularity: Int\n  release_date: Int\n  release_date_precision: String\n  total_tracks: Int\n  tracks: GET_me_albums_Tracks\n  type: String\n  uri: String\n}\n\ntype GET_me_albums_Artists1Entry {\n  external_urls: GET_me_albums_ExternalUrls2\n  href: String\n  id: String\n  name: String\n  type: String\n  uri: String\n}\n\ntype GET_me_albums_ArtistsEntry {\n  external_urls: GET_me_albums_ExternalUrls\n  href: String\n  id: String\n  name: String\n  type: String\n  uri: String\n}\n\ntype GET_me_albums_CopyrightsEntry {\n  text: String\n  type: String\n}\n\ntype GET_me_albums_ExternalIds {\n  upc: Float\n}\n\ntype GET_me_albums_ExternalUrls {\n  spotify: String\n}\n\ntype GET_me_albums_ExternalUrls1 {\n  spotify: String\n}\n\ntype GET_me_albums_ExternalUrls2 {\n  spotify: String\n}\n\ntype GET_me_albums_ExternalUrls3 {\n  spotify: String\n}\n\ntype GET_me_albums_ImagesEntry {\n  height: Int\n  url: String\n  width: Int\n}\n\ntype GET_me_albums_Items1Entry {\n  artists: [GET_me_albums_Artists1Entry]\n  available_markets: [String]\n  disc_number: Int\n  duration_ms: Int\n  explicit: Boolean\n  external_urls: GET_me_albums_ExternalUrls3\n  href: String\n  id: String\n  is_local: Boolean\n  name: String\n  preview_url: String\n  track_number: Int\n  type: String\n  uri: String\n}\n\ntype GET_me_albums_ItemsEntry {\n  added_at: DateTime\n  album: GET_me_albums_Album\n}\n\ntype GET_me_albums_Root {\n  href: String\n  items: [GET_me_albums_ItemsEntry]\n  limit: Int\n  \"\"\"\n  Field \"next\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  next: JSON\n  offset: Int\n  \"\"\"\n  Field \"previous\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  previous: JSON\n  total: Int\n}\n\ntype GET_me_albums_Tracks {\n  href: String\n  items: [GET_me_albums_Items1Entry]\n  limit: Int\n  \"\"\"\n  Field \"next\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  next: JSON\n  offset: Int\n  \"\"\"\n  Field \"previous\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  previous: JSON\n  total: Int\n}\n\ntype Query {\n  GET_me_albums(spotify_access_token: String!): GET_me_albums_Root\n    @rest(\n      endpoint: \"https://api.spotify.com/v1/me/albums\"\n      headers: [\n        { name: \"authorization\", value: \"Bearer $spotify_access_token;\" }\n      ]\n    )\n}\n\nUtterance: Remove the first album from my music", "output": "response_obj = GET_me_albums()\nDELETE_me_albums(ids=response_obj.items[0].id)\n", "function_specs": "[{\"name\": \"GET_me_albums\", \"description\": \"Get a list of the albums saved in the current Spotify user's 'Your Music' library.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"limit\": {\"type\": \"integer\", \"description\": \"The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50.\\n\"}, \"offset\": {\"type\": \"integer\", \"description\": \"The index of the first item to return. Default: 0 (the first item). Use with limit to get the next set of items.\\n\"}, \"market\": {\"type\": \"string\", \"description\": \"An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).\\n  If a country code is specified, only content that is available in that market will be returned.<br/>\\n  If a valid user access token is specified in the request header, the country associated with\\n  the user account will take priority over this parameter.<br/>\\n  _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>\\n  Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).\\n\"}}, \"required\": []}}, {\"name\": \"DELETE_me_albums\", \"description\": \"Remove one or more albums from the current user's 'Your Music' library.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"ids\": {\"type\": \"string\", \"description\": \"A comma-separated list of the [Spotify IDs](/documentation/web-api/#spotify-uris-and-ids) for the albums. Maximum: 20 IDs.\\n\"}}, \"required\": [\"ids\"]}}]", "GraphQL_schema": "type GET_me_albums_Album {\n  album_type: String\n  artists: [GET_me_albums_ArtistsEntry]\n  available_markets: [String]\n  copyrights: [GET_me_albums_CopyrightsEntry]\n  external_ids: GET_me_albums_ExternalIds\n  external_urls: GET_me_albums_ExternalUrls1\n  genres: [JSON]\n  href: String\n  id: String\n  images: [GET_me_albums_ImagesEntry]\n  label: String\n  name: String\n  popularity: Int\n  release_date: Int\n  release_date_precision: String\n  total_tracks: Int\n  tracks: GET_me_albums_Tracks\n  type: String\n  uri: String\n}\n\ntype GET_me_albums_Artists1Entry {\n  external_urls: GET_me_albums_ExternalUrls2\n  href: String\n  id: String\n  name: String\n  type: String\n  uri: String\n}\n\ntype GET_me_albums_ArtistsEntry {\n  external_urls: GET_me_albums_ExternalUrls\n  href: String\n  id: String\n  name: String\n  type: String\n  uri: String\n}\n\ntype GET_me_albums_CopyrightsEntry {\n  text: String\n  type: String\n}\n\ntype GET_me_albums_ExternalIds {\n  upc: Float\n}\n\ntype GET_me_albums_ExternalUrls {\n  spotify: String\n}\n\ntype GET_me_albums_ExternalUrls1 {\n  spotify: String\n}\n\ntype GET_me_albums_ExternalUrls2 {\n  spotify: String\n}\n\ntype GET_me_albums_ExternalUrls3 {\n  spotify: String\n}\n\ntype GET_me_albums_ImagesEntry {\n  height: Int\n  url: String\n  width: Int\n}\n\ntype GET_me_albums_Items1Entry {\n  artists: [GET_me_albums_Artists1Entry]\n  available_markets: [String]\n  disc_number: Int\n  duration_ms: Int\n  explicit: Boolean\n  external_urls: GET_me_albums_ExternalUrls3\n  href: String\n  id: String\n  is_local: Boolean\n  name: String\n  preview_url: String\n  track_number: Int\n  type: String\n  uri: String\n}\n\ntype GET_me_albums_ItemsEntry {\n  added_at: DateTime\n  album: GET_me_albums_Album\n}\n\ntype GET_me_albums_Root {\n  href: String\n  items: [GET_me_albums_ItemsEntry]\n  limit: Int\n  \"\"\"\n  Field \"next\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  next: JSON\n  offset: Int\n  \"\"\"\n  Field \"previous\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  previous: JSON\n  total: Int\n}\n\ntype GET_me_albums_Tracks {\n  href: String\n  items: [GET_me_albums_Items1Entry]\n  limit: Int\n  \"\"\"\n  Field \"next\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  next: JSON\n  offset: Int\n  \"\"\"\n  Field \"previous\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  previous: JSON\n  total: Int\n}\n\ntype Query {\n  GET_me_albums(spotify_access_token: String!): GET_me_albums_Root\n    @rest(\n      endpoint: \"https://api.spotify.com/v1/me/albums\"\n      headers: [\n        { name: \"authorization\", value: \"Bearer $spotify_access_token;\" }\n      ]\n    )\n}\n", "utterance": "Remove the first album from my music"}
{"domain": "spotify", "input": "Function Signatures:\n\n[{\"name\": \"GET_search\", \"description\": \"Get Spotify catalog information about albums, artists, playlists, tracks, shows, episodes or audiobooks\\nthat match a keyword string.<br />\\n**Note: Audiobooks are only available for the US, UK, Ireland, New Zealand and Australia markets.**\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"q\": {\"type\": \"string\", \"description\": \"Your search query.\\n\\nYou can narrow down your search using field filters. The available filters are `album`, `artist`, `track`, `year`, `upc`, `tag:hipster`, `tag:new`, `isrc`, and `genre`. Each field filter only applies to certain result types.\\n\\nThe `artist` and `year` filters can be used while searching albums, artists and tracks. You can filter on a single `year` or a range (e.g. 1955-1960).<br />\\nThe `album` filter can be used while searching albums and tracks.<br />\\nThe `genre` filter can be used while searching artists and tracks.<br />\\nThe `isrc` and `track` filters can be used while searching tracks.<br />\\nThe `upc`, `tag:new` and `tag:hipster` filters can only be used while searching albums. The `tag:new` filter will return albums released in the past two weeks and `tag:hipster` can be used to return only albums with the lowest 10% popularity.<br />\\n\"}, \"type\": {\"type\": \"array\", \"description\": \"A comma-separated list of item types to search across. Search results include hits\\nfrom all the specified item types. For example: `q=abacab&type=album,track` returns\\nboth albums and tracks matching \\\"abacab\\\".\\n\"}, \"market\": {\"type\": \"string\", \"description\": \"An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).\\n  If a country code is specified, only content that is available in that market will be returned.<br/>\\n  If a valid user access token is specified in the request header, the country associated with\\n  the user account will take priority over this parameter.<br/>\\n  _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>\\n  Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).\\n\"}, \"limit\": {\"type\": \"integer\", \"description\": \"The maximum number of results to return in each item type.\\n\"}, \"offset\": {\"type\": \"integer\", \"description\": \"The index of the first result to return. Use\\nwith limit to get the next page of search results.\\n\"}, \"include_external\": {\"type\": \"string\", \"description\": \"If `include_external=audio` is specified it signals that the client can play externally hosted audio content, and marks\\nthe content as playable in the response. By default externally hosted audio content is marked as unplayable in the response.\\n\"}}, \"required\": [\"q\", \"type\"]}}, {\"name\": \"GET_artists__id__albums\", \"description\": \"Get Spotify catalog information about an artist's albums.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"id\": {\"type\": \"string\", \"description\": \"The [Spotify ID](/documentation/web-api/#spotify-uris-and-ids) of the artist.\\n\"}, \"include_groups\": {\"type\": \"string\", \"description\": \"A comma-separated list of keywords that will be used to filter the response. If not supplied, all album types will be returned. <br/>\\nValid values are:<br/>- `album`<br/>- `single`<br/>- `appears_on`<br/>- `compilation`<br/>For example: `include_groups=album,single`.\\n\"}, \"market\": {\"type\": \"string\", \"description\": \"An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).\\n  If a country code is specified, only content that is available in that market will be returned.<br/>\\n  If a valid user access token is specified in the request header, the country associated with\\n  the user account will take priority over this parameter.<br/>\\n  _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>\\n  Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).\\n\"}, \"limit\": {\"type\": \"integer\", \"description\": \"The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50.\\n\"}, \"offset\": {\"type\": \"integer\", \"description\": \"The index of the first item to return. Default: 0 (the first item). Use with limit to get the next set of items.\\n\"}}, \"required\": [\"id\"]}}]\n\nGraphQL schema:\n\ntype GET_search_Albums {\n  href: String\n  items: [GET_search_ItemsEntry]\n  limit: Int\n  next: String\n  offset: Int\n  \"\"\"\n  Field \"previous\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  previous: JSON\n  total: Int\n}\n\ntype GET_search_ArtistsEntry {\n  external_urls: GET_search_ExternalUrls\n  href: String\n  id: String\n  name: String\n  type: String\n  uri: String\n}\n\ntype GET_search_ExternalUrls {\n  spotify: String\n}\n\ntype GET_search_ExternalUrls1 {\n  spotify: String\n}\n\ntype GET_search_ImagesEntry {\n  height: Int\n  url: String\n  width: Int\n}\n\ntype GET_search_ItemsEntry {\n  album_type: String\n  artists: [GET_search_ArtistsEntry]\n  available_markets: [String]\n  external_urls: GET_search_ExternalUrls1\n  href: String\n  id: String\n  images: [GET_search_ImagesEntry]\n  name: String\n  release_date: String\n  release_date_precision: String\n  total_tracks: Int\n  type: String\n  uri: String\n}\n\ntype GET_search_Root {\n  albums: GET_search_Albums\n}\n\ntype Query {\n  GET_search(\n    q: String\n    spotify_access_token: String!\n    type: String\n  ): GET_search_Root\n    @rest(\n      endpoint: \"https://api.spotify.com/v1/search\"\n      headers: [\n        { name: \"authorization\", value: \"Bearer $spotify_access_token;\" }\n      ]\n    )\n}\ntype GET_artists__id__albums_ArtistsEntry {\n  external_urls: GET_artists__id__albums_ExternalUrls1\n  href: String\n  id: String\n  name: String\n  type: String\n  uri: String\n}\n\ntype GET_artists__id__albums_ExternalUrls {\n  spotify: String\n}\n\ntype GET_artists__id__albums_ExternalUrls1 {\n  spotify: String\n}\n\ntype GET_artists__id__albums_ImagesEntry {\n  height: Int\n  url: String\n  width: Int\n}\n\ntype GET_artists__id__albums_ItemsEntry {\n  album_group: String\n  album_type: String\n  artists: [GET_artists__id__albums_ArtistsEntry]\n  available_markets: [String]\n  external_urls: GET_artists__id__albums_ExternalUrls\n  href: String\n  id: String\n  images: [GET_artists__id__albums_ImagesEntry]\n  name: String\n  release_date: String\n  release_date_precision: String\n  total_tracks: Int\n  type: String\n  uri: String\n}\n\ntype GET_artists__id__albums_Root {\n  href: String\n  items: [GET_artists__id__albums_ItemsEntry]\n  limit: Int\n  next: String\n  offset: Int\n  \"\"\"\n  Field \"previous\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  previous: JSON\n  total: Int\n}\n\ntype Query {\n  GET_artists__id__albums(\n    id: String!\n    spotify_access_token: String!\n  ): GET_artists__id__albums_Root\n    @rest(\n      endpoint: \"https://api.spotify.com/v1/artists/$id;/albums\"\n      headers: [\n        { name: \"authorization\", value: \"Bearer $spotify_access_token;\" }\n      ]\n    )\n}\n\nUtterance: show me the name of Maroon 5's newest album", "output": "response_obj = GET_search(q=\"Maroon 5\", type=\"album\")\nGET_artists__id__albums(id=response_obj.albums.items[0].id)\n", "function_specs": "[{\"name\": \"GET_search\", \"description\": \"Get Spotify catalog information about albums, artists, playlists, tracks, shows, episodes or audiobooks\\nthat match a keyword string.<br />\\n**Note: Audiobooks are only available for the US, UK, Ireland, New Zealand and Australia markets.**\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"q\": {\"type\": \"string\", \"description\": \"Your search query.\\n\\nYou can narrow down your search using field filters. The available filters are `album`, `artist`, `track`, `year`, `upc`, `tag:hipster`, `tag:new`, `isrc`, and `genre`. Each field filter only applies to certain result types.\\n\\nThe `artist` and `year` filters can be used while searching albums, artists and tracks. You can filter on a single `year` or a range (e.g. 1955-1960).<br />\\nThe `album` filter can be used while searching albums and tracks.<br />\\nThe `genre` filter can be used while searching artists and tracks.<br />\\nThe `isrc` and `track` filters can be used while searching tracks.<br />\\nThe `upc`, `tag:new` and `tag:hipster` filters can only be used while searching albums. The `tag:new` filter will return albums released in the past two weeks and `tag:hipster` can be used to return only albums with the lowest 10% popularity.<br />\\n\"}, \"type\": {\"type\": \"array\", \"description\": \"A comma-separated list of item types to search across. Search results include hits\\nfrom all the specified item types. For example: `q=abacab&type=album,track` returns\\nboth albums and tracks matching \\\"abacab\\\".\\n\"}, \"market\": {\"type\": \"string\", \"description\": \"An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).\\n  If a country code is specified, only content that is available in that market will be returned.<br/>\\n  If a valid user access token is specified in the request header, the country associated with\\n  the user account will take priority over this parameter.<br/>\\n  _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>\\n  Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).\\n\"}, \"limit\": {\"type\": \"integer\", \"description\": \"The maximum number of results to return in each item type.\\n\"}, \"offset\": {\"type\": \"integer\", \"description\": \"The index of the first result to return. Use\\nwith limit to get the next page of search results.\\n\"}, \"include_external\": {\"type\": \"string\", \"description\": \"If `include_external=audio` is specified it signals that the client can play externally hosted audio content, and marks\\nthe content as playable in the response. By default externally hosted audio content is marked as unplayable in the response.\\n\"}}, \"required\": [\"q\", \"type\"]}}, {\"name\": \"GET_artists__id__albums\", \"description\": \"Get Spotify catalog information about an artist's albums.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"id\": {\"type\": \"string\", \"description\": \"The [Spotify ID](/documentation/web-api/#spotify-uris-and-ids) of the artist.\\n\"}, \"include_groups\": {\"type\": \"string\", \"description\": \"A comma-separated list of keywords that will be used to filter the response. If not supplied, all album types will be returned. <br/>\\nValid values are:<br/>- `album`<br/>- `single`<br/>- `appears_on`<br/>- `compilation`<br/>For example: `include_groups=album,single`.\\n\"}, \"market\": {\"type\": \"string\", \"description\": \"An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).\\n  If a country code is specified, only content that is available in that market will be returned.<br/>\\n  If a valid user access token is specified in the request header, the country associated with\\n  the user account will take priority over this parameter.<br/>\\n  _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>\\n  Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).\\n\"}, \"limit\": {\"type\": \"integer\", \"description\": \"The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50.\\n\"}, \"offset\": {\"type\": \"integer\", \"description\": \"The index of the first item to return. Default: 0 (the first item). Use with limit to get the next set of items.\\n\"}}, \"required\": [\"id\"]}}]", "GraphQL_schema": "type GET_search_Albums {\n  href: String\n  items: [GET_search_ItemsEntry]\n  limit: Int\n  next: String\n  offset: Int\n  \"\"\"\n  Field \"previous\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  previous: JSON\n  total: Int\n}\n\ntype GET_search_ArtistsEntry {\n  external_urls: GET_search_ExternalUrls\n  href: String\n  id: String\n  name: String\n  type: String\n  uri: String\n}\n\ntype GET_search_ExternalUrls {\n  spotify: String\n}\n\ntype GET_search_ExternalUrls1 {\n  spotify: String\n}\n\ntype GET_search_ImagesEntry {\n  height: Int\n  url: String\n  width: Int\n}\n\ntype GET_search_ItemsEntry {\n  album_type: String\n  artists: [GET_search_ArtistsEntry]\n  available_markets: [String]\n  external_urls: GET_search_ExternalUrls1\n  href: String\n  id: String\n  images: [GET_search_ImagesEntry]\n  name: String\n  release_date: String\n  release_date_precision: String\n  total_tracks: Int\n  type: String\n  uri: String\n}\n\ntype GET_search_Root {\n  albums: GET_search_Albums\n}\n\ntype Query {\n  GET_search(\n    q: String\n    spotify_access_token: String!\n    type: String\n  ): GET_search_Root\n    @rest(\n      endpoint: \"https://api.spotify.com/v1/search\"\n      headers: [\n        { name: \"authorization\", value: \"Bearer $spotify_access_token;\" }\n      ]\n    )\n}\ntype GET_artists__id__albums_ArtistsEntry {\n  external_urls: GET_artists__id__albums_ExternalUrls1\n  href: String\n  id: String\n  name: String\n  type: String\n  uri: String\n}\n\ntype GET_artists__id__albums_ExternalUrls {\n  spotify: String\n}\n\ntype GET_artists__id__albums_ExternalUrls1 {\n  spotify: String\n}\n\ntype GET_artists__id__albums_ImagesEntry {\n  height: Int\n  url: String\n  width: Int\n}\n\ntype GET_artists__id__albums_ItemsEntry {\n  album_group: String\n  album_type: String\n  artists: [GET_artists__id__albums_ArtistsEntry]\n  available_markets: [String]\n  external_urls: GET_artists__id__albums_ExternalUrls\n  href: String\n  id: String\n  images: [GET_artists__id__albums_ImagesEntry]\n  name: String\n  release_date: String\n  release_date_precision: String\n  total_tracks: Int\n  type: String\n  uri: String\n}\n\ntype GET_artists__id__albums_Root {\n  href: String\n  items: [GET_artists__id__albums_ItemsEntry]\n  limit: Int\n  next: String\n  offset: Int\n  \"\"\"\n  Field \"previous\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  previous: JSON\n  total: Int\n}\n\ntype Query {\n  GET_artists__id__albums(\n    id: String!\n    spotify_access_token: String!\n  ): GET_artists__id__albums_Root\n    @rest(\n      endpoint: \"https://api.spotify.com/v1/artists/$id;/albums\"\n      headers: [\n        { name: \"authorization\", value: \"Bearer $spotify_access_token;\" }\n      ]\n    )\n}\n", "utterance": "show me the name of Maroon 5's newest album"}
{"domain": "spotify", "input": "Function Signatures:\n\n[{\"name\": \"GET_search\", \"description\": \"Get Spotify catalog information about albums, artists, playlists, tracks, shows, episodes or audiobooks\\nthat match a keyword string.<br />\\n**Note: Audiobooks are only available for the US, UK, Ireland, New Zealand and Australia markets.**\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"q\": {\"type\": \"string\", \"description\": \"Your search query.\\n\\nYou can narrow down your search using field filters. The available filters are `album`, `artist`, `track`, `year`, `upc`, `tag:hipster`, `tag:new`, `isrc`, and `genre`. Each field filter only applies to certain result types.\\n\\nThe `artist` and `year` filters can be used while searching albums, artists and tracks. You can filter on a single `year` or a range (e.g. 1955-1960).<br />\\nThe `album` filter can be used while searching albums and tracks.<br />\\nThe `genre` filter can be used while searching artists and tracks.<br />\\nThe `isrc` and `track` filters can be used while searching tracks.<br />\\nThe `upc`, `tag:new` and `tag:hipster` filters can only be used while searching albums. The `tag:new` filter will return albums released in the past two weeks and `tag:hipster` can be used to return only albums with the lowest 10% popularity.<br />\\n\"}, \"type\": {\"type\": \"array\", \"description\": \"A comma-separated list of item types to search across. Search results include hits\\nfrom all the specified item types. For example: `q=abacab&type=album,track` returns\\nboth albums and tracks matching \\\"abacab\\\".\\n\"}, \"market\": {\"type\": \"string\", \"description\": \"An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).\\n  If a country code is specified, only content that is available in that market will be returned.<br/>\\n  If a valid user access token is specified in the request header, the country associated with\\n  the user account will take priority over this parameter.<br/>\\n  _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>\\n  Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).\\n\"}, \"limit\": {\"type\": \"integer\", \"description\": \"The maximum number of results to return in each item type.\\n\"}, \"offset\": {\"type\": \"integer\", \"description\": \"The index of the first result to return. Use\\nwith limit to get the next page of search results.\\n\"}, \"include_external\": {\"type\": \"string\", \"description\": \"If `include_external=audio` is specified it signals that the client can play externally hosted audio content, and marks\\nthe content as playable in the response. By default externally hosted audio content is marked as unplayable in the response.\\n\"}}, \"required\": [\"q\", \"type\"]}}, {\"name\": \"PUT_me_following\", \"description\": \"Add the current user as a follower of one or more artists or other Spotify users.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"type\": {\"type\": \"string\", \"description\": \"The ID type: either `artist` or `user`.\\n\"}, \"ids\": {\"type\": \"string\", \"description\": \"A comma-separated list of the artist or the user [Spotify IDs](/documentation/web-api/#spotify-uris-and-ids).\\nA maximum of 50 IDs can be sent in one request.\\n\"}}, \"required\": [\"type\", \"ids\"]}}]\n\nGraphQL schema:\n\ntype GET_search_Artists {\n  href: String\n  items: [GET_search_ItemsEntry]\n  limit: Int\n  next: String\n  offset: Int\n  \"\"\"\n  Field \"previous\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  previous: JSON\n  total: Int\n}\n\ntype GET_search_ExternalUrls {\n  spotify: String\n}\n\ntype GET_search_Followers {\n  \"\"\"\n  Field \"href\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  href: JSON\n  total: Int\n}\n\ntype GET_search_ImagesEntry {\n  height: Int\n  url: String\n  width: Int\n}\n\ntype GET_search_ItemsEntry {\n  external_urls: GET_search_ExternalUrls\n  followers: GET_search_Followers\n  genres: [String]\n  href: String\n  id: String\n  images: [GET_search_ImagesEntry]\n  name: String\n  popularity: Int\n  type: String\n  uri: String\n}\n\ntype GET_search_Root {\n  artists: GET_search_Artists\n}\n\ntype Query {\n  GET_search(\n    q: String\n    spotify_access_token: String!\n    type: String\n  ): GET_search_Root\n    @rest(\n      endpoint: \"https://api.spotify.com/v1/search\"\n      headers: [\n        { name: \"authorization\", value: \"Bearer $spotify_access_token;\" }\n      ]\n    )\n}\n\nUtterance: Follow Taylor Swift", "output": "response_obj = GET_search(q=\"Taylor Swift\", type=\"artist\")\nPUT_me_following(type=\"artist\", ids=response_obj.artists.items[0].id)\n", "function_specs": "[{\"name\": \"GET_search\", \"description\": \"Get Spotify catalog information about albums, artists, playlists, tracks, shows, episodes or audiobooks\\nthat match a keyword string.<br />\\n**Note: Audiobooks are only available for the US, UK, Ireland, New Zealand and Australia markets.**\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"q\": {\"type\": \"string\", \"description\": \"Your search query.\\n\\nYou can narrow down your search using field filters. The available filters are `album`, `artist`, `track`, `year`, `upc`, `tag:hipster`, `tag:new`, `isrc`, and `genre`. Each field filter only applies to certain result types.\\n\\nThe `artist` and `year` filters can be used while searching albums, artists and tracks. You can filter on a single `year` or a range (e.g. 1955-1960).<br />\\nThe `album` filter can be used while searching albums and tracks.<br />\\nThe `genre` filter can be used while searching artists and tracks.<br />\\nThe `isrc` and `track` filters can be used while searching tracks.<br />\\nThe `upc`, `tag:new` and `tag:hipster` filters can only be used while searching albums. The `tag:new` filter will return albums released in the past two weeks and `tag:hipster` can be used to return only albums with the lowest 10% popularity.<br />\\n\"}, \"type\": {\"type\": \"array\", \"description\": \"A comma-separated list of item types to search across. Search results include hits\\nfrom all the specified item types. For example: `q=abacab&type=album,track` returns\\nboth albums and tracks matching \\\"abacab\\\".\\n\"}, \"market\": {\"type\": \"string\", \"description\": \"An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).\\n  If a country code is specified, only content that is available in that market will be returned.<br/>\\n  If a valid user access token is specified in the request header, the country associated with\\n  the user account will take priority over this parameter.<br/>\\n  _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>\\n  Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).\\n\"}, \"limit\": {\"type\": \"integer\", \"description\": \"The maximum number of results to return in each item type.\\n\"}, \"offset\": {\"type\": \"integer\", \"description\": \"The index of the first result to return. Use\\nwith limit to get the next page of search results.\\n\"}, \"include_external\": {\"type\": \"string\", \"description\": \"If `include_external=audio` is specified it signals that the client can play externally hosted audio content, and marks\\nthe content as playable in the response. By default externally hosted audio content is marked as unplayable in the response.\\n\"}}, \"required\": [\"q\", \"type\"]}}, {\"name\": \"PUT_me_following\", \"description\": \"Add the current user as a follower of one or more artists or other Spotify users.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"type\": {\"type\": \"string\", \"description\": \"The ID type: either `artist` or `user`.\\n\"}, \"ids\": {\"type\": \"string\", \"description\": \"A comma-separated list of the artist or the user [Spotify IDs](/documentation/web-api/#spotify-uris-and-ids).\\nA maximum of 50 IDs can be sent in one request.\\n\"}}, \"required\": [\"type\", \"ids\"]}}]", "GraphQL_schema": "type GET_search_Artists {\n  href: String\n  items: [GET_search_ItemsEntry]\n  limit: Int\n  next: String\n  offset: Int\n  \"\"\"\n  Field \"previous\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  previous: JSON\n  total: Int\n}\n\ntype GET_search_ExternalUrls {\n  spotify: String\n}\n\ntype GET_search_Followers {\n  \"\"\"\n  Field \"href\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  href: JSON\n  total: Int\n}\n\ntype GET_search_ImagesEntry {\n  height: Int\n  url: String\n  width: Int\n}\n\ntype GET_search_ItemsEntry {\n  external_urls: GET_search_ExternalUrls\n  followers: GET_search_Followers\n  genres: [String]\n  href: String\n  id: String\n  images: [GET_search_ImagesEntry]\n  name: String\n  popularity: Int\n  type: String\n  uri: String\n}\n\ntype GET_search_Root {\n  artists: GET_search_Artists\n}\n\ntype Query {\n  GET_search(\n    q: String\n    spotify_access_token: String!\n    type: String\n  ): GET_search_Root\n    @rest(\n      endpoint: \"https://api.spotify.com/v1/search\"\n      headers: [\n        { name: \"authorization\", value: \"Bearer $spotify_access_token;\" }\n      ]\n    )\n}\n", "utterance": "Follow Taylor Swift"}
{"domain": "spotify", "input": "Function Signatures:\n\n[{\"name\": \"GET_search\", \"description\": \"Get Spotify catalog information about albums, artists, playlists, tracks, shows, episodes or audiobooks\\nthat match a keyword string.<br />\\n**Note: Audiobooks are only available for the US, UK, Ireland, New Zealand and Australia markets.**\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"q\": {\"type\": \"string\", \"description\": \"Your search query.\\n\\nYou can narrow down your search using field filters. The available filters are `album`, `artist`, `track`, `year`, `upc`, `tag:hipster`, `tag:new`, `isrc`, and `genre`. Each field filter only applies to certain result types.\\n\\nThe `artist` and `year` filters can be used while searching albums, artists and tracks. You can filter on a single `year` or a range (e.g. 1955-1960).<br />\\nThe `album` filter can be used while searching albums and tracks.<br />\\nThe `genre` filter can be used while searching artists and tracks.<br />\\nThe `isrc` and `track` filters can be used while searching tracks.<br />\\nThe `upc`, `tag:new` and `tag:hipster` filters can only be used while searching albums. The `tag:new` filter will return albums released in the past two weeks and `tag:hipster` can be used to return only albums with the lowest 10% popularity.<br />\\n\"}, \"type\": {\"type\": \"array\", \"description\": \"A comma-separated list of item types to search across. Search results include hits\\nfrom all the specified item types. For example: `q=abacab&type=album,track` returns\\nboth albums and tracks matching \\\"abacab\\\".\\n\"}, \"market\": {\"type\": \"string\", \"description\": \"An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).\\n  If a country code is specified, only content that is available in that market will be returned.<br/>\\n  If a valid user access token is specified in the request header, the country associated with\\n  the user account will take priority over this parameter.<br/>\\n  _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>\\n  Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).\\n\"}, \"limit\": {\"type\": \"integer\", \"description\": \"The maximum number of results to return in each item type.\\n\"}, \"offset\": {\"type\": \"integer\", \"description\": \"The index of the first result to return. Use\\nwith limit to get the next page of search results.\\n\"}, \"include_external\": {\"type\": \"string\", \"description\": \"If `include_external=audio` is specified it signals that the client can play externally hosted audio content, and marks\\nthe content as playable in the response. By default externally hosted audio content is marked as unplayable in the response.\\n\"}}, \"required\": [\"q\", \"type\"]}}, {\"name\": \"GET_artists__id__albums\", \"description\": \"Get Spotify catalog information about an artist's albums.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"id\": {\"type\": \"string\", \"description\": \"The [Spotify ID](/documentation/web-api/#spotify-uris-and-ids) of the artist.\\n\"}, \"include_groups\": {\"type\": \"string\", \"description\": \"A comma-separated list of keywords that will be used to filter the response. If not supplied, all album types will be returned. <br/>\\nValid values are:<br/>- `album`<br/>- `single`<br/>- `appears_on`<br/>- `compilation`<br/>For example: `include_groups=album,single`.\\n\"}, \"market\": {\"type\": \"string\", \"description\": \"An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).\\n  If a country code is specified, only content that is available in that market will be returned.<br/>\\n  If a valid user access token is specified in the request header, the country associated with\\n  the user account will take priority over this parameter.<br/>\\n  _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>\\n  Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).\\n\"}, \"limit\": {\"type\": \"integer\", \"description\": \"The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50.\\n\"}, \"offset\": {\"type\": \"integer\", \"description\": \"The index of the first item to return. Default: 0 (the first item). Use with limit to get the next set of items.\\n\"}}, \"required\": [\"id\"]}}, {\"name\": \"PUT_me_player_play\", \"description\": \"Start a new context or resume current playback on the user's active device.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"context_uri\": {\"type\": \"string\", \"description\": \"Optional. Spotify URI of the context to play. Valid contexts are albums, artists & playlists. {context_uri:\\\"spotify:album:1Je1IMUlBXcx1Fz0WE7oPT\\\"}\"}, \"uris\": {\"type\": \"array\", \"description\": \"Optional. A JSON array of the Spotify track URIs to play. For example: {\\\"uris\\\": [\\\"spotify:track:4iV5W9uYEdYUVa79Axb7Rh\\\", \\\"spotify:track:1301WleyT98MSxVHPZCA6M\\\"]}\"}, \"offset\": {\"type\": \"array\", \"description\": \"Optional. Indicates from where in the context playback should start. Only available when context_uri corresponds to an album or playlist object \\\"position\\\" is zero based and can\\u2019t be negative. Example: \\\"offset\\\": {\\\"position\\\": 5} \\\"uri\\\" is a string representing the uri of the item to start at. Example: \\\"offset\\\": {\\\"uri\\\": \\\"spotify:track:1301WleyT98MSxVHPZCA6M\\\"}\"}, \"position_ms\": {\"type\": \"integer\", \"description\": \"\"}}, \"required\": [], \"body_params\": [\"context_uri\", \"uris\", \"offset\", \"position_ms\"]}}]\n\nGraphQL schema:\n\ntype GET_search_Albums {\n  href: String\n  items: [GET_search_ItemsEntry]\n  limit: Int\n  next: String\n  offset: Int\n  \"\"\"\n  Field \"previous\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  previous: JSON\n  total: Int\n}\n\ntype GET_search_ArtistsEntry {\n  external_urls: GET_search_ExternalUrls\n  href: String\n  id: String\n  name: String\n  type: String\n  uri: String\n}\n\ntype GET_search_ExternalUrls {\n  spotify: String\n}\n\ntype GET_search_ExternalUrls1 {\n  spotify: String\n}\n\ntype GET_search_ImagesEntry {\n  height: Int\n  url: String\n  width: Int\n}\n\ntype GET_search_ItemsEntry {\n  album_type: String\n  artists: [GET_search_ArtistsEntry]\n  available_markets: [String]\n  external_urls: GET_search_ExternalUrls1\n  href: String\n  id: String\n  images: [GET_search_ImagesEntry]\n  name: String\n  release_date: Date\n  release_date_precision: String\n  total_tracks: Int\n  type: String\n  uri: String\n}\n\ntype GET_search_Root {\n  albums: GET_search_Albums\n}\n\ntype Query {\n  GET_search(\n    q: String\n    spotify_access_token: String!\n    type: String\n  ): GET_search_Root\n    @rest(\n      endpoint: \"https://api.spotify.com/v1/search\"\n      headers: [\n        { name: \"authorization\", value: \"Bearer $spotify_access_token;\" }\n      ]\n    )\n}\ntype GET_artists__id__albums_ArtistsEntry {\n  external_urls: GET_artists__id__albums_ExternalUrls1\n  href: String\n  id: String\n  name: String\n  type: String\n  uri: String\n}\n\ntype GET_artists__id__albums_ExternalUrls {\n  spotify: String\n}\n\ntype GET_artists__id__albums_ExternalUrls1 {\n  spotify: String\n}\n\ntype GET_artists__id__albums_ImagesEntry {\n  height: Int\n  url: String\n  width: Int\n}\n\ntype GET_artists__id__albums_ItemsEntry {\n  album_group: String\n  album_type: String\n  artists: [GET_artists__id__albums_ArtistsEntry]\n  available_markets: [String]\n  external_urls: GET_artists__id__albums_ExternalUrls\n  href: String\n  id: String\n  images: [GET_artists__id__albums_ImagesEntry]\n  name: String\n  release_date: String\n  release_date_precision: String\n  total_tracks: Int\n  type: String\n  uri: String\n}\n\ntype GET_artists__id__albums_Root {\n  href: String\n  items: [GET_artists__id__albums_ItemsEntry]\n  limit: Int\n  next: String\n  offset: Int\n  \"\"\"\n  Field \"previous\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  previous: JSON\n  total: Int\n}\n\ntype Query {\n  GET_artists__id__albums(\n    id: String!\n    spotify_access_token: String!\n  ): GET_artists__id__albums_Root\n    @rest(\n      endpoint: \"https://api.spotify.com/v1/artists/$id;/albums\"\n      headers: [\n        { name: \"authorization\", value: \"Bearer $spotify_access_token;\" }\n      ]\n    )\n}\n\nUtterance: Play the newest album of BIGBANG", "output": "response_obj = GET_search(q=\"BIGBANG\", type=\"album\")\nresponse_obj1 = GET_artists__id__albums(id=response_obj.albums.items[0].id)\nPUT_me_player_play(context_uri=response_obj1.items[0].uri)\n", "function_specs": "[{\"name\": \"GET_search\", \"description\": \"Get Spotify catalog information about albums, artists, playlists, tracks, shows, episodes or audiobooks\\nthat match a keyword string.<br />\\n**Note: Audiobooks are only available for the US, UK, Ireland, New Zealand and Australia markets.**\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"q\": {\"type\": \"string\", \"description\": \"Your search query.\\n\\nYou can narrow down your search using field filters. The available filters are `album`, `artist`, `track`, `year`, `upc`, `tag:hipster`, `tag:new`, `isrc`, and `genre`. Each field filter only applies to certain result types.\\n\\nThe `artist` and `year` filters can be used while searching albums, artists and tracks. You can filter on a single `year` or a range (e.g. 1955-1960).<br />\\nThe `album` filter can be used while searching albums and tracks.<br />\\nThe `genre` filter can be used while searching artists and tracks.<br />\\nThe `isrc` and `track` filters can be used while searching tracks.<br />\\nThe `upc`, `tag:new` and `tag:hipster` filters can only be used while searching albums. The `tag:new` filter will return albums released in the past two weeks and `tag:hipster` can be used to return only albums with the lowest 10% popularity.<br />\\n\"}, \"type\": {\"type\": \"array\", \"description\": \"A comma-separated list of item types to search across. Search results include hits\\nfrom all the specified item types. For example: `q=abacab&type=album,track` returns\\nboth albums and tracks matching \\\"abacab\\\".\\n\"}, \"market\": {\"type\": \"string\", \"description\": \"An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).\\n  If a country code is specified, only content that is available in that market will be returned.<br/>\\n  If a valid user access token is specified in the request header, the country associated with\\n  the user account will take priority over this parameter.<br/>\\n  _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>\\n  Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).\\n\"}, \"limit\": {\"type\": \"integer\", \"description\": \"The maximum number of results to return in each item type.\\n\"}, \"offset\": {\"type\": \"integer\", \"description\": \"The index of the first result to return. Use\\nwith limit to get the next page of search results.\\n\"}, \"include_external\": {\"type\": \"string\", \"description\": \"If `include_external=audio` is specified it signals that the client can play externally hosted audio content, and marks\\nthe content as playable in the response. By default externally hosted audio content is marked as unplayable in the response.\\n\"}}, \"required\": [\"q\", \"type\"]}}, {\"name\": \"GET_artists__id__albums\", \"description\": \"Get Spotify catalog information about an artist's albums.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"id\": {\"type\": \"string\", \"description\": \"The [Spotify ID](/documentation/web-api/#spotify-uris-and-ids) of the artist.\\n\"}, \"include_groups\": {\"type\": \"string\", \"description\": \"A comma-separated list of keywords that will be used to filter the response. If not supplied, all album types will be returned. <br/>\\nValid values are:<br/>- `album`<br/>- `single`<br/>- `appears_on`<br/>- `compilation`<br/>For example: `include_groups=album,single`.\\n\"}, \"market\": {\"type\": \"string\", \"description\": \"An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).\\n  If a country code is specified, only content that is available in that market will be returned.<br/>\\n  If a valid user access token is specified in the request header, the country associated with\\n  the user account will take priority over this parameter.<br/>\\n  _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>\\n  Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).\\n\"}, \"limit\": {\"type\": \"integer\", \"description\": \"The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50.\\n\"}, \"offset\": {\"type\": \"integer\", \"description\": \"The index of the first item to return. Default: 0 (the first item). Use with limit to get the next set of items.\\n\"}}, \"required\": [\"id\"]}}, {\"name\": \"PUT_me_player_play\", \"description\": \"Start a new context or resume current playback on the user's active device.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"context_uri\": {\"type\": \"string\", \"description\": \"Optional. Spotify URI of the context to play. Valid contexts are albums, artists & playlists. {context_uri:\\\"spotify:album:1Je1IMUlBXcx1Fz0WE7oPT\\\"}\"}, \"uris\": {\"type\": \"array\", \"description\": \"Optional. A JSON array of the Spotify track URIs to play. For example: {\\\"uris\\\": [\\\"spotify:track:4iV5W9uYEdYUVa79Axb7Rh\\\", \\\"spotify:track:1301WleyT98MSxVHPZCA6M\\\"]}\"}, \"offset\": {\"type\": \"array\", \"description\": \"Optional. Indicates from where in the context playback should start. Only available when context_uri corresponds to an album or playlist object \\\"position\\\" is zero based and can\\u2019t be negative. Example: \\\"offset\\\": {\\\"position\\\": 5} \\\"uri\\\" is a string representing the uri of the item to start at. Example: \\\"offset\\\": {\\\"uri\\\": \\\"spotify:track:1301WleyT98MSxVHPZCA6M\\\"}\"}, \"position_ms\": {\"type\": \"integer\", \"description\": \"\"}}, \"required\": [], \"body_params\": [\"context_uri\", \"uris\", \"offset\", \"position_ms\"]}}]", "GraphQL_schema": "type GET_search_Albums {\n  href: String\n  items: [GET_search_ItemsEntry]\n  limit: Int\n  next: String\n  offset: Int\n  \"\"\"\n  Field \"previous\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  previous: JSON\n  total: Int\n}\n\ntype GET_search_ArtistsEntry {\n  external_urls: GET_search_ExternalUrls\n  href: String\n  id: String\n  name: String\n  type: String\n  uri: String\n}\n\ntype GET_search_ExternalUrls {\n  spotify: String\n}\n\ntype GET_search_ExternalUrls1 {\n  spotify: String\n}\n\ntype GET_search_ImagesEntry {\n  height: Int\n  url: String\n  width: Int\n}\n\ntype GET_search_ItemsEntry {\n  album_type: String\n  artists: [GET_search_ArtistsEntry]\n  available_markets: [String]\n  external_urls: GET_search_ExternalUrls1\n  href: String\n  id: String\n  images: [GET_search_ImagesEntry]\n  name: String\n  release_date: Date\n  release_date_precision: String\n  total_tracks: Int\n  type: String\n  uri: String\n}\n\ntype GET_search_Root {\n  albums: GET_search_Albums\n}\n\ntype Query {\n  GET_search(\n    q: String\n    spotify_access_token: String!\n    type: String\n  ): GET_search_Root\n    @rest(\n      endpoint: \"https://api.spotify.com/v1/search\"\n      headers: [\n        { name: \"authorization\", value: \"Bearer $spotify_access_token;\" }\n      ]\n    )\n}\ntype GET_artists__id__albums_ArtistsEntry {\n  external_urls: GET_artists__id__albums_ExternalUrls1\n  href: String\n  id: String\n  name: String\n  type: String\n  uri: String\n}\n\ntype GET_artists__id__albums_ExternalUrls {\n  spotify: String\n}\n\ntype GET_artists__id__albums_ExternalUrls1 {\n  spotify: String\n}\n\ntype GET_artists__id__albums_ImagesEntry {\n  height: Int\n  url: String\n  width: Int\n}\n\ntype GET_artists__id__albums_ItemsEntry {\n  album_group: String\n  album_type: String\n  artists: [GET_artists__id__albums_ArtistsEntry]\n  available_markets: [String]\n  external_urls: GET_artists__id__albums_ExternalUrls\n  href: String\n  id: String\n  images: [GET_artists__id__albums_ImagesEntry]\n  name: String\n  release_date: String\n  release_date_precision: String\n  total_tracks: Int\n  type: String\n  uri: String\n}\n\ntype GET_artists__id__albums_Root {\n  href: String\n  items: [GET_artists__id__albums_ItemsEntry]\n  limit: Int\n  next: String\n  offset: Int\n  \"\"\"\n  Field \"previous\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  previous: JSON\n  total: Int\n}\n\ntype Query {\n  GET_artists__id__albums(\n    id: String!\n    spotify_access_token: String!\n  ): GET_artists__id__albums_Root\n    @rest(\n      endpoint: \"https://api.spotify.com/v1/artists/$id;/albums\"\n      headers: [\n        { name: \"authorization\", value: \"Bearer $spotify_access_token;\" }\n      ]\n    )\n}\n", "utterance": "Play the newest album of BIGBANG"}
{"domain": "spotify", "input": "Function Signatures:\n\n[{\"name\": \"GET_me_tracks\", \"description\": \"Get a list of the songs saved in the current Spotify user's 'Your Music' library.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"market\": {\"type\": \"string\", \"description\": \"An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).\\n  If a country code is specified, only content that is available in that market will be returned.<br/>\\n  If a valid user access token is specified in the request header, the country associated with\\n  the user account will take priority over this parameter.<br/>\\n  _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>\\n  Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).\\n\"}, \"limit\": {\"type\": \"integer\", \"description\": \"The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50.\\n\"}, \"offset\": {\"type\": \"integer\", \"description\": \"The index of the first item to return. Default: 0 (the first item). Use with limit to get the next set of items.\\n\"}}, \"required\": []}}, {\"name\": \"POST_me_player_queue\", \"description\": \"Add an item to the end of the user's current playback queue.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"uri\": {\"type\": \"string\", \"description\": \"The uri of the item to add to the queue. Must be a track or an episode uri.\\n\"}, \"device_id\": {\"type\": \"string\", \"description\": \"The id of the device this command is targeting. If\\nnot supplied, the user's currently active device is the target.\\n\"}}, \"required\": [\"uri\"]}}, {\"name\": \"PUT_me_player_repeat\", \"description\": \"Set the repeat mode for the user's playback. Options are repeat-track,\\nrepeat-context, and off.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"state\": {\"type\": \"string\", \"description\": \"**track**, **context** or **off**.<br/>\\n**track** will repeat the current track.<br/>\\n**context** will repeat the current context.<br/>\\n**off** will turn repeat off.\\n\"}}, \"required\": [\"state\"]}}]\n\nGraphQL schema:\n\ntype GET_me_tracks_Album {\n  album_type: String\n  artists: [GET_me_tracks_ArtistsEntry]\n  available_markets: [String]\n  external_urls: GET_me_tracks_ExternalUrls1\n  href: String\n  id: String\n  images: [GET_me_tracks_ImagesEntry]\n  name: String\n  release_date: Date\n  release_date_precision: String\n  total_tracks: Int\n  type: String\n  uri: String\n}\n\ntype GET_me_tracks_Artists1Entry {\n  external_urls: GET_me_tracks_ExternalUrls2\n  href: String\n  id: String\n  name: String\n  type: String\n  uri: String\n}\n\ntype GET_me_tracks_ArtistsEntry {\n  external_urls: GET_me_tracks_ExternalUrls\n  href: String\n  id: String\n  name: String\n  type: String\n  uri: String\n}\n\ntype GET_me_tracks_ExternalIds {\n  isrc: String\n}\n\ntype GET_me_tracks_ExternalUrls {\n  spotify: String\n}\n\ntype GET_me_tracks_ExternalUrls1 {\n  spotify: String\n}\n\ntype GET_me_tracks_ExternalUrls2 {\n  spotify: String\n}\n\ntype GET_me_tracks_ExternalUrls3 {\n  spotify: String\n}\n\ntype GET_me_tracks_ImagesEntry {\n  height: Int\n  url: String\n  width: Int\n}\n\ntype GET_me_tracks_ItemsEntry {\n  added_at: DateTime\n  track: GET_me_tracks_Track\n}\n\ntype GET_me_tracks_Root {\n  href: String\n  items: [GET_me_tracks_ItemsEntry]\n  limit: Int\n  \"\"\"\n  Field \"next\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  next: JSON\n  offset: Int\n  \"\"\"\n  Field \"previous\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  previous: JSON\n  total: Int\n}\n\ntype GET_me_tracks_Track {\n  album: GET_me_tracks_Album\n  artists: [GET_me_tracks_Artists1Entry]\n  available_markets: [String]\n  disc_number: Int\n  duration_ms: Int\n  explicit: Boolean\n  external_ids: GET_me_tracks_ExternalIds\n  external_urls: GET_me_tracks_ExternalUrls3\n  href: String\n  id: String\n  is_local: Boolean\n  name: String\n  popularity: Int\n  preview_url: String\n  track_number: Int\n  type: String\n  uri: String\n}\n\ntype Query {\n  GET_me_tracks(spotify_access_token: String!): GET_me_tracks_Root\n    @rest(\n      endpoint: \"https://api.spotify.com/v1/me/tracks\"\n      headers: [\n        { name: \"authorization\", value: \"Bearer $spotify_access_token;\" }\n      ]\n    )\n}\n\nUtterance: Add the first song from my music library to the playback queue and enable single song repeat mode", "output": "response_obj = GET_me_tracks()\nPOST_me_player_queue(uri=response_obj.items[0].track.uri)\nPUT_me_player_repeat(state=\"track\")\n", "function_specs": "[{\"name\": \"GET_me_tracks\", \"description\": \"Get a list of the songs saved in the current Spotify user's 'Your Music' library.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"market\": {\"type\": \"string\", \"description\": \"An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).\\n  If a country code is specified, only content that is available in that market will be returned.<br/>\\n  If a valid user access token is specified in the request header, the country associated with\\n  the user account will take priority over this parameter.<br/>\\n  _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>\\n  Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).\\n\"}, \"limit\": {\"type\": \"integer\", \"description\": \"The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50.\\n\"}, \"offset\": {\"type\": \"integer\", \"description\": \"The index of the first item to return. Default: 0 (the first item). Use with limit to get the next set of items.\\n\"}}, \"required\": []}}, {\"name\": \"POST_me_player_queue\", \"description\": \"Add an item to the end of the user's current playback queue.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"uri\": {\"type\": \"string\", \"description\": \"The uri of the item to add to the queue. Must be a track or an episode uri.\\n\"}, \"device_id\": {\"type\": \"string\", \"description\": \"The id of the device this command is targeting. If\\nnot supplied, the user's currently active device is the target.\\n\"}}, \"required\": [\"uri\"]}}, {\"name\": \"PUT_me_player_repeat\", \"description\": \"Set the repeat mode for the user's playback. Options are repeat-track,\\nrepeat-context, and off.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"state\": {\"type\": \"string\", \"description\": \"**track**, **context** or **off**.<br/>\\n**track** will repeat the current track.<br/>\\n**context** will repeat the current context.<br/>\\n**off** will turn repeat off.\\n\"}}, \"required\": [\"state\"]}}]", "GraphQL_schema": "type GET_me_tracks_Album {\n  album_type: String\n  artists: [GET_me_tracks_ArtistsEntry]\n  available_markets: [String]\n  external_urls: GET_me_tracks_ExternalUrls1\n  href: String\n  id: String\n  images: [GET_me_tracks_ImagesEntry]\n  name: String\n  release_date: Date\n  release_date_precision: String\n  total_tracks: Int\n  type: String\n  uri: String\n}\n\ntype GET_me_tracks_Artists1Entry {\n  external_urls: GET_me_tracks_ExternalUrls2\n  href: String\n  id: String\n  name: String\n  type: String\n  uri: String\n}\n\ntype GET_me_tracks_ArtistsEntry {\n  external_urls: GET_me_tracks_ExternalUrls\n  href: String\n  id: String\n  name: String\n  type: String\n  uri: String\n}\n\ntype GET_me_tracks_ExternalIds {\n  isrc: String\n}\n\ntype GET_me_tracks_ExternalUrls {\n  spotify: String\n}\n\ntype GET_me_tracks_ExternalUrls1 {\n  spotify: String\n}\n\ntype GET_me_tracks_ExternalUrls2 {\n  spotify: String\n}\n\ntype GET_me_tracks_ExternalUrls3 {\n  spotify: String\n}\n\ntype GET_me_tracks_ImagesEntry {\n  height: Int\n  url: String\n  width: Int\n}\n\ntype GET_me_tracks_ItemsEntry {\n  added_at: DateTime\n  track: GET_me_tracks_Track\n}\n\ntype GET_me_tracks_Root {\n  href: String\n  items: [GET_me_tracks_ItemsEntry]\n  limit: Int\n  \"\"\"\n  Field \"next\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  next: JSON\n  offset: Int\n  \"\"\"\n  Field \"previous\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  previous: JSON\n  total: Int\n}\n\ntype GET_me_tracks_Track {\n  album: GET_me_tracks_Album\n  artists: [GET_me_tracks_Artists1Entry]\n  available_markets: [String]\n  disc_number: Int\n  duration_ms: Int\n  explicit: Boolean\n  external_ids: GET_me_tracks_ExternalIds\n  external_urls: GET_me_tracks_ExternalUrls3\n  href: String\n  id: String\n  is_local: Boolean\n  name: String\n  popularity: Int\n  preview_url: String\n  track_number: Int\n  type: String\n  uri: String\n}\n\ntype Query {\n  GET_me_tracks(spotify_access_token: String!): GET_me_tracks_Root\n    @rest(\n      endpoint: \"https://api.spotify.com/v1/me/tracks\"\n      headers: [\n        { name: \"authorization\", value: \"Bearer $spotify_access_token;\" }\n      ]\n    )\n}\n", "utterance": "Add the first song from my music library to the playback queue and enable single song repeat mode"}
{"domain": "spotify", "input": "Function Signatures:\n\n[{\"name\": \"GET_me\", \"description\": \"Get detailed profile information about the current user (including the\\ncurrent user's username).\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {}, \"required\": []}}, {\"name\": \"GET_playlists__playlist_id_\", \"description\": \"Get a playlist owned by a Spotify user.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"playlist_id\": {\"type\": \"string\", \"description\": \"The [Spotify ID](/documentation/web-api/#spotify-uris-and-ids) of the playlist.\\n\"}, \"market\": {\"type\": \"string\", \"description\": \"An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).\\n  If a country code is specified, only content that is available in that market will be returned.<br/>\\n  If a valid user access token is specified in the request header, the country associated with\\n  the user account will take priority over this parameter.<br/>\\n  _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>\\n  Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).\\n\"}, \"fields\": {\"type\": \"string\", \"description\": \"Filters for the query: a comma-separated list of the\\nfields to return. If omitted, all fields are returned. For example, to get\\njust the playlist''s description and URI: `fields=description,uri`. A dot\\nseparator can be used to specify non-reoccurring fields, while parentheses\\ncan be used to specify reoccurring fields within objects. For example, to\\nget just the added date and user ID of the adder: `fields=tracks.items(added_at,added_by.id)`.\\nUse multiple parentheses to drill down into nested objects, for example: `fields=tracks.items(track(name,href,album(name,href)))`.\\nFields can be excluded by prefixing them with an exclamation mark, for example:\\n`fields=tracks.items(track(name,href,album(!name,href)))`\\n\"}, \"additional_types\": {\"type\": \"string\", \"description\": \"A comma-separated list of item types that your client supports besides the default `track` type. Valid types are: `track` and `episode`.<br/>\\n_**Note**: This parameter was introduced to allow existing clients to maintain their current behaviour and might be deprecated in the future._<br/>\\nIn addition to providing this parameter, make sure that your client properly handles cases of new types in the future by checking against the `type` field of each object.\\n\"}}, \"required\": [\"playlist_id\"]}}, {\"name\": \"PUT_me_following\", \"description\": \"Add the current user as a follower of one or more artists or other Spotify users.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"type\": {\"type\": \"string\", \"description\": \"The ID type: either `artist` or `user`.\\n\"}, \"ids\": {\"type\": \"string\", \"description\": \"A comma-separated list of the artist or the user [Spotify IDs](/documentation/web-api/#spotify-uris-and-ids).\\nA maximum of 50 IDs can be sent in one request.\\n\"}}, \"required\": [\"type\", \"ids\"]}}]\n\nGraphQL schema:\n\ntype GET_me_playlists_ExternalUrls {\n  spotify: String\n}\n\ntype GET_me_playlists_ExternalUrls1 {\n  spotify: String\n}\n\ntype GET_me_playlists_ImagesEntry {\n  \"\"\"\n  Field \"height\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  height: JSON\n  url: String\n  \"\"\"\n  Field \"width\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  width: JSON\n}\n\ntype GET_me_playlists_ItemsEntry {\n  collaborative: Boolean\n  description: String\n  external_urls: GET_me_playlists_ExternalUrls\n  href: String\n  id: String\n  images: [GET_me_playlists_ImagesEntry]\n  name: String\n  owner: GET_me_playlists_Owner\n  \"\"\"\n  Field \"primary_color\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  primary_color: JSON\n  public: Boolean\n  snapshot_id: String\n  tracks: GET_me_playlists_Tracks\n  type: String\n  uri: String\n}\n\ntype GET_me_playlists_Owner {\n  display_name: String\n  external_urls: GET_me_playlists_ExternalUrls1\n  href: String\n  id: String\n  type: String\n  uri: String\n}\n\ntype GET_me_playlists_Root {\n  href: String\n  items: [GET_me_playlists_ItemsEntry]\n  limit: Int\n  \"\"\"\n  Field \"next\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  next: JSON\n  offset: Int\n  \"\"\"\n  Field \"previous\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  previous: JSON\n  total: Int\n}\n\ntype GET_me_playlists_Tracks {\n  href: String\n  total: Int\n}\n\ntype Query {\n  GET_me_playlists(spotify_access_token: String!): GET_me_playlists_Root\n    @rest(\n      endpoint: \"https://api.spotify.com/v1/me/playlists\"\n      headers: [\n        { name: \"authorization\", value: \"Bearer $spotify_access_token;\" }\n      ]\n    )\n}\ntype GET_playlists__playlist_id_AddedBy {\n  external_urls: GET_playlists__playlist_id_ExternalUrls2\n  href: String\n  id: String\n  type: String\n  uri: String\n}\n\ntype GET_playlists__playlist_id_Album {\n  album_type: String\n  artists: [GET_playlists__playlist_id_ArtistsEntry]\n  available_markets: [String]\n  external_urls: GET_playlists__playlist_id_ExternalUrls4\n  href: String\n  id: String\n  images: [GET_playlists__playlist_id_Images1Entry]\n  name: String\n  release_date: Int\n  release_date_precision: String\n  total_tracks: Int\n  type: String\n  uri: String\n}\n\ntype GET_playlists__playlist_id_Artists1Entry {\n  external_urls: GET_playlists__playlist_id_ExternalUrls5\n  href: String\n  id: String\n  name: String\n  type: String\n  uri: String\n}\n\ntype GET_playlists__playlist_id_ArtistsEntry {\n  external_urls: GET_playlists__playlist_id_ExternalUrls3\n  href: String\n  id: String\n  name: String\n  type: String\n  uri: String\n}\n\ntype GET_playlists__playlist_id_ExternalIds {\n  isrc: String\n}\n\ntype GET_playlists__playlist_id_ExternalUrls {\n  spotify: String\n}\n\ntype GET_playlists__playlist_id_ExternalUrls1 {\n  spotify: String\n}\n\ntype GET_playlists__playlist_id_ExternalUrls2 {\n  spotify: String\n}\n\ntype GET_playlists__playlist_id_ExternalUrls3 {\n  spotify: String\n}\n\ntype GET_playlists__playlist_id_ExternalUrls4 {\n  spotify: String\n}\n\ntype GET_playlists__playlist_id_ExternalUrls5 {\n  spotify: String\n}\n\ntype GET_playlists__playlist_id_ExternalUrls6 {\n  spotify: String\n}\n\ntype GET_playlists__playlist_id_Followers {\n  \"\"\"\n  Field \"href\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  href: JSON\n  total: Int\n}\n\ntype GET_playlists__playlist_id_Images1Entry {\n  height: Int\n  url: String\n  width: Int\n}\n\ntype GET_playlists__playlist_id_ImagesEntry {\n  \"\"\"\n  Field \"height\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  height: JSON\n  url: String\n  \"\"\"\n  Field \"width\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  width: JSON\n}\n\ntype GET_playlists__playlist_id_ItemsEntry {\n  added_at: DateTime\n  added_by: GET_playlists__playlist_id_AddedBy\n  is_local: Boolean\n  \"\"\"\n  Field \"primary_color\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  primary_color: JSON\n  track: GET_playlists__playlist_id_Track\n  video_thumbnail: GET_playlists__playlist_id_VideoThumbnail\n}\n\ntype GET_playlists__playlist_id_Owner {\n  display_name: String\n  external_urls: GET_playlists__playlist_id_ExternalUrls1\n  href: String\n  id: String\n  type: String\n  uri: String\n}\n\ntype GET_playlists__playlist_id_Root {\n  collaborative: Boolean\n  description: String\n  external_urls: GET_playlists__playlist_id_ExternalUrls\n  followers: GET_playlists__playlist_id_Followers\n  href: String\n  id: String\n  images: [GET_playlists__playlist_id_ImagesEntry]\n  name: String\n  owner: GET_playlists__playlist_id_Owner\n  \"\"\"\n  Field \"primary_color\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  primary_color: JSON\n  public: Boolean\n  snapshot_id: String\n  tracks: GET_playlists__playlist_id_Tracks\n  type: String\n  uri: String\n}\n\ntype GET_playlists__playlist_id_Track {\n  album: GET_playlists__playlist_id_Album\n  artists: [GET_playlists__playlist_id_Artists1Entry]\n  available_markets: [String]\n  disc_number: Int\n  duration_ms: Int\n  episode: Boolean\n  explicit: Boolean\n  external_ids: GET_playlists__playlist_id_ExternalIds\n  external_urls: GET_playlists__playlist_id_ExternalUrls6\n  href: String\n  id: String\n  is_local: Boolean\n  name: String\n  popularity: Int\n  preview_url: String\n  track: Boolean\n  track_number: Int\n  type: String\n  uri: String\n}\n\ntype GET_playlists__playlist_id_Tracks {\n  href: String\n  items: [GET_playlists__playlist_id_ItemsEntry]\n  limit: Int\n  \"\"\"\n  Field \"next\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  next: JSON\n  offset: Int\n  \"\"\"\n  Field \"previous\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  previous: JSON\n  total: Int\n}\n\ntype GET_playlists__playlist_id_VideoThumbnail {\n  \"\"\"\n  Field \"url\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  url: JSON\n}\n\ntype Query {\n  GET_playlists__playlist_id_(\n    playlist_id: String!\n    spotify_access_token: String!\n  ): GET_playlists__playlist_id_Root\n    @rest(\n      endpoint: \"https://api.spotify.com/v1/playlists/$playlist_id;\"\n      headers: [\n        { name: \"authorization\", value: \"Bearer $spotify_access_token;\" }\n      ]\n    )\n}\n\nUtterance: Follow all the artists involved in the playlist 'My R&B'", "output": "response_obj = GET_me_playlists()\nresponse_obj1 = GET_playlists__playlist_id_(playlist_id=[item.id for item in response_obj.items if item.name == \"My R&B\"][0])\nPUT_me_following(type=\"artist\", ids=\",\".join([artist.id for artist in item.track.artists for item in response_obj1.tracks.items]))\n", "function_specs": "[{\"name\": \"GET_me\", \"description\": \"Get detailed profile information about the current user (including the\\ncurrent user's username).\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {}, \"required\": []}}, {\"name\": \"GET_playlists__playlist_id_\", \"description\": \"Get a playlist owned by a Spotify user.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"playlist_id\": {\"type\": \"string\", \"description\": \"The [Spotify ID](/documentation/web-api/#spotify-uris-and-ids) of the playlist.\\n\"}, \"market\": {\"type\": \"string\", \"description\": \"An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).\\n  If a country code is specified, only content that is available in that market will be returned.<br/>\\n  If a valid user access token is specified in the request header, the country associated with\\n  the user account will take priority over this parameter.<br/>\\n  _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>\\n  Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).\\n\"}, \"fields\": {\"type\": \"string\", \"description\": \"Filters for the query: a comma-separated list of the\\nfields to return. If omitted, all fields are returned. For example, to get\\njust the playlist''s description and URI: `fields=description,uri`. A dot\\nseparator can be used to specify non-reoccurring fields, while parentheses\\ncan be used to specify reoccurring fields within objects. For example, to\\nget just the added date and user ID of the adder: `fields=tracks.items(added_at,added_by.id)`.\\nUse multiple parentheses to drill down into nested objects, for example: `fields=tracks.items(track(name,href,album(name,href)))`.\\nFields can be excluded by prefixing them with an exclamation mark, for example:\\n`fields=tracks.items(track(name,href,album(!name,href)))`\\n\"}, \"additional_types\": {\"type\": \"string\", \"description\": \"A comma-separated list of item types that your client supports besides the default `track` type. Valid types are: `track` and `episode`.<br/>\\n_**Note**: This parameter was introduced to allow existing clients to maintain their current behaviour and might be deprecated in the future._<br/>\\nIn addition to providing this parameter, make sure that your client properly handles cases of new types in the future by checking against the `type` field of each object.\\n\"}}, \"required\": [\"playlist_id\"]}}, {\"name\": \"PUT_me_following\", \"description\": \"Add the current user as a follower of one or more artists or other Spotify users.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"type\": {\"type\": \"string\", \"description\": \"The ID type: either `artist` or `user`.\\n\"}, \"ids\": {\"type\": \"string\", \"description\": \"A comma-separated list of the artist or the user [Spotify IDs](/documentation/web-api/#spotify-uris-and-ids).\\nA maximum of 50 IDs can be sent in one request.\\n\"}}, \"required\": [\"type\", \"ids\"]}}]", "GraphQL_schema": "type GET_me_playlists_ExternalUrls {\n  spotify: String\n}\n\ntype GET_me_playlists_ExternalUrls1 {\n  spotify: String\n}\n\ntype GET_me_playlists_ImagesEntry {\n  \"\"\"\n  Field \"height\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  height: JSON\n  url: String\n  \"\"\"\n  Field \"width\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  width: JSON\n}\n\ntype GET_me_playlists_ItemsEntry {\n  collaborative: Boolean\n  description: String\n  external_urls: GET_me_playlists_ExternalUrls\n  href: String\n  id: String\n  images: [GET_me_playlists_ImagesEntry]\n  name: String\n  owner: GET_me_playlists_Owner\n  \"\"\"\n  Field \"primary_color\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  primary_color: JSON\n  public: Boolean\n  snapshot_id: String\n  tracks: GET_me_playlists_Tracks\n  type: String\n  uri: String\n}\n\ntype GET_me_playlists_Owner {\n  display_name: String\n  external_urls: GET_me_playlists_ExternalUrls1\n  href: String\n  id: String\n  type: String\n  uri: String\n}\n\ntype GET_me_playlists_Root {\n  href: String\n  items: [GET_me_playlists_ItemsEntry]\n  limit: Int\n  \"\"\"\n  Field \"next\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  next: JSON\n  offset: Int\n  \"\"\"\n  Field \"previous\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  previous: JSON\n  total: Int\n}\n\ntype GET_me_playlists_Tracks {\n  href: String\n  total: Int\n}\n\ntype Query {\n  GET_me_playlists(spotify_access_token: String!): GET_me_playlists_Root\n    @rest(\n      endpoint: \"https://api.spotify.com/v1/me/playlists\"\n      headers: [\n        { name: \"authorization\", value: \"Bearer $spotify_access_token;\" }\n      ]\n    )\n}\ntype GET_playlists__playlist_id_AddedBy {\n  external_urls: GET_playlists__playlist_id_ExternalUrls2\n  href: String\n  id: String\n  type: String\n  uri: String\n}\n\ntype GET_playlists__playlist_id_Album {\n  album_type: String\n  artists: [GET_playlists__playlist_id_ArtistsEntry]\n  available_markets: [String]\n  external_urls: GET_playlists__playlist_id_ExternalUrls4\n  href: String\n  id: String\n  images: [GET_playlists__playlist_id_Images1Entry]\n  name: String\n  release_date: Int\n  release_date_precision: String\n  total_tracks: Int\n  type: String\n  uri: String\n}\n\ntype GET_playlists__playlist_id_Artists1Entry {\n  external_urls: GET_playlists__playlist_id_ExternalUrls5\n  href: String\n  id: String\n  name: String\n  type: String\n  uri: String\n}\n\ntype GET_playlists__playlist_id_ArtistsEntry {\n  external_urls: GET_playlists__playlist_id_ExternalUrls3\n  href: String\n  id: String\n  name: String\n  type: String\n  uri: String\n}\n\ntype GET_playlists__playlist_id_ExternalIds {\n  isrc: String\n}\n\ntype GET_playlists__playlist_id_ExternalUrls {\n  spotify: String\n}\n\ntype GET_playlists__playlist_id_ExternalUrls1 {\n  spotify: String\n}\n\ntype GET_playlists__playlist_id_ExternalUrls2 {\n  spotify: String\n}\n\ntype GET_playlists__playlist_id_ExternalUrls3 {\n  spotify: String\n}\n\ntype GET_playlists__playlist_id_ExternalUrls4 {\n  spotify: String\n}\n\ntype GET_playlists__playlist_id_ExternalUrls5 {\n  spotify: String\n}\n\ntype GET_playlists__playlist_id_ExternalUrls6 {\n  spotify: String\n}\n\ntype GET_playlists__playlist_id_Followers {\n  \"\"\"\n  Field \"href\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  href: JSON\n  total: Int\n}\n\ntype GET_playlists__playlist_id_Images1Entry {\n  height: Int\n  url: String\n  width: Int\n}\n\ntype GET_playlists__playlist_id_ImagesEntry {\n  \"\"\"\n  Field \"height\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  height: JSON\n  url: String\n  \"\"\"\n  Field \"width\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  width: JSON\n}\n\ntype GET_playlists__playlist_id_ItemsEntry {\n  added_at: DateTime\n  added_by: GET_playlists__playlist_id_AddedBy\n  is_local: Boolean\n  \"\"\"\n  Field \"primary_color\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  primary_color: JSON\n  track: GET_playlists__playlist_id_Track\n  video_thumbnail: GET_playlists__playlist_id_VideoThumbnail\n}\n\ntype GET_playlists__playlist_id_Owner {\n  display_name: String\n  external_urls: GET_playlists__playlist_id_ExternalUrls1\n  href: String\n  id: String\n  type: String\n  uri: String\n}\n\ntype GET_playlists__playlist_id_Root {\n  collaborative: Boolean\n  description: String\n  external_urls: GET_playlists__playlist_id_ExternalUrls\n  followers: GET_playlists__playlist_id_Followers\n  href: String\n  id: String\n  images: [GET_playlists__playlist_id_ImagesEntry]\n  name: String\n  owner: GET_playlists__playlist_id_Owner\n  \"\"\"\n  Field \"primary_color\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  primary_color: JSON\n  public: Boolean\n  snapshot_id: String\n  tracks: GET_playlists__playlist_id_Tracks\n  type: String\n  uri: String\n}\n\ntype GET_playlists__playlist_id_Track {\n  album: GET_playlists__playlist_id_Album\n  artists: [GET_playlists__playlist_id_Artists1Entry]\n  available_markets: [String]\n  disc_number: Int\n  duration_ms: Int\n  episode: Boolean\n  explicit: Boolean\n  external_ids: GET_playlists__playlist_id_ExternalIds\n  external_urls: GET_playlists__playlist_id_ExternalUrls6\n  href: String\n  id: String\n  is_local: Boolean\n  name: String\n  popularity: Int\n  preview_url: String\n  track: Boolean\n  track_number: Int\n  type: String\n  uri: String\n}\n\ntype GET_playlists__playlist_id_Tracks {\n  href: String\n  items: [GET_playlists__playlist_id_ItemsEntry]\n  limit: Int\n  \"\"\"\n  Field \"next\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  next: JSON\n  offset: Int\n  \"\"\"\n  Field \"previous\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  previous: JSON\n  total: Int\n}\n\ntype GET_playlists__playlist_id_VideoThumbnail {\n  \"\"\"\n  Field \"url\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  url: JSON\n}\n\ntype Query {\n  GET_playlists__playlist_id_(\n    playlist_id: String!\n    spotify_access_token: String!\n  ): GET_playlists__playlist_id_Root\n    @rest(\n      endpoint: \"https://api.spotify.com/v1/playlists/$playlist_id;\"\n      headers: [\n        { name: \"authorization\", value: \"Bearer $spotify_access_token;\" }\n      ]\n    )\n}\n", "utterance": "Follow all the artists involved in the playlist 'My R&B'"}
{"domain": "spotify", "input": "Function Signatures:\n\n[{\"name\": \"GET_search\", \"description\": \"Get Spotify catalog information about albums, artists, playlists, tracks, shows, episodes or audiobooks\\nthat match a keyword string.<br />\\n**Note: Audiobooks are only available for the US, UK, Ireland, New Zealand and Australia markets.**\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"q\": {\"type\": \"string\", \"description\": \"Your search query.\\n\\nYou can narrow down your search using field filters. The available filters are `album`, `artist`, `track`, `year`, `upc`, `tag:hipster`, `tag:new`, `isrc`, and `genre`. Each field filter only applies to certain result types.\\n\\nThe `artist` and `year` filters can be used while searching albums, artists and tracks. You can filter on a single `year` or a range (e.g. 1955-1960).<br />\\nThe `album` filter can be used while searching albums and tracks.<br />\\nThe `genre` filter can be used while searching artists and tracks.<br />\\nThe `isrc` and `track` filters can be used while searching tracks.<br />\\nThe `upc`, `tag:new` and `tag:hipster` filters can only be used while searching albums. The `tag:new` filter will return albums released in the past two weeks and `tag:hipster` can be used to return only albums with the lowest 10% popularity.<br />\\n\"}, \"type\": {\"type\": \"array\", \"description\": \"A comma-separated list of item types to search across. Search results include hits\\nfrom all the specified item types. For example: `q=abacab&type=album,track` returns\\nboth albums and tracks matching \\\"abacab\\\".\\n\"}, \"market\": {\"type\": \"string\", \"description\": \"An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).\\n  If a country code is specified, only content that is available in that market will be returned.<br/>\\n  If a valid user access token is specified in the request header, the country associated with\\n  the user account will take priority over this parameter.<br/>\\n  _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>\\n  Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).\\n\"}, \"limit\": {\"type\": \"integer\", \"description\": \"The maximum number of results to return in each item type.\\n\"}, \"offset\": {\"type\": \"integer\", \"description\": \"The index of the first result to return. Use\\nwith limit to get the next page of search results.\\n\"}, \"include_external\": {\"type\": \"string\", \"description\": \"If `include_external=audio` is specified it signals that the client can play externally hosted audio content, and marks\\nthe content as playable in the response. By default externally hosted audio content is marked as unplayable in the response.\\n\"}}, \"required\": [\"q\", \"type\"]}}, {\"name\": \"GET_artists__id__top_tracks\", \"description\": \"Get Spotify catalog information about an artist's top tracks by country.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"id\": {\"type\": \"string\", \"description\": \"The [Spotify ID](/documentation/web-api/#spotify-uris-and-ids) of the artist.\\n\"}, \"market\": {\"type\": \"string\", \"description\": \"An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).\\n  If a country code is specified, only content that is available in that market will be returned.<br/>\\n  If a valid user access token is specified in the request header, the country associated with\\n  the user account will take priority over this parameter.<br/>\\n  _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>\\n  Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).\\n\"}}, \"required\": [\"id\"]}}, {\"name\": \"GET_me\", \"description\": \"Get detailed profile information about the current user (including the\\ncurrent user's username).\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {}, \"required\": []}}, {\"name\": \"POST_users__user_id__playlists\", \"description\": \"Create a playlist for a Spotify user (Before calling this API, must call GET /me first to get the user_id). (The playlist will be empty until\\nyou [add tracks](/documentation/web-api/reference/#/operations/add-tracks-to-playlist).)\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"user_id\": {\"type\": \"string\", \"description\": \"The user's [Spotify user ID](/documentation/web-api/#spotify-uris-and-ids).\\n\"}, \"name\": {\"type\": \"string\", \"description\": \"The name for the new playlist, for example \\\"Your Coolest Playlist\\\". This name does not need to be unique; a user may have several playlists with the same name.\"}, \"public\": {\"type\": \"boolean\", \"description\": \"Defaults to true. If true the playlist will be public, if false it will be private. To be able to create private playlists, the user must have granted the playlist-modify-private scope\"}, \"collaborative\": {\"type\": \"boolean\", \"description\": \"Defaults to false. If true the playlist will be collaborative. Note: to create a collaborative playlist you must also set public to false. To create collaborative playlists you must have granted playlist-modify-private and playlist-modify-public scopes.\"}, \"description\": {\"type\": \"string\", \"description\": \"value for playlist description as displayed in Spotify Clients and in the Web API.\"}}, \"required\": [\"user_id\", \"name\"], \"body_params\": [\"name\", \"public\", \"collaborative\", \"description\"]}}, {\"name\": \"POST_playlists__playlist_id__tracks\", \"description\": \"Add one or more items to a user's playlist.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"playlist_id\": {\"type\": \"string\", \"description\": \"The [Spotify ID](/documentation/web-api/#spotify-uris-and-ids) of the playlist.\\n\"}, \"position\": {\"type\": \"integer\", \"description\": \"The position to insert the items, a zero-based index. For example, to insert the items in the first position: `position=0`; to insert the items in the third position: `position=2`. If omitted, the items will be appended to the playlist. Items are added in the order they are listed in the query string or request body.\\n\"}, \"uris\": {\"type\": \"string\", \"description\": \"A comma-separated list of [Spotify URIs](/documentation/web-api/#spotify-uris-and-ids) to add, can be track or episode URIs. For example:<br/>`uris=spotify:track:4iV5W9uYEdYUVa79Axb7Rh, spotify:track:1301WleyT98MSxVHPZCA6M, spotify:episode:512ojhOuo1ktJprKbVcKyQ`<br/>A maximum of 100 items can be added in one request. <br/>\\n_**Note**: it is likely that passing a large number of item URIs as a query parameter will exceed the maximum length of the request URI. When adding a large number of items, it is recommended to pass them in the request body, see below._\\n\"}}, \"required\": [\"playlist_id\"]}}]\n\nGraphQL schema:\n\ntype GET_me_ExplicitContent {\n  filter_enabled: Boolean\n  filter_locked: Boolean\n}\n\ntype GET_me_ExternalUrls {\n  spotify: String\n}\n\ntype GET_me_Followers {\n  \"\"\"\n  Field \"href\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  href: JSON\n  total: Int\n}\n\ntype GET_me_Root {\n  country: String\n  display_name: String\n  email: String\n  explicit_content: GET_me_ExplicitContent\n  external_urls: GET_me_ExternalUrls\n  followers: GET_me_Followers\n  href: String\n  id: String\n  images: [JSON]\n  product: String\n  type: String\n  uri: String\n}\n\ntype Query {\n  GET_me(spotify_access_token: String!): GET_me_Root\n    @rest(\n      endpoint: \"https://api.spotify.com/v1/me\"\n      headers: [\n        { name: \"authorization\", value: \"Bearer $spotify_access_token;\" }\n      ]\n    )\n}\ntype POST_users__user_id__playlists_ExternalUrls {\n  spotify: String\n}\n\ntype POST_users__user_id__playlists_ExternalUrls1 {\n  spotify: String\n}\n\ntype POST_users__user_id__playlists_Followers {\n  \"\"\"\n  Field \"href\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  href: JSON\n  total: Int\n}\n\ntype POST_users__user_id__playlists_Owner {\n  \"\"\"\n  Field \"display_name\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  display_name: JSON\n  external_urls: POST_users__user_id__playlists_ExternalUrls1\n  href: String\n  id: String\n  type: String\n  uri: String\n}\n\ntype POST_users__user_id__playlists_Root {\n  collaborative: Boolean\n  \"\"\"\n  Field \"description\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  description: JSON\n  external_urls: POST_users__user_id__playlists_ExternalUrls\n  followers: POST_users__user_id__playlists_Followers\n  href: String\n  id: String\n  images: [JSON]\n  name: String\n  owner: POST_users__user_id__playlists_Owner\n  \"\"\"\n  Field \"primary_color\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  primary_color: JSON\n  public: Boolean\n  snapshot_id: String\n  tracks: POST_users__user_id__playlists_Tracks\n  type: String\n  uri: String\n}\n\ntype POST_users__user_id__playlists_Tracks {\n  href: String\n  items: [JSON]\n  limit: Int\n  \"\"\"\n  Field \"next\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  next: JSON\n  offset: Int\n  \"\"\"\n  Field \"previous\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  previous: JSON\n  total: Int\n}\n\ntype Query {\n  POST_users__user_id__playlists(\n    name: String\n    spotify_access_token: String!\n  ): POST_users__user_id__playlists_Root\n    @rest(\n      method: POST\n      endpoint: \"https://api.spotify.com/v1/users/31rph2hasdr2pflu7x5sffw4xxgy/playlists\"\n      headers: [\n        { name: \"authorization\", value: \"Bearer $spotify_access_token;\" }\n      ]\n    )\n}\ntype GET_search_Artists {\n  href: String\n  items: [GET_search_ItemsEntry]\n  limit: Int\n  next: String\n  offset: Int\n  \"\"\"\n  Field \"previous\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  previous: JSON\n  total: Int\n}\n\ntype GET_search_ExternalUrls {\n  spotify: String\n}\n\ntype GET_search_Followers {\n  \"\"\"\n  Field \"href\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  href: JSON\n  total: Int\n}\n\ntype GET_search_ImagesEntry {\n  height: Int\n  url: String\n  width: Int\n}\n\ntype GET_search_ItemsEntry {\n  external_urls: GET_search_ExternalUrls\n  followers: GET_search_Followers\n  genres: [String]\n  href: String\n  id: String\n  images: [GET_search_ImagesEntry]\n  name: String\n  popularity: Int\n  type: String\n  uri: String\n}\n\ntype GET_search_Root {\n  artists: GET_search_Artists\n}\n\ntype Query {\n  GET_search(\n    q: String\n    spotify_access_token: String!\n    type: String\n  ): GET_search_Root\n    @rest(\n      endpoint: \"https://api.spotify.com/v1/search\"\n      headers: [\n        { name: \"authorization\", value: \"Bearer $spotify_access_token;\" }\n      ]\n    )\n}\ntype GET_artists__id__top_tracks_Album {\n  album_type: String\n  artists: [GET_artists__id__top_tracks_ArtistsEntry]\n  external_urls: GET_artists__id__top_tracks_ExternalUrls1\n  href: String\n  id: String\n  images: [GET_artists__id__top_tracks_ImagesEntry]\n  is_playable: Boolean\n  name: String\n  release_date: String\n  release_date_precision: String\n  total_tracks: Int\n  type: String\n  uri: String\n}\n\ntype GET_artists__id__top_tracks_Artists1Entry {\n  external_urls: GET_artists__id__top_tracks_ExternalUrls2\n  href: String\n  id: String\n  name: String\n  type: String\n  uri: String\n}\n\ntype GET_artists__id__top_tracks_ArtistsEntry {\n  external_urls: GET_artists__id__top_tracks_ExternalUrls\n  href: String\n  id: String\n  name: String\n  type: String\n  uri: String\n}\n\ntype GET_artists__id__top_tracks_ExternalIds {\n  isrc: String\n}\n\ntype GET_artists__id__top_tracks_ExternalUrls {\n  spotify: String\n}\n\ntype GET_artists__id__top_tracks_ExternalUrls1 {\n  spotify: String\n}\n\ntype GET_artists__id__top_tracks_ExternalUrls2 {\n  spotify: String\n}\n\ntype GET_artists__id__top_tracks_ExternalUrls3 {\n  spotify: String\n}\n\ntype GET_artists__id__top_tracks_ImagesEntry {\n  height: Int\n  url: String\n  width: Int\n}\n\ntype GET_artists__id__top_tracks_Root {\n  tracks: [GET_artists__id__top_tracks_TracksEntry]\n}\n\ntype GET_artists__id__top_tracks_TracksEntry {\n  album: GET_artists__id__top_tracks_Album\n  artists: [GET_artists__id__top_tracks_Artists1Entry]\n  disc_number: Int\n  duration_ms: Int\n  explicit: Boolean\n  external_ids: GET_artists__id__top_tracks_ExternalIds\n  external_urls: GET_artists__id__top_tracks_ExternalUrls3\n  href: String\n  id: String\n  is_local: Boolean\n  is_playable: Boolean\n  name: String\n  popularity: Int\n  \"\"\"\n  Field \"preview_url\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  preview_url: JSON\n  track_number: Int\n  type: String\n  uri: String\n}\n\ntype Query {\n  GET_artists__id__top_tracks(\n    id: String!\n    spotify_access_token: String!\n  ): GET_artists__id__top_tracks_Root\n    @rest(\n      endpoint: \"https://api.spotify.com/v1/artists/$id;/top-tracks\"\n      headers: [\n        { name: \"authorization\", value: \"Bearer $spotify_access_token;\" }\n      ]\n    )\n}\n\nUtterance: Make top tracks of Taylor Swift a new playlist named \"Love Taylor\"", "output": "response_obj = GET_search(q=\"Taylor Swift\", type=\"artist\")\nresponse_obj1 = GET_artists__id__top_tracks(id=response_obj.artists.items[0].id)\nresponse_obj2 = GET_me()\nresponse_obj3 = POST_users__user_id__playlists(user_id=response_obj2.id, name=\"Love Taylor\")\nPOST_playlists__playlist_id__tracks(playlist_id=response_obj3.id, uris=\",\".join([track.uri for track in response_obj3.tracks]))\n", "function_specs": "[{\"name\": \"GET_search\", \"description\": \"Get Spotify catalog information about albums, artists, playlists, tracks, shows, episodes or audiobooks\\nthat match a keyword string.<br />\\n**Note: Audiobooks are only available for the US, UK, Ireland, New Zealand and Australia markets.**\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"q\": {\"type\": \"string\", \"description\": \"Your search query.\\n\\nYou can narrow down your search using field filters. The available filters are `album`, `artist`, `track`, `year`, `upc`, `tag:hipster`, `tag:new`, `isrc`, and `genre`. Each field filter only applies to certain result types.\\n\\nThe `artist` and `year` filters can be used while searching albums, artists and tracks. You can filter on a single `year` or a range (e.g. 1955-1960).<br />\\nThe `album` filter can be used while searching albums and tracks.<br />\\nThe `genre` filter can be used while searching artists and tracks.<br />\\nThe `isrc` and `track` filters can be used while searching tracks.<br />\\nThe `upc`, `tag:new` and `tag:hipster` filters can only be used while searching albums. The `tag:new` filter will return albums released in the past two weeks and `tag:hipster` can be used to return only albums with the lowest 10% popularity.<br />\\n\"}, \"type\": {\"type\": \"array\", \"description\": \"A comma-separated list of item types to search across. Search results include hits\\nfrom all the specified item types. For example: `q=abacab&type=album,track` returns\\nboth albums and tracks matching \\\"abacab\\\".\\n\"}, \"market\": {\"type\": \"string\", \"description\": \"An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).\\n  If a country code is specified, only content that is available in that market will be returned.<br/>\\n  If a valid user access token is specified in the request header, the country associated with\\n  the user account will take priority over this parameter.<br/>\\n  _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>\\n  Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).\\n\"}, \"limit\": {\"type\": \"integer\", \"description\": \"The maximum number of results to return in each item type.\\n\"}, \"offset\": {\"type\": \"integer\", \"description\": \"The index of the first result to return. Use\\nwith limit to get the next page of search results.\\n\"}, \"include_external\": {\"type\": \"string\", \"description\": \"If `include_external=audio` is specified it signals that the client can play externally hosted audio content, and marks\\nthe content as playable in the response. By default externally hosted audio content is marked as unplayable in the response.\\n\"}}, \"required\": [\"q\", \"type\"]}}, {\"name\": \"GET_artists__id__top_tracks\", \"description\": \"Get Spotify catalog information about an artist's top tracks by country.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"id\": {\"type\": \"string\", \"description\": \"The [Spotify ID](/documentation/web-api/#spotify-uris-and-ids) of the artist.\\n\"}, \"market\": {\"type\": \"string\", \"description\": \"An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).\\n  If a country code is specified, only content that is available in that market will be returned.<br/>\\n  If a valid user access token is specified in the request header, the country associated with\\n  the user account will take priority over this parameter.<br/>\\n  _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>\\n  Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).\\n\"}}, \"required\": [\"id\"]}}, {\"name\": \"GET_me\", \"description\": \"Get detailed profile information about the current user (including the\\ncurrent user's username).\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {}, \"required\": []}}, {\"name\": \"POST_users__user_id__playlists\", \"description\": \"Create a playlist for a Spotify user (Before calling this API, must call GET /me first to get the user_id). (The playlist will be empty until\\nyou [add tracks](/documentation/web-api/reference/#/operations/add-tracks-to-playlist).)\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"user_id\": {\"type\": \"string\", \"description\": \"The user's [Spotify user ID](/documentation/web-api/#spotify-uris-and-ids).\\n\"}, \"name\": {\"type\": \"string\", \"description\": \"The name for the new playlist, for example \\\"Your Coolest Playlist\\\". This name does not need to be unique; a user may have several playlists with the same name.\"}, \"public\": {\"type\": \"boolean\", \"description\": \"Defaults to true. If true the playlist will be public, if false it will be private. To be able to create private playlists, the user must have granted the playlist-modify-private scope\"}, \"collaborative\": {\"type\": \"boolean\", \"description\": \"Defaults to false. If true the playlist will be collaborative. Note: to create a collaborative playlist you must also set public to false. To create collaborative playlists you must have granted playlist-modify-private and playlist-modify-public scopes.\"}, \"description\": {\"type\": \"string\", \"description\": \"value for playlist description as displayed in Spotify Clients and in the Web API.\"}}, \"required\": [\"user_id\", \"name\"], \"body_params\": [\"name\", \"public\", \"collaborative\", \"description\"]}}, {\"name\": \"POST_playlists__playlist_id__tracks\", \"description\": \"Add one or more items to a user's playlist.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"playlist_id\": {\"type\": \"string\", \"description\": \"The [Spotify ID](/documentation/web-api/#spotify-uris-and-ids) of the playlist.\\n\"}, \"position\": {\"type\": \"integer\", \"description\": \"The position to insert the items, a zero-based index. For example, to insert the items in the first position: `position=0`; to insert the items in the third position: `position=2`. If omitted, the items will be appended to the playlist. Items are added in the order they are listed in the query string or request body.\\n\"}, \"uris\": {\"type\": \"string\", \"description\": \"A comma-separated list of [Spotify URIs](/documentation/web-api/#spotify-uris-and-ids) to add, can be track or episode URIs. For example:<br/>`uris=spotify:track:4iV5W9uYEdYUVa79Axb7Rh, spotify:track:1301WleyT98MSxVHPZCA6M, spotify:episode:512ojhOuo1ktJprKbVcKyQ`<br/>A maximum of 100 items can be added in one request. <br/>\\n_**Note**: it is likely that passing a large number of item URIs as a query parameter will exceed the maximum length of the request URI. When adding a large number of items, it is recommended to pass them in the request body, see below._\\n\"}}, \"required\": [\"playlist_id\"]}}]", "GraphQL_schema": "type GET_me_ExplicitContent {\n  filter_enabled: Boolean\n  filter_locked: Boolean\n}\n\ntype GET_me_ExternalUrls {\n  spotify: String\n}\n\ntype GET_me_Followers {\n  \"\"\"\n  Field \"href\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  href: JSON\n  total: Int\n}\n\ntype GET_me_Root {\n  country: String\n  display_name: String\n  email: String\n  explicit_content: GET_me_ExplicitContent\n  external_urls: GET_me_ExternalUrls\n  followers: GET_me_Followers\n  href: String\n  id: String\n  images: [JSON]\n  product: String\n  type: String\n  uri: String\n}\n\ntype Query {\n  GET_me(spotify_access_token: String!): GET_me_Root\n    @rest(\n      endpoint: \"https://api.spotify.com/v1/me\"\n      headers: [\n        { name: \"authorization\", value: \"Bearer $spotify_access_token;\" }\n      ]\n    )\n}\ntype POST_users__user_id__playlists_ExternalUrls {\n  spotify: String\n}\n\ntype POST_users__user_id__playlists_ExternalUrls1 {\n  spotify: String\n}\n\ntype POST_users__user_id__playlists_Followers {\n  \"\"\"\n  Field \"href\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  href: JSON\n  total: Int\n}\n\ntype POST_users__user_id__playlists_Owner {\n  \"\"\"\n  Field \"display_name\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  display_name: JSON\n  external_urls: POST_users__user_id__playlists_ExternalUrls1\n  href: String\n  id: String\n  type: String\n  uri: String\n}\n\ntype POST_users__user_id__playlists_Root {\n  collaborative: Boolean\n  \"\"\"\n  Field \"description\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  description: JSON\n  external_urls: POST_users__user_id__playlists_ExternalUrls\n  followers: POST_users__user_id__playlists_Followers\n  href: String\n  id: String\n  images: [JSON]\n  name: String\n  owner: POST_users__user_id__playlists_Owner\n  \"\"\"\n  Field \"primary_color\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  primary_color: JSON\n  public: Boolean\n  snapshot_id: String\n  tracks: POST_users__user_id__playlists_Tracks\n  type: String\n  uri: String\n}\n\ntype POST_users__user_id__playlists_Tracks {\n  href: String\n  items: [JSON]\n  limit: Int\n  \"\"\"\n  Field \"next\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  next: JSON\n  offset: Int\n  \"\"\"\n  Field \"previous\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  previous: JSON\n  total: Int\n}\n\ntype Query {\n  POST_users__user_id__playlists(\n    name: String\n    spotify_access_token: String!\n  ): POST_users__user_id__playlists_Root\n    @rest(\n      method: POST\n      endpoint: \"https://api.spotify.com/v1/users/31rph2hasdr2pflu7x5sffw4xxgy/playlists\"\n      headers: [\n        { name: \"authorization\", value: \"Bearer $spotify_access_token;\" }\n      ]\n    )\n}\ntype GET_search_Artists {\n  href: String\n  items: [GET_search_ItemsEntry]\n  limit: Int\n  next: String\n  offset: Int\n  \"\"\"\n  Field \"previous\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  previous: JSON\n  total: Int\n}\n\ntype GET_search_ExternalUrls {\n  spotify: String\n}\n\ntype GET_search_Followers {\n  \"\"\"\n  Field \"href\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  href: JSON\n  total: Int\n}\n\ntype GET_search_ImagesEntry {\n  height: Int\n  url: String\n  width: Int\n}\n\ntype GET_search_ItemsEntry {\n  external_urls: GET_search_ExternalUrls\n  followers: GET_search_Followers\n  genres: [String]\n  href: String\n  id: String\n  images: [GET_search_ImagesEntry]\n  name: String\n  popularity: Int\n  type: String\n  uri: String\n}\n\ntype GET_search_Root {\n  artists: GET_search_Artists\n}\n\ntype Query {\n  GET_search(\n    q: String\n    spotify_access_token: String!\n    type: String\n  ): GET_search_Root\n    @rest(\n      endpoint: \"https://api.spotify.com/v1/search\"\n      headers: [\n        { name: \"authorization\", value: \"Bearer $spotify_access_token;\" }\n      ]\n    )\n}\ntype GET_artists__id__top_tracks_Album {\n  album_type: String\n  artists: [GET_artists__id__top_tracks_ArtistsEntry]\n  external_urls: GET_artists__id__top_tracks_ExternalUrls1\n  href: String\n  id: String\n  images: [GET_artists__id__top_tracks_ImagesEntry]\n  is_playable: Boolean\n  name: String\n  release_date: String\n  release_date_precision: String\n  total_tracks: Int\n  type: String\n  uri: String\n}\n\ntype GET_artists__id__top_tracks_Artists1Entry {\n  external_urls: GET_artists__id__top_tracks_ExternalUrls2\n  href: String\n  id: String\n  name: String\n  type: String\n  uri: String\n}\n\ntype GET_artists__id__top_tracks_ArtistsEntry {\n  external_urls: GET_artists__id__top_tracks_ExternalUrls\n  href: String\n  id: String\n  name: String\n  type: String\n  uri: String\n}\n\ntype GET_artists__id__top_tracks_ExternalIds {\n  isrc: String\n}\n\ntype GET_artists__id__top_tracks_ExternalUrls {\n  spotify: String\n}\n\ntype GET_artists__id__top_tracks_ExternalUrls1 {\n  spotify: String\n}\n\ntype GET_artists__id__top_tracks_ExternalUrls2 {\n  spotify: String\n}\n\ntype GET_artists__id__top_tracks_ExternalUrls3 {\n  spotify: String\n}\n\ntype GET_artists__id__top_tracks_ImagesEntry {\n  height: Int\n  url: String\n  width: Int\n}\n\ntype GET_artists__id__top_tracks_Root {\n  tracks: [GET_artists__id__top_tracks_TracksEntry]\n}\n\ntype GET_artists__id__top_tracks_TracksEntry {\n  album: GET_artists__id__top_tracks_Album\n  artists: [GET_artists__id__top_tracks_Artists1Entry]\n  disc_number: Int\n  duration_ms: Int\n  explicit: Boolean\n  external_ids: GET_artists__id__top_tracks_ExternalIds\n  external_urls: GET_artists__id__top_tracks_ExternalUrls3\n  href: String\n  id: String\n  is_local: Boolean\n  is_playable: Boolean\n  name: String\n  popularity: Int\n  \"\"\"\n  Field \"preview_url\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  preview_url: JSON\n  track_number: Int\n  type: String\n  uri: String\n}\n\ntype Query {\n  GET_artists__id__top_tracks(\n    id: String!\n    spotify_access_token: String!\n  ): GET_artists__id__top_tracks_Root\n    @rest(\n      endpoint: \"https://api.spotify.com/v1/artists/$id;/top-tracks\"\n      headers: [\n        { name: \"authorization\", value: \"Bearer $spotify_access_token;\" }\n      ]\n    )\n}\n", "utterance": "Make top tracks of Taylor Swift a new playlist named \"Love Taylor\""}
{"domain": "spotify", "input": "Function Signatures:\n\n[{\"name\": \"GET_me_following\", \"description\": \"Get the current user's followed artists.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"type\": {\"type\": \"string\", \"description\": \"The ID type: currently only `artist` is supported.\\n\"}, \"after\": {\"type\": \"string\", \"description\": \"The last artist ID retrieved from the previous request.\\n\"}, \"limit\": {\"type\": \"integer\", \"description\": \"The maximum number of items to return. Default: 20\\\\. Minimum: 1\\\\. Maximum: 50\\\\.\\n\"}}, \"required\": [\"type\"]}}, {\"name\": \"GET_artists__id__top_tracks\", \"description\": \"Get Spotify catalog information about an artist's top tracks by country.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"id\": {\"type\": \"string\", \"description\": \"The [Spotify ID](/documentation/web-api/#spotify-uris-and-ids) of the artist.\\n\"}, \"market\": {\"type\": \"string\", \"description\": \"An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).\\n  If a country code is specified, only content that is available in that market will be returned.<br/>\\n  If a valid user access token is specified in the request header, the country associated with\\n  the user account will take priority over this parameter.<br/>\\n  _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>\\n  Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).\\n\"}}, \"required\": [\"id\"]}}, {\"name\": \"PUT_me_tracks\", \"description\": \"Save one or more tracks to the current user's 'Your Music' library.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"ids\": {\"type\": \"string\", \"description\": \"A comma-separated list of the [Spotify IDs](/documentation/web-api/#spotify-uris-and-ids). For example: `ids=4iV5W9uYEdYUVa79Axb7Rh,1301WleyT98MSxVHPZCA6M`. Maximum: 50 IDs.\\n\"}}, \"required\": [\"ids\"]}}]\n\nGraphQL schema:\n\ntype GET_me_following_Artists {\n  cursors: GET_me_following_Cursors\n  href: String\n  items: [GET_me_following_ItemsEntry]\n  limit: Int\n  \"\"\"\n  Field \"next\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  next: JSON\n  total: Int\n}\n\ntype GET_me_following_Cursors {\n  \"\"\"\n  Field \"after\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  after: JSON\n}\n\ntype GET_me_following_ExternalUrls {\n  spotify: String\n}\n\ntype GET_me_following_Followers {\n  \"\"\"\n  Field \"href\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  href: JSON\n  total: Int\n}\n\ntype GET_me_following_ImagesEntry {\n  height: Int\n  url: String\n  width: Int\n}\n\ntype GET_me_following_ItemsEntry {\n  external_urls: GET_me_following_ExternalUrls\n  followers: GET_me_following_Followers\n  genres: [String]\n  href: String\n  id: String\n  images: [GET_me_following_ImagesEntry]\n  name: String\n  popularity: Int\n  type: String\n  uri: String\n}\n\ntype GET_me_following_Root {\n  artists: GET_me_following_Artists\n}\n\ntype Query {\n  GET_me_following(\n    spotify_access_token: String!\n    type: String\n  ): GET_me_following_Root\n    @rest(\n      endpoint: \"https://api.spotify.com/v1/me/following\"\n      headers: [\n        { name: \"authorization\", value: \"Bearer $spotify_access_token;\" }\n      ]\n    )\n}\ntype GET_artists__id__top_tracks_Album {\n  album_type: String\n  artists: [GET_artists__id__top_tracks_ArtistsEntry]\n  external_urls: GET_artists__id__top_tracks_ExternalUrls1\n  href: String\n  id: String\n  images: [GET_artists__id__top_tracks_ImagesEntry]\n  is_playable: Boolean\n  name: String\n  release_date: String\n  release_date_precision: String\n  total_tracks: Int\n  type: String\n  uri: String\n}\n\ntype GET_artists__id__top_tracks_Artists1Entry {\n  external_urls: GET_artists__id__top_tracks_ExternalUrls2\n  href: String\n  id: String\n  name: String\n  type: String\n  uri: String\n}\n\ntype GET_artists__id__top_tracks_ArtistsEntry {\n  external_urls: GET_artists__id__top_tracks_ExternalUrls\n  href: String\n  id: String\n  name: String\n  type: String\n  uri: String\n}\n\ntype GET_artists__id__top_tracks_ExternalIds {\n  isrc: String\n}\n\ntype GET_artists__id__top_tracks_ExternalUrls {\n  spotify: String\n}\n\ntype GET_artists__id__top_tracks_ExternalUrls1 {\n  spotify: String\n}\n\ntype GET_artists__id__top_tracks_ExternalUrls2 {\n  spotify: String\n}\n\ntype GET_artists__id__top_tracks_ExternalUrls3 {\n  spotify: String\n}\n\ntype GET_artists__id__top_tracks_ImagesEntry {\n  height: Int\n  url: String\n  width: Int\n}\n\ntype GET_artists__id__top_tracks_Root {\n  tracks: [GET_artists__id__top_tracks_TracksEntry]\n}\n\ntype GET_artists__id__top_tracks_TracksEntry {\n  album: GET_artists__id__top_tracks_Album\n  artists: [GET_artists__id__top_tracks_Artists1Entry]\n  disc_number: Int\n  duration_ms: Int\n  explicit: Boolean\n  external_ids: GET_artists__id__top_tracks_ExternalIds\n  external_urls: GET_artists__id__top_tracks_ExternalUrls3\n  href: String\n  id: String\n  is_local: Boolean\n  is_playable: Boolean\n  name: String\n  popularity: Int\n  \"\"\"\n  Field \"preview_url\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  preview_url: JSON\n  track_number: Int\n  type: String\n  uri: String\n}\n\ntype Query {\n  GET_artists__id__top_tracks(\n    id: String!\n    spotify_access_token: String!\n  ): GET_artists__id__top_tracks_Root\n    @rest(\n      endpoint: \"https://api.spotify.com/v1/artists/$id;/top-tracks\"\n      headers: [\n        { name: \"authorization\", value: \"Bearer $spotify_access_token;\" }\n      ]\n    )\n}\n\nUtterance: add top songs of the first of my following artists to My Music", "output": "response_obj = GET_me_following(type=\"artist\")\nresponse_obj1 = GET_artists__id__top_tracks(id=response_obj.artists.items[0].id)\nPUT_me_tracks(ids=\",\".join([track.id for track in response_obj1.tracks]))\n", "function_specs": "[{\"name\": \"GET_me_following\", \"description\": \"Get the current user's followed artists.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"type\": {\"type\": \"string\", \"description\": \"The ID type: currently only `artist` is supported.\\n\"}, \"after\": {\"type\": \"string\", \"description\": \"The last artist ID retrieved from the previous request.\\n\"}, \"limit\": {\"type\": \"integer\", \"description\": \"The maximum number of items to return. Default: 20\\\\. Minimum: 1\\\\. Maximum: 50\\\\.\\n\"}}, \"required\": [\"type\"]}}, {\"name\": \"GET_artists__id__top_tracks\", \"description\": \"Get Spotify catalog information about an artist's top tracks by country.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"id\": {\"type\": \"string\", \"description\": \"The [Spotify ID](/documentation/web-api/#spotify-uris-and-ids) of the artist.\\n\"}, \"market\": {\"type\": \"string\", \"description\": \"An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).\\n  If a country code is specified, only content that is available in that market will be returned.<br/>\\n  If a valid user access token is specified in the request header, the country associated with\\n  the user account will take priority over this parameter.<br/>\\n  _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>\\n  Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).\\n\"}}, \"required\": [\"id\"]}}, {\"name\": \"PUT_me_tracks\", \"description\": \"Save one or more tracks to the current user's 'Your Music' library.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"ids\": {\"type\": \"string\", \"description\": \"A comma-separated list of the [Spotify IDs](/documentation/web-api/#spotify-uris-and-ids). For example: `ids=4iV5W9uYEdYUVa79Axb7Rh,1301WleyT98MSxVHPZCA6M`. Maximum: 50 IDs.\\n\"}}, \"required\": [\"ids\"]}}]", "GraphQL_schema": "type GET_me_following_Artists {\n  cursors: GET_me_following_Cursors\n  href: String\n  items: [GET_me_following_ItemsEntry]\n  limit: Int\n  \"\"\"\n  Field \"next\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  next: JSON\n  total: Int\n}\n\ntype GET_me_following_Cursors {\n  \"\"\"\n  Field \"after\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  after: JSON\n}\n\ntype GET_me_following_ExternalUrls {\n  spotify: String\n}\n\ntype GET_me_following_Followers {\n  \"\"\"\n  Field \"href\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  href: JSON\n  total: Int\n}\n\ntype GET_me_following_ImagesEntry {\n  height: Int\n  url: String\n  width: Int\n}\n\ntype GET_me_following_ItemsEntry {\n  external_urls: GET_me_following_ExternalUrls\n  followers: GET_me_following_Followers\n  genres: [String]\n  href: String\n  id: String\n  images: [GET_me_following_ImagesEntry]\n  name: String\n  popularity: Int\n  type: String\n  uri: String\n}\n\ntype GET_me_following_Root {\n  artists: GET_me_following_Artists\n}\n\ntype Query {\n  GET_me_following(\n    spotify_access_token: String!\n    type: String\n  ): GET_me_following_Root\n    @rest(\n      endpoint: \"https://api.spotify.com/v1/me/following\"\n      headers: [\n        { name: \"authorization\", value: \"Bearer $spotify_access_token;\" }\n      ]\n    )\n}\ntype GET_artists__id__top_tracks_Album {\n  album_type: String\n  artists: [GET_artists__id__top_tracks_ArtistsEntry]\n  external_urls: GET_artists__id__top_tracks_ExternalUrls1\n  href: String\n  id: String\n  images: [GET_artists__id__top_tracks_ImagesEntry]\n  is_playable: Boolean\n  name: String\n  release_date: String\n  release_date_precision: String\n  total_tracks: Int\n  type: String\n  uri: String\n}\n\ntype GET_artists__id__top_tracks_Artists1Entry {\n  external_urls: GET_artists__id__top_tracks_ExternalUrls2\n  href: String\n  id: String\n  name: String\n  type: String\n  uri: String\n}\n\ntype GET_artists__id__top_tracks_ArtistsEntry {\n  external_urls: GET_artists__id__top_tracks_ExternalUrls\n  href: String\n  id: String\n  name: String\n  type: String\n  uri: String\n}\n\ntype GET_artists__id__top_tracks_ExternalIds {\n  isrc: String\n}\n\ntype GET_artists__id__top_tracks_ExternalUrls {\n  spotify: String\n}\n\ntype GET_artists__id__top_tracks_ExternalUrls1 {\n  spotify: String\n}\n\ntype GET_artists__id__top_tracks_ExternalUrls2 {\n  spotify: String\n}\n\ntype GET_artists__id__top_tracks_ExternalUrls3 {\n  spotify: String\n}\n\ntype GET_artists__id__top_tracks_ImagesEntry {\n  height: Int\n  url: String\n  width: Int\n}\n\ntype GET_artists__id__top_tracks_Root {\n  tracks: [GET_artists__id__top_tracks_TracksEntry]\n}\n\ntype GET_artists__id__top_tracks_TracksEntry {\n  album: GET_artists__id__top_tracks_Album\n  artists: [GET_artists__id__top_tracks_Artists1Entry]\n  disc_number: Int\n  duration_ms: Int\n  explicit: Boolean\n  external_ids: GET_artists__id__top_tracks_ExternalIds\n  external_urls: GET_artists__id__top_tracks_ExternalUrls3\n  href: String\n  id: String\n  is_local: Boolean\n  is_playable: Boolean\n  name: String\n  popularity: Int\n  \"\"\"\n  Field \"preview_url\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  preview_url: JSON\n  track_number: Int\n  type: String\n  uri: String\n}\n\ntype Query {\n  GET_artists__id__top_tracks(\n    id: String!\n    spotify_access_token: String!\n  ): GET_artists__id__top_tracks_Root\n    @rest(\n      endpoint: \"https://api.spotify.com/v1/artists/$id;/top-tracks\"\n      headers: [\n        { name: \"authorization\", value: \"Bearer $spotify_access_token;\" }\n      ]\n    )\n}\n", "utterance": "add top songs of the first of my following artists to My Music"}
{"domain": "spotify", "input": "Function Signatures:\n\n[{\"name\": \"POST_me_player_next\", \"description\": \"Skips to next track in the user\\u2019s queue.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {}, \"required\": []}}]\n\nGraphQL schema:\n\n\nUtterance: Skip to the next track", "output": "POST_me_player_next()\n", "function_specs": "[{\"name\": \"POST_me_player_next\", \"description\": \"Skips to next track in the user\\u2019s queue.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {}, \"required\": []}}]", "GraphQL_schema": "", "utterance": "Skip to the next track"}
{"domain": "spotify", "input": "Function Signatures:\n\n[{\"name\": \"GET_me_playlists\", \"description\": \"Get a list of the playlists owned or followed by the current Spotify\\nuser.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"limit\": {\"type\": \"integer\", \"description\": \"The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50.\\n\"}, \"offset\": {\"type\": \"integer\", \"description\": \"'The index of the first playlist to return. Default:\\n0 (the first object). Maximum offset: 100.000\\\\. Use with `limit` to get the\\nnext set of playlists.'\\n\"}}, \"required\": []}}, {\"name\": \"GET_playlists__playlist_id_\", \"description\": \"Get a playlist owned by a Spotify user.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"playlist_id\": {\"type\": \"string\", \"description\": \"The [Spotify ID](/documentation/web-api/#spotify-uris-and-ids) of the playlist.\\n\"}, \"market\": {\"type\": \"string\", \"description\": \"An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).\\n  If a country code is specified, only content that is available in that market will be returned.<br/>\\n  If a valid user access token is specified in the request header, the country associated with\\n  the user account will take priority over this parameter.<br/>\\n  _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>\\n  Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).\\n\"}, \"fields\": {\"type\": \"string\", \"description\": \"Filters for the query: a comma-separated list of the\\nfields to return. If omitted, all fields are returned. For example, to get\\njust the playlist''s description and URI: `fields=description,uri`. A dot\\nseparator can be used to specify non-reoccurring fields, while parentheses\\ncan be used to specify reoccurring fields within objects. For example, to\\nget just the added date and user ID of the adder: `fields=tracks.items(added_at,added_by.id)`.\\nUse multiple parentheses to drill down into nested objects, for example: `fields=tracks.items(track(name,href,album(name,href)))`.\\nFields can be excluded by prefixing them with an exclamation mark, for example:\\n`fields=tracks.items(track(name,href,album(!name,href)))`\\n\"}, \"additional_types\": {\"type\": \"string\", \"description\": \"A comma-separated list of item types that your client supports besides the default `track` type. Valid types are: `track` and `episode`.<br/>\\n_**Note**: This parameter was introduced to allow existing clients to maintain their current behaviour and might be deprecated in the future._<br/>\\nIn addition to providing this parameter, make sure that your client properly handles cases of new types in the future by checking against the `type` field of each object.\\n\"}}, \"required\": [\"playlist_id\"]}}, {\"name\": \"PUT_playlists__playlist_id_\", \"description\": \"Change a playlist's name and public/private state. (The user must, of\\ncourse, own the playlist.)\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"playlist_id\": {\"type\": \"string\", \"description\": \"The [Spotify ID](/documentation/web-api/#spotify-uris-and-ids) of the playlist.\\n\"}, \"name\": {\"type\": \"string\", \"description\": \"The name for the new playlist, for example \\\"Your Coolest Playlist\\\". This name does not need to be unique; a user may have several playlists with the same name.\"}, \"public\": {\"type\": \"boolean\", \"description\": \"Defaults to true. If true the playlist will be public, if false it will be private. To be able to create private playlists, the user must have granted the playlist-modify-private scope\"}, \"collaborative\": {\"type\": \"boolean\", \"description\": \"Defaults to false. If true the playlist will be collaborative. Note: to create a collaborative playlist you must also set public to false. To create collaborative playlists you must have granted playlist-modify-private and playlist-modify-public scopes.\"}, \"description\": {\"type\": \"string\", \"description\": \"value for playlist description as displayed in Spotify Clients and in the Web API.\"}}, \"required\": [\"playlist_id\"], \"body_params\": [\"name\", \"public\", \"collaborative\", \"description\"]}}]\n\nGraphQL schema:\n\ntype GET_me_playlists_ExternalUrls {\n  spotify: String\n}\n\ntype GET_me_playlists_ExternalUrls1 {\n  spotify: String\n}\n\ntype GET_me_playlists_ImagesEntry {\n  \"\"\"\n  Field \"height\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  height: JSON\n  url: String\n  \"\"\"\n  Field \"width\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  width: JSON\n}\n\ntype GET_me_playlists_ItemsEntry {\n  collaborative: Boolean\n  description: String\n  external_urls: GET_me_playlists_ExternalUrls\n  href: String\n  id: String\n  images: [GET_me_playlists_ImagesEntry]\n  name: String\n  owner: GET_me_playlists_Owner\n  \"\"\"\n  Field \"primary_color\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  primary_color: JSON\n  public: Boolean\n  snapshot_id: String\n  tracks: GET_me_playlists_Tracks\n  type: String\n  uri: String\n}\n\ntype GET_me_playlists_Owner {\n  display_name: String\n  external_urls: GET_me_playlists_ExternalUrls1\n  href: String\n  id: String\n  type: String\n  uri: String\n}\n\ntype GET_me_playlists_Root {\n  href: String\n  items: [GET_me_playlists_ItemsEntry]\n  limit: Int\n  \"\"\"\n  Field \"next\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  next: JSON\n  offset: Int\n  \"\"\"\n  Field \"previous\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  previous: JSON\n  total: Int\n}\n\ntype GET_me_playlists_Tracks {\n  href: String\n  total: Int\n}\n\ntype Query {\n  GET_me_playlists(spotify_access_token: String!): GET_me_playlists_Root\n    @rest(\n      endpoint: \"https://api.spotify.com/v1/me/playlists\"\n      headers: [\n        { name: \"authorization\", value: \"Bearer $spotify_access_token;\" }\n      ]\n    )\n}\ntype GET_playlists__playlist_id_AddedBy {\n  external_urls: GET_playlists__playlist_id_ExternalUrls2\n  href: String\n  id: String\n  type: String\n  uri: String\n}\n\ntype GET_playlists__playlist_id_Album {\n  album_type: String\n  artists: [GET_playlists__playlist_id_ArtistsEntry]\n  available_markets: [String]\n  external_urls: GET_playlists__playlist_id_ExternalUrls4\n  href: String\n  id: String\n  images: [GET_playlists__playlist_id_Images1Entry]\n  name: String\n  release_date: Int\n  release_date_precision: String\n  total_tracks: Int\n  type: String\n  uri: String\n}\n\ntype GET_playlists__playlist_id_Artists1Entry {\n  external_urls: GET_playlists__playlist_id_ExternalUrls5\n  href: String\n  id: String\n  name: String\n  type: String\n  uri: String\n}\n\ntype GET_playlists__playlist_id_ArtistsEntry {\n  external_urls: GET_playlists__playlist_id_ExternalUrls3\n  href: String\n  id: String\n  name: String\n  type: String\n  uri: String\n}\n\ntype GET_playlists__playlist_id_ExternalIds {\n  isrc: String\n}\n\ntype GET_playlists__playlist_id_ExternalUrls {\n  spotify: String\n}\n\ntype GET_playlists__playlist_id_ExternalUrls1 {\n  spotify: String\n}\n\ntype GET_playlists__playlist_id_ExternalUrls2 {\n  spotify: String\n}\n\ntype GET_playlists__playlist_id_ExternalUrls3 {\n  spotify: String\n}\n\ntype GET_playlists__playlist_id_ExternalUrls4 {\n  spotify: String\n}\n\ntype GET_playlists__playlist_id_ExternalUrls5 {\n  spotify: String\n}\n\ntype GET_playlists__playlist_id_ExternalUrls6 {\n  spotify: String\n}\n\ntype GET_playlists__playlist_id_Followers {\n  \"\"\"\n  Field \"href\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  href: JSON\n  total: Int\n}\n\ntype GET_playlists__playlist_id_Images1Entry {\n  height: Int\n  url: String\n  width: Int\n}\n\ntype GET_playlists__playlist_id_ImagesEntry {\n  \"\"\"\n  Field \"height\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  height: JSON\n  url: String\n  \"\"\"\n  Field \"width\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  width: JSON\n}\n\ntype GET_playlists__playlist_id_ItemsEntry {\n  added_at: DateTime\n  added_by: GET_playlists__playlist_id_AddedBy\n  is_local: Boolean\n  \"\"\"\n  Field \"primary_color\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  primary_color: JSON\n  track: GET_playlists__playlist_id_Track\n  video_thumbnail: GET_playlists__playlist_id_VideoThumbnail\n}\n\ntype GET_playlists__playlist_id_Owner {\n  display_name: String\n  external_urls: GET_playlists__playlist_id_ExternalUrls1\n  href: String\n  id: String\n  type: String\n  uri: String\n}\n\ntype GET_playlists__playlist_id_Root {\n  collaborative: Boolean\n  description: String\n  external_urls: GET_playlists__playlist_id_ExternalUrls\n  followers: GET_playlists__playlist_id_Followers\n  href: String\n  id: String\n  images: [GET_playlists__playlist_id_ImagesEntry]\n  name: String\n  owner: GET_playlists__playlist_id_Owner\n  \"\"\"\n  Field \"primary_color\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  primary_color: JSON\n  public: Boolean\n  snapshot_id: String\n  tracks: GET_playlists__playlist_id_Tracks\n  type: String\n  uri: String\n}\n\ntype GET_playlists__playlist_id_Track {\n  album: GET_playlists__playlist_id_Album\n  artists: [GET_playlists__playlist_id_Artists1Entry]\n  available_markets: [String]\n  disc_number: Int\n  duration_ms: Int\n  episode: Boolean\n  explicit: Boolean\n  external_ids: GET_playlists__playlist_id_ExternalIds\n  external_urls: GET_playlists__playlist_id_ExternalUrls6\n  href: String\n  id: String\n  is_local: Boolean\n  name: String\n  popularity: Int\n  preview_url: String\n  track: Boolean\n  track_number: Int\n  type: String\n  uri: String\n}\n\ntype GET_playlists__playlist_id_Tracks {\n  href: String\n  items: [GET_playlists__playlist_id_ItemsEntry]\n  limit: Int\n  \"\"\"\n  Field \"next\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  next: JSON\n  offset: Int\n  \"\"\"\n  Field \"previous\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  previous: JSON\n  total: Int\n}\n\ntype GET_playlists__playlist_id_VideoThumbnail {\n  \"\"\"\n  Field \"url\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  url: JSON\n}\n\ntype Query {\n  GET_playlists__playlist_id_(\n    playlist_id: String!\n    spotify_access_token: String!\n  ): GET_playlists__playlist_id_Root\n    @rest(\n      endpoint: \"https://api.spotify.com/v1/playlists/$playlist_id;\"\n      headers: [\n        { name: \"authorization\", value: \"Bearer $spotify_access_token;\" }\n      ]\n    )\n}\n\nUtterance: Make my first playlist private", "output": "response_obj = GET_me_playlists()\nresponse_obj1 = GET_playlists__playlist_id_(playlist_id=response_obj.items[0].id)\nPUT_playlists__playlist_id_(playlist_id=response_obj.items[0].id, public=False)\n", "function_specs": "[{\"name\": \"GET_me_playlists\", \"description\": \"Get a list of the playlists owned or followed by the current Spotify\\nuser.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"limit\": {\"type\": \"integer\", \"description\": \"The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50.\\n\"}, \"offset\": {\"type\": \"integer\", \"description\": \"'The index of the first playlist to return. Default:\\n0 (the first object). Maximum offset: 100.000\\\\. Use with `limit` to get the\\nnext set of playlists.'\\n\"}}, \"required\": []}}, {\"name\": \"GET_playlists__playlist_id_\", \"description\": \"Get a playlist owned by a Spotify user.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"playlist_id\": {\"type\": \"string\", \"description\": \"The [Spotify ID](/documentation/web-api/#spotify-uris-and-ids) of the playlist.\\n\"}, \"market\": {\"type\": \"string\", \"description\": \"An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).\\n  If a country code is specified, only content that is available in that market will be returned.<br/>\\n  If a valid user access token is specified in the request header, the country associated with\\n  the user account will take priority over this parameter.<br/>\\n  _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>\\n  Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).\\n\"}, \"fields\": {\"type\": \"string\", \"description\": \"Filters for the query: a comma-separated list of the\\nfields to return. If omitted, all fields are returned. For example, to get\\njust the playlist''s description and URI: `fields=description,uri`. A dot\\nseparator can be used to specify non-reoccurring fields, while parentheses\\ncan be used to specify reoccurring fields within objects. For example, to\\nget just the added date and user ID of the adder: `fields=tracks.items(added_at,added_by.id)`.\\nUse multiple parentheses to drill down into nested objects, for example: `fields=tracks.items(track(name,href,album(name,href)))`.\\nFields can be excluded by prefixing them with an exclamation mark, for example:\\n`fields=tracks.items(track(name,href,album(!name,href)))`\\n\"}, \"additional_types\": {\"type\": \"string\", \"description\": \"A comma-separated list of item types that your client supports besides the default `track` type. Valid types are: `track` and `episode`.<br/>\\n_**Note**: This parameter was introduced to allow existing clients to maintain their current behaviour and might be deprecated in the future._<br/>\\nIn addition to providing this parameter, make sure that your client properly handles cases of new types in the future by checking against the `type` field of each object.\\n\"}}, \"required\": [\"playlist_id\"]}}, {\"name\": \"PUT_playlists__playlist_id_\", \"description\": \"Change a playlist's name and public/private state. (The user must, of\\ncourse, own the playlist.)\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"playlist_id\": {\"type\": \"string\", \"description\": \"The [Spotify ID](/documentation/web-api/#spotify-uris-and-ids) of the playlist.\\n\"}, \"name\": {\"type\": \"string\", \"description\": \"The name for the new playlist, for example \\\"Your Coolest Playlist\\\". This name does not need to be unique; a user may have several playlists with the same name.\"}, \"public\": {\"type\": \"boolean\", \"description\": \"Defaults to true. If true the playlist will be public, if false it will be private. To be able to create private playlists, the user must have granted the playlist-modify-private scope\"}, \"collaborative\": {\"type\": \"boolean\", \"description\": \"Defaults to false. If true the playlist will be collaborative. Note: to create a collaborative playlist you must also set public to false. To create collaborative playlists you must have granted playlist-modify-private and playlist-modify-public scopes.\"}, \"description\": {\"type\": \"string\", \"description\": \"value for playlist description as displayed in Spotify Clients and in the Web API.\"}}, \"required\": [\"playlist_id\"], \"body_params\": [\"name\", \"public\", \"collaborative\", \"description\"]}}]", "GraphQL_schema": "type GET_me_playlists_ExternalUrls {\n  spotify: String\n}\n\ntype GET_me_playlists_ExternalUrls1 {\n  spotify: String\n}\n\ntype GET_me_playlists_ImagesEntry {\n  \"\"\"\n  Field \"height\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  height: JSON\n  url: String\n  \"\"\"\n  Field \"width\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  width: JSON\n}\n\ntype GET_me_playlists_ItemsEntry {\n  collaborative: Boolean\n  description: String\n  external_urls: GET_me_playlists_ExternalUrls\n  href: String\n  id: String\n  images: [GET_me_playlists_ImagesEntry]\n  name: String\n  owner: GET_me_playlists_Owner\n  \"\"\"\n  Field \"primary_color\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  primary_color: JSON\n  public: Boolean\n  snapshot_id: String\n  tracks: GET_me_playlists_Tracks\n  type: String\n  uri: String\n}\n\ntype GET_me_playlists_Owner {\n  display_name: String\n  external_urls: GET_me_playlists_ExternalUrls1\n  href: String\n  id: String\n  type: String\n  uri: String\n}\n\ntype GET_me_playlists_Root {\n  href: String\n  items: [GET_me_playlists_ItemsEntry]\n  limit: Int\n  \"\"\"\n  Field \"next\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  next: JSON\n  offset: Int\n  \"\"\"\n  Field \"previous\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  previous: JSON\n  total: Int\n}\n\ntype GET_me_playlists_Tracks {\n  href: String\n  total: Int\n}\n\ntype Query {\n  GET_me_playlists(spotify_access_token: String!): GET_me_playlists_Root\n    @rest(\n      endpoint: \"https://api.spotify.com/v1/me/playlists\"\n      headers: [\n        { name: \"authorization\", value: \"Bearer $spotify_access_token;\" }\n      ]\n    )\n}\ntype GET_playlists__playlist_id_AddedBy {\n  external_urls: GET_playlists__playlist_id_ExternalUrls2\n  href: String\n  id: String\n  type: String\n  uri: String\n}\n\ntype GET_playlists__playlist_id_Album {\n  album_type: String\n  artists: [GET_playlists__playlist_id_ArtistsEntry]\n  available_markets: [String]\n  external_urls: GET_playlists__playlist_id_ExternalUrls4\n  href: String\n  id: String\n  images: [GET_playlists__playlist_id_Images1Entry]\n  name: String\n  release_date: Int\n  release_date_precision: String\n  total_tracks: Int\n  type: String\n  uri: String\n}\n\ntype GET_playlists__playlist_id_Artists1Entry {\n  external_urls: GET_playlists__playlist_id_ExternalUrls5\n  href: String\n  id: String\n  name: String\n  type: String\n  uri: String\n}\n\ntype GET_playlists__playlist_id_ArtistsEntry {\n  external_urls: GET_playlists__playlist_id_ExternalUrls3\n  href: String\n  id: String\n  name: String\n  type: String\n  uri: String\n}\n\ntype GET_playlists__playlist_id_ExternalIds {\n  isrc: String\n}\n\ntype GET_playlists__playlist_id_ExternalUrls {\n  spotify: String\n}\n\ntype GET_playlists__playlist_id_ExternalUrls1 {\n  spotify: String\n}\n\ntype GET_playlists__playlist_id_ExternalUrls2 {\n  spotify: String\n}\n\ntype GET_playlists__playlist_id_ExternalUrls3 {\n  spotify: String\n}\n\ntype GET_playlists__playlist_id_ExternalUrls4 {\n  spotify: String\n}\n\ntype GET_playlists__playlist_id_ExternalUrls5 {\n  spotify: String\n}\n\ntype GET_playlists__playlist_id_ExternalUrls6 {\n  spotify: String\n}\n\ntype GET_playlists__playlist_id_Followers {\n  \"\"\"\n  Field \"href\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  href: JSON\n  total: Int\n}\n\ntype GET_playlists__playlist_id_Images1Entry {\n  height: Int\n  url: String\n  width: Int\n}\n\ntype GET_playlists__playlist_id_ImagesEntry {\n  \"\"\"\n  Field \"height\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  height: JSON\n  url: String\n  \"\"\"\n  Field \"width\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  width: JSON\n}\n\ntype GET_playlists__playlist_id_ItemsEntry {\n  added_at: DateTime\n  added_by: GET_playlists__playlist_id_AddedBy\n  is_local: Boolean\n  \"\"\"\n  Field \"primary_color\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  primary_color: JSON\n  track: GET_playlists__playlist_id_Track\n  video_thumbnail: GET_playlists__playlist_id_VideoThumbnail\n}\n\ntype GET_playlists__playlist_id_Owner {\n  display_name: String\n  external_urls: GET_playlists__playlist_id_ExternalUrls1\n  href: String\n  id: String\n  type: String\n  uri: String\n}\n\ntype GET_playlists__playlist_id_Root {\n  collaborative: Boolean\n  description: String\n  external_urls: GET_playlists__playlist_id_ExternalUrls\n  followers: GET_playlists__playlist_id_Followers\n  href: String\n  id: String\n  images: [GET_playlists__playlist_id_ImagesEntry]\n  name: String\n  owner: GET_playlists__playlist_id_Owner\n  \"\"\"\n  Field \"primary_color\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  primary_color: JSON\n  public: Boolean\n  snapshot_id: String\n  tracks: GET_playlists__playlist_id_Tracks\n  type: String\n  uri: String\n}\n\ntype GET_playlists__playlist_id_Track {\n  album: GET_playlists__playlist_id_Album\n  artists: [GET_playlists__playlist_id_Artists1Entry]\n  available_markets: [String]\n  disc_number: Int\n  duration_ms: Int\n  episode: Boolean\n  explicit: Boolean\n  external_ids: GET_playlists__playlist_id_ExternalIds\n  external_urls: GET_playlists__playlist_id_ExternalUrls6\n  href: String\n  id: String\n  is_local: Boolean\n  name: String\n  popularity: Int\n  preview_url: String\n  track: Boolean\n  track_number: Int\n  type: String\n  uri: String\n}\n\ntype GET_playlists__playlist_id_Tracks {\n  href: String\n  items: [GET_playlists__playlist_id_ItemsEntry]\n  limit: Int\n  \"\"\"\n  Field \"next\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  next: JSON\n  offset: Int\n  \"\"\"\n  Field \"previous\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  previous: JSON\n  total: Int\n}\n\ntype GET_playlists__playlist_id_VideoThumbnail {\n  \"\"\"\n  Field \"url\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  url: JSON\n}\n\ntype Query {\n  GET_playlists__playlist_id_(\n    playlist_id: String!\n    spotify_access_token: String!\n  ): GET_playlists__playlist_id_Root\n    @rest(\n      endpoint: \"https://api.spotify.com/v1/playlists/$playlist_id;\"\n      headers: [\n        { name: \"authorization\", value: \"Bearer $spotify_access_token;\" }\n      ]\n    )\n}\n", "utterance": "Make my first playlist private"}
{"domain": "spotify", "input": "Function Signatures:\n\n[{\"name\": \"GET_me_player_currently_playing\", \"description\": \"Get the track currently being played on the user's Spotify account.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"market\": {\"type\": \"string\", \"description\": \"An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).\\n  If a country code is specified, only content that is available in that market will be returned.<br/>\\n  If a valid user access token is specified in the request header, the country associated with\\n  the user account will take priority over this parameter.<br/>\\n  _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>\\n  Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).\\n\"}, \"additional_types\": {\"type\": \"string\", \"description\": \"A comma-separated list of item types that your client supports besides the default `track` type. Valid types are: `track` and `episode`.<br/>\\n_**Note**: This parameter was introduced to allow existing clients to maintain their current behaviour and might be deprecated in the future._<br/>\\nIn addition to providing this parameter, make sure that your client properly handles cases of new types in the future by checking against the `type` field of each object.\\n\"}}, \"required\": []}}, {\"name\": \"PUT_me_tracks\", \"description\": \"Save one or more tracks to the current user's 'Your Music' library.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"ids\": {\"type\": \"string\", \"description\": \"A comma-separated list of the [Spotify IDs](/documentation/web-api/#spotify-uris-and-ids). For example: `ids=4iV5W9uYEdYUVa79Axb7Rh,1301WleyT98MSxVHPZCA6M`. Maximum: 50 IDs.\\n\"}}, \"required\": [\"ids\"]}}]\n\nGraphQL schema:\n\ntype GET_me_player_currently_playing_Actions {\n  disallows: GET_me_player_currently_playing_Disallows\n}\n\ntype GET_me_player_currently_playing_Album {\n  album_type: String\n  artists: [GET_me_player_currently_playing_ArtistsEntry]\n  available_markets: [String]\n  external_urls: GET_me_player_currently_playing_ExternalUrls2\n  href: String\n  id: String\n  images: [GET_me_player_currently_playing_ImagesEntry]\n  name: String\n  release_date: Int\n  release_date_precision: String\n  total_tracks: Int\n  type: String\n  uri: String\n}\n\ntype GET_me_player_currently_playing_Artists1Entry {\n  external_urls: GET_me_player_currently_playing_ExternalUrls3\n  href: String\n  id: String\n  name: String\n  type: String\n  uri: String\n}\n\ntype GET_me_player_currently_playing_ArtistsEntry {\n  external_urls: GET_me_player_currently_playing_ExternalUrls1\n  href: String\n  id: String\n  name: String\n  type: String\n  uri: String\n}\n\ntype GET_me_player_currently_playing_Context {\n  external_urls: GET_me_player_currently_playing_ExternalUrls\n  href: String\n  type: String\n  uri: String\n}\n\ntype GET_me_player_currently_playing_Disallows {\n  resuming: Boolean\n}\n\ntype GET_me_player_currently_playing_ExternalIds {\n  isrc: String\n}\n\ntype GET_me_player_currently_playing_ExternalUrls {\n  spotify: String\n}\n\ntype GET_me_player_currently_playing_ExternalUrls1 {\n  spotify: String\n}\n\ntype GET_me_player_currently_playing_ExternalUrls2 {\n  spotify: String\n}\n\ntype GET_me_player_currently_playing_ExternalUrls3 {\n  spotify: String\n}\n\ntype GET_me_player_currently_playing_ExternalUrls4 {\n  spotify: String\n}\n\ntype GET_me_player_currently_playing_ImagesEntry {\n  height: Int\n  url: String\n  width: Int\n}\n\ntype GET_me_player_currently_playing_Item {\n  album: GET_me_player_currently_playing_Album\n  artists: [GET_me_player_currently_playing_Artists1Entry]\n  available_markets: [String]\n  disc_number: Int\n  duration_ms: Int\n  explicit: Boolean\n  external_ids: GET_me_player_currently_playing_ExternalIds\n  external_urls: GET_me_player_currently_playing_ExternalUrls4\n  href: String\n  id: String\n  is_local: Boolean\n  name: String\n  popularity: Int\n  preview_url: String\n  track_number: Int\n  type: String\n  uri: String\n}\n\ntype GET_me_player_currently_playing_Root {\n  actions: GET_me_player_currently_playing_Actions\n  context: GET_me_player_currently_playing_Context\n  currently_playing_type: String\n  is_playing: Boolean\n  item: GET_me_player_currently_playing_Item\n  progress_ms: Int\n  timestamp: ID\n}\n\ntype Query {\n  GET_me_player_currently_playing(\n    spotify_access_token: String!\n  ): GET_me_player_currently_playing_Root\n    @rest(\n      endpoint: \"https://api.spotify.com/v1/me/player/currently-playing\"\n      headers: [\n        { name: \"authorization\", value: \"Bearer $spotify_access_token;\" }\n      ]\n    )\n}\n\nUtterance: Put the song now being played into My Music", "output": "response_obj = GET_me_player_currently_playing()\nPUT_me_tracks(ids=response_obj.id)\n", "function_specs": "[{\"name\": \"GET_me_player_currently_playing\", \"description\": \"Get the track currently being played on the user's Spotify account.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"market\": {\"type\": \"string\", \"description\": \"An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).\\n  If a country code is specified, only content that is available in that market will be returned.<br/>\\n  If a valid user access token is specified in the request header, the country associated with\\n  the user account will take priority over this parameter.<br/>\\n  _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>\\n  Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).\\n\"}, \"additional_types\": {\"type\": \"string\", \"description\": \"A comma-separated list of item types that your client supports besides the default `track` type. Valid types are: `track` and `episode`.<br/>\\n_**Note**: This parameter was introduced to allow existing clients to maintain their current behaviour and might be deprecated in the future._<br/>\\nIn addition to providing this parameter, make sure that your client properly handles cases of new types in the future by checking against the `type` field of each object.\\n\"}}, \"required\": []}}, {\"name\": \"PUT_me_tracks\", \"description\": \"Save one or more tracks to the current user's 'Your Music' library.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"ids\": {\"type\": \"string\", \"description\": \"A comma-separated list of the [Spotify IDs](/documentation/web-api/#spotify-uris-and-ids). For example: `ids=4iV5W9uYEdYUVa79Axb7Rh,1301WleyT98MSxVHPZCA6M`. Maximum: 50 IDs.\\n\"}}, \"required\": [\"ids\"]}}]", "GraphQL_schema": "type GET_me_player_currently_playing_Actions {\n  disallows: GET_me_player_currently_playing_Disallows\n}\n\ntype GET_me_player_currently_playing_Album {\n  album_type: String\n  artists: [GET_me_player_currently_playing_ArtistsEntry]\n  available_markets: [String]\n  external_urls: GET_me_player_currently_playing_ExternalUrls2\n  href: String\n  id: String\n  images: [GET_me_player_currently_playing_ImagesEntry]\n  name: String\n  release_date: Int\n  release_date_precision: String\n  total_tracks: Int\n  type: String\n  uri: String\n}\n\ntype GET_me_player_currently_playing_Artists1Entry {\n  external_urls: GET_me_player_currently_playing_ExternalUrls3\n  href: String\n  id: String\n  name: String\n  type: String\n  uri: String\n}\n\ntype GET_me_player_currently_playing_ArtistsEntry {\n  external_urls: GET_me_player_currently_playing_ExternalUrls1\n  href: String\n  id: String\n  name: String\n  type: String\n  uri: String\n}\n\ntype GET_me_player_currently_playing_Context {\n  external_urls: GET_me_player_currently_playing_ExternalUrls\n  href: String\n  type: String\n  uri: String\n}\n\ntype GET_me_player_currently_playing_Disallows {\n  resuming: Boolean\n}\n\ntype GET_me_player_currently_playing_ExternalIds {\n  isrc: String\n}\n\ntype GET_me_player_currently_playing_ExternalUrls {\n  spotify: String\n}\n\ntype GET_me_player_currently_playing_ExternalUrls1 {\n  spotify: String\n}\n\ntype GET_me_player_currently_playing_ExternalUrls2 {\n  spotify: String\n}\n\ntype GET_me_player_currently_playing_ExternalUrls3 {\n  spotify: String\n}\n\ntype GET_me_player_currently_playing_ExternalUrls4 {\n  spotify: String\n}\n\ntype GET_me_player_currently_playing_ImagesEntry {\n  height: Int\n  url: String\n  width: Int\n}\n\ntype GET_me_player_currently_playing_Item {\n  album: GET_me_player_currently_playing_Album\n  artists: [GET_me_player_currently_playing_Artists1Entry]\n  available_markets: [String]\n  disc_number: Int\n  duration_ms: Int\n  explicit: Boolean\n  external_ids: GET_me_player_currently_playing_ExternalIds\n  external_urls: GET_me_player_currently_playing_ExternalUrls4\n  href: String\n  id: String\n  is_local: Boolean\n  name: String\n  popularity: Int\n  preview_url: String\n  track_number: Int\n  type: String\n  uri: String\n}\n\ntype GET_me_player_currently_playing_Root {\n  actions: GET_me_player_currently_playing_Actions\n  context: GET_me_player_currently_playing_Context\n  currently_playing_type: String\n  is_playing: Boolean\n  item: GET_me_player_currently_playing_Item\n  progress_ms: Int\n  timestamp: ID\n}\n\ntype Query {\n  GET_me_player_currently_playing(\n    spotify_access_token: String!\n  ): GET_me_player_currently_playing_Root\n    @rest(\n      endpoint: \"https://api.spotify.com/v1/me/player/currently-playing\"\n      headers: [\n        { name: \"authorization\", value: \"Bearer $spotify_access_token;\" }\n      ]\n    )\n}\n", "utterance": "Put the song now being played into My Music"}
{"domain": "spotify", "input": "Function Signatures:\n\n[{\"name\": \"GET_me_player_currently_playing\", \"description\": \"Get the track currently being played on the user's Spotify account.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"market\": {\"type\": \"string\", \"description\": \"An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).\\n  If a country code is specified, only content that is available in that market will be returned.<br/>\\n  If a valid user access token is specified in the request header, the country associated with\\n  the user account will take priority over this parameter.<br/>\\n  _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>\\n  Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).\\n\"}, \"additional_types\": {\"type\": \"string\", \"description\": \"A comma-separated list of item types that your client supports besides the default `track` type. Valid types are: `track` and `episode`.<br/>\\n_**Note**: This parameter was introduced to allow existing clients to maintain their current behaviour and might be deprecated in the future._<br/>\\nIn addition to providing this parameter, make sure that your client properly handles cases of new types in the future by checking against the `type` field of each object.\\n\"}}, \"required\": []}}]\n\nGraphQL schema:\n\ntype GET_me_player_currently_playing_Actions {\n  disallows: GET_me_player_currently_playing_Disallows\n}\n\ntype GET_me_player_currently_playing_Album {\n  album_type: String\n  artists: [GET_me_player_currently_playing_ArtistsEntry]\n  available_markets: [String]\n  external_urls: GET_me_player_currently_playing_ExternalUrls2\n  href: String\n  id: String\n  images: [GET_me_player_currently_playing_ImagesEntry]\n  name: String\n  release_date: Int\n  release_date_precision: String\n  total_tracks: Int\n  type: String\n  uri: String\n}\n\ntype GET_me_player_currently_playing_Artists1Entry {\n  external_urls: GET_me_player_currently_playing_ExternalUrls3\n  href: String\n  id: String\n  name: String\n  type: String\n  uri: String\n}\n\ntype GET_me_player_currently_playing_ArtistsEntry {\n  external_urls: GET_me_player_currently_playing_ExternalUrls1\n  href: String\n  id: String\n  name: String\n  type: String\n  uri: String\n}\n\ntype GET_me_player_currently_playing_Context {\n  external_urls: GET_me_player_currently_playing_ExternalUrls\n  href: String\n  type: String\n  uri: String\n}\n\ntype GET_me_player_currently_playing_Disallows {\n  resuming: Boolean\n}\n\ntype GET_me_player_currently_playing_ExternalIds {\n  isrc: String\n}\n\ntype GET_me_player_currently_playing_ExternalUrls {\n  spotify: String\n}\n\ntype GET_me_player_currently_playing_ExternalUrls1 {\n  spotify: String\n}\n\ntype GET_me_player_currently_playing_ExternalUrls2 {\n  spotify: String\n}\n\ntype GET_me_player_currently_playing_ExternalUrls3 {\n  spotify: String\n}\n\ntype GET_me_player_currently_playing_ExternalUrls4 {\n  spotify: String\n}\n\ntype GET_me_player_currently_playing_ImagesEntry {\n  height: Int\n  url: String\n  width: Int\n}\n\ntype GET_me_player_currently_playing_Item {\n  album: GET_me_player_currently_playing_Album\n  artists: [GET_me_player_currently_playing_Artists1Entry]\n  available_markets: [String]\n  disc_number: Int\n  duration_ms: Int\n  explicit: Boolean\n  external_ids: GET_me_player_currently_playing_ExternalIds\n  external_urls: GET_me_player_currently_playing_ExternalUrls4\n  href: String\n  id: String\n  is_local: Boolean\n  name: String\n  popularity: Int\n  preview_url: String\n  track_number: Int\n  type: String\n  uri: String\n}\n\ntype GET_me_player_currently_playing_Root {\n  actions: GET_me_player_currently_playing_Actions\n  context: GET_me_player_currently_playing_Context\n  currently_playing_type: String\n  is_playing: Boolean\n  item: GET_me_player_currently_playing_Item\n  progress_ms: Int\n  timestamp: ID\n}\n\ntype Query {\n  GET_me_player_currently_playing(\n    spotify_access_token: String!\n  ): GET_me_player_currently_playing_Root\n    @rest(\n      endpoint: \"https://api.spotify.com/v1/me/player/currently-playing\"\n      headers: [\n        { name: \"authorization\", value: \"Bearer $spotify_access_token;\" }\n      ]\n    )\n}\n\nUtterance: What is the name of the song I playing right now?", "output": "GET_me_player_currently_playing()\n", "function_specs": "[{\"name\": \"GET_me_player_currently_playing\", \"description\": \"Get the track currently being played on the user's Spotify account.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"market\": {\"type\": \"string\", \"description\": \"An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).\\n  If a country code is specified, only content that is available in that market will be returned.<br/>\\n  If a valid user access token is specified in the request header, the country associated with\\n  the user account will take priority over this parameter.<br/>\\n  _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>\\n  Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).\\n\"}, \"additional_types\": {\"type\": \"string\", \"description\": \"A comma-separated list of item types that your client supports besides the default `track` type. Valid types are: `track` and `episode`.<br/>\\n_**Note**: This parameter was introduced to allow existing clients to maintain their current behaviour and might be deprecated in the future._<br/>\\nIn addition to providing this parameter, make sure that your client properly handles cases of new types in the future by checking against the `type` field of each object.\\n\"}}, \"required\": []}}]", "GraphQL_schema": "type GET_me_player_currently_playing_Actions {\n  disallows: GET_me_player_currently_playing_Disallows\n}\n\ntype GET_me_player_currently_playing_Album {\n  album_type: String\n  artists: [GET_me_player_currently_playing_ArtistsEntry]\n  available_markets: [String]\n  external_urls: GET_me_player_currently_playing_ExternalUrls2\n  href: String\n  id: String\n  images: [GET_me_player_currently_playing_ImagesEntry]\n  name: String\n  release_date: Int\n  release_date_precision: String\n  total_tracks: Int\n  type: String\n  uri: String\n}\n\ntype GET_me_player_currently_playing_Artists1Entry {\n  external_urls: GET_me_player_currently_playing_ExternalUrls3\n  href: String\n  id: String\n  name: String\n  type: String\n  uri: String\n}\n\ntype GET_me_player_currently_playing_ArtistsEntry {\n  external_urls: GET_me_player_currently_playing_ExternalUrls1\n  href: String\n  id: String\n  name: String\n  type: String\n  uri: String\n}\n\ntype GET_me_player_currently_playing_Context {\n  external_urls: GET_me_player_currently_playing_ExternalUrls\n  href: String\n  type: String\n  uri: String\n}\n\ntype GET_me_player_currently_playing_Disallows {\n  resuming: Boolean\n}\n\ntype GET_me_player_currently_playing_ExternalIds {\n  isrc: String\n}\n\ntype GET_me_player_currently_playing_ExternalUrls {\n  spotify: String\n}\n\ntype GET_me_player_currently_playing_ExternalUrls1 {\n  spotify: String\n}\n\ntype GET_me_player_currently_playing_ExternalUrls2 {\n  spotify: String\n}\n\ntype GET_me_player_currently_playing_ExternalUrls3 {\n  spotify: String\n}\n\ntype GET_me_player_currently_playing_ExternalUrls4 {\n  spotify: String\n}\n\ntype GET_me_player_currently_playing_ImagesEntry {\n  height: Int\n  url: String\n  width: Int\n}\n\ntype GET_me_player_currently_playing_Item {\n  album: GET_me_player_currently_playing_Album\n  artists: [GET_me_player_currently_playing_Artists1Entry]\n  available_markets: [String]\n  disc_number: Int\n  duration_ms: Int\n  explicit: Boolean\n  external_ids: GET_me_player_currently_playing_ExternalIds\n  external_urls: GET_me_player_currently_playing_ExternalUrls4\n  href: String\n  id: String\n  is_local: Boolean\n  name: String\n  popularity: Int\n  preview_url: String\n  track_number: Int\n  type: String\n  uri: String\n}\n\ntype GET_me_player_currently_playing_Root {\n  actions: GET_me_player_currently_playing_Actions\n  context: GET_me_player_currently_playing_Context\n  currently_playing_type: String\n  is_playing: Boolean\n  item: GET_me_player_currently_playing_Item\n  progress_ms: Int\n  timestamp: ID\n}\n\ntype Query {\n  GET_me_player_currently_playing(\n    spotify_access_token: String!\n  ): GET_me_player_currently_playing_Root\n    @rest(\n      endpoint: \"https://api.spotify.com/v1/me/player/currently-playing\"\n      headers: [\n        { name: \"authorization\", value: \"Bearer $spotify_access_token;\" }\n      ]\n    )\n}\n", "utterance": "What is the name of the song I playing right now?"}
{"domain": "spotify", "input": "Function Signatures:\n\n[{\"name\": \"PUT_me_player_pause\", \"description\": \"Pause playback on the user's account.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {}, \"required\": []}}, {\"name\": \"PUT_me_player_volume\", \"description\": \"Set the volume for the user\\u2019s current playback device.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"volume_percent\": {\"type\": \"integer\", \"description\": \"The volume to set. Must be a value from 0 to 100 inclusive.\\n\"}}, \"required\": [\"volume_percent\"]}}, {\"name\": \"POST_me_player_next\", \"description\": \"Skips to next track in the user\\u2019s queue.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {}, \"required\": []}}]\n\nGraphQL schema:\n\n\nUtterance: Pause playback, increase volume to 80 and switch to the next song", "output": "PUT_me_player_pause()\nPUT_me_player_volume(volume_percent=80)\nPOST_me_player_next()\n", "function_specs": "[{\"name\": \"PUT_me_player_pause\", \"description\": \"Pause playback on the user's account.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {}, \"required\": []}}, {\"name\": \"PUT_me_player_volume\", \"description\": \"Set the volume for the user\\u2019s current playback device.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"volume_percent\": {\"type\": \"integer\", \"description\": \"The volume to set. Must be a value from 0 to 100 inclusive.\\n\"}}, \"required\": [\"volume_percent\"]}}, {\"name\": \"POST_me_player_next\", \"description\": \"Skips to next track in the user\\u2019s queue.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {}, \"required\": []}}]", "GraphQL_schema": "", "utterance": "Pause playback, increase volume to 80 and switch to the next song"}
{"domain": "spotify", "input": "Function Signatures:\n\n[{\"name\": \"GET_me_player_currently_playing\", \"description\": \"Get the track currently being played on the user's Spotify account.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"market\": {\"type\": \"string\", \"description\": \"An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).\\n  If a country code is specified, only content that is available in that market will be returned.<br/>\\n  If a valid user access token is specified in the request header, the country associated with\\n  the user account will take priority over this parameter.<br/>\\n  _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>\\n  Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).\\n\"}, \"additional_types\": {\"type\": \"string\", \"description\": \"A comma-separated list of item types that your client supports besides the default `track` type. Valid types are: `track` and `episode`.<br/>\\n_**Note**: This parameter was introduced to allow existing clients to maintain their current behaviour and might be deprecated in the future._<br/>\\nIn addition to providing this parameter, make sure that your client properly handles cases of new types in the future by checking against the `type` field of each object.\\n\"}}, \"required\": []}}, {\"name\": \"DELETE_me_following\", \"description\": \"Remove the current user as a follower of one or more artists or other Spotify users.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"type\": {\"type\": \"string\", \"description\": \"The ID type: either `artist` or `user`.\\n\"}, \"ids\": {\"type\": \"string\", \"description\": \"A comma-separated list of the artist or the user [Spotify IDs](/documentation/web-api/#spotify-uris-and-ids). For example: `ids=74ASZWbe4lXaubB36ztrGX,08td7MxkoHQkXnWAYD8d6Q`. A maximum of 50 IDs can be sent in one request.\\n\"}}, \"required\": [\"type\", \"ids\"]}}, {\"name\": \"POST_me_player_next\", \"description\": \"Skips to next track in the user\\u2019s queue.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {}, \"required\": []}}]\n\nGraphQL schema:\n\ntype GET_me_player_currently_playing_Actions {\n  disallows: GET_me_player_currently_playing_Disallows\n}\n\ntype GET_me_player_currently_playing_Album {\n  album_type: String\n  artists: [GET_me_player_currently_playing_ArtistsEntry]\n  available_markets: [String]\n  external_urls: GET_me_player_currently_playing_ExternalUrls2\n  href: String\n  id: String\n  images: [GET_me_player_currently_playing_ImagesEntry]\n  name: String\n  release_date: Int\n  release_date_precision: String\n  total_tracks: Int\n  type: String\n  uri: String\n}\n\ntype GET_me_player_currently_playing_Artists1Entry {\n  external_urls: GET_me_player_currently_playing_ExternalUrls3\n  href: String\n  id: String\n  name: String\n  type: String\n  uri: String\n}\n\ntype GET_me_player_currently_playing_ArtistsEntry {\n  external_urls: GET_me_player_currently_playing_ExternalUrls1\n  href: String\n  id: String\n  name: String\n  type: String\n  uri: String\n}\n\ntype GET_me_player_currently_playing_Context {\n  external_urls: GET_me_player_currently_playing_ExternalUrls\n  href: String\n  type: String\n  uri: String\n}\n\ntype GET_me_player_currently_playing_Disallows {\n  resuming: Boolean\n}\n\ntype GET_me_player_currently_playing_ExternalIds {\n  isrc: String\n}\n\ntype GET_me_player_currently_playing_ExternalUrls {\n  spotify: String\n}\n\ntype GET_me_player_currently_playing_ExternalUrls1 {\n  spotify: String\n}\n\ntype GET_me_player_currently_playing_ExternalUrls2 {\n  spotify: String\n}\n\ntype GET_me_player_currently_playing_ExternalUrls3 {\n  spotify: String\n}\n\ntype GET_me_player_currently_playing_ExternalUrls4 {\n  spotify: String\n}\n\ntype GET_me_player_currently_playing_ImagesEntry {\n  height: Int\n  url: String\n  width: Int\n}\n\ntype GET_me_player_currently_playing_Item {\n  album: GET_me_player_currently_playing_Album\n  artists: [GET_me_player_currently_playing_Artists1Entry]\n  available_markets: [String]\n  disc_number: Int\n  duration_ms: Int\n  explicit: Boolean\n  external_ids: GET_me_player_currently_playing_ExternalIds\n  external_urls: GET_me_player_currently_playing_ExternalUrls4\n  href: String\n  id: String\n  is_local: Boolean\n  name: String\n  popularity: Int\n  preview_url: String\n  track_number: Int\n  type: String\n  uri: String\n}\n\ntype GET_me_player_currently_playing_Root {\n  actions: GET_me_player_currently_playing_Actions\n  context: GET_me_player_currently_playing_Context\n  currently_playing_type: String\n  is_playing: Boolean\n  item: GET_me_player_currently_playing_Item\n  progress_ms: Int\n  timestamp: ID\n}\n\ntype Query {\n  GET_me_player_currently_playing(\n    spotify_access_token: String!\n  ): GET_me_player_currently_playing_Root\n    @rest(\n      endpoint: \"https://api.spotify.com/v1/me/player/currently-playing\"\n      headers: [\n        { name: \"authorization\", value: \"Bearer $spotify_access_token;\" }\n      ]\n    )\n}\n\nUtterance: Unfollow the artist of the song now playing and skip to the next song", "output": "response_obj = GET_me_player_currently_playing()\nDELETE_me_following(type=\"artist\", ids=\",\".join([artist.id for artist in response_obj.item.artists]))\nPOST_me_player_next()\n", "function_specs": "[{\"name\": \"GET_me_player_currently_playing\", \"description\": \"Get the track currently being played on the user's Spotify account.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"market\": {\"type\": \"string\", \"description\": \"An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).\\n  If a country code is specified, only content that is available in that market will be returned.<br/>\\n  If a valid user access token is specified in the request header, the country associated with\\n  the user account will take priority over this parameter.<br/>\\n  _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>\\n  Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).\\n\"}, \"additional_types\": {\"type\": \"string\", \"description\": \"A comma-separated list of item types that your client supports besides the default `track` type. Valid types are: `track` and `episode`.<br/>\\n_**Note**: This parameter was introduced to allow existing clients to maintain their current behaviour and might be deprecated in the future._<br/>\\nIn addition to providing this parameter, make sure that your client properly handles cases of new types in the future by checking against the `type` field of each object.\\n\"}}, \"required\": []}}, {\"name\": \"DELETE_me_following\", \"description\": \"Remove the current user as a follower of one or more artists or other Spotify users.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"type\": {\"type\": \"string\", \"description\": \"The ID type: either `artist` or `user`.\\n\"}, \"ids\": {\"type\": \"string\", \"description\": \"A comma-separated list of the artist or the user [Spotify IDs](/documentation/web-api/#spotify-uris-and-ids). For example: `ids=74ASZWbe4lXaubB36ztrGX,08td7MxkoHQkXnWAYD8d6Q`. A maximum of 50 IDs can be sent in one request.\\n\"}}, \"required\": [\"type\", \"ids\"]}}, {\"name\": \"POST_me_player_next\", \"description\": \"Skips to next track in the user\\u2019s queue.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {}, \"required\": []}}]", "GraphQL_schema": "type GET_me_player_currently_playing_Actions {\n  disallows: GET_me_player_currently_playing_Disallows\n}\n\ntype GET_me_player_currently_playing_Album {\n  album_type: String\n  artists: [GET_me_player_currently_playing_ArtistsEntry]\n  available_markets: [String]\n  external_urls: GET_me_player_currently_playing_ExternalUrls2\n  href: String\n  id: String\n  images: [GET_me_player_currently_playing_ImagesEntry]\n  name: String\n  release_date: Int\n  release_date_precision: String\n  total_tracks: Int\n  type: String\n  uri: String\n}\n\ntype GET_me_player_currently_playing_Artists1Entry {\n  external_urls: GET_me_player_currently_playing_ExternalUrls3\n  href: String\n  id: String\n  name: String\n  type: String\n  uri: String\n}\n\ntype GET_me_player_currently_playing_ArtistsEntry {\n  external_urls: GET_me_player_currently_playing_ExternalUrls1\n  href: String\n  id: String\n  name: String\n  type: String\n  uri: String\n}\n\ntype GET_me_player_currently_playing_Context {\n  external_urls: GET_me_player_currently_playing_ExternalUrls\n  href: String\n  type: String\n  uri: String\n}\n\ntype GET_me_player_currently_playing_Disallows {\n  resuming: Boolean\n}\n\ntype GET_me_player_currently_playing_ExternalIds {\n  isrc: String\n}\n\ntype GET_me_player_currently_playing_ExternalUrls {\n  spotify: String\n}\n\ntype GET_me_player_currently_playing_ExternalUrls1 {\n  spotify: String\n}\n\ntype GET_me_player_currently_playing_ExternalUrls2 {\n  spotify: String\n}\n\ntype GET_me_player_currently_playing_ExternalUrls3 {\n  spotify: String\n}\n\ntype GET_me_player_currently_playing_ExternalUrls4 {\n  spotify: String\n}\n\ntype GET_me_player_currently_playing_ImagesEntry {\n  height: Int\n  url: String\n  width: Int\n}\n\ntype GET_me_player_currently_playing_Item {\n  album: GET_me_player_currently_playing_Album\n  artists: [GET_me_player_currently_playing_Artists1Entry]\n  available_markets: [String]\n  disc_number: Int\n  duration_ms: Int\n  explicit: Boolean\n  external_ids: GET_me_player_currently_playing_ExternalIds\n  external_urls: GET_me_player_currently_playing_ExternalUrls4\n  href: String\n  id: String\n  is_local: Boolean\n  name: String\n  popularity: Int\n  preview_url: String\n  track_number: Int\n  type: String\n  uri: String\n}\n\ntype GET_me_player_currently_playing_Root {\n  actions: GET_me_player_currently_playing_Actions\n  context: GET_me_player_currently_playing_Context\n  currently_playing_type: String\n  is_playing: Boolean\n  item: GET_me_player_currently_playing_Item\n  progress_ms: Int\n  timestamp: ID\n}\n\ntype Query {\n  GET_me_player_currently_playing(\n    spotify_access_token: String!\n  ): GET_me_player_currently_playing_Root\n    @rest(\n      endpoint: \"https://api.spotify.com/v1/me/player/currently-playing\"\n      headers: [\n        { name: \"authorization\", value: \"Bearer $spotify_access_token;\" }\n      ]\n    )\n}\n", "utterance": "Unfollow the artist of the song now playing and skip to the next song"}
{"domain": "spotify", "input": "Function Signatures:\n\n[{\"name\": \"GET_me\", \"description\": \"Get detailed profile information about the current user (including the\\ncurrent user's username).\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {}, \"required\": []}}, {\"name\": \"POST_users__user_id__playlists\", \"description\": \"Create a playlist for a Spotify user (Before calling this API, must call GET /me first to get the user_id). (The playlist will be empty until\\nyou [add tracks](/documentation/web-api/reference/#/operations/add-tracks-to-playlist).)\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"user_id\": {\"type\": \"string\", \"description\": \"The user's [Spotify user ID](/documentation/web-api/#spotify-uris-and-ids).\\n\"}, \"name\": {\"type\": \"string\", \"description\": \"The name for the new playlist, for example \\\"Your Coolest Playlist\\\". This name does not need to be unique; a user may have several playlists with the same name.\"}, \"public\": {\"type\": \"boolean\", \"description\": \"Defaults to true. If true the playlist will be public, if false it will be private. To be able to create private playlists, the user must have granted the playlist-modify-private scope\"}, \"collaborative\": {\"type\": \"boolean\", \"description\": \"Defaults to false. If true the playlist will be collaborative. Note: to create a collaborative playlist you must also set public to false. To create collaborative playlists you must have granted playlist-modify-private and playlist-modify-public scopes.\"}, \"description\": {\"type\": \"string\", \"description\": \"value for playlist description as displayed in Spotify Clients and in the Web API.\"}}, \"required\": [\"user_id\", \"name\"], \"body_params\": [\"name\", \"public\", \"collaborative\", \"description\"]}}]\n\nGraphQL schema:\n\ntype GET_me_ExplicitContent {\n  filter_enabled: Boolean\n  filter_locked: Boolean\n}\n\ntype GET_me_ExternalUrls {\n  spotify: String\n}\n\ntype GET_me_Followers {\n  \"\"\"\n  Field \"href\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  href: JSON\n  total: Int\n}\n\ntype GET_me_Root {\n  country: String\n  display_name: String\n  email: String\n  explicit_content: GET_me_ExplicitContent\n  external_urls: GET_me_ExternalUrls\n  followers: GET_me_Followers\n  href: String\n  id: String\n  images: [JSON]\n  product: String\n  type: String\n  uri: String\n}\n\ntype Query {\n  GET_me(spotify_access_token: String!): GET_me_Root\n    @rest(\n      endpoint: \"https://api.spotify.com/v1/me\"\n      headers: [\n        { name: \"authorization\", value: \"Bearer $spotify_access_token;\" }\n      ]\n    )\n}\n\nUtterance: Create a new playlist and name it Quiet", "output": "response_obj = GET_me()\nPOST_users__user_id__playlists(user_id=response_obj.id, name=\"Quiet\")\n", "function_specs": "[{\"name\": \"GET_me\", \"description\": \"Get detailed profile information about the current user (including the\\ncurrent user's username).\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {}, \"required\": []}}, {\"name\": \"POST_users__user_id__playlists\", \"description\": \"Create a playlist for a Spotify user (Before calling this API, must call GET /me first to get the user_id). (The playlist will be empty until\\nyou [add tracks](/documentation/web-api/reference/#/operations/add-tracks-to-playlist).)\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"user_id\": {\"type\": \"string\", \"description\": \"The user's [Spotify user ID](/documentation/web-api/#spotify-uris-and-ids).\\n\"}, \"name\": {\"type\": \"string\", \"description\": \"The name for the new playlist, for example \\\"Your Coolest Playlist\\\". This name does not need to be unique; a user may have several playlists with the same name.\"}, \"public\": {\"type\": \"boolean\", \"description\": \"Defaults to true. If true the playlist will be public, if false it will be private. To be able to create private playlists, the user must have granted the playlist-modify-private scope\"}, \"collaborative\": {\"type\": \"boolean\", \"description\": \"Defaults to false. If true the playlist will be collaborative. Note: to create a collaborative playlist you must also set public to false. To create collaborative playlists you must have granted playlist-modify-private and playlist-modify-public scopes.\"}, \"description\": {\"type\": \"string\", \"description\": \"value for playlist description as displayed in Spotify Clients and in the Web API.\"}}, \"required\": [\"user_id\", \"name\"], \"body_params\": [\"name\", \"public\", \"collaborative\", \"description\"]}}]", "GraphQL_schema": "type GET_me_ExplicitContent {\n  filter_enabled: Boolean\n  filter_locked: Boolean\n}\n\ntype GET_me_ExternalUrls {\n  spotify: String\n}\n\ntype GET_me_Followers {\n  \"\"\"\n  Field \"href\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  href: JSON\n  total: Int\n}\n\ntype GET_me_Root {\n  country: String\n  display_name: String\n  email: String\n  explicit_content: GET_me_ExplicitContent\n  external_urls: GET_me_ExternalUrls\n  followers: GET_me_Followers\n  href: String\n  id: String\n  images: [JSON]\n  product: String\n  type: String\n  uri: String\n}\n\ntype Query {\n  GET_me(spotify_access_token: String!): GET_me_Root\n    @rest(\n      endpoint: \"https://api.spotify.com/v1/me\"\n      headers: [\n        { name: \"authorization\", value: \"Bearer $spotify_access_token;\" }\n      ]\n    )\n}\n", "utterance": "Create a new playlist and name it Quiet"}
{"domain": "spotify", "input": "Function Signatures:\n\n[{\"name\": \"GET_me\", \"description\": \"Get detailed profile information about the current user (including the\\ncurrent user's username).\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {}, \"required\": []}}, {\"name\": \"POST_users__user_id__playlists\", \"description\": \"Create a playlist for a Spotify user (Before calling this API, must call GET /me first to get the user_id). (The playlist will be empty until\\nyou [add tracks](/documentation/web-api/reference/#/operations/add-tracks-to-playlist).)\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"user_id\": {\"type\": \"string\", \"description\": \"The user's [Spotify user ID](/documentation/web-api/#spotify-uris-and-ids).\\n\"}, \"name\": {\"type\": \"string\", \"description\": \"The name for the new playlist, for example \\\"Your Coolest Playlist\\\". This name does not need to be unique; a user may have several playlists with the same name.\"}, \"public\": {\"type\": \"boolean\", \"description\": \"Defaults to true. If true the playlist will be public, if false it will be private. To be able to create private playlists, the user must have granted the playlist-modify-private scope\"}, \"collaborative\": {\"type\": \"boolean\", \"description\": \"Defaults to false. If true the playlist will be collaborative. Note: to create a collaborative playlist you must also set public to false. To create collaborative playlists you must have granted playlist-modify-private and playlist-modify-public scopes.\"}, \"description\": {\"type\": \"string\", \"description\": \"value for playlist description as displayed in Spotify Clients and in the Web API.\"}}, \"required\": [\"user_id\", \"name\"], \"body_params\": [\"name\", \"public\", \"collaborative\", \"description\"]}}, {\"name\": \"GET_search\", \"description\": \"Get Spotify catalog information about albums, artists, playlists, tracks, shows, episodes or audiobooks\\nthat match a keyword string.<br />\\n**Note: Audiobooks are only available for the US, UK, Ireland, New Zealand and Australia markets.**\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"q\": {\"type\": \"string\", \"description\": \"Your search query.\\n\\nYou can narrow down your search using field filters. The available filters are `album`, `artist`, `track`, `year`, `upc`, `tag:hipster`, `tag:new`, `isrc`, and `genre`. Each field filter only applies to certain result types.\\n\\nThe `artist` and `year` filters can be used while searching albums, artists and tracks. You can filter on a single `year` or a range (e.g. 1955-1960).<br />\\nThe `album` filter can be used while searching albums and tracks.<br />\\nThe `genre` filter can be used while searching artists and tracks.<br />\\nThe `isrc` and `track` filters can be used while searching tracks.<br />\\nThe `upc`, `tag:new` and `tag:hipster` filters can only be used while searching albums. The `tag:new` filter will return albums released in the past two weeks and `tag:hipster` can be used to return only albums with the lowest 10% popularity.<br />\\n\"}, \"type\": {\"type\": \"array\", \"description\": \"A comma-separated list of item types to search across. Search results include hits\\nfrom all the specified item types. For example: `q=abacab&type=album,track` returns\\nboth albums and tracks matching \\\"abacab\\\".\\n\"}, \"market\": {\"type\": \"string\", \"description\": \"An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).\\n  If a country code is specified, only content that is available in that market will be returned.<br/>\\n  If a valid user access token is specified in the request header, the country associated with\\n  the user account will take priority over this parameter.<br/>\\n  _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>\\n  Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).\\n\"}, \"limit\": {\"type\": \"integer\", \"description\": \"The maximum number of results to return in each item type.\\n\"}, \"offset\": {\"type\": \"integer\", \"description\": \"The index of the first result to return. Use\\nwith limit to get the next page of search results.\\n\"}, \"include_external\": {\"type\": \"string\", \"description\": \"If `include_external=audio` is specified it signals that the client can play externally hosted audio content, and marks\\nthe content as playable in the response. By default externally hosted audio content is marked as unplayable in the response.\\n\"}}, \"required\": [\"q\", \"type\"]}}, {\"name\": \"POST_playlists__playlist_id__tracks\", \"description\": \"Add one or more items to a user's playlist.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"playlist_id\": {\"type\": \"string\", \"description\": \"The [Spotify ID](/documentation/web-api/#spotify-uris-and-ids) of the playlist.\\n\"}, \"position\": {\"type\": \"integer\", \"description\": \"The position to insert the items, a zero-based index. For example, to insert the items in the first position: `position=0`; to insert the items in the third position: `position=2`. If omitted, the items will be appended to the playlist. Items are added in the order they are listed in the query string or request body.\\n\"}, \"uris\": {\"type\": \"string\", \"description\": \"A comma-separated list of [Spotify URIs](/documentation/web-api/#spotify-uris-and-ids) to add, can be track or episode URIs. For example:<br/>`uris=spotify:track:4iV5W9uYEdYUVa79Axb7Rh, spotify:track:1301WleyT98MSxVHPZCA6M, spotify:episode:512ojhOuo1ktJprKbVcKyQ`<br/>A maximum of 100 items can be added in one request. <br/>\\n_**Note**: it is likely that passing a large number of item URIs as a query parameter will exceed the maximum length of the request URI. When adding a large number of items, it is recommended to pass them in the request body, see below._\\n\"}}, \"required\": [\"playlist_id\"]}}]\n\nGraphQL schema:\n\ntype POST_users__user_id__playlists_ExternalUrls {\n  spotify: String\n}\n\ntype POST_users__user_id__playlists_ExternalUrls1 {\n  spotify: String\n}\n\ntype POST_users__user_id__playlists_Followers {\n  \"\"\"\n  Field \"href\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  href: JSON\n  total: Int\n}\n\ntype POST_users__user_id__playlists_Owner {\n  \"\"\"\n  Field \"display_name\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  display_name: JSON\n  external_urls: POST_users__user_id__playlists_ExternalUrls1\n  href: String\n  id: String\n  type: String\n  uri: String\n}\n\ntype POST_users__user_id__playlists_Root {\n  collaborative: Boolean\n  \"\"\"\n  Field \"description\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  description: JSON\n  external_urls: POST_users__user_id__playlists_ExternalUrls\n  followers: POST_users__user_id__playlists_Followers\n  href: String\n  id: String\n  images: [JSON]\n  name: String\n  owner: POST_users__user_id__playlists_Owner\n  \"\"\"\n  Field \"primary_color\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  primary_color: JSON\n  public: Boolean\n  snapshot_id: String\n  tracks: POST_users__user_id__playlists_Tracks\n  type: String\n  uri: String\n}\n\ntype POST_users__user_id__playlists_Tracks {\n  href: String\n  items: [JSON]\n  limit: Int\n  \"\"\"\n  Field \"next\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  next: JSON\n  offset: Int\n  \"\"\"\n  Field \"previous\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  previous: JSON\n  total: Int\n}\n\ntype Query {\n  POST_users__user_id__playlists(\n    name: String\n    spotify_access_token: String!\n  ): POST_users__user_id__playlists_Root\n    @rest(\n      method: POST\n      endpoint: \"https://api.spotify.com/v1/users/31rph2hasdr2pflu7x5sffw4xxgy/playlists\"\n      headers: [\n        { name: \"authorization\", value: \"Bearer $spotify_access_token;\" }\n      ]\n    )\n}\ntype GET_me_ExplicitContent {\n  filter_enabled: Boolean\n  filter_locked: Boolean\n}\n\ntype GET_me_ExternalUrls {\n  spotify: String\n}\n\ntype GET_me_Followers {\n  \"\"\"\n  Field \"href\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  href: JSON\n  total: Int\n}\n\ntype GET_me_Root {\n  country: String\n  display_name: String\n  email: String\n  explicit_content: GET_me_ExplicitContent\n  external_urls: GET_me_ExternalUrls\n  followers: GET_me_Followers\n  href: String\n  id: String\n  images: [JSON]\n  product: String\n  type: String\n  uri: String\n}\n\ntype Query {\n  GET_me(spotify_access_token: String!): GET_me_Root\n    @rest(\n      endpoint: \"https://api.spotify.com/v1/me\"\n      headers: [\n        { name: \"authorization\", value: \"Bearer $spotify_access_token;\" }\n      ]\n    )\n}\ntype GET_search_Album {\n  album_type: String\n  artists: [GET_search_ArtistsEntry]\n  available_markets: [String]\n  external_urls: GET_search_ExternalUrls1\n  href: String\n  id: String\n  images: [GET_search_ImagesEntry]\n  name: String\n  release_date: Date\n  release_date_precision: String\n  total_tracks: Int\n  type: String\n  uri: String\n}\n\ntype GET_search_Artists1Entry {\n  external_urls: GET_search_ExternalUrls2\n  href: String\n  id: String\n  name: String\n  type: String\n  uri: String\n}\n\ntype GET_search_ArtistsEntry {\n  external_urls: GET_search_ExternalUrls\n  href: String\n  id: String\n  name: String\n  type: String\n  uri: String\n}\n\ntype GET_search_ExternalIds {\n  isrc: String\n}\n\ntype GET_search_ExternalUrls {\n  spotify: String\n}\n\ntype GET_search_ExternalUrls1 {\n  spotify: String\n}\n\ntype GET_search_ExternalUrls2 {\n  spotify: String\n}\n\ntype GET_search_ExternalUrls3 {\n  spotify: String\n}\n\ntype GET_search_ImagesEntry {\n  height: Int\n  url: String\n  width: Int\n}\n\ntype GET_search_ItemsEntry {\n  album: GET_search_Album\n  artists: [GET_search_Artists1Entry]\n  available_markets: [String]\n  disc_number: Int\n  duration_ms: Int\n  explicit: Boolean\n  external_ids: GET_search_ExternalIds\n  external_urls: GET_search_ExternalUrls3\n  href: String\n  id: String\n  is_local: Boolean\n  name: String\n  popularity: Int\n  preview_url: String\n  track_number: Int\n  type: String\n  uri: String\n}\n\ntype GET_search_Root {\n  tracks: GET_search_Tracks\n}\n\ntype GET_search_Tracks {\n  href: String\n  items: [GET_search_ItemsEntry]\n  limit: Int\n  next: String\n  offset: Int\n  \"\"\"\n  Field \"previous\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  previous: JSON\n  total: Int\n}\n\ntype Query {\n  GET_search(\n    q: String\n    spotify_access_token: String!\n    type: String\n  ): GET_search_Root\n    @rest(\n      endpoint: \"https://api.spotify.com/v1/search\"\n      headers: [\n        { name: \"authorization\", value: \"Bearer $spotify_access_token;\" }\n      ]\n    )\n}\n\nUtterance: Create a new playlist named 'BIGBANG' and add a song of BIGBANG to it", "output": "response_obj = GET_me()\nresponse_obj2 = POST_users__user_id__playlists(user_id=response_obj.id, name=\"BIGBANG\")\nresponse_obj3 = GET_search(q=\"BIGBANG\", type=\"track\")\nPOST_playlists__playlist_id__tracks(playlist_id=response_obj2.id, uris=response_obj3.tracks.items[0].uri)\n", "function_specs": "[{\"name\": \"GET_me\", \"description\": \"Get detailed profile information about the current user (including the\\ncurrent user's username).\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {}, \"required\": []}}, {\"name\": \"POST_users__user_id__playlists\", \"description\": \"Create a playlist for a Spotify user (Before calling this API, must call GET /me first to get the user_id). (The playlist will be empty until\\nyou [add tracks](/documentation/web-api/reference/#/operations/add-tracks-to-playlist).)\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"user_id\": {\"type\": \"string\", \"description\": \"The user's [Spotify user ID](/documentation/web-api/#spotify-uris-and-ids).\\n\"}, \"name\": {\"type\": \"string\", \"description\": \"The name for the new playlist, for example \\\"Your Coolest Playlist\\\". This name does not need to be unique; a user may have several playlists with the same name.\"}, \"public\": {\"type\": \"boolean\", \"description\": \"Defaults to true. If true the playlist will be public, if false it will be private. To be able to create private playlists, the user must have granted the playlist-modify-private scope\"}, \"collaborative\": {\"type\": \"boolean\", \"description\": \"Defaults to false. If true the playlist will be collaborative. Note: to create a collaborative playlist you must also set public to false. To create collaborative playlists you must have granted playlist-modify-private and playlist-modify-public scopes.\"}, \"description\": {\"type\": \"string\", \"description\": \"value for playlist description as displayed in Spotify Clients and in the Web API.\"}}, \"required\": [\"user_id\", \"name\"], \"body_params\": [\"name\", \"public\", \"collaborative\", \"description\"]}}, {\"name\": \"GET_search\", \"description\": \"Get Spotify catalog information about albums, artists, playlists, tracks, shows, episodes or audiobooks\\nthat match a keyword string.<br />\\n**Note: Audiobooks are only available for the US, UK, Ireland, New Zealand and Australia markets.**\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"q\": {\"type\": \"string\", \"description\": \"Your search query.\\n\\nYou can narrow down your search using field filters. The available filters are `album`, `artist`, `track`, `year`, `upc`, `tag:hipster`, `tag:new`, `isrc`, and `genre`. Each field filter only applies to certain result types.\\n\\nThe `artist` and `year` filters can be used while searching albums, artists and tracks. You can filter on a single `year` or a range (e.g. 1955-1960).<br />\\nThe `album` filter can be used while searching albums and tracks.<br />\\nThe `genre` filter can be used while searching artists and tracks.<br />\\nThe `isrc` and `track` filters can be used while searching tracks.<br />\\nThe `upc`, `tag:new` and `tag:hipster` filters can only be used while searching albums. The `tag:new` filter will return albums released in the past two weeks and `tag:hipster` can be used to return only albums with the lowest 10% popularity.<br />\\n\"}, \"type\": {\"type\": \"array\", \"description\": \"A comma-separated list of item types to search across. Search results include hits\\nfrom all the specified item types. For example: `q=abacab&type=album,track` returns\\nboth albums and tracks matching \\\"abacab\\\".\\n\"}, \"market\": {\"type\": \"string\", \"description\": \"An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).\\n  If a country code is specified, only content that is available in that market will be returned.<br/>\\n  If a valid user access token is specified in the request header, the country associated with\\n  the user account will take priority over this parameter.<br/>\\n  _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>\\n  Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).\\n\"}, \"limit\": {\"type\": \"integer\", \"description\": \"The maximum number of results to return in each item type.\\n\"}, \"offset\": {\"type\": \"integer\", \"description\": \"The index of the first result to return. Use\\nwith limit to get the next page of search results.\\n\"}, \"include_external\": {\"type\": \"string\", \"description\": \"If `include_external=audio` is specified it signals that the client can play externally hosted audio content, and marks\\nthe content as playable in the response. By default externally hosted audio content is marked as unplayable in the response.\\n\"}}, \"required\": [\"q\", \"type\"]}}, {\"name\": \"POST_playlists__playlist_id__tracks\", \"description\": \"Add one or more items to a user's playlist.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"playlist_id\": {\"type\": \"string\", \"description\": \"The [Spotify ID](/documentation/web-api/#spotify-uris-and-ids) of the playlist.\\n\"}, \"position\": {\"type\": \"integer\", \"description\": \"The position to insert the items, a zero-based index. For example, to insert the items in the first position: `position=0`; to insert the items in the third position: `position=2`. If omitted, the items will be appended to the playlist. Items are added in the order they are listed in the query string or request body.\\n\"}, \"uris\": {\"type\": \"string\", \"description\": \"A comma-separated list of [Spotify URIs](/documentation/web-api/#spotify-uris-and-ids) to add, can be track or episode URIs. For example:<br/>`uris=spotify:track:4iV5W9uYEdYUVa79Axb7Rh, spotify:track:1301WleyT98MSxVHPZCA6M, spotify:episode:512ojhOuo1ktJprKbVcKyQ`<br/>A maximum of 100 items can be added in one request. <br/>\\n_**Note**: it is likely that passing a large number of item URIs as a query parameter will exceed the maximum length of the request URI. When adding a large number of items, it is recommended to pass them in the request body, see below._\\n\"}}, \"required\": [\"playlist_id\"]}}]", "GraphQL_schema": "type POST_users__user_id__playlists_ExternalUrls {\n  spotify: String\n}\n\ntype POST_users__user_id__playlists_ExternalUrls1 {\n  spotify: String\n}\n\ntype POST_users__user_id__playlists_Followers {\n  \"\"\"\n  Field \"href\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  href: JSON\n  total: Int\n}\n\ntype POST_users__user_id__playlists_Owner {\n  \"\"\"\n  Field \"display_name\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  display_name: JSON\n  external_urls: POST_users__user_id__playlists_ExternalUrls1\n  href: String\n  id: String\n  type: String\n  uri: String\n}\n\ntype POST_users__user_id__playlists_Root {\n  collaborative: Boolean\n  \"\"\"\n  Field \"description\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  description: JSON\n  external_urls: POST_users__user_id__playlists_ExternalUrls\n  followers: POST_users__user_id__playlists_Followers\n  href: String\n  id: String\n  images: [JSON]\n  name: String\n  owner: POST_users__user_id__playlists_Owner\n  \"\"\"\n  Field \"primary_color\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  primary_color: JSON\n  public: Boolean\n  snapshot_id: String\n  tracks: POST_users__user_id__playlists_Tracks\n  type: String\n  uri: String\n}\n\ntype POST_users__user_id__playlists_Tracks {\n  href: String\n  items: [JSON]\n  limit: Int\n  \"\"\"\n  Field \"next\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  next: JSON\n  offset: Int\n  \"\"\"\n  Field \"previous\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  previous: JSON\n  total: Int\n}\n\ntype Query {\n  POST_users__user_id__playlists(\n    name: String\n    spotify_access_token: String!\n  ): POST_users__user_id__playlists_Root\n    @rest(\n      method: POST\n      endpoint: \"https://api.spotify.com/v1/users/31rph2hasdr2pflu7x5sffw4xxgy/playlists\"\n      headers: [\n        { name: \"authorization\", value: \"Bearer $spotify_access_token;\" }\n      ]\n    )\n}\ntype GET_me_ExplicitContent {\n  filter_enabled: Boolean\n  filter_locked: Boolean\n}\n\ntype GET_me_ExternalUrls {\n  spotify: String\n}\n\ntype GET_me_Followers {\n  \"\"\"\n  Field \"href\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  href: JSON\n  total: Int\n}\n\ntype GET_me_Root {\n  country: String\n  display_name: String\n  email: String\n  explicit_content: GET_me_ExplicitContent\n  external_urls: GET_me_ExternalUrls\n  followers: GET_me_Followers\n  href: String\n  id: String\n  images: [JSON]\n  product: String\n  type: String\n  uri: String\n}\n\ntype Query {\n  GET_me(spotify_access_token: String!): GET_me_Root\n    @rest(\n      endpoint: \"https://api.spotify.com/v1/me\"\n      headers: [\n        { name: \"authorization\", value: \"Bearer $spotify_access_token;\" }\n      ]\n    )\n}\ntype GET_search_Album {\n  album_type: String\n  artists: [GET_search_ArtistsEntry]\n  available_markets: [String]\n  external_urls: GET_search_ExternalUrls1\n  href: String\n  id: String\n  images: [GET_search_ImagesEntry]\n  name: String\n  release_date: Date\n  release_date_precision: String\n  total_tracks: Int\n  type: String\n  uri: String\n}\n\ntype GET_search_Artists1Entry {\n  external_urls: GET_search_ExternalUrls2\n  href: String\n  id: String\n  name: String\n  type: String\n  uri: String\n}\n\ntype GET_search_ArtistsEntry {\n  external_urls: GET_search_ExternalUrls\n  href: String\n  id: String\n  name: String\n  type: String\n  uri: String\n}\n\ntype GET_search_ExternalIds {\n  isrc: String\n}\n\ntype GET_search_ExternalUrls {\n  spotify: String\n}\n\ntype GET_search_ExternalUrls1 {\n  spotify: String\n}\n\ntype GET_search_ExternalUrls2 {\n  spotify: String\n}\n\ntype GET_search_ExternalUrls3 {\n  spotify: String\n}\n\ntype GET_search_ImagesEntry {\n  height: Int\n  url: String\n  width: Int\n}\n\ntype GET_search_ItemsEntry {\n  album: GET_search_Album\n  artists: [GET_search_Artists1Entry]\n  available_markets: [String]\n  disc_number: Int\n  duration_ms: Int\n  explicit: Boolean\n  external_ids: GET_search_ExternalIds\n  external_urls: GET_search_ExternalUrls3\n  href: String\n  id: String\n  is_local: Boolean\n  name: String\n  popularity: Int\n  preview_url: String\n  track_number: Int\n  type: String\n  uri: String\n}\n\ntype GET_search_Root {\n  tracks: GET_search_Tracks\n}\n\ntype GET_search_Tracks {\n  href: String\n  items: [GET_search_ItemsEntry]\n  limit: Int\n  next: String\n  offset: Int\n  \"\"\"\n  Field \"previous\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  previous: JSON\n  total: Int\n}\n\ntype Query {\n  GET_search(\n    q: String\n    spotify_access_token: String!\n    type: String\n  ): GET_search_Root\n    @rest(\n      endpoint: \"https://api.spotify.com/v1/search\"\n      headers: [\n        { name: \"authorization\", value: \"Bearer $spotify_access_token;\" }\n      ]\n    )\n}\n", "utterance": "Create a new playlist named 'BIGBANG' and add a song of BIGBANG to it"}
{"domain": "spotify", "input": "Function Signatures:\n\n[{\"name\": \"GET_search\", \"description\": \"Get Spotify catalog information about albums, artists, playlists, tracks, shows, episodes or audiobooks\\nthat match a keyword string.<br />\\n**Note: Audiobooks are only available for the US, UK, Ireland, New Zealand and Australia markets.**\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"q\": {\"type\": \"string\", \"description\": \"Your search query.\\n\\nYou can narrow down your search using field filters. The available filters are `album`, `artist`, `track`, `year`, `upc`, `tag:hipster`, `tag:new`, `isrc`, and `genre`. Each field filter only applies to certain result types.\\n\\nThe `artist` and `year` filters can be used while searching albums, artists and tracks. You can filter on a single `year` or a range (e.g. 1955-1960).<br />\\nThe `album` filter can be used while searching albums and tracks.<br />\\nThe `genre` filter can be used while searching artists and tracks.<br />\\nThe `isrc` and `track` filters can be used while searching tracks.<br />\\nThe `upc`, `tag:new` and `tag:hipster` filters can only be used while searching albums. The `tag:new` filter will return albums released in the past two weeks and `tag:hipster` can be used to return only albums with the lowest 10% popularity.<br />\\n\"}, \"type\": {\"type\": \"array\", \"description\": \"A comma-separated list of item types to search across. Search results include hits\\nfrom all the specified item types. For example: `q=abacab&type=album,track` returns\\nboth albums and tracks matching \\\"abacab\\\".\\n\"}, \"market\": {\"type\": \"string\", \"description\": \"An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).\\n  If a country code is specified, only content that is available in that market will be returned.<br/>\\n  If a valid user access token is specified in the request header, the country associated with\\n  the user account will take priority over this parameter.<br/>\\n  _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>\\n  Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).\\n\"}, \"limit\": {\"type\": \"integer\", \"description\": \"The maximum number of results to return in each item type.\\n\"}, \"offset\": {\"type\": \"integer\", \"description\": \"The index of the first result to return. Use\\nwith limit to get the next page of search results.\\n\"}, \"include_external\": {\"type\": \"string\", \"description\": \"If `include_external=audio` is specified it signals that the client can play externally hosted audio content, and marks\\nthe content as playable in the response. By default externally hosted audio content is marked as unplayable in the response.\\n\"}}, \"required\": [\"q\", \"type\"]}}, {\"name\": \"PUT_me_player_play\", \"description\": \"Start a new context or resume current playback on the user's active device.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"context_uri\": {\"type\": \"string\", \"description\": \"Optional. Spotify URI of the context to play. Valid contexts are albums, artists & playlists. {context_uri:\\\"spotify:album:1Je1IMUlBXcx1Fz0WE7oPT\\\"}\"}, \"uris\": {\"type\": \"array\", \"description\": \"Optional. A JSON array of the Spotify track URIs to play. For example: {\\\"uris\\\": [\\\"spotify:track:4iV5W9uYEdYUVa79Axb7Rh\\\", \\\"spotify:track:1301WleyT98MSxVHPZCA6M\\\"]}\"}, \"offset\": {\"type\": \"array\", \"description\": \"Optional. Indicates from where in the context playback should start. Only available when context_uri corresponds to an album or playlist object \\\"position\\\" is zero based and can\\u2019t be negative. Example: \\\"offset\\\": {\\\"position\\\": 5} \\\"uri\\\" is a string representing the uri of the item to start at. Example: \\\"offset\\\": {\\\"uri\\\": \\\"spotify:track:1301WleyT98MSxVHPZCA6M\\\"}\"}, \"position_ms\": {\"type\": \"integer\", \"description\": \"\"}}, \"required\": [], \"body_params\": [\"context_uri\", \"uris\", \"offset\", \"position_ms\"]}}]\n\nGraphQL schema:\n\ntype GET_search_Album {\n  album_type: String\n  artists: [GET_search_ArtistsEntry]\n  available_markets: [String]\n  external_urls: GET_search_ExternalUrls1\n  href: String\n  id: String\n  images: [GET_search_ImagesEntry]\n  name: String\n  release_date: Date\n  release_date_precision: String\n  total_tracks: Int\n  type: String\n  uri: String\n}\n\ntype GET_search_Artists1Entry {\n  external_urls: GET_search_ExternalUrls2\n  href: String\n  id: String\n  name: String\n  type: String\n  uri: String\n}\n\ntype GET_search_ArtistsEntry {\n  external_urls: GET_search_ExternalUrls\n  href: String\n  id: String\n  name: String\n  type: String\n  uri: String\n}\n\ntype GET_search_ExternalIds {\n  isrc: String\n}\n\ntype GET_search_ExternalUrls {\n  spotify: String\n}\n\ntype GET_search_ExternalUrls1 {\n  spotify: String\n}\n\ntype GET_search_ExternalUrls2 {\n  spotify: String\n}\n\ntype GET_search_ExternalUrls3 {\n  spotify: String\n}\n\ntype GET_search_ImagesEntry {\n  height: Int\n  url: String\n  width: Int\n}\n\ntype GET_search_ItemsEntry {\n  album: GET_search_Album\n  artists: [GET_search_Artists1Entry]\n  available_markets: [String]\n  disc_number: Int\n  duration_ms: Int\n  explicit: Boolean\n  external_ids: GET_search_ExternalIds\n  external_urls: GET_search_ExternalUrls3\n  href: String\n  id: String\n  is_local: Boolean\n  name: String\n  popularity: Int\n  preview_url: String\n  track_number: Int\n  type: String\n  uri: String\n}\n\ntype GET_search_Root {\n  tracks: GET_search_Tracks\n}\n\ntype GET_search_Tracks {\n  href: String\n  items: [GET_search_ItemsEntry]\n  limit: Int\n  next: String\n  offset: Int\n  \"\"\"\n  Field \"previous\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  previous: JSON\n  total: Int\n}\n\ntype Query {\n  GET_search(\n    q: String\n    spotify_access_token: String!\n    type: String\n  ): GET_search_Root\n    @rest(\n      endpoint: \"https://api.spotify.com/v1/search\"\n      headers: [\n        { name: \"authorization\", value: \"Bearer $spotify_access_token;\" }\n      ]\n    )\n}\n\nUtterance: play me some quiet songs", "output": "response_obj = GET_search(q=\"quiet songs\", type=\"track\")\nPUT_me_player_play(uris=[item.uri for item in response_obj.tracks.items])\n", "function_specs": "[{\"name\": \"GET_search\", \"description\": \"Get Spotify catalog information about albums, artists, playlists, tracks, shows, episodes or audiobooks\\nthat match a keyword string.<br />\\n**Note: Audiobooks are only available for the US, UK, Ireland, New Zealand and Australia markets.**\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"q\": {\"type\": \"string\", \"description\": \"Your search query.\\n\\nYou can narrow down your search using field filters. The available filters are `album`, `artist`, `track`, `year`, `upc`, `tag:hipster`, `tag:new`, `isrc`, and `genre`. Each field filter only applies to certain result types.\\n\\nThe `artist` and `year` filters can be used while searching albums, artists and tracks. You can filter on a single `year` or a range (e.g. 1955-1960).<br />\\nThe `album` filter can be used while searching albums and tracks.<br />\\nThe `genre` filter can be used while searching artists and tracks.<br />\\nThe `isrc` and `track` filters can be used while searching tracks.<br />\\nThe `upc`, `tag:new` and `tag:hipster` filters can only be used while searching albums. The `tag:new` filter will return albums released in the past two weeks and `tag:hipster` can be used to return only albums with the lowest 10% popularity.<br />\\n\"}, \"type\": {\"type\": \"array\", \"description\": \"A comma-separated list of item types to search across. Search results include hits\\nfrom all the specified item types. For example: `q=abacab&type=album,track` returns\\nboth albums and tracks matching \\\"abacab\\\".\\n\"}, \"market\": {\"type\": \"string\", \"description\": \"An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).\\n  If a country code is specified, only content that is available in that market will be returned.<br/>\\n  If a valid user access token is specified in the request header, the country associated with\\n  the user account will take priority over this parameter.<br/>\\n  _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>\\n  Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).\\n\"}, \"limit\": {\"type\": \"integer\", \"description\": \"The maximum number of results to return in each item type.\\n\"}, \"offset\": {\"type\": \"integer\", \"description\": \"The index of the first result to return. Use\\nwith limit to get the next page of search results.\\n\"}, \"include_external\": {\"type\": \"string\", \"description\": \"If `include_external=audio` is specified it signals that the client can play externally hosted audio content, and marks\\nthe content as playable in the response. By default externally hosted audio content is marked as unplayable in the response.\\n\"}}, \"required\": [\"q\", \"type\"]}}, {\"name\": \"PUT_me_player_play\", \"description\": \"Start a new context or resume current playback on the user's active device.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"context_uri\": {\"type\": \"string\", \"description\": \"Optional. Spotify URI of the context to play. Valid contexts are albums, artists & playlists. {context_uri:\\\"spotify:album:1Je1IMUlBXcx1Fz0WE7oPT\\\"}\"}, \"uris\": {\"type\": \"array\", \"description\": \"Optional. A JSON array of the Spotify track URIs to play. For example: {\\\"uris\\\": [\\\"spotify:track:4iV5W9uYEdYUVa79Axb7Rh\\\", \\\"spotify:track:1301WleyT98MSxVHPZCA6M\\\"]}\"}, \"offset\": {\"type\": \"array\", \"description\": \"Optional. Indicates from where in the context playback should start. Only available when context_uri corresponds to an album or playlist object \\\"position\\\" is zero based and can\\u2019t be negative. Example: \\\"offset\\\": {\\\"position\\\": 5} \\\"uri\\\" is a string representing the uri of the item to start at. Example: \\\"offset\\\": {\\\"uri\\\": \\\"spotify:track:1301WleyT98MSxVHPZCA6M\\\"}\"}, \"position_ms\": {\"type\": \"integer\", \"description\": \"\"}}, \"required\": [], \"body_params\": [\"context_uri\", \"uris\", \"offset\", \"position_ms\"]}}]", "GraphQL_schema": "type GET_search_Album {\n  album_type: String\n  artists: [GET_search_ArtistsEntry]\n  available_markets: [String]\n  external_urls: GET_search_ExternalUrls1\n  href: String\n  id: String\n  images: [GET_search_ImagesEntry]\n  name: String\n  release_date: Date\n  release_date_precision: String\n  total_tracks: Int\n  type: String\n  uri: String\n}\n\ntype GET_search_Artists1Entry {\n  external_urls: GET_search_ExternalUrls2\n  href: String\n  id: String\n  name: String\n  type: String\n  uri: String\n}\n\ntype GET_search_ArtistsEntry {\n  external_urls: GET_search_ExternalUrls\n  href: String\n  id: String\n  name: String\n  type: String\n  uri: String\n}\n\ntype GET_search_ExternalIds {\n  isrc: String\n}\n\ntype GET_search_ExternalUrls {\n  spotify: String\n}\n\ntype GET_search_ExternalUrls1 {\n  spotify: String\n}\n\ntype GET_search_ExternalUrls2 {\n  spotify: String\n}\n\ntype GET_search_ExternalUrls3 {\n  spotify: String\n}\n\ntype GET_search_ImagesEntry {\n  height: Int\n  url: String\n  width: Int\n}\n\ntype GET_search_ItemsEntry {\n  album: GET_search_Album\n  artists: [GET_search_Artists1Entry]\n  available_markets: [String]\n  disc_number: Int\n  duration_ms: Int\n  explicit: Boolean\n  external_ids: GET_search_ExternalIds\n  external_urls: GET_search_ExternalUrls3\n  href: String\n  id: String\n  is_local: Boolean\n  name: String\n  popularity: Int\n  preview_url: String\n  track_number: Int\n  type: String\n  uri: String\n}\n\ntype GET_search_Root {\n  tracks: GET_search_Tracks\n}\n\ntype GET_search_Tracks {\n  href: String\n  items: [GET_search_ItemsEntry]\n  limit: Int\n  next: String\n  offset: Int\n  \"\"\"\n  Field \"previous\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  previous: JSON\n  total: Int\n}\n\ntype Query {\n  GET_search(\n    q: String\n    spotify_access_token: String!\n    type: String\n  ): GET_search_Root\n    @rest(\n      endpoint: \"https://api.spotify.com/v1/search\"\n      headers: [\n        { name: \"authorization\", value: \"Bearer $spotify_access_token;\" }\n      ]\n    )\n}\n", "utterance": "play me some quiet songs"}
{"domain": "spotify", "input": "Function Signatures:\n\n[{\"name\": \"POST_me_player_next\", \"description\": \"Skips to next track in the user\\u2019s queue.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {}, \"required\": []}}, {\"name\": \"PUT_me_player_repeat\", \"description\": \"Set the repeat mode for the user's playback. Options are repeat-track,\\nrepeat-context, and off.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"state\": {\"type\": \"string\", \"description\": \"**track**, **context** or **off**.<br/>\\n**track** will repeat the current track.<br/>\\n**context** will repeat the current context.<br/>\\n**off** will turn repeat off.\\n\"}}, \"required\": [\"state\"]}}]\n\nGraphQL schema:\n\n\nUtterance: Switch to the next song and set the single track repeat mode", "output": "POST_me_player_next()\nPUT_me_player_repeat(state=\"track\")\n", "function_specs": "[{\"name\": \"POST_me_player_next\", \"description\": \"Skips to next track in the user\\u2019s queue.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {}, \"required\": []}}, {\"name\": \"PUT_me_player_repeat\", \"description\": \"Set the repeat mode for the user's playback. Options are repeat-track,\\nrepeat-context, and off.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"state\": {\"type\": \"string\", \"description\": \"**track**, **context** or **off**.<br/>\\n**track** will repeat the current track.<br/>\\n**context** will repeat the current context.<br/>\\n**off** will turn repeat off.\\n\"}}, \"required\": [\"state\"]}}]", "GraphQL_schema": "", "utterance": "Switch to the next song and set the single track repeat mode"}
{"domain": "spotify", "input": "Function Signatures:\n\n[{\"name\": \"GET_me_following\", \"description\": \"Get the current user's followed artists.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"type\": {\"type\": \"string\", \"description\": \"The ID type: currently only `artist` is supported.\\n\"}, \"after\": {\"type\": \"string\", \"description\": \"The last artist ID retrieved from the previous request.\\n\"}, \"limit\": {\"type\": \"integer\", \"description\": \"The maximum number of items to return. Default: 20\\\\. Minimum: 1\\\\. Maximum: 50\\\\.\\n\"}}, \"required\": [\"type\"]}}, {\"name\": \"GET_artists__id__related_artists\", \"description\": \"Get Spotify catalog information about artists similar to a given artist. Similarity is based on analysis of the Spotify community's [listening history](http://news.spotify.com/se/2010/02/03/related-artists/).\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"id\": {\"type\": \"string\", \"description\": \"The [Spotify ID](/documentation/web-api/#spotify-uris-and-ids) of the artist.\\n\"}}, \"required\": [\"id\"]}}]\n\nGraphQL schema:\n\ntype GET_me_following_Artists {\n  cursors: GET_me_following_Cursors\n  href: String\n  items: [GET_me_following_ItemsEntry]\n  limit: Int\n  \"\"\"\n  Field \"next\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  next: JSON\n  total: Int\n}\n\ntype GET_me_following_Cursors {\n  \"\"\"\n  Field \"after\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  after: JSON\n}\n\ntype GET_me_following_ExternalUrls {\n  spotify: String\n}\n\ntype GET_me_following_Followers {\n  \"\"\"\n  Field \"href\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  href: JSON\n  total: Int\n}\n\ntype GET_me_following_ImagesEntry {\n  height: Int\n  url: String\n  width: Int\n}\n\ntype GET_me_following_ItemsEntry {\n  external_urls: GET_me_following_ExternalUrls\n  followers: GET_me_following_Followers\n  genres: [String]\n  href: String\n  id: String\n  images: [GET_me_following_ImagesEntry]\n  name: String\n  popularity: Int\n  type: String\n  uri: String\n}\n\ntype GET_me_following_Root {\n  artists: GET_me_following_Artists\n}\n\ntype Query {\n  GET_me_following(\n    spotify_access_token: String!\n    type: String\n  ): GET_me_following_Root\n    @rest(\n      endpoint: \"https://api.spotify.com/v1/me/following\"\n      headers: [\n        { name: \"authorization\", value: \"Bearer $spotify_access_token;\" }\n      ]\n    )\n}\ntype GET_artists__id__related_artists_ArtistsEntry {\n  external_urls: GET_artists__id__related_artists_ExternalUrls\n  followers: GET_artists__id__related_artists_Followers\n  genres: [String]\n  href: String\n  id: String\n  images: [GET_artists__id__related_artists_ImagesEntry]\n  name: String\n  popularity: Int\n  type: String\n  uri: String\n}\n\ntype GET_artists__id__related_artists_ExternalUrls {\n  spotify: String\n}\n\ntype GET_artists__id__related_artists_Followers {\n  \"\"\"\n  Field \"href\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  href: JSON\n  total: Int\n}\n\ntype GET_artists__id__related_artists_ImagesEntry {\n  height: Int\n  url: String\n  width: Int\n}\n\ntype GET_artists__id__related_artists_Root {\n  artists: [GET_artists__id__related_artists_ArtistsEntry]\n}\n\ntype Query {\n  GET_artists__id__related_artists(\n    id: String!\n    spotify_access_token: String!\n  ): GET_artists__id__related_artists_Root\n    @rest(\n      endpoint: \"https://api.spotify.com/v1/artists/$id;/related-artists\"\n      headers: [\n        { name: \"authorization\", value: \"Bearer $spotify_access_token;\" }\n      ]\n    )\n}\n\nUtterance: Recommend more artists based on my first following artist", "output": "response_obj = GET_me_following(type=\"artist\")\nGET_artists__id__related_artists(id=response_obj.artists.items[0].id)\n", "function_specs": "[{\"name\": \"GET_me_following\", \"description\": \"Get the current user's followed artists.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"type\": {\"type\": \"string\", \"description\": \"The ID type: currently only `artist` is supported.\\n\"}, \"after\": {\"type\": \"string\", \"description\": \"The last artist ID retrieved from the previous request.\\n\"}, \"limit\": {\"type\": \"integer\", \"description\": \"The maximum number of items to return. Default: 20\\\\. Minimum: 1\\\\. Maximum: 50\\\\.\\n\"}}, \"required\": [\"type\"]}}, {\"name\": \"GET_artists__id__related_artists\", \"description\": \"Get Spotify catalog information about artists similar to a given artist. Similarity is based on analysis of the Spotify community's [listening history](http://news.spotify.com/se/2010/02/03/related-artists/).\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"id\": {\"type\": \"string\", \"description\": \"The [Spotify ID](/documentation/web-api/#spotify-uris-and-ids) of the artist.\\n\"}}, \"required\": [\"id\"]}}]", "GraphQL_schema": "type GET_me_following_Artists {\n  cursors: GET_me_following_Cursors\n  href: String\n  items: [GET_me_following_ItemsEntry]\n  limit: Int\n  \"\"\"\n  Field \"next\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  next: JSON\n  total: Int\n}\n\ntype GET_me_following_Cursors {\n  \"\"\"\n  Field \"after\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  after: JSON\n}\n\ntype GET_me_following_ExternalUrls {\n  spotify: String\n}\n\ntype GET_me_following_Followers {\n  \"\"\"\n  Field \"href\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  href: JSON\n  total: Int\n}\n\ntype GET_me_following_ImagesEntry {\n  height: Int\n  url: String\n  width: Int\n}\n\ntype GET_me_following_ItemsEntry {\n  external_urls: GET_me_following_ExternalUrls\n  followers: GET_me_following_Followers\n  genres: [String]\n  href: String\n  id: String\n  images: [GET_me_following_ImagesEntry]\n  name: String\n  popularity: Int\n  type: String\n  uri: String\n}\n\ntype GET_me_following_Root {\n  artists: GET_me_following_Artists\n}\n\ntype Query {\n  GET_me_following(\n    spotify_access_token: String!\n    type: String\n  ): GET_me_following_Root\n    @rest(\n      endpoint: \"https://api.spotify.com/v1/me/following\"\n      headers: [\n        { name: \"authorization\", value: \"Bearer $spotify_access_token;\" }\n      ]\n    )\n}\ntype GET_artists__id__related_artists_ArtistsEntry {\n  external_urls: GET_artists__id__related_artists_ExternalUrls\n  followers: GET_artists__id__related_artists_Followers\n  genres: [String]\n  href: String\n  id: String\n  images: [GET_artists__id__related_artists_ImagesEntry]\n  name: String\n  popularity: Int\n  type: String\n  uri: String\n}\n\ntype GET_artists__id__related_artists_ExternalUrls {\n  spotify: String\n}\n\ntype GET_artists__id__related_artists_Followers {\n  \"\"\"\n  Field \"href\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  href: JSON\n  total: Int\n}\n\ntype GET_artists__id__related_artists_ImagesEntry {\n  height: Int\n  url: String\n  width: Int\n}\n\ntype GET_artists__id__related_artists_Root {\n  artists: [GET_artists__id__related_artists_ArtistsEntry]\n}\n\ntype Query {\n  GET_artists__id__related_artists(\n    id: String!\n    spotify_access_token: String!\n  ): GET_artists__id__related_artists_Root\n    @rest(\n      endpoint: \"https://api.spotify.com/v1/artists/$id;/related-artists\"\n      headers: [\n        { name: \"authorization\", value: \"Bearer $spotify_access_token;\" }\n      ]\n    )\n}\n", "utterance": "Recommend more artists based on my first following artist"}
{"domain": "spotify", "input": "Function Signatures:\n\n[{\"name\": \"GET_me_player_currently_playing\", \"description\": \"Get the track currently being played on the user's Spotify account.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"market\": {\"type\": \"string\", \"description\": \"An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).\\n  If a country code is specified, only content that is available in that market will be returned.<br/>\\n  If a valid user access token is specified in the request header, the country associated with\\n  the user account will take priority over this parameter.<br/>\\n  _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>\\n  Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).\\n\"}, \"additional_types\": {\"type\": \"string\", \"description\": \"A comma-separated list of item types that your client supports besides the default `track` type. Valid types are: `track` and `episode`.<br/>\\n_**Note**: This parameter was introduced to allow existing clients to maintain their current behaviour and might be deprecated in the future._<br/>\\nIn addition to providing this parameter, make sure that your client properly handles cases of new types in the future by checking against the `type` field of each object.\\n\"}}, \"required\": []}}, {\"name\": \"GET_tracks__id_\", \"description\": \"Get Spotify catalog information for a single track identified by its\\nunique Spotify ID.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"id\": {\"type\": \"string\", \"description\": \"The [Spotify ID](/documentation/web-api/#spotify-uris-and-ids)\\nfor the track.\\n\"}, \"market\": {\"type\": \"string\", \"description\": \"An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).\\n  If a country code is specified, only content that is available in that market will be returned.<br/>\\n  If a valid user access token is specified in the request header, the country associated with\\n  the user account will take priority over this parameter.<br/>\\n  _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>\\n  Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).\\n\"}}, \"required\": [\"id\"]}}, {\"name\": \"PUT_me_following\", \"description\": \"Add the current user as a follower of one or more artists or other Spotify users.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"type\": {\"type\": \"string\", \"description\": \"The ID type: either `artist` or `user`.\\n\"}, \"ids\": {\"type\": \"string\", \"description\": \"A comma-separated list of the artist or the user [Spotify IDs](/documentation/web-api/#spotify-uris-and-ids).\\nA maximum of 50 IDs can be sent in one request.\\n\"}}, \"required\": [\"type\", \"ids\"]}}]\n\nGraphQL schema:\n\ntype GET_me_player_currently_playing_Actions {\n  disallows: GET_me_player_currently_playing_Disallows\n}\n\ntype GET_me_player_currently_playing_Album {\n  album_type: String\n  artists: [GET_me_player_currently_playing_ArtistsEntry]\n  available_markets: [String]\n  external_urls: GET_me_player_currently_playing_ExternalUrls2\n  href: String\n  id: String\n  images: [GET_me_player_currently_playing_ImagesEntry]\n  name: String\n  release_date: Int\n  release_date_precision: String\n  total_tracks: Int\n  type: String\n  uri: String\n}\n\ntype GET_me_player_currently_playing_Artists1Entry {\n  external_urls: GET_me_player_currently_playing_ExternalUrls3\n  href: String\n  id: String\n  name: String\n  type: String\n  uri: String\n}\n\ntype GET_me_player_currently_playing_ArtistsEntry {\n  external_urls: GET_me_player_currently_playing_ExternalUrls1\n  href: String\n  id: String\n  name: String\n  type: String\n  uri: String\n}\n\ntype GET_me_player_currently_playing_Context {\n  external_urls: GET_me_player_currently_playing_ExternalUrls\n  href: String\n  type: String\n  uri: String\n}\n\ntype GET_me_player_currently_playing_Disallows {\n  resuming: Boolean\n}\n\ntype GET_me_player_currently_playing_ExternalIds {\n  isrc: String\n}\n\ntype GET_me_player_currently_playing_ExternalUrls {\n  spotify: String\n}\n\ntype GET_me_player_currently_playing_ExternalUrls1 {\n  spotify: String\n}\n\ntype GET_me_player_currently_playing_ExternalUrls2 {\n  spotify: String\n}\n\ntype GET_me_player_currently_playing_ExternalUrls3 {\n  spotify: String\n}\n\ntype GET_me_player_currently_playing_ExternalUrls4 {\n  spotify: String\n}\n\ntype GET_me_player_currently_playing_ImagesEntry {\n  height: Int\n  url: String\n  width: Int\n}\n\ntype GET_me_player_currently_playing_Item {\n  album: GET_me_player_currently_playing_Album\n  artists: [GET_me_player_currently_playing_Artists1Entry]\n  available_markets: [String]\n  disc_number: Int\n  duration_ms: Int\n  explicit: Boolean\n  external_ids: GET_me_player_currently_playing_ExternalIds\n  external_urls: GET_me_player_currently_playing_ExternalUrls4\n  href: String\n  id: String\n  is_local: Boolean\n  name: String\n  popularity: Int\n  preview_url: String\n  track_number: Int\n  type: String\n  uri: String\n}\n\ntype GET_me_player_currently_playing_Root {\n  actions: GET_me_player_currently_playing_Actions\n  context: GET_me_player_currently_playing_Context\n  currently_playing_type: String\n  is_playing: Boolean\n  item: GET_me_player_currently_playing_Item\n  progress_ms: Int\n  timestamp: ID\n}\n\ntype Query {\n  GET_me_player_currently_playing(\n    spotify_access_token: String!\n  ): GET_me_player_currently_playing_Root\n    @rest(\n      endpoint: \"https://api.spotify.com/v1/me/player/currently-playing\"\n      headers: [\n        { name: \"authorization\", value: \"Bearer $spotify_access_token;\" }\n      ]\n    )\n}\ntype GET_tracks__id_Album {\n  album_type: String\n  artists: [GET_tracks__id_ArtistsEntry]\n  available_markets: [String]\n  external_urls: GET_tracks__id_ExternalUrls1\n  href: String\n  id: String\n  images: [GET_tracks__id_ImagesEntry]\n  name: String\n  release_date: Date\n  release_date_precision: String\n  total_tracks: Int\n  type: String\n  uri: String\n}\n\ntype GET_tracks__id_Artists1Entry {\n  external_urls: GET_tracks__id_ExternalUrls2\n  href: String\n  id: String\n  name: String\n  type: String\n  uri: String\n}\n\ntype GET_tracks__id_ArtistsEntry {\n  external_urls: GET_tracks__id_ExternalUrls\n  href: String\n  id: String\n  name: String\n  type: String\n  uri: String\n}\n\ntype GET_tracks__id_ExternalIds {\n  isrc: String\n}\n\ntype GET_tracks__id_ExternalUrls {\n  spotify: String\n}\n\ntype GET_tracks__id_ExternalUrls1 {\n  spotify: String\n}\n\ntype GET_tracks__id_ExternalUrls2 {\n  spotify: String\n}\n\ntype GET_tracks__id_ExternalUrls3 {\n  spotify: String\n}\n\ntype GET_tracks__id_ImagesEntry {\n  height: Int\n  url: String\n  width: Int\n}\n\ntype GET_tracks__id_Root {\n  album: GET_tracks__id_Album\n  artists: [GET_tracks__id_Artists1Entry]\n  available_markets: [String]\n  disc_number: Int\n  duration_ms: Int\n  explicit: Boolean\n  external_ids: GET_tracks__id_ExternalIds\n  external_urls: GET_tracks__id_ExternalUrls3\n  href: String\n  id: String\n  is_local: Boolean\n  name: String\n  popularity: Int\n  preview_url: String\n  track_number: Int\n  type: String\n  uri: String\n}\n\ntype Query {\n  GET_tracks__id_(\n    id: String!\n    spotify_access_token: String!\n  ): GET_tracks__id_Root\n    @rest(\n      endpoint: \"https://api.spotify.com/v1/tracks/$id;\"\n      headers: [\n        { name: \"authorization\", value: \"Bearer $spotify_access_token;\" }\n      ]\n    )\n}\n\nUtterance: Follow the artist of the song which is playing right now.", "output": "response_obj = GET_me_player_currently_playing()\nresponse_obj1 = GET_tracks__id_(id=response_obj.item.id)\nPUT_me_following(type=\"artist\", ids=\",\".join([artist.id for artist in response_obj1.artists]))\n", "function_specs": "[{\"name\": \"GET_me_player_currently_playing\", \"description\": \"Get the track currently being played on the user's Spotify account.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"market\": {\"type\": \"string\", \"description\": \"An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).\\n  If a country code is specified, only content that is available in that market will be returned.<br/>\\n  If a valid user access token is specified in the request header, the country associated with\\n  the user account will take priority over this parameter.<br/>\\n  _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>\\n  Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).\\n\"}, \"additional_types\": {\"type\": \"string\", \"description\": \"A comma-separated list of item types that your client supports besides the default `track` type. Valid types are: `track` and `episode`.<br/>\\n_**Note**: This parameter was introduced to allow existing clients to maintain their current behaviour and might be deprecated in the future._<br/>\\nIn addition to providing this parameter, make sure that your client properly handles cases of new types in the future by checking against the `type` field of each object.\\n\"}}, \"required\": []}}, {\"name\": \"GET_tracks__id_\", \"description\": \"Get Spotify catalog information for a single track identified by its\\nunique Spotify ID.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"id\": {\"type\": \"string\", \"description\": \"The [Spotify ID](/documentation/web-api/#spotify-uris-and-ids)\\nfor the track.\\n\"}, \"market\": {\"type\": \"string\", \"description\": \"An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).\\n  If a country code is specified, only content that is available in that market will be returned.<br/>\\n  If a valid user access token is specified in the request header, the country associated with\\n  the user account will take priority over this parameter.<br/>\\n  _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>\\n  Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).\\n\"}}, \"required\": [\"id\"]}}, {\"name\": \"PUT_me_following\", \"description\": \"Add the current user as a follower of one or more artists or other Spotify users.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"type\": {\"type\": \"string\", \"description\": \"The ID type: either `artist` or `user`.\\n\"}, \"ids\": {\"type\": \"string\", \"description\": \"A comma-separated list of the artist or the user [Spotify IDs](/documentation/web-api/#spotify-uris-and-ids).\\nA maximum of 50 IDs can be sent in one request.\\n\"}}, \"required\": [\"type\", \"ids\"]}}]", "GraphQL_schema": "type GET_me_player_currently_playing_Actions {\n  disallows: GET_me_player_currently_playing_Disallows\n}\n\ntype GET_me_player_currently_playing_Album {\n  album_type: String\n  artists: [GET_me_player_currently_playing_ArtistsEntry]\n  available_markets: [String]\n  external_urls: GET_me_player_currently_playing_ExternalUrls2\n  href: String\n  id: String\n  images: [GET_me_player_currently_playing_ImagesEntry]\n  name: String\n  release_date: Int\n  release_date_precision: String\n  total_tracks: Int\n  type: String\n  uri: String\n}\n\ntype GET_me_player_currently_playing_Artists1Entry {\n  external_urls: GET_me_player_currently_playing_ExternalUrls3\n  href: String\n  id: String\n  name: String\n  type: String\n  uri: String\n}\n\ntype GET_me_player_currently_playing_ArtistsEntry {\n  external_urls: GET_me_player_currently_playing_ExternalUrls1\n  href: String\n  id: String\n  name: String\n  type: String\n  uri: String\n}\n\ntype GET_me_player_currently_playing_Context {\n  external_urls: GET_me_player_currently_playing_ExternalUrls\n  href: String\n  type: String\n  uri: String\n}\n\ntype GET_me_player_currently_playing_Disallows {\n  resuming: Boolean\n}\n\ntype GET_me_player_currently_playing_ExternalIds {\n  isrc: String\n}\n\ntype GET_me_player_currently_playing_ExternalUrls {\n  spotify: String\n}\n\ntype GET_me_player_currently_playing_ExternalUrls1 {\n  spotify: String\n}\n\ntype GET_me_player_currently_playing_ExternalUrls2 {\n  spotify: String\n}\n\ntype GET_me_player_currently_playing_ExternalUrls3 {\n  spotify: String\n}\n\ntype GET_me_player_currently_playing_ExternalUrls4 {\n  spotify: String\n}\n\ntype GET_me_player_currently_playing_ImagesEntry {\n  height: Int\n  url: String\n  width: Int\n}\n\ntype GET_me_player_currently_playing_Item {\n  album: GET_me_player_currently_playing_Album\n  artists: [GET_me_player_currently_playing_Artists1Entry]\n  available_markets: [String]\n  disc_number: Int\n  duration_ms: Int\n  explicit: Boolean\n  external_ids: GET_me_player_currently_playing_ExternalIds\n  external_urls: GET_me_player_currently_playing_ExternalUrls4\n  href: String\n  id: String\n  is_local: Boolean\n  name: String\n  popularity: Int\n  preview_url: String\n  track_number: Int\n  type: String\n  uri: String\n}\n\ntype GET_me_player_currently_playing_Root {\n  actions: GET_me_player_currently_playing_Actions\n  context: GET_me_player_currently_playing_Context\n  currently_playing_type: String\n  is_playing: Boolean\n  item: GET_me_player_currently_playing_Item\n  progress_ms: Int\n  timestamp: ID\n}\n\ntype Query {\n  GET_me_player_currently_playing(\n    spotify_access_token: String!\n  ): GET_me_player_currently_playing_Root\n    @rest(\n      endpoint: \"https://api.spotify.com/v1/me/player/currently-playing\"\n      headers: [\n        { name: \"authorization\", value: \"Bearer $spotify_access_token;\" }\n      ]\n    )\n}\ntype GET_tracks__id_Album {\n  album_type: String\n  artists: [GET_tracks__id_ArtistsEntry]\n  available_markets: [String]\n  external_urls: GET_tracks__id_ExternalUrls1\n  href: String\n  id: String\n  images: [GET_tracks__id_ImagesEntry]\n  name: String\n  release_date: Date\n  release_date_precision: String\n  total_tracks: Int\n  type: String\n  uri: String\n}\n\ntype GET_tracks__id_Artists1Entry {\n  external_urls: GET_tracks__id_ExternalUrls2\n  href: String\n  id: String\n  name: String\n  type: String\n  uri: String\n}\n\ntype GET_tracks__id_ArtistsEntry {\n  external_urls: GET_tracks__id_ExternalUrls\n  href: String\n  id: String\n  name: String\n  type: String\n  uri: String\n}\n\ntype GET_tracks__id_ExternalIds {\n  isrc: String\n}\n\ntype GET_tracks__id_ExternalUrls {\n  spotify: String\n}\n\ntype GET_tracks__id_ExternalUrls1 {\n  spotify: String\n}\n\ntype GET_tracks__id_ExternalUrls2 {\n  spotify: String\n}\n\ntype GET_tracks__id_ExternalUrls3 {\n  spotify: String\n}\n\ntype GET_tracks__id_ImagesEntry {\n  height: Int\n  url: String\n  width: Int\n}\n\ntype GET_tracks__id_Root {\n  album: GET_tracks__id_Album\n  artists: [GET_tracks__id_Artists1Entry]\n  available_markets: [String]\n  disc_number: Int\n  duration_ms: Int\n  explicit: Boolean\n  external_ids: GET_tracks__id_ExternalIds\n  external_urls: GET_tracks__id_ExternalUrls3\n  href: String\n  id: String\n  is_local: Boolean\n  name: String\n  popularity: Int\n  preview_url: String\n  track_number: Int\n  type: String\n  uri: String\n}\n\ntype Query {\n  GET_tracks__id_(\n    id: String!\n    spotify_access_token: String!\n  ): GET_tracks__id_Root\n    @rest(\n      endpoint: \"https://api.spotify.com/v1/tracks/$id;\"\n      headers: [\n        { name: \"authorization\", value: \"Bearer $spotify_access_token;\" }\n      ]\n    )\n}\n", "utterance": "Follow the artist of the song which is playing right now."}
{"domain": "spotify", "input": "Function Signatures:\n\n[{\"name\": \"GET_search\", \"description\": \"Get Spotify catalog information about albums, artists, playlists, tracks, shows, episodes or audiobooks\\nthat match a keyword string.<br />\\n**Note: Audiobooks are only available for the US, UK, Ireland, New Zealand and Australia markets.**\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"q\": {\"type\": \"string\", \"description\": \"Your search query.\\n\\nYou can narrow down your search using field filters. The available filters are `album`, `artist`, `track`, `year`, `upc`, `tag:hipster`, `tag:new`, `isrc`, and `genre`. Each field filter only applies to certain result types.\\n\\nThe `artist` and `year` filters can be used while searching albums, artists and tracks. You can filter on a single `year` or a range (e.g. 1955-1960).<br />\\nThe `album` filter can be used while searching albums and tracks.<br />\\nThe `genre` filter can be used while searching artists and tracks.<br />\\nThe `isrc` and `track` filters can be used while searching tracks.<br />\\nThe `upc`, `tag:new` and `tag:hipster` filters can only be used while searching albums. The `tag:new` filter will return albums released in the past two weeks and `tag:hipster` can be used to return only albums with the lowest 10% popularity.<br />\\n\"}, \"type\": {\"type\": \"array\", \"description\": \"A comma-separated list of item types to search across. Search results include hits\\nfrom all the specified item types. For example: `q=abacab&type=album,track` returns\\nboth albums and tracks matching \\\"abacab\\\".\\n\"}, \"market\": {\"type\": \"string\", \"description\": \"An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).\\n  If a country code is specified, only content that is available in that market will be returned.<br/>\\n  If a valid user access token is specified in the request header, the country associated with\\n  the user account will take priority over this parameter.<br/>\\n  _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>\\n  Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).\\n\"}, \"limit\": {\"type\": \"integer\", \"description\": \"The maximum number of results to return in each item type.\\n\"}, \"offset\": {\"type\": \"integer\", \"description\": \"The index of the first result to return. Use\\nwith limit to get the next page of search results.\\n\"}, \"include_external\": {\"type\": \"string\", \"description\": \"If `include_external=audio` is specified it signals that the client can play externally hosted audio content, and marks\\nthe content as playable in the response. By default externally hosted audio content is marked as unplayable in the response.\\n\"}}, \"required\": [\"q\", \"type\"]}}, {\"name\": \"PUT_me_albums\", \"description\": \"Save one or more albums to the current user's 'Your Music' library.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"ids\": {\"type\": \"string\", \"description\": \"A comma-separated list of the [Spotify IDs](/documentation/web-api/#spotify-uris-and-ids) for the albums. Maximum: 20 IDs.\\n\"}}, \"required\": [\"ids\"]}}]\n\nGraphQL schema:\n\ntype GET_search_Albums {\n  href: String\n  items: [GET_search_ItemsEntry]\n  limit: Int\n  next: String\n  offset: Int\n  \"\"\"\n  Field \"previous\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  previous: JSON\n  total: Int\n}\n\ntype GET_search_ArtistsEntry {\n  external_urls: GET_search_ExternalUrls\n  href: String\n  id: String\n  name: String\n  type: String\n  uri: String\n}\n\ntype GET_search_ExternalUrls {\n  spotify: String\n}\n\ntype GET_search_ExternalUrls1 {\n  spotify: String\n}\n\ntype GET_search_ImagesEntry {\n  height: Int\n  url: String\n  width: Int\n}\n\ntype GET_search_ItemsEntry {\n  album_type: String\n  artists: [GET_search_ArtistsEntry]\n  available_markets: [String]\n  external_urls: GET_search_ExternalUrls1\n  href: String\n  id: String\n  images: [GET_search_ImagesEntry]\n  name: String\n  release_date: Date\n  release_date_precision: String\n  total_tracks: Int\n  type: String\n  uri: String\n}\n\ntype GET_search_Root {\n  albums: GET_search_Albums\n}\n\ntype Query {\n  GET_search(\n    q: String\n    spotify_access_token: String!\n    type: String\n  ): GET_search_Root\n    @rest(\n      endpoint: \"https://api.spotify.com/v1/search\"\n      headers: [\n        { name: \"authorization\", value: \"Bearer $spotify_access_token;\" }\n      ]\n    )\n}\n\nUtterance: Add album Mojito to my music library", "output": "response_obj = GET_search(q=\"Mojito\", type=\"album\")\nPUT_me_albums(ids=response_obj.albums.items[0].id)\n", "function_specs": "[{\"name\": \"GET_search\", \"description\": \"Get Spotify catalog information about albums, artists, playlists, tracks, shows, episodes or audiobooks\\nthat match a keyword string.<br />\\n**Note: Audiobooks are only available for the US, UK, Ireland, New Zealand and Australia markets.**\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"q\": {\"type\": \"string\", \"description\": \"Your search query.\\n\\nYou can narrow down your search using field filters. The available filters are `album`, `artist`, `track`, `year`, `upc`, `tag:hipster`, `tag:new`, `isrc`, and `genre`. Each field filter only applies to certain result types.\\n\\nThe `artist` and `year` filters can be used while searching albums, artists and tracks. You can filter on a single `year` or a range (e.g. 1955-1960).<br />\\nThe `album` filter can be used while searching albums and tracks.<br />\\nThe `genre` filter can be used while searching artists and tracks.<br />\\nThe `isrc` and `track` filters can be used while searching tracks.<br />\\nThe `upc`, `tag:new` and `tag:hipster` filters can only be used while searching albums. The `tag:new` filter will return albums released in the past two weeks and `tag:hipster` can be used to return only albums with the lowest 10% popularity.<br />\\n\"}, \"type\": {\"type\": \"array\", \"description\": \"A comma-separated list of item types to search across. Search results include hits\\nfrom all the specified item types. For example: `q=abacab&type=album,track` returns\\nboth albums and tracks matching \\\"abacab\\\".\\n\"}, \"market\": {\"type\": \"string\", \"description\": \"An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).\\n  If a country code is specified, only content that is available in that market will be returned.<br/>\\n  If a valid user access token is specified in the request header, the country associated with\\n  the user account will take priority over this parameter.<br/>\\n  _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>\\n  Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).\\n\"}, \"limit\": {\"type\": \"integer\", \"description\": \"The maximum number of results to return in each item type.\\n\"}, \"offset\": {\"type\": \"integer\", \"description\": \"The index of the first result to return. Use\\nwith limit to get the next page of search results.\\n\"}, \"include_external\": {\"type\": \"string\", \"description\": \"If `include_external=audio` is specified it signals that the client can play externally hosted audio content, and marks\\nthe content as playable in the response. By default externally hosted audio content is marked as unplayable in the response.\\n\"}}, \"required\": [\"q\", \"type\"]}}, {\"name\": \"PUT_me_albums\", \"description\": \"Save one or more albums to the current user's 'Your Music' library.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"ids\": {\"type\": \"string\", \"description\": \"A comma-separated list of the [Spotify IDs](/documentation/web-api/#spotify-uris-and-ids) for the albums. Maximum: 20 IDs.\\n\"}}, \"required\": [\"ids\"]}}]", "GraphQL_schema": "type GET_search_Albums {\n  href: String\n  items: [GET_search_ItemsEntry]\n  limit: Int\n  next: String\n  offset: Int\n  \"\"\"\n  Field \"previous\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  previous: JSON\n  total: Int\n}\n\ntype GET_search_ArtistsEntry {\n  external_urls: GET_search_ExternalUrls\n  href: String\n  id: String\n  name: String\n  type: String\n  uri: String\n}\n\ntype GET_search_ExternalUrls {\n  spotify: String\n}\n\ntype GET_search_ExternalUrls1 {\n  spotify: String\n}\n\ntype GET_search_ImagesEntry {\n  height: Int\n  url: String\n  width: Int\n}\n\ntype GET_search_ItemsEntry {\n  album_type: String\n  artists: [GET_search_ArtistsEntry]\n  available_markets: [String]\n  external_urls: GET_search_ExternalUrls1\n  href: String\n  id: String\n  images: [GET_search_ImagesEntry]\n  name: String\n  release_date: Date\n  release_date_precision: String\n  total_tracks: Int\n  type: String\n  uri: String\n}\n\ntype GET_search_Root {\n  albums: GET_search_Albums\n}\n\ntype Query {\n  GET_search(\n    q: String\n    spotify_access_token: String!\n    type: String\n  ): GET_search_Root\n    @rest(\n      endpoint: \"https://api.spotify.com/v1/search\"\n      headers: [\n        { name: \"authorization\", value: \"Bearer $spotify_access_token;\" }\n      ]\n    )\n}\n", "utterance": "Add album Mojito to my music library"}
{"domain": "spotify", "input": "Function Signatures:\n\n[{\"name\": \"GET_me_tracks\", \"description\": \"Get a list of the songs saved in the current Spotify user's 'Your Music' library.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"market\": {\"type\": \"string\", \"description\": \"An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).\\n  If a country code is specified, only content that is available in that market will be returned.<br/>\\n  If a valid user access token is specified in the request header, the country associated with\\n  the user account will take priority over this parameter.<br/>\\n  _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>\\n  Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).\\n\"}, \"limit\": {\"type\": \"integer\", \"description\": \"The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50.\\n\"}, \"offset\": {\"type\": \"integer\", \"description\": \"The index of the first item to return. Default: 0 (the first item). Use with limit to get the next set of items.\\n\"}}, \"required\": []}}, {\"name\": \"DELETE_me_tracks\", \"description\": \"Remove one or more tracks from the current user's 'Your Music' library.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"ids\": {\"type\": \"string\", \"description\": \"A comma-separated list of the [Spotify IDs](/documentation/web-api/#spotify-uris-and-ids). For example: `ids=4iV5W9uYEdYUVa79Axb7Rh,1301WleyT98MSxVHPZCA6M`. Maximum: 50 IDs.\\n\"}}, \"required\": [\"ids\"]}}]\n\nGraphQL schema:\n\ntype GET_me_tracks_Album {\n  album_type: String\n  artists: [GET_me_tracks_ArtistsEntry]\n  available_markets: [String]\n  external_urls: GET_me_tracks_ExternalUrls1\n  href: String\n  id: String\n  images: [GET_me_tracks_ImagesEntry]\n  name: String\n  release_date: Date\n  release_date_precision: String\n  total_tracks: Int\n  type: String\n  uri: String\n}\n\ntype GET_me_tracks_Artists1Entry {\n  external_urls: GET_me_tracks_ExternalUrls2\n  href: String\n  id: String\n  name: String\n  type: String\n  uri: String\n}\n\ntype GET_me_tracks_ArtistsEntry {\n  external_urls: GET_me_tracks_ExternalUrls\n  href: String\n  id: String\n  name: String\n  type: String\n  uri: String\n}\n\ntype GET_me_tracks_ExternalIds {\n  isrc: String\n}\n\ntype GET_me_tracks_ExternalUrls {\n  spotify: String\n}\n\ntype GET_me_tracks_ExternalUrls1 {\n  spotify: String\n}\n\ntype GET_me_tracks_ExternalUrls2 {\n  spotify: String\n}\n\ntype GET_me_tracks_ExternalUrls3 {\n  spotify: String\n}\n\ntype GET_me_tracks_ImagesEntry {\n  height: Int\n  url: String\n  width: Int\n}\n\ntype GET_me_tracks_ItemsEntry {\n  added_at: DateTime\n  track: GET_me_tracks_Track\n}\n\ntype GET_me_tracks_Root {\n  href: String\n  items: [GET_me_tracks_ItemsEntry]\n  limit: Int\n  \"\"\"\n  Field \"next\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  next: JSON\n  offset: Int\n  \"\"\"\n  Field \"previous\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  previous: JSON\n  total: Int\n}\n\ntype GET_me_tracks_Track {\n  album: GET_me_tracks_Album\n  artists: [GET_me_tracks_Artists1Entry]\n  available_markets: [String]\n  disc_number: Int\n  duration_ms: Int\n  explicit: Boolean\n  external_ids: GET_me_tracks_ExternalIds\n  external_urls: GET_me_tracks_ExternalUrls3\n  href: String\n  id: String\n  is_local: Boolean\n  name: String\n  popularity: Int\n  preview_url: String\n  track_number: Int\n  type: String\n  uri: String\n}\n\ntype Query {\n  GET_me_tracks(spotify_access_token: String!): GET_me_tracks_Root\n    @rest(\n      endpoint: \"https://api.spotify.com/v1/me/tracks\"\n      headers: [\n        { name: \"authorization\", value: \"Bearer $spotify_access_token;\" }\n      ]\n    )\n}\n\nUtterance: remove the third track from My Music", "output": "response_obj = GET_me_tracks()\nDELETE_me_tracks(ids=response_obj.items[2].track.id)\n", "function_specs": "[{\"name\": \"GET_me_tracks\", \"description\": \"Get a list of the songs saved in the current Spotify user's 'Your Music' library.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"market\": {\"type\": \"string\", \"description\": \"An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).\\n  If a country code is specified, only content that is available in that market will be returned.<br/>\\n  If a valid user access token is specified in the request header, the country associated with\\n  the user account will take priority over this parameter.<br/>\\n  _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>\\n  Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).\\n\"}, \"limit\": {\"type\": \"integer\", \"description\": \"The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50.\\n\"}, \"offset\": {\"type\": \"integer\", \"description\": \"The index of the first item to return. Default: 0 (the first item). Use with limit to get the next set of items.\\n\"}}, \"required\": []}}, {\"name\": \"DELETE_me_tracks\", \"description\": \"Remove one or more tracks from the current user's 'Your Music' library.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"ids\": {\"type\": \"string\", \"description\": \"A comma-separated list of the [Spotify IDs](/documentation/web-api/#spotify-uris-and-ids). For example: `ids=4iV5W9uYEdYUVa79Axb7Rh,1301WleyT98MSxVHPZCA6M`. Maximum: 50 IDs.\\n\"}}, \"required\": [\"ids\"]}}]", "GraphQL_schema": "type GET_me_tracks_Album {\n  album_type: String\n  artists: [GET_me_tracks_ArtistsEntry]\n  available_markets: [String]\n  external_urls: GET_me_tracks_ExternalUrls1\n  href: String\n  id: String\n  images: [GET_me_tracks_ImagesEntry]\n  name: String\n  release_date: Date\n  release_date_precision: String\n  total_tracks: Int\n  type: String\n  uri: String\n}\n\ntype GET_me_tracks_Artists1Entry {\n  external_urls: GET_me_tracks_ExternalUrls2\n  href: String\n  id: String\n  name: String\n  type: String\n  uri: String\n}\n\ntype GET_me_tracks_ArtistsEntry {\n  external_urls: GET_me_tracks_ExternalUrls\n  href: String\n  id: String\n  name: String\n  type: String\n  uri: String\n}\n\ntype GET_me_tracks_ExternalIds {\n  isrc: String\n}\n\ntype GET_me_tracks_ExternalUrls {\n  spotify: String\n}\n\ntype GET_me_tracks_ExternalUrls1 {\n  spotify: String\n}\n\ntype GET_me_tracks_ExternalUrls2 {\n  spotify: String\n}\n\ntype GET_me_tracks_ExternalUrls3 {\n  spotify: String\n}\n\ntype GET_me_tracks_ImagesEntry {\n  height: Int\n  url: String\n  width: Int\n}\n\ntype GET_me_tracks_ItemsEntry {\n  added_at: DateTime\n  track: GET_me_tracks_Track\n}\n\ntype GET_me_tracks_Root {\n  href: String\n  items: [GET_me_tracks_ItemsEntry]\n  limit: Int\n  \"\"\"\n  Field \"next\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  next: JSON\n  offset: Int\n  \"\"\"\n  Field \"previous\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  previous: JSON\n  total: Int\n}\n\ntype GET_me_tracks_Track {\n  album: GET_me_tracks_Album\n  artists: [GET_me_tracks_Artists1Entry]\n  available_markets: [String]\n  disc_number: Int\n  duration_ms: Int\n  explicit: Boolean\n  external_ids: GET_me_tracks_ExternalIds\n  external_urls: GET_me_tracks_ExternalUrls3\n  href: String\n  id: String\n  is_local: Boolean\n  name: String\n  popularity: Int\n  preview_url: String\n  track_number: Int\n  type: String\n  uri: String\n}\n\ntype Query {\n  GET_me_tracks(spotify_access_token: String!): GET_me_tracks_Root\n    @rest(\n      endpoint: \"https://api.spotify.com/v1/me/tracks\"\n      headers: [\n        { name: \"authorization\", value: \"Bearer $spotify_access_token;\" }\n      ]\n    )\n}\n", "utterance": "remove the third track from My Music"}
{"domain": "spotify", "input": "Function Signatures:\n\n[{\"name\": \"GET_me_player_currently_playing\", \"description\": \"Get the track currently being played on the user's Spotify account.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"market\": {\"type\": \"string\", \"description\": \"An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).\\n  If a country code is specified, only content that is available in that market will be returned.<br/>\\n  If a valid user access token is specified in the request header, the country associated with\\n  the user account will take priority over this parameter.<br/>\\n  _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>\\n  Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).\\n\"}, \"additional_types\": {\"type\": \"string\", \"description\": \"A comma-separated list of item types that your client supports besides the default `track` type. Valid types are: `track` and `episode`.<br/>\\n_**Note**: This parameter was introduced to allow existing clients to maintain their current behaviour and might be deprecated in the future._<br/>\\nIn addition to providing this parameter, make sure that your client properly handles cases of new types in the future by checking against the `type` field of each object.\\n\"}}, \"required\": []}}, {\"name\": \"GET_tracks__id_\", \"description\": \"Get Spotify catalog information for a single track identified by its\\nunique Spotify ID.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"id\": {\"type\": \"string\", \"description\": \"The [Spotify ID](/documentation/web-api/#spotify-uris-and-ids)\\nfor the track.\\n\"}, \"market\": {\"type\": \"string\", \"description\": \"An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).\\n  If a country code is specified, only content that is available in that market will be returned.<br/>\\n  If a valid user access token is specified in the request header, the country associated with\\n  the user account will take priority over this parameter.<br/>\\n  _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>\\n  Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).\\n\"}}, \"required\": [\"id\"]}}]\n\nGraphQL schema:\n\ntype GET_me_player_currently_playing_Actions {\n  disallows: GET_me_player_currently_playing_Disallows\n}\n\ntype GET_me_player_currently_playing_Album {\n  album_type: String\n  artists: [GET_me_player_currently_playing_ArtistsEntry]\n  available_markets: [String]\n  external_urls: GET_me_player_currently_playing_ExternalUrls2\n  href: String\n  id: String\n  images: [GET_me_player_currently_playing_ImagesEntry]\n  name: String\n  release_date: Int\n  release_date_precision: String\n  total_tracks: Int\n  type: String\n  uri: String\n}\n\ntype GET_me_player_currently_playing_Artists1Entry {\n  external_urls: GET_me_player_currently_playing_ExternalUrls3\n  href: String\n  id: String\n  name: String\n  type: String\n  uri: String\n}\n\ntype GET_me_player_currently_playing_ArtistsEntry {\n  external_urls: GET_me_player_currently_playing_ExternalUrls1\n  href: String\n  id: String\n  name: String\n  type: String\n  uri: String\n}\n\ntype GET_me_player_currently_playing_Context {\n  external_urls: GET_me_player_currently_playing_ExternalUrls\n  href: String\n  type: String\n  uri: String\n}\n\ntype GET_me_player_currently_playing_Disallows {\n  resuming: Boolean\n}\n\ntype GET_me_player_currently_playing_ExternalIds {\n  isrc: String\n}\n\ntype GET_me_player_currently_playing_ExternalUrls {\n  spotify: String\n}\n\ntype GET_me_player_currently_playing_ExternalUrls1 {\n  spotify: String\n}\n\ntype GET_me_player_currently_playing_ExternalUrls2 {\n  spotify: String\n}\n\ntype GET_me_player_currently_playing_ExternalUrls3 {\n  spotify: String\n}\n\ntype GET_me_player_currently_playing_ExternalUrls4 {\n  spotify: String\n}\n\ntype GET_me_player_currently_playing_ImagesEntry {\n  height: Int\n  url: String\n  width: Int\n}\n\ntype GET_me_player_currently_playing_Item {\n  album: GET_me_player_currently_playing_Album\n  artists: [GET_me_player_currently_playing_Artists1Entry]\n  available_markets: [String]\n  disc_number: Int\n  duration_ms: Int\n  explicit: Boolean\n  external_ids: GET_me_player_currently_playing_ExternalIds\n  external_urls: GET_me_player_currently_playing_ExternalUrls4\n  href: String\n  id: String\n  is_local: Boolean\n  name: String\n  popularity: Int\n  preview_url: String\n  track_number: Int\n  type: String\n  uri: String\n}\n\ntype GET_me_player_currently_playing_Root {\n  actions: GET_me_player_currently_playing_Actions\n  context: GET_me_player_currently_playing_Context\n  currently_playing_type: String\n  is_playing: Boolean\n  item: GET_me_player_currently_playing_Item\n  progress_ms: Int\n  timestamp: ID\n}\n\ntype Query {\n  GET_me_player_currently_playing(\n    spotify_access_token: String!\n  ): GET_me_player_currently_playing_Root\n    @rest(\n      endpoint: \"https://api.spotify.com/v1/me/player/currently-playing\"\n      headers: [\n        { name: \"authorization\", value: \"Bearer $spotify_access_token;\" }\n      ]\n    )\n}\ntype GET_tracks__id_Album {\n  album_type: String\n  artists: [GET_tracks__id_ArtistsEntry]\n  available_markets: [String]\n  external_urls: GET_tracks__id_ExternalUrls1\n  href: String\n  id: String\n  images: [GET_tracks__id_ImagesEntry]\n  name: String\n  release_date: Date\n  release_date_precision: String\n  total_tracks: Int\n  type: String\n  uri: String\n}\n\ntype GET_tracks__id_Artists1Entry {\n  external_urls: GET_tracks__id_ExternalUrls2\n  href: String\n  id: String\n  name: String\n  type: String\n  uri: String\n}\n\ntype GET_tracks__id_ArtistsEntry {\n  external_urls: GET_tracks__id_ExternalUrls\n  href: String\n  id: String\n  name: String\n  type: String\n  uri: String\n}\n\ntype GET_tracks__id_ExternalIds {\n  isrc: String\n}\n\ntype GET_tracks__id_ExternalUrls {\n  spotify: String\n}\n\ntype GET_tracks__id_ExternalUrls1 {\n  spotify: String\n}\n\ntype GET_tracks__id_ExternalUrls2 {\n  spotify: String\n}\n\ntype GET_tracks__id_ExternalUrls3 {\n  spotify: String\n}\n\ntype GET_tracks__id_ImagesEntry {\n  height: Int\n  url: String\n  width: Int\n}\n\ntype GET_tracks__id_Root {\n  album: GET_tracks__id_Album\n  artists: [GET_tracks__id_Artists1Entry]\n  available_markets: [String]\n  disc_number: Int\n  duration_ms: Int\n  explicit: Boolean\n  external_ids: GET_tracks__id_ExternalIds\n  external_urls: GET_tracks__id_ExternalUrls3\n  href: String\n  id: String\n  is_local: Boolean\n  name: String\n  popularity: Int\n  preview_url: String\n  track_number: Int\n  type: String\n  uri: String\n}\n\ntype Query {\n  GET_tracks__id_(\n    id: String!\n    spotify_access_token: String!\n  ): GET_tracks__id_Root\n    @rest(\n      endpoint: \"https://api.spotify.com/v1/tracks/$id;\"\n      headers: [\n        { name: \"authorization\", value: \"Bearer $spotify_access_token;\" }\n      ]\n    )\n}\n\nUtterance: show me the album information of the song currently playing", "output": "response_obj = GET_me_player_currently_playing()\nGET_tracks__id_(id=response_obj.item.id)\n", "function_specs": "[{\"name\": \"GET_me_player_currently_playing\", \"description\": \"Get the track currently being played on the user's Spotify account.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"market\": {\"type\": \"string\", \"description\": \"An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).\\n  If a country code is specified, only content that is available in that market will be returned.<br/>\\n  If a valid user access token is specified in the request header, the country associated with\\n  the user account will take priority over this parameter.<br/>\\n  _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>\\n  Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).\\n\"}, \"additional_types\": {\"type\": \"string\", \"description\": \"A comma-separated list of item types that your client supports besides the default `track` type. Valid types are: `track` and `episode`.<br/>\\n_**Note**: This parameter was introduced to allow existing clients to maintain their current behaviour and might be deprecated in the future._<br/>\\nIn addition to providing this parameter, make sure that your client properly handles cases of new types in the future by checking against the `type` field of each object.\\n\"}}, \"required\": []}}, {\"name\": \"GET_tracks__id_\", \"description\": \"Get Spotify catalog information for a single track identified by its\\nunique Spotify ID.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"id\": {\"type\": \"string\", \"description\": \"The [Spotify ID](/documentation/web-api/#spotify-uris-and-ids)\\nfor the track.\\n\"}, \"market\": {\"type\": \"string\", \"description\": \"An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).\\n  If a country code is specified, only content that is available in that market will be returned.<br/>\\n  If a valid user access token is specified in the request header, the country associated with\\n  the user account will take priority over this parameter.<br/>\\n  _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>\\n  Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).\\n\"}}, \"required\": [\"id\"]}}]", "GraphQL_schema": "type GET_me_player_currently_playing_Actions {\n  disallows: GET_me_player_currently_playing_Disallows\n}\n\ntype GET_me_player_currently_playing_Album {\n  album_type: String\n  artists: [GET_me_player_currently_playing_ArtistsEntry]\n  available_markets: [String]\n  external_urls: GET_me_player_currently_playing_ExternalUrls2\n  href: String\n  id: String\n  images: [GET_me_player_currently_playing_ImagesEntry]\n  name: String\n  release_date: Int\n  release_date_precision: String\n  total_tracks: Int\n  type: String\n  uri: String\n}\n\ntype GET_me_player_currently_playing_Artists1Entry {\n  external_urls: GET_me_player_currently_playing_ExternalUrls3\n  href: String\n  id: String\n  name: String\n  type: String\n  uri: String\n}\n\ntype GET_me_player_currently_playing_ArtistsEntry {\n  external_urls: GET_me_player_currently_playing_ExternalUrls1\n  href: String\n  id: String\n  name: String\n  type: String\n  uri: String\n}\n\ntype GET_me_player_currently_playing_Context {\n  external_urls: GET_me_player_currently_playing_ExternalUrls\n  href: String\n  type: String\n  uri: String\n}\n\ntype GET_me_player_currently_playing_Disallows {\n  resuming: Boolean\n}\n\ntype GET_me_player_currently_playing_ExternalIds {\n  isrc: String\n}\n\ntype GET_me_player_currently_playing_ExternalUrls {\n  spotify: String\n}\n\ntype GET_me_player_currently_playing_ExternalUrls1 {\n  spotify: String\n}\n\ntype GET_me_player_currently_playing_ExternalUrls2 {\n  spotify: String\n}\n\ntype GET_me_player_currently_playing_ExternalUrls3 {\n  spotify: String\n}\n\ntype GET_me_player_currently_playing_ExternalUrls4 {\n  spotify: String\n}\n\ntype GET_me_player_currently_playing_ImagesEntry {\n  height: Int\n  url: String\n  width: Int\n}\n\ntype GET_me_player_currently_playing_Item {\n  album: GET_me_player_currently_playing_Album\n  artists: [GET_me_player_currently_playing_Artists1Entry]\n  available_markets: [String]\n  disc_number: Int\n  duration_ms: Int\n  explicit: Boolean\n  external_ids: GET_me_player_currently_playing_ExternalIds\n  external_urls: GET_me_player_currently_playing_ExternalUrls4\n  href: String\n  id: String\n  is_local: Boolean\n  name: String\n  popularity: Int\n  preview_url: String\n  track_number: Int\n  type: String\n  uri: String\n}\n\ntype GET_me_player_currently_playing_Root {\n  actions: GET_me_player_currently_playing_Actions\n  context: GET_me_player_currently_playing_Context\n  currently_playing_type: String\n  is_playing: Boolean\n  item: GET_me_player_currently_playing_Item\n  progress_ms: Int\n  timestamp: ID\n}\n\ntype Query {\n  GET_me_player_currently_playing(\n    spotify_access_token: String!\n  ): GET_me_player_currently_playing_Root\n    @rest(\n      endpoint: \"https://api.spotify.com/v1/me/player/currently-playing\"\n      headers: [\n        { name: \"authorization\", value: \"Bearer $spotify_access_token;\" }\n      ]\n    )\n}\ntype GET_tracks__id_Album {\n  album_type: String\n  artists: [GET_tracks__id_ArtistsEntry]\n  available_markets: [String]\n  external_urls: GET_tracks__id_ExternalUrls1\n  href: String\n  id: String\n  images: [GET_tracks__id_ImagesEntry]\n  name: String\n  release_date: Date\n  release_date_precision: String\n  total_tracks: Int\n  type: String\n  uri: String\n}\n\ntype GET_tracks__id_Artists1Entry {\n  external_urls: GET_tracks__id_ExternalUrls2\n  href: String\n  id: String\n  name: String\n  type: String\n  uri: String\n}\n\ntype GET_tracks__id_ArtistsEntry {\n  external_urls: GET_tracks__id_ExternalUrls\n  href: String\n  id: String\n  name: String\n  type: String\n  uri: String\n}\n\ntype GET_tracks__id_ExternalIds {\n  isrc: String\n}\n\ntype GET_tracks__id_ExternalUrls {\n  spotify: String\n}\n\ntype GET_tracks__id_ExternalUrls1 {\n  spotify: String\n}\n\ntype GET_tracks__id_ExternalUrls2 {\n  spotify: String\n}\n\ntype GET_tracks__id_ExternalUrls3 {\n  spotify: String\n}\n\ntype GET_tracks__id_ImagesEntry {\n  height: Int\n  url: String\n  width: Int\n}\n\ntype GET_tracks__id_Root {\n  album: GET_tracks__id_Album\n  artists: [GET_tracks__id_Artists1Entry]\n  available_markets: [String]\n  disc_number: Int\n  duration_ms: Int\n  explicit: Boolean\n  external_ids: GET_tracks__id_ExternalIds\n  external_urls: GET_tracks__id_ExternalUrls3\n  href: String\n  id: String\n  is_local: Boolean\n  name: String\n  popularity: Int\n  preview_url: String\n  track_number: Int\n  type: String\n  uri: String\n}\n\ntype Query {\n  GET_tracks__id_(\n    id: String!\n    spotify_access_token: String!\n  ): GET_tracks__id_Root\n    @rest(\n      endpoint: \"https://api.spotify.com/v1/tracks/$id;\"\n      headers: [\n        { name: \"authorization\", value: \"Bearer $spotify_access_token;\" }\n      ]\n    )\n}\n", "utterance": "show me the album information of the song currently playing"}
{"domain": "spotify", "input": "Function Signatures:\n\n[{\"name\": \"GET_search\", \"description\": \"Get Spotify catalog information about albums, artists, playlists, tracks, shows, episodes or audiobooks\\nthat match a keyword string.<br />\\n**Note: Audiobooks are only available for the US, UK, Ireland, New Zealand and Australia markets.**\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"q\": {\"type\": \"string\", \"description\": \"Your search query.\\n\\nYou can narrow down your search using field filters. The available filters are `album`, `artist`, `track`, `year`, `upc`, `tag:hipster`, `tag:new`, `isrc`, and `genre`. Each field filter only applies to certain result types.\\n\\nThe `artist` and `year` filters can be used while searching albums, artists and tracks. You can filter on a single `year` or a range (e.g. 1955-1960).<br />\\nThe `album` filter can be used while searching albums and tracks.<br />\\nThe `genre` filter can be used while searching artists and tracks.<br />\\nThe `isrc` and `track` filters can be used while searching tracks.<br />\\nThe `upc`, `tag:new` and `tag:hipster` filters can only be used while searching albums. The `tag:new` filter will return albums released in the past two weeks and `tag:hipster` can be used to return only albums with the lowest 10% popularity.<br />\\n\"}, \"type\": {\"type\": \"array\", \"description\": \"A comma-separated list of item types to search across. Search results include hits\\nfrom all the specified item types. For example: `q=abacab&type=album,track` returns\\nboth albums and tracks matching \\\"abacab\\\".\\n\"}, \"market\": {\"type\": \"string\", \"description\": \"An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).\\n  If a country code is specified, only content that is available in that market will be returned.<br/>\\n  If a valid user access token is specified in the request header, the country associated with\\n  the user account will take priority over this parameter.<br/>\\n  _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>\\n  Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).\\n\"}, \"limit\": {\"type\": \"integer\", \"description\": \"The maximum number of results to return in each item type.\\n\"}, \"offset\": {\"type\": \"integer\", \"description\": \"The index of the first result to return. Use\\nwith limit to get the next page of search results.\\n\"}, \"include_external\": {\"type\": \"string\", \"description\": \"If `include_external=audio` is specified it signals that the client can play externally hosted audio content, and marks\\nthe content as playable in the response. By default externally hosted audio content is marked as unplayable in the response.\\n\"}}, \"required\": [\"q\", \"type\"]}}, {\"name\": \"GET_tracks__id_\", \"description\": \"Get Spotify catalog information for a single track identified by its\\nunique Spotify ID.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"id\": {\"type\": \"string\", \"description\": \"The [Spotify ID](/documentation/web-api/#spotify-uris-and-ids)\\nfor the track.\\n\"}, \"market\": {\"type\": \"string\", \"description\": \"An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).\\n  If a country code is specified, only content that is available in that market will be returned.<br/>\\n  If a valid user access token is specified in the request header, the country associated with\\n  the user account will take priority over this parameter.<br/>\\n  _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>\\n  Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).\\n\"}}, \"required\": [\"id\"]}}, {\"name\": \"PUT_me_following\", \"description\": \"Add the current user as a follower of one or more artists or other Spotify users.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"type\": {\"type\": \"string\", \"description\": \"The ID type.\\n\"}, \"ids\": {\"type\": \"string\", \"description\": \"A comma-separated list of the artist or the user [Spotify IDs](/documentation/web-api/#spotify-uris-and-ids).\\nA maximum of 50 IDs can be sent in one request.\\n\"}}, \"required\": [\"type\", \"ids\"]}}]\n\nGraphQL schema:\n\ntype GET_search_Album {\n  album_type: String\n  artists: [GET_search_ArtistsEntry]\n  available_markets: [String]\n  external_urls: GET_search_ExternalUrls1\n  href: String\n  id: String\n  images: [GET_search_ImagesEntry]\n  name: String\n  release_date: String\n  release_date_precision: String\n  total_tracks: Int\n  type: String\n  uri: String\n}\n\ntype GET_search_Artists1Entry {\n  external_urls: GET_search_ExternalUrls2\n  href: String\n  id: String\n  name: String\n  type: String\n  uri: String\n}\n\ntype GET_search_ArtistsEntry {\n  external_urls: GET_search_ExternalUrls\n  href: String\n  id: String\n  name: String\n  type: String\n  uri: String\n}\n\ntype GET_search_ExternalIds {\n  isrc: String\n}\n\ntype GET_search_ExternalUrls {\n  spotify: String\n}\n\ntype GET_search_ExternalUrls1 {\n  spotify: String\n}\n\ntype GET_search_ExternalUrls2 {\n  spotify: String\n}\n\ntype GET_search_ExternalUrls3 {\n  spotify: String\n}\n\ntype GET_search_ImagesEntry {\n  height: Int\n  url: String\n  width: Int\n}\n\ntype GET_search_ItemsEntry {\n  album: GET_search_Album\n  artists: [GET_search_Artists1Entry]\n  available_markets: [String]\n  disc_number: Int\n  duration_ms: Int\n  explicit: Boolean\n  external_ids: GET_search_ExternalIds\n  external_urls: GET_search_ExternalUrls3\n  href: String\n  id: String\n  is_local: Boolean\n  name: String\n  popularity: Int\n  preview_url: String\n  track_number: Int\n  type: String\n  uri: String\n}\n\ntype GET_search_Root {\n  tracks: GET_search_Tracks\n}\n\ntype GET_search_Tracks {\n  href: String\n  items: [GET_search_ItemsEntry]\n  limit: Int\n  next: String\n  offset: Int\n  \"\"\"\n  Field \"previous\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  previous: JSON\n  total: Int\n}\n\ntype Query {\n  GET_search(\n    q: String\n    spotify_access_token: String!\n    type: String\n  ): GET_search_Root\n    @rest(\n      endpoint: \"https://api.spotify.com/v1/search\"\n      headers: [\n        { name: \"authorization\", value: \"Bearer $spotify_access_token;\" }\n      ]\n    )\n}\ntype GET_tracks__id_Album {\n  album_type: String\n  artists: [GET_tracks__id_ArtistsEntry]\n  available_markets: [String]\n  external_urls: GET_tracks__id_ExternalUrls1\n  href: String\n  id: String\n  images: [GET_tracks__id_ImagesEntry]\n  name: String\n  release_date: Date\n  release_date_precision: String\n  total_tracks: Int\n  type: String\n  uri: String\n}\n\ntype GET_tracks__id_Artists1Entry {\n  external_urls: GET_tracks__id_ExternalUrls2\n  href: String\n  id: String\n  name: String\n  type: String\n  uri: String\n}\n\ntype GET_tracks__id_ArtistsEntry {\n  external_urls: GET_tracks__id_ExternalUrls\n  href: String\n  id: String\n  name: String\n  type: String\n  uri: String\n}\n\ntype GET_tracks__id_ExternalIds {\n  isrc: String\n}\n\ntype GET_tracks__id_ExternalUrls {\n  spotify: String\n}\n\ntype GET_tracks__id_ExternalUrls1 {\n  spotify: String\n}\n\ntype GET_tracks__id_ExternalUrls2 {\n  spotify: String\n}\n\ntype GET_tracks__id_ExternalUrls3 {\n  spotify: String\n}\n\ntype GET_tracks__id_ImagesEntry {\n  height: Int\n  url: String\n  width: Int\n}\n\ntype GET_tracks__id_Root {\n  album: GET_tracks__id_Album\n  artists: [GET_tracks__id_Artists1Entry]\n  available_markets: [String]\n  disc_number: Int\n  duration_ms: Int\n  explicit: Boolean\n  external_ids: GET_tracks__id_ExternalIds\n  external_urls: GET_tracks__id_ExternalUrls3\n  href: String\n  id: String\n  is_local: Boolean\n  name: String\n  popularity: Int\n  preview_url: String\n  track_number: Int\n  type: String\n  uri: String\n}\n\ntype Query {\n  GET_tracks__id_(\n    id: String!\n    spotify_access_token: String!\n  ): GET_tracks__id_Root\n    @rest(\n      endpoint: \"https://api.spotify.com/v1/tracks/$id;\"\n      headers: [\n        { name: \"authorization\", value: \"Bearer $spotify_access_token;\" }\n      ]\n    )\n}\n\nUtterance: Follow all the singers involved in the song When You Believe", "output": "response_obj = GET_search(q=\"When You Believe\", type=\"artist\")\nresponse_obj1 = GET_tracks__id_(id=response_obj.tracks.items[0].id)\nPUT_me_following(type=\"artist\", ids=\",\".join([artist.id for artist in response_obj1.artists]))\n", "function_specs": "[{\"name\": \"GET_search\", \"description\": \"Get Spotify catalog information about albums, artists, playlists, tracks, shows, episodes or audiobooks\\nthat match a keyword string.<br />\\n**Note: Audiobooks are only available for the US, UK, Ireland, New Zealand and Australia markets.**\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"q\": {\"type\": \"string\", \"description\": \"Your search query.\\n\\nYou can narrow down your search using field filters. The available filters are `album`, `artist`, `track`, `year`, `upc`, `tag:hipster`, `tag:new`, `isrc`, and `genre`. Each field filter only applies to certain result types.\\n\\nThe `artist` and `year` filters can be used while searching albums, artists and tracks. You can filter on a single `year` or a range (e.g. 1955-1960).<br />\\nThe `album` filter can be used while searching albums and tracks.<br />\\nThe `genre` filter can be used while searching artists and tracks.<br />\\nThe `isrc` and `track` filters can be used while searching tracks.<br />\\nThe `upc`, `tag:new` and `tag:hipster` filters can only be used while searching albums. The `tag:new` filter will return albums released in the past two weeks and `tag:hipster` can be used to return only albums with the lowest 10% popularity.<br />\\n\"}, \"type\": {\"type\": \"array\", \"description\": \"A comma-separated list of item types to search across. Search results include hits\\nfrom all the specified item types. For example: `q=abacab&type=album,track` returns\\nboth albums and tracks matching \\\"abacab\\\".\\n\"}, \"market\": {\"type\": \"string\", \"description\": \"An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).\\n  If a country code is specified, only content that is available in that market will be returned.<br/>\\n  If a valid user access token is specified in the request header, the country associated with\\n  the user account will take priority over this parameter.<br/>\\n  _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>\\n  Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).\\n\"}, \"limit\": {\"type\": \"integer\", \"description\": \"The maximum number of results to return in each item type.\\n\"}, \"offset\": {\"type\": \"integer\", \"description\": \"The index of the first result to return. Use\\nwith limit to get the next page of search results.\\n\"}, \"include_external\": {\"type\": \"string\", \"description\": \"If `include_external=audio` is specified it signals that the client can play externally hosted audio content, and marks\\nthe content as playable in the response. By default externally hosted audio content is marked as unplayable in the response.\\n\"}}, \"required\": [\"q\", \"type\"]}}, {\"name\": \"GET_tracks__id_\", \"description\": \"Get Spotify catalog information for a single track identified by its\\nunique Spotify ID.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"id\": {\"type\": \"string\", \"description\": \"The [Spotify ID](/documentation/web-api/#spotify-uris-and-ids)\\nfor the track.\\n\"}, \"market\": {\"type\": \"string\", \"description\": \"An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).\\n  If a country code is specified, only content that is available in that market will be returned.<br/>\\n  If a valid user access token is specified in the request header, the country associated with\\n  the user account will take priority over this parameter.<br/>\\n  _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>\\n  Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).\\n\"}}, \"required\": [\"id\"]}}, {\"name\": \"PUT_me_following\", \"description\": \"Add the current user as a follower of one or more artists or other Spotify users.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"type\": {\"type\": \"string\", \"description\": \"The ID type.\\n\"}, \"ids\": {\"type\": \"string\", \"description\": \"A comma-separated list of the artist or the user [Spotify IDs](/documentation/web-api/#spotify-uris-and-ids).\\nA maximum of 50 IDs can be sent in one request.\\n\"}}, \"required\": [\"type\", \"ids\"]}}]", "GraphQL_schema": "type GET_search_Album {\n  album_type: String\n  artists: [GET_search_ArtistsEntry]\n  available_markets: [String]\n  external_urls: GET_search_ExternalUrls1\n  href: String\n  id: String\n  images: [GET_search_ImagesEntry]\n  name: String\n  release_date: String\n  release_date_precision: String\n  total_tracks: Int\n  type: String\n  uri: String\n}\n\ntype GET_search_Artists1Entry {\n  external_urls: GET_search_ExternalUrls2\n  href: String\n  id: String\n  name: String\n  type: String\n  uri: String\n}\n\ntype GET_search_ArtistsEntry {\n  external_urls: GET_search_ExternalUrls\n  href: String\n  id: String\n  name: String\n  type: String\n  uri: String\n}\n\ntype GET_search_ExternalIds {\n  isrc: String\n}\n\ntype GET_search_ExternalUrls {\n  spotify: String\n}\n\ntype GET_search_ExternalUrls1 {\n  spotify: String\n}\n\ntype GET_search_ExternalUrls2 {\n  spotify: String\n}\n\ntype GET_search_ExternalUrls3 {\n  spotify: String\n}\n\ntype GET_search_ImagesEntry {\n  height: Int\n  url: String\n  width: Int\n}\n\ntype GET_search_ItemsEntry {\n  album: GET_search_Album\n  artists: [GET_search_Artists1Entry]\n  available_markets: [String]\n  disc_number: Int\n  duration_ms: Int\n  explicit: Boolean\n  external_ids: GET_search_ExternalIds\n  external_urls: GET_search_ExternalUrls3\n  href: String\n  id: String\n  is_local: Boolean\n  name: String\n  popularity: Int\n  preview_url: String\n  track_number: Int\n  type: String\n  uri: String\n}\n\ntype GET_search_Root {\n  tracks: GET_search_Tracks\n}\n\ntype GET_search_Tracks {\n  href: String\n  items: [GET_search_ItemsEntry]\n  limit: Int\n  next: String\n  offset: Int\n  \"\"\"\n  Field \"previous\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  previous: JSON\n  total: Int\n}\n\ntype Query {\n  GET_search(\n    q: String\n    spotify_access_token: String!\n    type: String\n  ): GET_search_Root\n    @rest(\n      endpoint: \"https://api.spotify.com/v1/search\"\n      headers: [\n        { name: \"authorization\", value: \"Bearer $spotify_access_token;\" }\n      ]\n    )\n}\ntype GET_tracks__id_Album {\n  album_type: String\n  artists: [GET_tracks__id_ArtistsEntry]\n  available_markets: [String]\n  external_urls: GET_tracks__id_ExternalUrls1\n  href: String\n  id: String\n  images: [GET_tracks__id_ImagesEntry]\n  name: String\n  release_date: Date\n  release_date_precision: String\n  total_tracks: Int\n  type: String\n  uri: String\n}\n\ntype GET_tracks__id_Artists1Entry {\n  external_urls: GET_tracks__id_ExternalUrls2\n  href: String\n  id: String\n  name: String\n  type: String\n  uri: String\n}\n\ntype GET_tracks__id_ArtistsEntry {\n  external_urls: GET_tracks__id_ExternalUrls\n  href: String\n  id: String\n  name: String\n  type: String\n  uri: String\n}\n\ntype GET_tracks__id_ExternalIds {\n  isrc: String\n}\n\ntype GET_tracks__id_ExternalUrls {\n  spotify: String\n}\n\ntype GET_tracks__id_ExternalUrls1 {\n  spotify: String\n}\n\ntype GET_tracks__id_ExternalUrls2 {\n  spotify: String\n}\n\ntype GET_tracks__id_ExternalUrls3 {\n  spotify: String\n}\n\ntype GET_tracks__id_ImagesEntry {\n  height: Int\n  url: String\n  width: Int\n}\n\ntype GET_tracks__id_Root {\n  album: GET_tracks__id_Album\n  artists: [GET_tracks__id_Artists1Entry]\n  available_markets: [String]\n  disc_number: Int\n  duration_ms: Int\n  explicit: Boolean\n  external_ids: GET_tracks__id_ExternalIds\n  external_urls: GET_tracks__id_ExternalUrls3\n  href: String\n  id: String\n  is_local: Boolean\n  name: String\n  popularity: Int\n  preview_url: String\n  track_number: Int\n  type: String\n  uri: String\n}\n\ntype Query {\n  GET_tracks__id_(\n    id: String!\n    spotify_access_token: String!\n  ): GET_tracks__id_Root\n    @rest(\n      endpoint: \"https://api.spotify.com/v1/tracks/$id;\"\n      headers: [\n        { name: \"authorization\", value: \"Bearer $spotify_access_token;\" }\n      ]\n    )\n}\n", "utterance": "Follow all the singers involved in the song When You Believe"}
{"domain": "spotify", "input": "Function Signatures:\n\n[{\"name\": \"GET_me_top__type_\", \"description\": \"Get the current user's top artists or tracks based on calculated affinity.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"type\": {\"type\": \"string\", \"description\": \"The type of entity to return. Valid values: `artists` or `tracks`\\n\"}, \"time_range\": {\"type\": \"string\", \"description\": \"Over what time frame the affinities are computed. Valid values: `long_term` (calculated from several years of data and including all new data as it becomes available), `medium_term` (approximately last 6 months), `short_term` (approximately last 4 weeks). Default: `medium_term`\\n\"}, \"limit\": {\"type\": \"integer\", \"description\": \"The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50.\\n\"}, \"offset\": {\"type\": \"integer\", \"description\": \"The index of the first item to return. Default: 0 (the first item). Use with limit to get the next set of items.\\n\"}}, \"required\": [\"type\"]}}, {\"name\": \"GET_me\", \"description\": \"Get detailed profile information about the current user (including the\\ncurrent user's username).\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {}, \"required\": []}}, {\"name\": \"POST_users__user_id__playlists\", \"description\": \"Create a playlist for a Spotify user (Before calling this API, must call GET /me first to get the user_id). (The playlist will be empty until\\nyou [add tracks](/documentation/web-api/reference/#/operations/add-tracks-to-playlist).)\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"user_id\": {\"type\": \"string\", \"description\": \"The user's [Spotify user ID](/documentation/web-api/#spotify-uris-and-ids).\\n\"}, \"name\": {\"type\": \"string\", \"description\": \"The name for the new playlist, for example \\\"Your Coolest Playlist\\\". This name does not need to be unique; a user may have several playlists with the same name.\"}, \"public\": {\"type\": \"boolean\", \"description\": \"Defaults to true. If true the playlist will be public, if false it will be private. To be able to create private playlists, the user must have granted the playlist-modify-private scope\"}, \"collaborative\": {\"type\": \"boolean\", \"description\": \"Defaults to false. If true the playlist will be collaborative. Note: to create a collaborative playlist you must also set public to false. To create collaborative playlists you must have granted playlist-modify-private and playlist-modify-public scopes.\"}, \"description\": {\"type\": \"string\", \"description\": \"value for playlist description as displayed in Spotify Clients and in the Web API.\"}}, \"required\": [\"user_id\", \"name\"], \"body_params\": [\"name\", \"public\", \"collaborative\", \"description\"]}}, {\"name\": \"POST_playlists__playlist_id__tracks\", \"description\": \"Add one or more items to a user's playlist.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"playlist_id\": {\"type\": \"string\", \"description\": \"The [Spotify ID](/documentation/web-api/#spotify-uris-and-ids) of the playlist.\\n\"}, \"position\": {\"type\": \"integer\", \"description\": \"The position to insert the items, a zero-based index. For example, to insert the items in the first position: `position=0`; to insert the items in the third position: `position=2`. If omitted, the items will be appended to the playlist. Items are added in the order they are listed in the query string or request body.\\n\"}, \"uris\": {\"type\": \"string\", \"description\": \"A comma-separated list of [Spotify URIs](/documentation/web-api/#spotify-uris-and-ids) to add, can be track or episode URIs. For example:<br/>`uris=spotify:track:4iV5W9uYEdYUVa79Axb7Rh, spotify:track:1301WleyT98MSxVHPZCA6M, spotify:episode:512ojhOuo1ktJprKbVcKyQ`<br/>A maximum of 100 items can be added in one request. <br/>\\n_**Note**: it is likely that passing a large number of item URIs as a query parameter will exceed the maximum length of the request URI. When adding a large number of items, it is recommended to pass them in the request body, see below._\\n\"}}, \"required\": [\"playlist_id\"]}}]\n\nGraphQL schema:\n\ntype POST_users__user_id__playlists_ExternalUrls {\n  spotify: String\n}\n\ntype POST_users__user_id__playlists_ExternalUrls1 {\n  spotify: String\n}\n\ntype POST_users__user_id__playlists_Followers {\n  \"\"\"\n  Field \"href\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  href: JSON\n  total: Int\n}\n\ntype POST_users__user_id__playlists_Owner {\n  \"\"\"\n  Field \"display_name\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  display_name: JSON\n  external_urls: POST_users__user_id__playlists_ExternalUrls1\n  href: String\n  id: String\n  type: String\n  uri: String\n}\n\ntype POST_users__user_id__playlists_Root {\n  collaborative: Boolean\n  \"\"\"\n  Field \"description\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  description: JSON\n  external_urls: POST_users__user_id__playlists_ExternalUrls\n  followers: POST_users__user_id__playlists_Followers\n  href: String\n  id: String\n  images: [JSON]\n  name: String\n  owner: POST_users__user_id__playlists_Owner\n  \"\"\"\n  Field \"primary_color\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  primary_color: JSON\n  public: Boolean\n  snapshot_id: String\n  tracks: POST_users__user_id__playlists_Tracks\n  type: String\n  uri: String\n}\n\ntype POST_users__user_id__playlists_Tracks {\n  href: String\n  items: [JSON]\n  limit: Int\n  \"\"\"\n  Field \"next\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  next: JSON\n  offset: Int\n  \"\"\"\n  Field \"previous\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  previous: JSON\n  total: Int\n}\n\ntype Query {\n  POST_users__user_id__playlists(\n    name: String\n    spotify_access_token: String!\n  ): POST_users__user_id__playlists_Root\n    @rest(\n      method: POST\n      endpoint: \"https://api.spotify.com/v1/users/31rph2hasdr2pflu7x5sffw4xxgy/playlists\"\n      headers: [\n        { name: \"authorization\", value: \"Bearer $spotify_access_token;\" }\n      ]\n    )\n}\ntype GET_me_top__type_Album {\n  album_type: String\n  artists: [GET_me_top__type_ArtistsEntry]\n  available_markets: [String]\n  external_urls: GET_me_top__type_ExternalUrls1\n  href: String\n  id: String\n  images: [GET_me_top__type_ImagesEntry]\n  name: String\n  release_date: Int\n  release_date_precision: String\n  total_tracks: Int\n  type: String\n  uri: String\n}\n\ntype GET_me_top__type_Artists1Entry {\n  external_urls: GET_me_top__type_ExternalUrls2\n  href: String\n  id: String\n  name: String\n  type: String\n  uri: String\n}\n\ntype GET_me_top__type_ArtistsEntry {\n  external_urls: GET_me_top__type_ExternalUrls\n  href: String\n  id: String\n  name: String\n  type: String\n  uri: String\n}\n\ntype GET_me_top__type_ExternalIds {\n  isrc: String\n}\n\ntype GET_me_top__type_ExternalUrls {\n  spotify: String\n}\n\ntype GET_me_top__type_ExternalUrls1 {\n  spotify: String\n}\n\ntype GET_me_top__type_ExternalUrls2 {\n  spotify: String\n}\n\ntype GET_me_top__type_ExternalUrls3 {\n  spotify: String\n}\n\ntype GET_me_top__type_ImagesEntry {\n  height: Int\n  url: String\n  width: Int\n}\n\ntype GET_me_top__type_ItemsEntry {\n  album: GET_me_top__type_Album\n  artists: [GET_me_top__type_Artists1Entry]\n  available_markets: [String]\n  disc_number: Int\n  duration_ms: Int\n  explicit: Boolean\n  external_ids: GET_me_top__type_ExternalIds\n  external_urls: GET_me_top__type_ExternalUrls3\n  href: String\n  id: String\n  is_local: Boolean\n  name: String\n  popularity: Int\n  preview_url: String\n  track_number: Int\n  type: String\n  uri: String\n}\n\ntype GET_me_top__type_Root {\n  href: String\n  items: [GET_me_top__type_ItemsEntry]\n  limit: Int\n  \"\"\"\n  Field \"next\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  next: JSON\n  offset: Int\n  \"\"\"\n  Field \"previous\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  previous: JSON\n  total: Int\n}\n\ntype Query {\n  GET_me_top__type_(\n    spotify_access_token: String!\n    type: String!\n  ): GET_me_top__type_Root\n    @rest(\n      endpoint: \"https://api.spotify.com/v1/me/top/$type;\"\n      headers: [\n        { name: \"authorization\", value: \"Bearer $spotify_access_token;\" }\n      ]\n    )\n}\ntype GET_me_ExplicitContent {\n  filter_enabled: Boolean\n  filter_locked: Boolean\n}\n\ntype GET_me_ExternalUrls {\n  spotify: String\n}\n\ntype GET_me_Followers {\n  \"\"\"\n  Field \"href\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  href: JSON\n  total: Int\n}\n\ntype GET_me_Root {\n  country: String\n  display_name: String\n  email: String\n  explicit_content: GET_me_ExplicitContent\n  external_urls: GET_me_ExternalUrls\n  followers: GET_me_Followers\n  href: String\n  id: String\n  images: [JSON]\n  product: String\n  type: String\n  uri: String\n}\n\ntype Query {\n  GET_me(spotify_access_token: String!): GET_me_Root\n    @rest(\n      endpoint: \"https://api.spotify.com/v1/me\"\n      headers: [\n        { name: \"authorization\", value: \"Bearer $spotify_access_token;\" }\n      ]\n    )\n}\n\nUtterance: Make my top tracks a new playlist called 'My Top'", "output": "response_obj = GET_me_top__type_(type=\"tracks\")\nresponse_obj1 = GET_me()\nresponse_obj2 = POST_users__user_id__playlists(user_id=response_obj1.id, name=\"My Top\")\nPOST_playlists__playlist_id__tracks(playlist_id=response_obj2.id, uris=\",\".join([item.uri for item in response_obj.items]))\n", "function_specs": "[{\"name\": \"GET_me_top__type_\", \"description\": \"Get the current user's top artists or tracks based on calculated affinity.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"type\": {\"type\": \"string\", \"description\": \"The type of entity to return. Valid values: `artists` or `tracks`\\n\"}, \"time_range\": {\"type\": \"string\", \"description\": \"Over what time frame the affinities are computed. Valid values: `long_term` (calculated from several years of data and including all new data as it becomes available), `medium_term` (approximately last 6 months), `short_term` (approximately last 4 weeks). Default: `medium_term`\\n\"}, \"limit\": {\"type\": \"integer\", \"description\": \"The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50.\\n\"}, \"offset\": {\"type\": \"integer\", \"description\": \"The index of the first item to return. Default: 0 (the first item). Use with limit to get the next set of items.\\n\"}}, \"required\": [\"type\"]}}, {\"name\": \"GET_me\", \"description\": \"Get detailed profile information about the current user (including the\\ncurrent user's username).\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {}, \"required\": []}}, {\"name\": \"POST_users__user_id__playlists\", \"description\": \"Create a playlist for a Spotify user (Before calling this API, must call GET /me first to get the user_id). (The playlist will be empty until\\nyou [add tracks](/documentation/web-api/reference/#/operations/add-tracks-to-playlist).)\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"user_id\": {\"type\": \"string\", \"description\": \"The user's [Spotify user ID](/documentation/web-api/#spotify-uris-and-ids).\\n\"}, \"name\": {\"type\": \"string\", \"description\": \"The name for the new playlist, for example \\\"Your Coolest Playlist\\\". This name does not need to be unique; a user may have several playlists with the same name.\"}, \"public\": {\"type\": \"boolean\", \"description\": \"Defaults to true. If true the playlist will be public, if false it will be private. To be able to create private playlists, the user must have granted the playlist-modify-private scope\"}, \"collaborative\": {\"type\": \"boolean\", \"description\": \"Defaults to false. If true the playlist will be collaborative. Note: to create a collaborative playlist you must also set public to false. To create collaborative playlists you must have granted playlist-modify-private and playlist-modify-public scopes.\"}, \"description\": {\"type\": \"string\", \"description\": \"value for playlist description as displayed in Spotify Clients and in the Web API.\"}}, \"required\": [\"user_id\", \"name\"], \"body_params\": [\"name\", \"public\", \"collaborative\", \"description\"]}}, {\"name\": \"POST_playlists__playlist_id__tracks\", \"description\": \"Add one or more items to a user's playlist.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"playlist_id\": {\"type\": \"string\", \"description\": \"The [Spotify ID](/documentation/web-api/#spotify-uris-and-ids) of the playlist.\\n\"}, \"position\": {\"type\": \"integer\", \"description\": \"The position to insert the items, a zero-based index. For example, to insert the items in the first position: `position=0`; to insert the items in the third position: `position=2`. If omitted, the items will be appended to the playlist. Items are added in the order they are listed in the query string or request body.\\n\"}, \"uris\": {\"type\": \"string\", \"description\": \"A comma-separated list of [Spotify URIs](/documentation/web-api/#spotify-uris-and-ids) to add, can be track or episode URIs. For example:<br/>`uris=spotify:track:4iV5W9uYEdYUVa79Axb7Rh, spotify:track:1301WleyT98MSxVHPZCA6M, spotify:episode:512ojhOuo1ktJprKbVcKyQ`<br/>A maximum of 100 items can be added in one request. <br/>\\n_**Note**: it is likely that passing a large number of item URIs as a query parameter will exceed the maximum length of the request URI. When adding a large number of items, it is recommended to pass them in the request body, see below._\\n\"}}, \"required\": [\"playlist_id\"]}}]", "GraphQL_schema": "type POST_users__user_id__playlists_ExternalUrls {\n  spotify: String\n}\n\ntype POST_users__user_id__playlists_ExternalUrls1 {\n  spotify: String\n}\n\ntype POST_users__user_id__playlists_Followers {\n  \"\"\"\n  Field \"href\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  href: JSON\n  total: Int\n}\n\ntype POST_users__user_id__playlists_Owner {\n  \"\"\"\n  Field \"display_name\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  display_name: JSON\n  external_urls: POST_users__user_id__playlists_ExternalUrls1\n  href: String\n  id: String\n  type: String\n  uri: String\n}\n\ntype POST_users__user_id__playlists_Root {\n  collaborative: Boolean\n  \"\"\"\n  Field \"description\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  description: JSON\n  external_urls: POST_users__user_id__playlists_ExternalUrls\n  followers: POST_users__user_id__playlists_Followers\n  href: String\n  id: String\n  images: [JSON]\n  name: String\n  owner: POST_users__user_id__playlists_Owner\n  \"\"\"\n  Field \"primary_color\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  primary_color: JSON\n  public: Boolean\n  snapshot_id: String\n  tracks: POST_users__user_id__playlists_Tracks\n  type: String\n  uri: String\n}\n\ntype POST_users__user_id__playlists_Tracks {\n  href: String\n  items: [JSON]\n  limit: Int\n  \"\"\"\n  Field \"next\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  next: JSON\n  offset: Int\n  \"\"\"\n  Field \"previous\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  previous: JSON\n  total: Int\n}\n\ntype Query {\n  POST_users__user_id__playlists(\n    name: String\n    spotify_access_token: String!\n  ): POST_users__user_id__playlists_Root\n    @rest(\n      method: POST\n      endpoint: \"https://api.spotify.com/v1/users/31rph2hasdr2pflu7x5sffw4xxgy/playlists\"\n      headers: [\n        { name: \"authorization\", value: \"Bearer $spotify_access_token;\" }\n      ]\n    )\n}\ntype GET_me_top__type_Album {\n  album_type: String\n  artists: [GET_me_top__type_ArtistsEntry]\n  available_markets: [String]\n  external_urls: GET_me_top__type_ExternalUrls1\n  href: String\n  id: String\n  images: [GET_me_top__type_ImagesEntry]\n  name: String\n  release_date: Int\n  release_date_precision: String\n  total_tracks: Int\n  type: String\n  uri: String\n}\n\ntype GET_me_top__type_Artists1Entry {\n  external_urls: GET_me_top__type_ExternalUrls2\n  href: String\n  id: String\n  name: String\n  type: String\n  uri: String\n}\n\ntype GET_me_top__type_ArtistsEntry {\n  external_urls: GET_me_top__type_ExternalUrls\n  href: String\n  id: String\n  name: String\n  type: String\n  uri: String\n}\n\ntype GET_me_top__type_ExternalIds {\n  isrc: String\n}\n\ntype GET_me_top__type_ExternalUrls {\n  spotify: String\n}\n\ntype GET_me_top__type_ExternalUrls1 {\n  spotify: String\n}\n\ntype GET_me_top__type_ExternalUrls2 {\n  spotify: String\n}\n\ntype GET_me_top__type_ExternalUrls3 {\n  spotify: String\n}\n\ntype GET_me_top__type_ImagesEntry {\n  height: Int\n  url: String\n  width: Int\n}\n\ntype GET_me_top__type_ItemsEntry {\n  album: GET_me_top__type_Album\n  artists: [GET_me_top__type_Artists1Entry]\n  available_markets: [String]\n  disc_number: Int\n  duration_ms: Int\n  explicit: Boolean\n  external_ids: GET_me_top__type_ExternalIds\n  external_urls: GET_me_top__type_ExternalUrls3\n  href: String\n  id: String\n  is_local: Boolean\n  name: String\n  popularity: Int\n  preview_url: String\n  track_number: Int\n  type: String\n  uri: String\n}\n\ntype GET_me_top__type_Root {\n  href: String\n  items: [GET_me_top__type_ItemsEntry]\n  limit: Int\n  \"\"\"\n  Field \"next\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  next: JSON\n  offset: Int\n  \"\"\"\n  Field \"previous\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  previous: JSON\n  total: Int\n}\n\ntype Query {\n  GET_me_top__type_(\n    spotify_access_token: String!\n    type: String!\n  ): GET_me_top__type_Root\n    @rest(\n      endpoint: \"https://api.spotify.com/v1/me/top/$type;\"\n      headers: [\n        { name: \"authorization\", value: \"Bearer $spotify_access_token;\" }\n      ]\n    )\n}\ntype GET_me_ExplicitContent {\n  filter_enabled: Boolean\n  filter_locked: Boolean\n}\n\ntype GET_me_ExternalUrls {\n  spotify: String\n}\n\ntype GET_me_Followers {\n  \"\"\"\n  Field \"href\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  href: JSON\n  total: Int\n}\n\ntype GET_me_Root {\n  country: String\n  display_name: String\n  email: String\n  explicit_content: GET_me_ExplicitContent\n  external_urls: GET_me_ExternalUrls\n  followers: GET_me_Followers\n  href: String\n  id: String\n  images: [JSON]\n  product: String\n  type: String\n  uri: String\n}\n\ntype Query {\n  GET_me(spotify_access_token: String!): GET_me_Root\n    @rest(\n      endpoint: \"https://api.spotify.com/v1/me\"\n      headers: [\n        { name: \"authorization\", value: \"Bearer $spotify_access_token;\" }\n      ]\n    )\n}\n", "utterance": "Make my top tracks a new playlist called 'My Top'"}
{"domain": "spotify", "input": "Function Signatures:\n\n[{\"name\": \"PUT_me_player_pause\", \"description\": \"Pause playback on the user's account.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {}, \"required\": []}}, {\"name\": \"GET_me_player_devices\", \"description\": \"Get information about a user\\u2019s available devices.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {}, \"required\": []}}, {\"name\": \"PUT_me_player_play\", \"description\": \"Start a new context or resume current playback on the user's active device.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"context_uri\": {\"type\": \"string\", \"description\": \"Optional. Spotify URI of the context to play. Valid contexts are albums, artists & playlists. {context_uri:\\\"spotify:album:1Je1IMUlBXcx1Fz0WE7oPT\\\"}\"}, \"uris\": {\"type\": \"array\", \"description\": \"Optional. A JSON array of the Spotify track URIs to play. For example: {\\\"uris\\\": [\\\"spotify:track:4iV5W9uYEdYUVa79Axb7Rh\\\", \\\"spotify:track:1301WleyT98MSxVHPZCA6M\\\"]}\"}, \"offset\": {\"type\": \"array\", \"description\": \"Optional. Indicates from where in the context playback should start. Only available when context_uri corresponds to an album or playlist object \\\"position\\\" is zero based and can\\u2019t be negative. Example: \\\"offset\\\": {\\\"position\\\": 5} \\\"uri\\\" is a string representing the uri of the item to start at. Example: \\\"offset\\\": {\\\"uri\\\": \\\"spotify:track:1301WleyT98MSxVHPZCA6M\\\"}\"}, \"position_ms\": {\"type\": \"integer\", \"description\": \"\"}}, \"required\": [], \"body_params\": [\"context_uri\", \"uris\", \"offset\", \"position_ms\"]}}]\n\nGraphQL schema:\n\ntype GET_me_player_devices_DevicesEntry {\n  id: String\n  is_active: Boolean\n  is_private_session: Boolean\n  is_restricted: Boolean\n  name: String\n  supports_volume: Boolean\n  type: String\n  volume_percent: Int\n}\n\ntype GET_me_player_devices_Root {\n  devices: [GET_me_player_devices_DevicesEntry]\n}\n\ntype Query {\n  GET_me_player_devices(\n    spotify_access_token: String!\n  ): GET_me_player_devices_Root\n    @rest(\n      endpoint: \"https://api.spotify.com/v1/me/player/devices\"\n      headers: [\n        { name: \"authorization\", value: \"Bearer $spotify_access_token;\" }\n      ]\n    )\n}\n\nUtterance: pause current song and resume it on 'My PC'", "output": "PUT_me_player_pause()\nresponse_obj = GET_me_player_devices()\nPUT_me_player_play(device_id=[device.id for device in response_obj.devices if device.name == \"My PC\"][0])\n", "function_specs": "[{\"name\": \"PUT_me_player_pause\", \"description\": \"Pause playback on the user's account.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {}, \"required\": []}}, {\"name\": \"GET_me_player_devices\", \"description\": \"Get information about a user\\u2019s available devices.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {}, \"required\": []}}, {\"name\": \"PUT_me_player_play\", \"description\": \"Start a new context or resume current playback on the user's active device.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"context_uri\": {\"type\": \"string\", \"description\": \"Optional. Spotify URI of the context to play. Valid contexts are albums, artists & playlists. {context_uri:\\\"spotify:album:1Je1IMUlBXcx1Fz0WE7oPT\\\"}\"}, \"uris\": {\"type\": \"array\", \"description\": \"Optional. A JSON array of the Spotify track URIs to play. For example: {\\\"uris\\\": [\\\"spotify:track:4iV5W9uYEdYUVa79Axb7Rh\\\", \\\"spotify:track:1301WleyT98MSxVHPZCA6M\\\"]}\"}, \"offset\": {\"type\": \"array\", \"description\": \"Optional. Indicates from where in the context playback should start. Only available when context_uri corresponds to an album or playlist object \\\"position\\\" is zero based and can\\u2019t be negative. Example: \\\"offset\\\": {\\\"position\\\": 5} \\\"uri\\\" is a string representing the uri of the item to start at. Example: \\\"offset\\\": {\\\"uri\\\": \\\"spotify:track:1301WleyT98MSxVHPZCA6M\\\"}\"}, \"position_ms\": {\"type\": \"integer\", \"description\": \"\"}}, \"required\": [], \"body_params\": [\"context_uri\", \"uris\", \"offset\", \"position_ms\"]}}]", "GraphQL_schema": "type GET_me_player_devices_DevicesEntry {\n  id: String\n  is_active: Boolean\n  is_private_session: Boolean\n  is_restricted: Boolean\n  name: String\n  supports_volume: Boolean\n  type: String\n  volume_percent: Int\n}\n\ntype GET_me_player_devices_Root {\n  devices: [GET_me_player_devices_DevicesEntry]\n}\n\ntype Query {\n  GET_me_player_devices(\n    spotify_access_token: String!\n  ): GET_me_player_devices_Root\n    @rest(\n      endpoint: \"https://api.spotify.com/v1/me/player/devices\"\n      headers: [\n        { name: \"authorization\", value: \"Bearer $spotify_access_token;\" }\n      ]\n    )\n}\n", "utterance": "pause current song and resume it on 'My PC'"}
{"domain": "spotify", "input": "Function Signatures:\n\n[{\"name\": \"GET_me_playlists\", \"description\": \"Get a list of the playlists owned or followed by the current Spotify\\nuser.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"limit\": {\"type\": \"integer\", \"description\": \"The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50.\\n\"}, \"offset\": {\"type\": \"integer\", \"description\": \"'The index of the first playlist to return. Default:\\n0 (the first object). Maximum offset: 100.000\\\\. Use with `limit` to get the\\nnext set of playlists.'\\n\"}}, \"required\": []}}, {\"name\": \"DELETE_playlists__playlist_id__tracks\", \"description\": \"Remove one or more items from a user's playlist.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"playlist_id\": {\"type\": \"string\", \"description\": \"The [Spotify ID](/documentation/web-api/#spotify-uris-and-ids) of the playlist.\\n\"}, \"tracks\": {\"type\": \"array\", \"description\": \"An array of objects containing Spotify URIs of the tracks or episodes to remove. For example: { \\\"tracks\\\": [{ \\\"uri\\\": \\\"spotify:track:4iV5W9uYEdYUVa79Axb7Rh\\\" },{ \\\"uri\\\": \\\"spotify:track:1301WleyT98MSxVHPZCA6M\\\" }] }. A maximum of 100 objects can be sent at once.\"}}, \"required\": [\"playlist_id\"], \"body_params\": [\"tracks\"]}}, {\"name\": \"PUT_playlists__playlist_id_\", \"description\": \"Change a playlist's name and public/private state. (The user must, of\\ncourse, own the playlist.)\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"playlist_id\": {\"type\": \"string\", \"description\": \"The [Spotify ID](/documentation/web-api/#spotify-uris-and-ids) of the playlist.\\n\"}, \"name\": {\"type\": \"string\", \"description\": \"The name for the new playlist, for example \\\"Your Coolest Playlist\\\". This name does not need to be unique; a user may have several playlists with the same name.\"}, \"public\": {\"type\": \"boolean\", \"description\": \"Defaults to true. If true the playlist will be public, if false it will be private. To be able to create private playlists, the user must have granted the playlist-modify-private scope\"}, \"collaborative\": {\"type\": \"boolean\", \"description\": \"Defaults to false. If true the playlist will be collaborative. Note: to create a collaborative playlist you must also set public to false. To create collaborative playlists you must have granted playlist-modify-private and playlist-modify-public scopes.\"}, \"description\": {\"type\": \"string\", \"description\": \"value for playlist description as displayed in Spotify Clients and in the Web API.\"}}, \"required\": [\"playlist_id\"], \"body_params\": [\"name\", \"public\", \"collaborative\", \"description\"]}}]\n\nGraphQL schema:\n\ntype GET_me_playlists_ExternalUrls {\n  spotify: String\n}\n\ntype GET_me_playlists_ExternalUrls1 {\n  spotify: String\n}\n\ntype GET_me_playlists_ImagesEntry {\n  \"\"\"\n  Field \"height\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  height: JSON\n  url: String\n  \"\"\"\n  Field \"width\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  width: JSON\n}\n\ntype GET_me_playlists_ItemsEntry {\n  collaborative: Boolean\n  description: String\n  external_urls: GET_me_playlists_ExternalUrls\n  href: String\n  id: String\n  images: [GET_me_playlists_ImagesEntry]\n  name: String\n  owner: GET_me_playlists_Owner\n  \"\"\"\n  Field \"primary_color\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  primary_color: JSON\n  public: Boolean\n  snapshot_id: String\n  tracks: GET_me_playlists_Tracks\n  type: String\n  uri: String\n}\n\ntype GET_me_playlists_Owner {\n  display_name: String\n  external_urls: GET_me_playlists_ExternalUrls1\n  href: String\n  id: String\n  type: String\n  uri: String\n}\n\ntype GET_me_playlists_Root {\n  href: String\n  items: [GET_me_playlists_ItemsEntry]\n  limit: Int\n  \"\"\"\n  Field \"next\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  next: JSON\n  offset: Int\n  \"\"\"\n  Field \"previous\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  previous: JSON\n  total: Int\n}\n\ntype GET_me_playlists_Tracks {\n  href: String\n  total: Int\n}\n\ntype Query {\n  GET_me_playlists(spotify_access_token: String!): GET_me_playlists_Root\n    @rest(\n      endpoint: \"https://api.spotify.com/v1/me/playlists\"\n      headers: [\n        { name: \"authorization\", value: \"Bearer $spotify_access_token;\" }\n      ]\n    )\n}\ntype GET_playlists__playlist_id__tracks_AddedBy {\n  external_urls: GET_playlists__playlist_id__tracks_ExternalUrls\n  href: String\n  id: String\n  type: String\n  uri: String\n}\n\ntype GET_playlists__playlist_id__tracks_Album {\n  album_type: String\n  artists: [GET_playlists__playlist_id__tracks_ArtistsEntry]\n  available_markets: [String]\n  external_urls: GET_playlists__playlist_id__tracks_ExternalUrls2\n  href: String\n  id: String\n  images: [GET_playlists__playlist_id__tracks_ImagesEntry]\n  name: String\n  release_date: Int\n  release_date_precision: String\n  total_tracks: Int\n  type: String\n  uri: String\n}\n\ntype GET_playlists__playlist_id__tracks_Artists1Entry {\n  external_urls: GET_playlists__playlist_id__tracks_ExternalUrls3\n  href: String\n  id: String\n  name: String\n  type: String\n  uri: String\n}\n\ntype GET_playlists__playlist_id__tracks_ArtistsEntry {\n  external_urls: GET_playlists__playlist_id__tracks_ExternalUrls1\n  href: String\n  id: String\n  name: String\n  type: String\n  uri: String\n}\n\ntype GET_playlists__playlist_id__tracks_ExternalIds {\n  isrc: String\n}\n\ntype GET_playlists__playlist_id__tracks_ExternalUrls {\n  spotify: String\n}\n\ntype GET_playlists__playlist_id__tracks_ExternalUrls1 {\n  spotify: String\n}\n\ntype GET_playlists__playlist_id__tracks_ExternalUrls2 {\n  spotify: String\n}\n\ntype GET_playlists__playlist_id__tracks_ExternalUrls3 {\n  spotify: String\n}\n\ntype GET_playlists__playlist_id__tracks_ExternalUrls4 {\n  spotify: String\n}\n\ntype GET_playlists__playlist_id__tracks_ImagesEntry {\n  height: Int\n  url: String\n  width: Int\n}\n\ntype GET_playlists__playlist_id__tracks_ItemsEntry {\n  added_at: DateTime\n  added_by: GET_playlists__playlist_id__tracks_AddedBy\n  is_local: Boolean\n  \"\"\"\n  Field \"primary_color\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  primary_color: JSON\n  track: GET_playlists__playlist_id__tracks_Track\n  video_thumbnail: GET_playlists__playlist_id__tracks_VideoThumbnail\n}\n\ntype GET_playlists__playlist_id__tracks_Root {\n  href: String\n  items: [GET_playlists__playlist_id__tracks_ItemsEntry]\n  limit: Int\n  \"\"\"\n  Field \"next\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  next: JSON\n  offset: Int\n  \"\"\"\n  Field \"previous\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  previous: JSON\n  total: Int\n}\n\ntype GET_playlists__playlist_id__tracks_Track {\n  album: GET_playlists__playlist_id__tracks_Album\n  artists: [GET_playlists__playlist_id__tracks_Artists1Entry]\n  available_markets: [String]\n  disc_number: Int\n  duration_ms: Int\n  episode: Boolean\n  explicit: Boolean\n  external_ids: GET_playlists__playlist_id__tracks_ExternalIds\n  external_urls: GET_playlists__playlist_id__tracks_ExternalUrls4\n  href: String\n  id: String\n  is_local: Boolean\n  name: String\n  popularity: Int\n  preview_url: String\n  track: Boolean\n  track_number: Int\n  type: String\n  uri: String\n}\n\ntype GET_playlists__playlist_id__tracks_VideoThumbnail {\n  \"\"\"\n  Field \"url\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  url: JSON\n}\n\ntype Query {\n  GET_playlists__playlist_id__tracks(\n    playlist_id: String!\n    spotify_access_token: String!\n  ): GET_playlists__playlist_id__tracks_Root\n    @rest(\n      endpoint: \"https://api.spotify.com/v1/playlists/$playlist_id;/tracks\"\n      headers: [\n        { name: \"authorization\", value: \"Bearer $spotify_access_token;\" }\n      ]\n    )\n}\n\nUtterance: Delete all music from my 'My R&B' playlist and rename it as 'Test'", "output": "response_obj = GET_me_playlists()\nresponse_obj1 = GET_playlists__playlist_id__tracks(playlist_id=[item.id for item in response_obj.items if item.name == \"My R&B\"][0])\nDELETE_playlists__playlist_id__tracks(playlist_id=[item.id for item in response_obj.items if item.name == \"My R&B\"][0], tracks=[{\"uri\":item.track.uri} for item in response_obj1.items])\nPUT_playlists__playlist_id_(playlist_id=[item.id for item in response_obj.items if item.name == \"My R&B\"][0], name=\"Test\")\n", "function_specs": "[{\"name\": \"GET_me_playlists\", \"description\": \"Get a list of the playlists owned or followed by the current Spotify\\nuser.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"limit\": {\"type\": \"integer\", \"description\": \"The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50.\\n\"}, \"offset\": {\"type\": \"integer\", \"description\": \"'The index of the first playlist to return. Default:\\n0 (the first object). Maximum offset: 100.000\\\\. Use with `limit` to get the\\nnext set of playlists.'\\n\"}}, \"required\": []}}, {\"name\": \"DELETE_playlists__playlist_id__tracks\", \"description\": \"Remove one or more items from a user's playlist.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"playlist_id\": {\"type\": \"string\", \"description\": \"The [Spotify ID](/documentation/web-api/#spotify-uris-and-ids) of the playlist.\\n\"}, \"tracks\": {\"type\": \"array\", \"description\": \"An array of objects containing Spotify URIs of the tracks or episodes to remove. For example: { \\\"tracks\\\": [{ \\\"uri\\\": \\\"spotify:track:4iV5W9uYEdYUVa79Axb7Rh\\\" },{ \\\"uri\\\": \\\"spotify:track:1301WleyT98MSxVHPZCA6M\\\" }] }. A maximum of 100 objects can be sent at once.\"}}, \"required\": [\"playlist_id\"], \"body_params\": [\"tracks\"]}}, {\"name\": \"PUT_playlists__playlist_id_\", \"description\": \"Change a playlist's name and public/private state. (The user must, of\\ncourse, own the playlist.)\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"playlist_id\": {\"type\": \"string\", \"description\": \"The [Spotify ID](/documentation/web-api/#spotify-uris-and-ids) of the playlist.\\n\"}, \"name\": {\"type\": \"string\", \"description\": \"The name for the new playlist, for example \\\"Your Coolest Playlist\\\". This name does not need to be unique; a user may have several playlists with the same name.\"}, \"public\": {\"type\": \"boolean\", \"description\": \"Defaults to true. If true the playlist will be public, if false it will be private. To be able to create private playlists, the user must have granted the playlist-modify-private scope\"}, \"collaborative\": {\"type\": \"boolean\", \"description\": \"Defaults to false. If true the playlist will be collaborative. Note: to create a collaborative playlist you must also set public to false. To create collaborative playlists you must have granted playlist-modify-private and playlist-modify-public scopes.\"}, \"description\": {\"type\": \"string\", \"description\": \"value for playlist description as displayed in Spotify Clients and in the Web API.\"}}, \"required\": [\"playlist_id\"], \"body_params\": [\"name\", \"public\", \"collaborative\", \"description\"]}}]", "GraphQL_schema": "type GET_me_playlists_ExternalUrls {\n  spotify: String\n}\n\ntype GET_me_playlists_ExternalUrls1 {\n  spotify: String\n}\n\ntype GET_me_playlists_ImagesEntry {\n  \"\"\"\n  Field \"height\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  height: JSON\n  url: String\n  \"\"\"\n  Field \"width\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  width: JSON\n}\n\ntype GET_me_playlists_ItemsEntry {\n  collaborative: Boolean\n  description: String\n  external_urls: GET_me_playlists_ExternalUrls\n  href: String\n  id: String\n  images: [GET_me_playlists_ImagesEntry]\n  name: String\n  owner: GET_me_playlists_Owner\n  \"\"\"\n  Field \"primary_color\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  primary_color: JSON\n  public: Boolean\n  snapshot_id: String\n  tracks: GET_me_playlists_Tracks\n  type: String\n  uri: String\n}\n\ntype GET_me_playlists_Owner {\n  display_name: String\n  external_urls: GET_me_playlists_ExternalUrls1\n  href: String\n  id: String\n  type: String\n  uri: String\n}\n\ntype GET_me_playlists_Root {\n  href: String\n  items: [GET_me_playlists_ItemsEntry]\n  limit: Int\n  \"\"\"\n  Field \"next\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  next: JSON\n  offset: Int\n  \"\"\"\n  Field \"previous\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  previous: JSON\n  total: Int\n}\n\ntype GET_me_playlists_Tracks {\n  href: String\n  total: Int\n}\n\ntype Query {\n  GET_me_playlists(spotify_access_token: String!): GET_me_playlists_Root\n    @rest(\n      endpoint: \"https://api.spotify.com/v1/me/playlists\"\n      headers: [\n        { name: \"authorization\", value: \"Bearer $spotify_access_token;\" }\n      ]\n    )\n}\ntype GET_playlists__playlist_id__tracks_AddedBy {\n  external_urls: GET_playlists__playlist_id__tracks_ExternalUrls\n  href: String\n  id: String\n  type: String\n  uri: String\n}\n\ntype GET_playlists__playlist_id__tracks_Album {\n  album_type: String\n  artists: [GET_playlists__playlist_id__tracks_ArtistsEntry]\n  available_markets: [String]\n  external_urls: GET_playlists__playlist_id__tracks_ExternalUrls2\n  href: String\n  id: String\n  images: [GET_playlists__playlist_id__tracks_ImagesEntry]\n  name: String\n  release_date: Int\n  release_date_precision: String\n  total_tracks: Int\n  type: String\n  uri: String\n}\n\ntype GET_playlists__playlist_id__tracks_Artists1Entry {\n  external_urls: GET_playlists__playlist_id__tracks_ExternalUrls3\n  href: String\n  id: String\n  name: String\n  type: String\n  uri: String\n}\n\ntype GET_playlists__playlist_id__tracks_ArtistsEntry {\n  external_urls: GET_playlists__playlist_id__tracks_ExternalUrls1\n  href: String\n  id: String\n  name: String\n  type: String\n  uri: String\n}\n\ntype GET_playlists__playlist_id__tracks_ExternalIds {\n  isrc: String\n}\n\ntype GET_playlists__playlist_id__tracks_ExternalUrls {\n  spotify: String\n}\n\ntype GET_playlists__playlist_id__tracks_ExternalUrls1 {\n  spotify: String\n}\n\ntype GET_playlists__playlist_id__tracks_ExternalUrls2 {\n  spotify: String\n}\n\ntype GET_playlists__playlist_id__tracks_ExternalUrls3 {\n  spotify: String\n}\n\ntype GET_playlists__playlist_id__tracks_ExternalUrls4 {\n  spotify: String\n}\n\ntype GET_playlists__playlist_id__tracks_ImagesEntry {\n  height: Int\n  url: String\n  width: Int\n}\n\ntype GET_playlists__playlist_id__tracks_ItemsEntry {\n  added_at: DateTime\n  added_by: GET_playlists__playlist_id__tracks_AddedBy\n  is_local: Boolean\n  \"\"\"\n  Field \"primary_color\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  primary_color: JSON\n  track: GET_playlists__playlist_id__tracks_Track\n  video_thumbnail: GET_playlists__playlist_id__tracks_VideoThumbnail\n}\n\ntype GET_playlists__playlist_id__tracks_Root {\n  href: String\n  items: [GET_playlists__playlist_id__tracks_ItemsEntry]\n  limit: Int\n  \"\"\"\n  Field \"next\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  next: JSON\n  offset: Int\n  \"\"\"\n  Field \"previous\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  previous: JSON\n  total: Int\n}\n\ntype GET_playlists__playlist_id__tracks_Track {\n  album: GET_playlists__playlist_id__tracks_Album\n  artists: [GET_playlists__playlist_id__tracks_Artists1Entry]\n  available_markets: [String]\n  disc_number: Int\n  duration_ms: Int\n  episode: Boolean\n  explicit: Boolean\n  external_ids: GET_playlists__playlist_id__tracks_ExternalIds\n  external_urls: GET_playlists__playlist_id__tracks_ExternalUrls4\n  href: String\n  id: String\n  is_local: Boolean\n  name: String\n  popularity: Int\n  preview_url: String\n  track: Boolean\n  track_number: Int\n  type: String\n  uri: String\n}\n\ntype GET_playlists__playlist_id__tracks_VideoThumbnail {\n  \"\"\"\n  Field \"url\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  url: JSON\n}\n\ntype Query {\n  GET_playlists__playlist_id__tracks(\n    playlist_id: String!\n    spotify_access_token: String!\n  ): GET_playlists__playlist_id__tracks_Root\n    @rest(\n      endpoint: \"https://api.spotify.com/v1/playlists/$playlist_id;/tracks\"\n      headers: [\n        { name: \"authorization\", value: \"Bearer $spotify_access_token;\" }\n      ]\n    )\n}\n", "utterance": "Delete all music from my 'My R&B' playlist and rename it as 'Test'"}
{"domain": "spotify", "input": "Function Signatures:\n\n[{\"name\": \"PUT_me_player_volume\", \"description\": \"Set the volume for the user\\u2019s current playback device.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"volume_percent\": {\"type\": \"integer\", \"description\": \"The volume to set. Must be a value from 0 to 100 inclusive.\\n\"}}, \"required\": [\"volume_percent\"]}}]\n\nGraphQL schema:\n\n\nUtterance: Turn down the volume to 20", "output": "PUT_me_player_volume(volume_percent=20)\n", "function_specs": "[{\"name\": \"PUT_me_player_volume\", \"description\": \"Set the volume for the user\\u2019s current playback device.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"volume_percent\": {\"type\": \"integer\", \"description\": \"The volume to set. Must be a value from 0 to 100 inclusive.\\n\"}}, \"required\": [\"volume_percent\"]}}]", "GraphQL_schema": "", "utterance": "Turn down the volume to 20"}
{"domain": "spotify", "input": "Function Signatures:\n\n[{\"name\": \"GET_search\", \"description\": \"Get Spotify catalog information about albums, artists, playlists, tracks, shows, episodes or audiobooks\\nthat match a keyword string.<br />\\n**Note: Audiobooks are only available for the US, UK, Ireland, New Zealand and Australia markets.**\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"q\": {\"type\": \"string\", \"description\": \"Your search query.\\n\\nYou can narrow down your search using field filters. The available filters are `album`, `artist`, `track`, `year`, `upc`, `tag:hipster`, `tag:new`, `isrc`, and `genre`. Each field filter only applies to certain result types.\\n\\nThe `artist` and `year` filters can be used while searching albums, artists and tracks. You can filter on a single `year` or a range (e.g. 1955-1960).<br />\\nThe `album` filter can be used while searching albums and tracks.<br />\\nThe `genre` filter can be used while searching artists and tracks.<br />\\nThe `isrc` and `track` filters can be used while searching tracks.<br />\\nThe `upc`, `tag:new` and `tag:hipster` filters can only be used while searching albums. The `tag:new` filter will return albums released in the past two weeks and `tag:hipster` can be used to return only albums with the lowest 10% popularity.<br />\\n\"}, \"type\": {\"type\": \"array\", \"description\": \"A comma-separated list of item types to search across. Search results include hits\\nfrom all the specified item types. For example: `q=abacab&type=album,track` returns\\nboth albums and tracks matching \\\"abacab\\\".\\n\"}, \"market\": {\"type\": \"string\", \"description\": \"An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).\\n  If a country code is specified, only content that is available in that market will be returned.<br/>\\n  If a valid user access token is specified in the request header, the country associated with\\n  the user account will take priority over this parameter.<br/>\\n  _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>\\n  Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).\\n\"}, \"limit\": {\"type\": \"integer\", \"description\": \"The maximum number of results to return in each item type.\\n\"}, \"offset\": {\"type\": \"integer\", \"description\": \"The index of the first result to return. Use\\nwith limit to get the next page of search results.\\n\"}, \"include_external\": {\"type\": \"string\", \"description\": \"If `include_external=audio` is specified it signals that the client can play externally hosted audio content, and marks\\nthe content as playable in the response. By default externally hosted audio content is marked as unplayable in the response.\\n\"}}, \"required\": [\"q\", \"type\"]}}, {\"name\": \"GET_artists__id__albums\", \"description\": \"Get Spotify catalog information about an artist's albums.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"id\": {\"type\": \"string\", \"description\": \"The [Spotify ID](/documentation/web-api/#spotify-uris-and-ids) of the artist.\\n\"}, \"include_groups\": {\"type\": \"string\", \"description\": \"A comma-separated list of keywords that will be used to filter the response. If not supplied, all album types will be returned. <br/>\\nValid values are:<br/>- `album`<br/>- `single`<br/>- `appears_on`<br/>- `compilation`<br/>For example: `include_groups=album,single`.\\n\"}, \"market\": {\"type\": \"string\", \"description\": \"An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).\\n  If a country code is specified, only content that is available in that market will be returned.<br/>\\n  If a valid user access token is specified in the request header, the country associated with\\n  the user account will take priority over this parameter.<br/>\\n  _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>\\n  Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).\\n\"}, \"limit\": {\"type\": \"integer\", \"description\": \"The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50.\\n\"}, \"offset\": {\"type\": \"integer\", \"description\": \"The index of the first item to return. Default: 0 (the first item). Use with limit to get the next set of items.\\n\"}}, \"required\": [\"id\"]}}, {\"name\": \"PUT_me_player_play\", \"description\": \"Start a new context or resume current playback on the user's active device.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"context_uri\": {\"type\": \"string\", \"description\": \"Optional. Spotify URI of the context to play. Valid contexts are albums, artists & playlists. {context_uri:\\\"spotify:album:1Je1IMUlBXcx1Fz0WE7oPT\\\"}\"}, \"uris\": {\"type\": \"array\", \"description\": \"Optional. A JSON array of the Spotify track URIs to play. For example: {\\\"uris\\\": [\\\"spotify:track:4iV5W9uYEdYUVa79Axb7Rh\\\", \\\"spotify:track:1301WleyT98MSxVHPZCA6M\\\"]}\"}, \"offset\": {\"type\": \"array\", \"description\": \"Optional. Indicates from where in the context playback should start. Only available when context_uri corresponds to an album or playlist object \\\"position\\\" is zero based and can\\u2019t be negative. Example: \\\"offset\\\": {\\\"position\\\": 5} \\\"uri\\\" is a string representing the uri of the item to start at. Example: \\\"offset\\\": {\\\"uri\\\": \\\"spotify:track:1301WleyT98MSxVHPZCA6M\\\"}\"}, \"position_ms\": {\"type\": \"integer\", \"description\": \"\"}}, \"required\": [], \"body_params\": [\"context_uri\", \"uris\", \"offset\", \"position_ms\"]}}]\n\nGraphQL schema:\n\ntype GET_search_Albums {\n  href: String\n  items: [GET_search_ItemsEntry]\n  limit: Int\n  next: String\n  offset: Int\n  \"\"\"\n  Field \"previous\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  previous: JSON\n  total: Int\n}\n\ntype GET_search_ArtistsEntry {\n  external_urls: GET_search_ExternalUrls\n  href: String\n  id: String\n  name: String\n  type: String\n  uri: String\n}\n\ntype GET_search_ExternalUrls {\n  spotify: String\n}\n\ntype GET_search_ExternalUrls1 {\n  spotify: String\n}\n\ntype GET_search_ImagesEntry {\n  height: Int\n  url: String\n  width: Int\n}\n\ntype GET_search_ItemsEntry {\n  album_type: String\n  artists: [GET_search_ArtistsEntry]\n  available_markets: [String]\n  external_urls: GET_search_ExternalUrls1\n  href: String\n  id: String\n  images: [GET_search_ImagesEntry]\n  name: String\n  release_date: Date\n  release_date_precision: String\n  total_tracks: Int\n  type: String\n  uri: String\n}\n\ntype GET_search_Root {\n  albums: GET_search_Albums\n}\n\ntype Query {\n  GET_search(\n    q: String\n    spotify_access_token: String!\n    type: String\n  ): GET_search_Root\n    @rest(\n      endpoint: \"https://api.spotify.com/v1/search\"\n      headers: [\n        { name: \"authorization\", value: \"Bearer $spotify_access_token;\" }\n      ]\n    )\n}\ntype GET_artists__id__albums_ArtistsEntry {\n  external_urls: GET_artists__id__albums_ExternalUrls1\n  href: String\n  id: String\n  name: String\n  type: String\n  uri: String\n}\n\ntype GET_artists__id__albums_ExternalUrls {\n  spotify: String\n}\n\ntype GET_artists__id__albums_ExternalUrls1 {\n  spotify: String\n}\n\ntype GET_artists__id__albums_ImagesEntry {\n  height: Int\n  url: String\n  width: Int\n}\n\ntype GET_artists__id__albums_ItemsEntry {\n  album_group: String\n  album_type: String\n  artists: [GET_artists__id__albums_ArtistsEntry]\n  available_markets: [String]\n  external_urls: GET_artists__id__albums_ExternalUrls\n  href: String\n  id: String\n  images: [GET_artists__id__albums_ImagesEntry]\n  name: String\n  release_date: String\n  release_date_precision: String\n  total_tracks: Int\n  type: String\n  uri: String\n}\n\ntype GET_artists__id__albums_Root {\n  href: String\n  items: [GET_artists__id__albums_ItemsEntry]\n  limit: Int\n  next: String\n  offset: Int\n  \"\"\"\n  Field \"previous\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  previous: JSON\n  total: Int\n}\n\ntype Query {\n  GET_artists__id__albums(\n    id: String!\n    spotify_access_token: String!\n  ): GET_artists__id__albums_Root\n    @rest(\n      endpoint: \"https://api.spotify.com/v1/artists/$id;/albums\"\n      headers: [\n        { name: \"authorization\", value: \"Bearer $spotify_access_token;\" }\n      ]\n    )\n}\n\nUtterance: Play a song from Taylor Swift's newest album", "output": "response_obj = GET_search(q=\"Taylor Swift\", type=\"album\")\nresponse_obj1 = GET_artists__id__albums(id=response_obj1.albums.items[0].id)\nPUT_me_player_play(uris=[response_obj1.items.uri])\n", "function_specs": "[{\"name\": \"GET_search\", \"description\": \"Get Spotify catalog information about albums, artists, playlists, tracks, shows, episodes or audiobooks\\nthat match a keyword string.<br />\\n**Note: Audiobooks are only available for the US, UK, Ireland, New Zealand and Australia markets.**\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"q\": {\"type\": \"string\", \"description\": \"Your search query.\\n\\nYou can narrow down your search using field filters. The available filters are `album`, `artist`, `track`, `year`, `upc`, `tag:hipster`, `tag:new`, `isrc`, and `genre`. Each field filter only applies to certain result types.\\n\\nThe `artist` and `year` filters can be used while searching albums, artists and tracks. You can filter on a single `year` or a range (e.g. 1955-1960).<br />\\nThe `album` filter can be used while searching albums and tracks.<br />\\nThe `genre` filter can be used while searching artists and tracks.<br />\\nThe `isrc` and `track` filters can be used while searching tracks.<br />\\nThe `upc`, `tag:new` and `tag:hipster` filters can only be used while searching albums. The `tag:new` filter will return albums released in the past two weeks and `tag:hipster` can be used to return only albums with the lowest 10% popularity.<br />\\n\"}, \"type\": {\"type\": \"array\", \"description\": \"A comma-separated list of item types to search across. Search results include hits\\nfrom all the specified item types. For example: `q=abacab&type=album,track` returns\\nboth albums and tracks matching \\\"abacab\\\".\\n\"}, \"market\": {\"type\": \"string\", \"description\": \"An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).\\n  If a country code is specified, only content that is available in that market will be returned.<br/>\\n  If a valid user access token is specified in the request header, the country associated with\\n  the user account will take priority over this parameter.<br/>\\n  _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>\\n  Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).\\n\"}, \"limit\": {\"type\": \"integer\", \"description\": \"The maximum number of results to return in each item type.\\n\"}, \"offset\": {\"type\": \"integer\", \"description\": \"The index of the first result to return. Use\\nwith limit to get the next page of search results.\\n\"}, \"include_external\": {\"type\": \"string\", \"description\": \"If `include_external=audio` is specified it signals that the client can play externally hosted audio content, and marks\\nthe content as playable in the response. By default externally hosted audio content is marked as unplayable in the response.\\n\"}}, \"required\": [\"q\", \"type\"]}}, {\"name\": \"GET_artists__id__albums\", \"description\": \"Get Spotify catalog information about an artist's albums.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"id\": {\"type\": \"string\", \"description\": \"The [Spotify ID](/documentation/web-api/#spotify-uris-and-ids) of the artist.\\n\"}, \"include_groups\": {\"type\": \"string\", \"description\": \"A comma-separated list of keywords that will be used to filter the response. If not supplied, all album types will be returned. <br/>\\nValid values are:<br/>- `album`<br/>- `single`<br/>- `appears_on`<br/>- `compilation`<br/>For example: `include_groups=album,single`.\\n\"}, \"market\": {\"type\": \"string\", \"description\": \"An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).\\n  If a country code is specified, only content that is available in that market will be returned.<br/>\\n  If a valid user access token is specified in the request header, the country associated with\\n  the user account will take priority over this parameter.<br/>\\n  _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>\\n  Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).\\n\"}, \"limit\": {\"type\": \"integer\", \"description\": \"The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50.\\n\"}, \"offset\": {\"type\": \"integer\", \"description\": \"The index of the first item to return. Default: 0 (the first item). Use with limit to get the next set of items.\\n\"}}, \"required\": [\"id\"]}}, {\"name\": \"PUT_me_player_play\", \"description\": \"Start a new context or resume current playback on the user's active device.\\n\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"context_uri\": {\"type\": \"string\", \"description\": \"Optional. Spotify URI of the context to play. Valid contexts are albums, artists & playlists. {context_uri:\\\"spotify:album:1Je1IMUlBXcx1Fz0WE7oPT\\\"}\"}, \"uris\": {\"type\": \"array\", \"description\": \"Optional. A JSON array of the Spotify track URIs to play. For example: {\\\"uris\\\": [\\\"spotify:track:4iV5W9uYEdYUVa79Axb7Rh\\\", \\\"spotify:track:1301WleyT98MSxVHPZCA6M\\\"]}\"}, \"offset\": {\"type\": \"array\", \"description\": \"Optional. Indicates from where in the context playback should start. Only available when context_uri corresponds to an album or playlist object \\\"position\\\" is zero based and can\\u2019t be negative. Example: \\\"offset\\\": {\\\"position\\\": 5} \\\"uri\\\" is a string representing the uri of the item to start at. Example: \\\"offset\\\": {\\\"uri\\\": \\\"spotify:track:1301WleyT98MSxVHPZCA6M\\\"}\"}, \"position_ms\": {\"type\": \"integer\", \"description\": \"\"}}, \"required\": [], \"body_params\": [\"context_uri\", \"uris\", \"offset\", \"position_ms\"]}}]", "GraphQL_schema": "type GET_search_Albums {\n  href: String\n  items: [GET_search_ItemsEntry]\n  limit: Int\n  next: String\n  offset: Int\n  \"\"\"\n  Field \"previous\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  previous: JSON\n  total: Int\n}\n\ntype GET_search_ArtistsEntry {\n  external_urls: GET_search_ExternalUrls\n  href: String\n  id: String\n  name: String\n  type: String\n  uri: String\n}\n\ntype GET_search_ExternalUrls {\n  spotify: String\n}\n\ntype GET_search_ExternalUrls1 {\n  spotify: String\n}\n\ntype GET_search_ImagesEntry {\n  height: Int\n  url: String\n  width: Int\n}\n\ntype GET_search_ItemsEntry {\n  album_type: String\n  artists: [GET_search_ArtistsEntry]\n  available_markets: [String]\n  external_urls: GET_search_ExternalUrls1\n  href: String\n  id: String\n  images: [GET_search_ImagesEntry]\n  name: String\n  release_date: Date\n  release_date_precision: String\n  total_tracks: Int\n  type: String\n  uri: String\n}\n\ntype GET_search_Root {\n  albums: GET_search_Albums\n}\n\ntype Query {\n  GET_search(\n    q: String\n    spotify_access_token: String!\n    type: String\n  ): GET_search_Root\n    @rest(\n      endpoint: \"https://api.spotify.com/v1/search\"\n      headers: [\n        { name: \"authorization\", value: \"Bearer $spotify_access_token;\" }\n      ]\n    )\n}\ntype GET_artists__id__albums_ArtistsEntry {\n  external_urls: GET_artists__id__albums_ExternalUrls1\n  href: String\n  id: String\n  name: String\n  type: String\n  uri: String\n}\n\ntype GET_artists__id__albums_ExternalUrls {\n  spotify: String\n}\n\ntype GET_artists__id__albums_ExternalUrls1 {\n  spotify: String\n}\n\ntype GET_artists__id__albums_ImagesEntry {\n  height: Int\n  url: String\n  width: Int\n}\n\ntype GET_artists__id__albums_ItemsEntry {\n  album_group: String\n  album_type: String\n  artists: [GET_artists__id__albums_ArtistsEntry]\n  available_markets: [String]\n  external_urls: GET_artists__id__albums_ExternalUrls\n  href: String\n  id: String\n  images: [GET_artists__id__albums_ImagesEntry]\n  name: String\n  release_date: String\n  release_date_precision: String\n  total_tracks: Int\n  type: String\n  uri: String\n}\n\ntype GET_artists__id__albums_Root {\n  href: String\n  items: [GET_artists__id__albums_ItemsEntry]\n  limit: Int\n  next: String\n  offset: Int\n  \"\"\"\n  Field \"previous\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  previous: JSON\n  total: Int\n}\n\ntype Query {\n  GET_artists__id__albums(\n    id: String!\n    spotify_access_token: String!\n  ): GET_artists__id__albums_Root\n    @rest(\n      endpoint: \"https://api.spotify.com/v1/artists/$id;/albums\"\n      headers: [\n        { name: \"authorization\", value: \"Bearer $spotify_access_token;\" }\n      ]\n    )\n}\n", "utterance": "Play a song from Taylor Swift's newest album"}
{"domain": "tmdb", "input": "Function Signatures:\n\n[{\"name\": \"GET_search_movie\", \"description\": \"Search for movies.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"query\": {\"type\": \"string\", \"description\": \"query\"}, \"page\": {\"type\": \"integer\", \"description\": \"page\"}, \"include_adult\": {\"type\": \"boolean\", \"description\": \"include adult\"}, \"region\": {\"type\": \"string\", \"description\": \"region\"}, \"year\": {\"type\": \"integer\", \"description\": \"year\"}, \"primary_release_year\": {\"type\": \"integer\", \"description\": \"primary release year\"}}, \"required\": [\"query\"]}}, {\"name\": \"GET_search_movie\", \"description\": \"Search for movies.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"query\": {\"type\": \"string\", \"description\": \"query\"}, \"page\": {\"type\": \"integer\", \"description\": \"page\"}, \"include_adult\": {\"type\": \"boolean\", \"description\": \"include adult\"}, \"region\": {\"type\": \"string\", \"description\": \"region\"}, \"year\": {\"type\": \"integer\", \"description\": \"year\"}, \"primary_release_year\": {\"type\": \"integer\", \"description\": \"primary release year\"}}, \"required\": [\"query\"]}}]\n\nGraphQL schema:\n\ntype GET_search_movie_ResultsEntry {\n  adult: Boolean\n  backdrop_path: String\n  genre_ids: [Int]\n  id: Int\n  original_language: String\n  original_title: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  release_date: Date\n  title: String\n  video: Boolean\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_search_movie_Root {\n  page: Int\n  results: [GET_search_movie_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_search_movie(\n    query: String\n    tmdb_access_token: String!\n  ): GET_search_movie_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/search/movie\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\n\nUtterance: Avatar versus Avatar: The Way of Water, which has a higher rating", "output": "GET_search_movie(query=\"Avatar\")\nGET_search_movie(query=\"Avatar: The Way of Water\")\n", "function_specs": "[{\"name\": \"GET_search_movie\", \"description\": \"Search for movies.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"query\": {\"type\": \"string\", \"description\": \"query\"}, \"page\": {\"type\": \"integer\", \"description\": \"page\"}, \"include_adult\": {\"type\": \"boolean\", \"description\": \"include adult\"}, \"region\": {\"type\": \"string\", \"description\": \"region\"}, \"year\": {\"type\": \"integer\", \"description\": \"year\"}, \"primary_release_year\": {\"type\": \"integer\", \"description\": \"primary release year\"}}, \"required\": [\"query\"]}}, {\"name\": \"GET_search_movie\", \"description\": \"Search for movies.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"query\": {\"type\": \"string\", \"description\": \"query\"}, \"page\": {\"type\": \"integer\", \"description\": \"page\"}, \"include_adult\": {\"type\": \"boolean\", \"description\": \"include adult\"}, \"region\": {\"type\": \"string\", \"description\": \"region\"}, \"year\": {\"type\": \"integer\", \"description\": \"year\"}, \"primary_release_year\": {\"type\": \"integer\", \"description\": \"primary release year\"}}, \"required\": [\"query\"]}}]", "GraphQL_schema": "type GET_search_movie_ResultsEntry {\n  adult: Boolean\n  backdrop_path: String\n  genre_ids: [Int]\n  id: Int\n  original_language: String\n  original_title: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  release_date: Date\n  title: String\n  video: Boolean\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_search_movie_Root {\n  page: Int\n  results: [GET_search_movie_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_search_movie(\n    query: String\n    tmdb_access_token: String!\n  ): GET_search_movie_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/search/movie\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\n", "utterance": "Avatar versus Avatar: The Way of Water, which has a higher rating"}
{"domain": "tmdb", "input": "Function Signatures:\n\n[{\"name\": \"GET_search_person\", \"description\": \"Search for people.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"query\": {\"type\": \"string\", \"description\": \"query\"}, \"page\": {\"type\": \"integer\", \"description\": \"page\"}, \"include_adult\": {\"type\": \"boolean\", \"description\": \"include adult\"}, \"region\": {\"type\": \"string\", \"description\": \"region\"}}, \"required\": [\"query\"]}}, {\"name\": \"GET_person__person_id__movie_credits\", \"description\": \"Get the movie credits for a person, the results contains various information such as popularity and release date.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"person_id\": {\"type\": \"integer\", \"description\": \"person id\"}}, \"required\": [\"person_id\"]}}]\n\nGraphQL schema:\n\ntype GET_search_person_KnownForEntry {\n  adult: Boolean\n  backdrop_path: String\n  genre_ids: [Int]\n  id: Int\n  media_type: String\n  original_language: String\n  original_title: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  release_date: Date\n  title: String\n  video: Boolean\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_search_person_ResultsEntry {\n  adult: Boolean\n  gender: Int\n  id: Int\n  known_for: [GET_search_person_KnownForEntry]\n  known_for_department: String\n  name: String\n  original_name: String\n  popularity: Float\n  profile_path: String\n}\n\ntype GET_search_person_Root {\n  page: Int\n  results: [GET_search_person_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_search_person(\n    query: String\n    tmdb_access_token: String!\n  ): GET_search_person_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/search/person\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_person__person_id__movie_credits_CastEntry {\n  adult: Boolean\n  backdrop_path: String\n  character: String\n  credit_id: String\n  genre_ids: [Int]\n  id: Int\n  order: Int\n  original_language: String\n  original_title: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  release_date: String\n  title: String\n  video: Boolean\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_person__person_id__movie_credits_CrewEntry {\n  adult: Boolean\n  backdrop_path: String\n  credit_id: String\n  department: String\n  genre_ids: [Int]\n  id: Int\n  job: String\n  original_language: String\n  original_title: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  release_date: String\n  title: String\n  video: Boolean\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_person__person_id__movie_credits_Root {\n  cast: [GET_person__person_id__movie_credits_CastEntry]\n  crew: [GET_person__person_id__movie_credits_CrewEntry]\n  id: Int\n}\n\ntype Query {\n  GET_person__person_id__movie_credits(\n    person_id: String!\n    tmdb_access_token: String!\n  ): GET_person__person_id__movie_credits_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/person/$person_id;/movie_credits\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\n\nUtterance: What is the latest movie directed by Christopher Nolan?", "output": "response_obj = GET_search_person(query=\"Christopher Nolan\")\nGET_person__person_id__movie_credits(person_id=response_obj.results[0].id)\n", "function_specs": "[{\"name\": \"GET_search_person\", \"description\": \"Search for people.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"query\": {\"type\": \"string\", \"description\": \"query\"}, \"page\": {\"type\": \"integer\", \"description\": \"page\"}, \"include_adult\": {\"type\": \"boolean\", \"description\": \"include adult\"}, \"region\": {\"type\": \"string\", \"description\": \"region\"}}, \"required\": [\"query\"]}}, {\"name\": \"GET_person__person_id__movie_credits\", \"description\": \"Get the movie credits for a person, the results contains various information such as popularity and release date.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"person_id\": {\"type\": \"integer\", \"description\": \"person id\"}}, \"required\": [\"person_id\"]}}]", "GraphQL_schema": "type GET_search_person_KnownForEntry {\n  adult: Boolean\n  backdrop_path: String\n  genre_ids: [Int]\n  id: Int\n  media_type: String\n  original_language: String\n  original_title: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  release_date: Date\n  title: String\n  video: Boolean\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_search_person_ResultsEntry {\n  adult: Boolean\n  gender: Int\n  id: Int\n  known_for: [GET_search_person_KnownForEntry]\n  known_for_department: String\n  name: String\n  original_name: String\n  popularity: Float\n  profile_path: String\n}\n\ntype GET_search_person_Root {\n  page: Int\n  results: [GET_search_person_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_search_person(\n    query: String\n    tmdb_access_token: String!\n  ): GET_search_person_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/search/person\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_person__person_id__movie_credits_CastEntry {\n  adult: Boolean\n  backdrop_path: String\n  character: String\n  credit_id: String\n  genre_ids: [Int]\n  id: Int\n  order: Int\n  original_language: String\n  original_title: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  release_date: String\n  title: String\n  video: Boolean\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_person__person_id__movie_credits_CrewEntry {\n  adult: Boolean\n  backdrop_path: String\n  credit_id: String\n  department: String\n  genre_ids: [Int]\n  id: Int\n  job: String\n  original_language: String\n  original_title: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  release_date: String\n  title: String\n  video: Boolean\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_person__person_id__movie_credits_Root {\n  cast: [GET_person__person_id__movie_credits_CastEntry]\n  crew: [GET_person__person_id__movie_credits_CrewEntry]\n  id: Int\n}\n\ntype Query {\n  GET_person__person_id__movie_credits(\n    person_id: String!\n    tmdb_access_token: String!\n  ): GET_person__person_id__movie_credits_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/person/$person_id;/movie_credits\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\n", "utterance": "What is the latest movie directed by Christopher Nolan?"}
{"domain": "tmdb", "input": "Function Signatures:\n\n[{\"name\": \"GET_search_movie\", \"description\": \"Search for movies.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"query\": {\"type\": \"string\", \"description\": \"query\"}, \"page\": {\"type\": \"integer\", \"description\": \"page\"}, \"include_adult\": {\"type\": \"boolean\", \"description\": \"include adult\"}, \"region\": {\"type\": \"string\", \"description\": \"region\"}, \"year\": {\"type\": \"integer\", \"description\": \"year\"}, \"primary_release_year\": {\"type\": \"integer\", \"description\": \"primary release year\"}}, \"required\": [\"query\"]}}, {\"name\": \"GET_movie__movie_id__reviews\", \"description\": \"Get the user reviews for a movie.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"movie_id\": {\"type\": \"integer\", \"description\": \"movie id\"}, \"page\": {\"type\": \"integer\", \"description\": \"page\"}}, \"required\": [\"movie_id\"]}}]\n\nGraphQL schema:\n\ntype GET_search_movie_ResultsEntry {\n  adult: Boolean\n  backdrop_path: String\n  genre_ids: [Int]\n  id: Int\n  original_language: String\n  original_title: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  release_date: String\n  title: String\n  video: Boolean\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_search_movie_Root {\n  page: Int\n  results: [GET_search_movie_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_search_movie(\n    query: String\n    tmdb_access_token: String!\n  ): GET_search_movie_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/search/movie\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_movie__movie_id__reviews_AuthorDetails {\n  avatar_path: String\n  name: String\n  rating: Int\n  username: String\n}\n\ntype GET_movie__movie_id__reviews_ResultsEntry {\n  author: String\n  author_details: GET_movie__movie_id__reviews_AuthorDetails\n  content: String\n  created_at: DateTime\n  id: String\n  updated_at: DateTime\n  url: String\n}\n\ntype GET_movie__movie_id__reviews_Root {\n  id: Int\n  page: Int\n  results: [GET_movie__movie_id__reviews_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_movie__movie_id__reviews(\n    movie_id: String!\n    tmdb_access_token: String!\n  ): GET_movie__movie_id__reviews_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/movie/$movie_id;/reviews\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\n\nUtterance: Give me some movie reviews about The Dark Knight", "output": "response_obj = GET_search_movie(query=\"The Dark Knight\")\nGET_movie__movie_id__reviews(movie_id=response_obj.results[0].id)\n", "function_specs": "[{\"name\": \"GET_search_movie\", \"description\": \"Search for movies.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"query\": {\"type\": \"string\", \"description\": \"query\"}, \"page\": {\"type\": \"integer\", \"description\": \"page\"}, \"include_adult\": {\"type\": \"boolean\", \"description\": \"include adult\"}, \"region\": {\"type\": \"string\", \"description\": \"region\"}, \"year\": {\"type\": \"integer\", \"description\": \"year\"}, \"primary_release_year\": {\"type\": \"integer\", \"description\": \"primary release year\"}}, \"required\": [\"query\"]}}, {\"name\": \"GET_movie__movie_id__reviews\", \"description\": \"Get the user reviews for a movie.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"movie_id\": {\"type\": \"integer\", \"description\": \"movie id\"}, \"page\": {\"type\": \"integer\", \"description\": \"page\"}}, \"required\": [\"movie_id\"]}}]", "GraphQL_schema": "type GET_search_movie_ResultsEntry {\n  adult: Boolean\n  backdrop_path: String\n  genre_ids: [Int]\n  id: Int\n  original_language: String\n  original_title: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  release_date: String\n  title: String\n  video: Boolean\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_search_movie_Root {\n  page: Int\n  results: [GET_search_movie_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_search_movie(\n    query: String\n    tmdb_access_token: String!\n  ): GET_search_movie_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/search/movie\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_movie__movie_id__reviews_AuthorDetails {\n  avatar_path: String\n  name: String\n  rating: Int\n  username: String\n}\n\ntype GET_movie__movie_id__reviews_ResultsEntry {\n  author: String\n  author_details: GET_movie__movie_id__reviews_AuthorDetails\n  content: String\n  created_at: DateTime\n  id: String\n  updated_at: DateTime\n  url: String\n}\n\ntype GET_movie__movie_id__reviews_Root {\n  id: Int\n  page: Int\n  results: [GET_movie__movie_id__reviews_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_movie__movie_id__reviews(\n    movie_id: String!\n    tmdb_access_token: String!\n  ): GET_movie__movie_id__reviews_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/movie/$movie_id;/reviews\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\n", "utterance": "Give me some movie reviews about The Dark Knight"}
{"domain": "tmdb", "input": "Function Signatures:\n\n[{\"name\": \"GET_search_movie\", \"description\": \"Search for movies.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"query\": {\"type\": \"string\", \"description\": \"query\"}, \"page\": {\"type\": \"integer\", \"description\": \"page\"}, \"include_adult\": {\"type\": \"boolean\", \"description\": \"include adult\"}, \"region\": {\"type\": \"string\", \"description\": \"region\"}, \"year\": {\"type\": \"integer\", \"description\": \"year\"}, \"primary_release_year\": {\"type\": \"integer\", \"description\": \"primary release year\"}}, \"required\": [\"query\"]}}, {\"name\": \"GET_movie__movie_id__similar\", \"description\": \"Get a list of similar movies. This is **not** the same as the \\\"Recommendation\\\" system you see on the website.\\n\\nThese items are assembled by looking at keywords and genres.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"movie_id\": {\"type\": \"integer\", \"description\": \"movie id\"}, \"page\": {\"type\": \"integer\", \"description\": \"page\"}}, \"required\": [\"movie_id\"]}}, {\"name\": \"GET_movie__movie_id__reviews\", \"description\": \"Get the user reviews for a movie.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"movie_id\": {\"type\": \"integer\", \"description\": \"movie id\"}, \"page\": {\"type\": \"integer\", \"description\": \"page\"}}, \"required\": [\"movie_id\"]}}]\n\nGraphQL schema:\n\ntype GET_movie__movie_id__reviews_AuthorDetails {\n  avatar_path: String\n  name: String\n  rating: Int\n  username: String\n}\n\ntype GET_movie__movie_id__reviews_ResultsEntry {\n  author: String\n  author_details: GET_movie__movie_id__reviews_AuthorDetails\n  content: String\n  created_at: DateTime\n  id: String\n  updated_at: DateTime\n  url: String\n}\n\ntype GET_movie__movie_id__reviews_Root {\n  id: Int\n  page: Int\n  results: [GET_movie__movie_id__reviews_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_movie__movie_id__reviews(\n    movie_id: String!\n    tmdb_access_token: String!\n  ): GET_movie__movie_id__reviews_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/movie/$movie_id;/reviews\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_search_movie_ResultsEntry {\n  adult: Boolean\n  backdrop_path: String\n  genre_ids: [Int]\n  id: Int\n  original_language: String\n  original_title: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  release_date: String\n  title: String\n  video: Boolean\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_search_movie_Root {\n  page: Int\n  results: [GET_search_movie_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_search_movie(\n    query: String\n    tmdb_access_token: String!\n  ): GET_search_movie_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/search/movie\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_movie__movie_id__similar_ResultsEntry {\n  adult: Boolean\n  backdrop_path: String\n  genre_ids: [Int]\n  id: Int\n  original_language: String\n  original_title: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  release_date: Date\n  title: String\n  video: Boolean\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_movie__movie_id__similar_Root {\n  page: Int\n  results: [GET_movie__movie_id__similar_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_movie__movie_id__similar(\n    movie_id: String!\n    tmdb_access_token: String!\n  ): GET_movie__movie_id__similar_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/movie/$movie_id;/similar\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\n\nUtterance: give me some reviews of the first movie that is similar to Titanic", "output": "response_obj = GET_search_movie(query=\"Titanic\")\nresponse_obj1 = GET_movie__movie_id__similar(movie_id=response_obj.results[0].id)\nGET_movie__movie_id__reviews(movie_id=response_obj1.results[0].id)\n", "function_specs": "[{\"name\": \"GET_search_movie\", \"description\": \"Search for movies.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"query\": {\"type\": \"string\", \"description\": \"query\"}, \"page\": {\"type\": \"integer\", \"description\": \"page\"}, \"include_adult\": {\"type\": \"boolean\", \"description\": \"include adult\"}, \"region\": {\"type\": \"string\", \"description\": \"region\"}, \"year\": {\"type\": \"integer\", \"description\": \"year\"}, \"primary_release_year\": {\"type\": \"integer\", \"description\": \"primary release year\"}}, \"required\": [\"query\"]}}, {\"name\": \"GET_movie__movie_id__similar\", \"description\": \"Get a list of similar movies. This is **not** the same as the \\\"Recommendation\\\" system you see on the website.\\n\\nThese items are assembled by looking at keywords and genres.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"movie_id\": {\"type\": \"integer\", \"description\": \"movie id\"}, \"page\": {\"type\": \"integer\", \"description\": \"page\"}}, \"required\": [\"movie_id\"]}}, {\"name\": \"GET_movie__movie_id__reviews\", \"description\": \"Get the user reviews for a movie.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"movie_id\": {\"type\": \"integer\", \"description\": \"movie id\"}, \"page\": {\"type\": \"integer\", \"description\": \"page\"}}, \"required\": [\"movie_id\"]}}]", "GraphQL_schema": "type GET_movie__movie_id__reviews_AuthorDetails {\n  avatar_path: String\n  name: String\n  rating: Int\n  username: String\n}\n\ntype GET_movie__movie_id__reviews_ResultsEntry {\n  author: String\n  author_details: GET_movie__movie_id__reviews_AuthorDetails\n  content: String\n  created_at: DateTime\n  id: String\n  updated_at: DateTime\n  url: String\n}\n\ntype GET_movie__movie_id__reviews_Root {\n  id: Int\n  page: Int\n  results: [GET_movie__movie_id__reviews_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_movie__movie_id__reviews(\n    movie_id: String!\n    tmdb_access_token: String!\n  ): GET_movie__movie_id__reviews_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/movie/$movie_id;/reviews\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_search_movie_ResultsEntry {\n  adult: Boolean\n  backdrop_path: String\n  genre_ids: [Int]\n  id: Int\n  original_language: String\n  original_title: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  release_date: String\n  title: String\n  video: Boolean\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_search_movie_Root {\n  page: Int\n  results: [GET_search_movie_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_search_movie(\n    query: String\n    tmdb_access_token: String!\n  ): GET_search_movie_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/search/movie\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_movie__movie_id__similar_ResultsEntry {\n  adult: Boolean\n  backdrop_path: String\n  genre_ids: [Int]\n  id: Int\n  original_language: String\n  original_title: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  release_date: Date\n  title: String\n  video: Boolean\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_movie__movie_id__similar_Root {\n  page: Int\n  results: [GET_movie__movie_id__similar_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_movie__movie_id__similar(\n    movie_id: String!\n    tmdb_access_token: String!\n  ): GET_movie__movie_id__similar_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/movie/$movie_id;/similar\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\n", "utterance": "give me some reviews of the first movie that is similar to Titanic"}
{"domain": "tmdb", "input": "Function Signatures:\n\n[{\"name\": \"GET_search_movie\", \"description\": \"Search for movies.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"query\": {\"type\": \"string\", \"description\": \"query\"}, \"page\": {\"type\": \"integer\", \"description\": \"page\"}, \"include_adult\": {\"type\": \"boolean\", \"description\": \"include adult\"}, \"region\": {\"type\": \"string\", \"description\": \"region\"}, \"year\": {\"type\": \"integer\", \"description\": \"year\"}, \"primary_release_year\": {\"type\": \"integer\", \"description\": \"primary release year\"}}, \"required\": [\"query\"]}}, {\"name\": \"GET_search_movie\", \"description\": \"Search for movies.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"query\": {\"type\": \"string\", \"description\": \"query\"}, \"page\": {\"type\": \"integer\", \"description\": \"page\"}, \"include_adult\": {\"type\": \"boolean\", \"description\": \"include adult\"}, \"region\": {\"type\": \"string\", \"description\": \"region\"}, \"year\": {\"type\": \"integer\", \"description\": \"year\"}, \"primary_release_year\": {\"type\": \"integer\", \"description\": \"primary release year\"}}, \"required\": [\"query\"]}}]\n\nGraphQL schema:\n\ntype GET_search_movie_ResultsEntry {\n  adult: Boolean\n  backdrop_path: String\n  genre_ids: [Int]\n  id: Int\n  original_language: String\n  original_title: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  release_date: Date\n  title: String\n  video: Boolean\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_search_movie_Root {\n  page: Int\n  results: [GET_search_movie_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_search_movie(\n    query: String\n    tmdb_access_token: String!\n  ): GET_search_movie_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/search/movie\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\n\nUtterance: Who has an earlier release date, The Double Life of Veronique or Mulholland Drive?", "output": "GET_search_movie(query=\"The Double Life of Veronique\")\nGET_search_movie(query=\"Mulholland Drive\")\n", "function_specs": "[{\"name\": \"GET_search_movie\", \"description\": \"Search for movies.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"query\": {\"type\": \"string\", \"description\": \"query\"}, \"page\": {\"type\": \"integer\", \"description\": \"page\"}, \"include_adult\": {\"type\": \"boolean\", \"description\": \"include adult\"}, \"region\": {\"type\": \"string\", \"description\": \"region\"}, \"year\": {\"type\": \"integer\", \"description\": \"year\"}, \"primary_release_year\": {\"type\": \"integer\", \"description\": \"primary release year\"}}, \"required\": [\"query\"]}}, {\"name\": \"GET_search_movie\", \"description\": \"Search for movies.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"query\": {\"type\": \"string\", \"description\": \"query\"}, \"page\": {\"type\": \"integer\", \"description\": \"page\"}, \"include_adult\": {\"type\": \"boolean\", \"description\": \"include adult\"}, \"region\": {\"type\": \"string\", \"description\": \"region\"}, \"year\": {\"type\": \"integer\", \"description\": \"year\"}, \"primary_release_year\": {\"type\": \"integer\", \"description\": \"primary release year\"}}, \"required\": [\"query\"]}}]", "GraphQL_schema": "type GET_search_movie_ResultsEntry {\n  adult: Boolean\n  backdrop_path: String\n  genre_ids: [Int]\n  id: Int\n  original_language: String\n  original_title: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  release_date: Date\n  title: String\n  video: Boolean\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_search_movie_Root {\n  page: Int\n  results: [GET_search_movie_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_search_movie(\n    query: String\n    tmdb_access_token: String!\n  ): GET_search_movie_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/search/movie\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\n", "utterance": "Who has an earlier release date, The Double Life of Veronique or Mulholland Drive?"}
{"domain": "tmdb", "input": "Function Signatures:\n\n[{\"name\": \"GET_search_tv\", \"description\": \"Search for a TV show.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"page\": {\"type\": \"integer\", \"description\": \"page\"}, \"query\": {\"type\": \"string\", \"description\": \"query\"}, \"include_adult\": {\"type\": \"boolean\", \"description\": \"include adult\"}, \"first_air_date_year\": {\"type\": \"integer\", \"description\": \"first air date year\"}}, \"required\": [\"query\"]}}, {\"name\": \"GET_tv__tv_id__recommendations\", \"description\": \"Get the list of TV show recommendations for this item.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"tv_id\": {\"type\": \"integer\", \"description\": \"tv id\"}, \"page\": {\"type\": \"integer\", \"description\": \"page\"}}, \"required\": [\"tv_id\"]}}]\n\nGraphQL schema:\n\ntype GET_search_tv_ResultsEntry {\n  adult: Boolean\n  backdrop_path: String\n  first_air_date: Date\n  genre_ids: [Int]\n  id: Int\n  name: String\n  origin_country: [String]\n  original_language: String\n  original_name: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_search_tv_Root {\n  page: Int\n  results: [GET_search_tv_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_search_tv(query: String, tmdb_access_token: String!): GET_search_tv_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/search/tv\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_tv__tv_id__recommendations_ResultsEntry {\n  adult: Boolean\n  backdrop_path: String\n  first_air_date: Date\n  genre_ids: [Int]\n  id: Int\n  media_type: String\n  name: String\n  origin_country: [String]\n  original_language: String\n  original_name: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_tv__tv_id__recommendations_Root {\n  page: Int\n  results: [GET_tv__tv_id__recommendations_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_tv__tv_id__recommendations(\n    tmdb_access_token: String!\n    tv_id: String!\n  ): GET_tv__tv_id__recommendations_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/tv/$tv_id;/recommendations\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\n\nUtterance: I'm watching the tv series The Last Of Us and I need some more recommendations", "output": "response_obj = GET_search_tv(query=\"The Last Of Us\")\nGET_tv__tv_id__recommendations(tv_id=response_obj.results[0].id)\n", "function_specs": "[{\"name\": \"GET_search_tv\", \"description\": \"Search for a TV show.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"page\": {\"type\": \"integer\", \"description\": \"page\"}, \"query\": {\"type\": \"string\", \"description\": \"query\"}, \"include_adult\": {\"type\": \"boolean\", \"description\": \"include adult\"}, \"first_air_date_year\": {\"type\": \"integer\", \"description\": \"first air date year\"}}, \"required\": [\"query\"]}}, {\"name\": \"GET_tv__tv_id__recommendations\", \"description\": \"Get the list of TV show recommendations for this item.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"tv_id\": {\"type\": \"integer\", \"description\": \"tv id\"}, \"page\": {\"type\": \"integer\", \"description\": \"page\"}}, \"required\": [\"tv_id\"]}}]", "GraphQL_schema": "type GET_search_tv_ResultsEntry {\n  adult: Boolean\n  backdrop_path: String\n  first_air_date: Date\n  genre_ids: [Int]\n  id: Int\n  name: String\n  origin_country: [String]\n  original_language: String\n  original_name: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_search_tv_Root {\n  page: Int\n  results: [GET_search_tv_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_search_tv(query: String, tmdb_access_token: String!): GET_search_tv_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/search/tv\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_tv__tv_id__recommendations_ResultsEntry {\n  adult: Boolean\n  backdrop_path: String\n  first_air_date: Date\n  genre_ids: [Int]\n  id: Int\n  media_type: String\n  name: String\n  origin_country: [String]\n  original_language: String\n  original_name: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_tv__tv_id__recommendations_Root {\n  page: Int\n  results: [GET_tv__tv_id__recommendations_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_tv__tv_id__recommendations(\n    tmdb_access_token: String!\n    tv_id: String!\n  ): GET_tv__tv_id__recommendations_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/tv/$tv_id;/recommendations\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\n", "utterance": "I'm watching the tv series The Last Of Us and I need some more recommendations"}
{"domain": "tmdb", "input": "Function Signatures:\n\n[{\"name\": \"GET_search_movie\", \"description\": \"Search for movies.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"query\": {\"type\": \"string\", \"description\": \"query\"}, \"page\": {\"type\": \"integer\", \"description\": \"page\"}, \"include_adult\": {\"type\": \"boolean\", \"description\": \"include adult\"}, \"region\": {\"type\": \"string\", \"description\": \"region\"}, \"year\": {\"type\": \"integer\", \"description\": \"year\"}, \"primary_release_year\": {\"type\": \"integer\", \"description\": \"primary release year\"}}, \"required\": [\"query\"]}}, {\"name\": \"GET_movie__movie_id__keywords\", \"description\": \"Get the keywords that have been added to a movie.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"movie_id\": {\"type\": \"integer\", \"description\": \"movie id\"}}, \"required\": [\"movie_id\"]}}]\n\nGraphQL schema:\n\ntype GET_search_movie_ResultsEntry {\n  adult: Boolean\n  backdrop_path: String\n  genre_ids: [Int]\n  id: Int\n  original_language: String\n  original_title: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  release_date: String\n  title: String\n  video: Boolean\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_search_movie_Root {\n  page: Int\n  results: [GET_search_movie_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_search_movie(\n    query: String\n    tmdb_access_token: String!\n  ): GET_search_movie_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/search/movie\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_movie__movie_id__keywords_KeywordsEntry {\n  id: Int\n  name: String\n}\n\ntype GET_movie__movie_id__keywords_Root {\n  id: Int\n  keywords: [GET_movie__movie_id__keywords_KeywordsEntry]\n}\n\ntype Query {\n  GET_movie__movie_id__keywords(\n    movie_id: String!\n    tmdb_access_token: String!\n  ): GET_movie__movie_id__keywords_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/movie/$movie_id;/keywords\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\n\nUtterance: What are some common keywords associated with movie \"Titanic\"?", "output": "response_obj = GET_search_movie(query=\"Titanic\")\nGET_movie__movie_id__keywords(movie_id=response_obj.results[0].id)\n", "function_specs": "[{\"name\": \"GET_search_movie\", \"description\": \"Search for movies.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"query\": {\"type\": \"string\", \"description\": \"query\"}, \"page\": {\"type\": \"integer\", \"description\": \"page\"}, \"include_adult\": {\"type\": \"boolean\", \"description\": \"include adult\"}, \"region\": {\"type\": \"string\", \"description\": \"region\"}, \"year\": {\"type\": \"integer\", \"description\": \"year\"}, \"primary_release_year\": {\"type\": \"integer\", \"description\": \"primary release year\"}}, \"required\": [\"query\"]}}, {\"name\": \"GET_movie__movie_id__keywords\", \"description\": \"Get the keywords that have been added to a movie.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"movie_id\": {\"type\": \"integer\", \"description\": \"movie id\"}}, \"required\": [\"movie_id\"]}}]", "GraphQL_schema": "type GET_search_movie_ResultsEntry {\n  adult: Boolean\n  backdrop_path: String\n  genre_ids: [Int]\n  id: Int\n  original_language: String\n  original_title: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  release_date: String\n  title: String\n  video: Boolean\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_search_movie_Root {\n  page: Int\n  results: [GET_search_movie_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_search_movie(\n    query: String\n    tmdb_access_token: String!\n  ): GET_search_movie_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/search/movie\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_movie__movie_id__keywords_KeywordsEntry {\n  id: Int\n  name: String\n}\n\ntype GET_movie__movie_id__keywords_Root {\n  id: Int\n  keywords: [GET_movie__movie_id__keywords_KeywordsEntry]\n}\n\ntype Query {\n  GET_movie__movie_id__keywords(\n    movie_id: String!\n    tmdb_access_token: String!\n  ): GET_movie__movie_id__keywords_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/movie/$movie_id;/keywords\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\n", "utterance": "What are some common keywords associated with movie \"Titanic\"?"}
{"domain": "tmdb", "input": "Function Signatures:\n\n[{\"name\": \"GET_search_collection\", \"description\": \"Search for collections.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"query\": {\"type\": \"string\", \"description\": \"query\"}, \"page\": {\"type\": \"integer\", \"description\": \"page\"}}, \"required\": [\"query\"]}}, {\"name\": \"GET_collection__collection_id_\", \"description\": \"Get collection details by id.\\n\\n#### Recent Changes\\n\\n| **Date** | **Change** |\\n| - | - |\\n| March 16, 2018 | Added the [translations](#endpoint:bhcsxEgRvyk3N7FnD) method. |\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"collection_id\": {\"type\": \"integer\", \"description\": \"collection id\"}}, \"required\": [\"collection_id\"]}}]\n\nGraphQL schema:\n\ntype GET_search_collection_ResultsEntry {\n  adult: Boolean\n  backdrop_path: String\n  id: Int\n  name: String\n  original_language: String\n  original_name: String\n  overview: String\n  poster_path: String\n}\n\ntype GET_search_collection_Root {\n  page: Int\n  results: [GET_search_collection_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_search_collection(\n    query: String\n    tmdb_access_token: String!\n  ): GET_search_collection_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/search/collection\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_collection__collection_id_PartsEntry {\n  adult: Boolean\n  backdrop_path: String\n  genre_ids: [Int]\n  id: Int\n  media_type: String\n  original_language: String\n  original_title: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  release_date: Date\n  title: String\n  video: Boolean\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_collection__collection_id_Root {\n  backdrop_path: String\n  id: Int\n  name: String\n  overview: String\n  parts: [GET_collection__collection_id_PartsEntry]\n  poster_path: String\n}\n\ntype Query {\n  GET_collection__collection_id_(\n    collection_id: String!\n    tmdb_access_token: String!\n  ): GET_collection__collection_id_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/collection/$collection_id;\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\n\nUtterance: List movies from The Fast and the Furious collection", "output": "response_obj = GET_search_collection(query=\"The Fast and the Furious\")\nGET_collection__collection_id_(collection_id=response_obj.results[0].id)\n", "function_specs": "[{\"name\": \"GET_search_collection\", \"description\": \"Search for collections.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"query\": {\"type\": \"string\", \"description\": \"query\"}, \"page\": {\"type\": \"integer\", \"description\": \"page\"}}, \"required\": [\"query\"]}}, {\"name\": \"GET_collection__collection_id_\", \"description\": \"Get collection details by id.\\n\\n#### Recent Changes\\n\\n| **Date** | **Change** |\\n| - | - |\\n| March 16, 2018 | Added the [translations](#endpoint:bhcsxEgRvyk3N7FnD) method. |\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"collection_id\": {\"type\": \"integer\", \"description\": \"collection id\"}}, \"required\": [\"collection_id\"]}}]", "GraphQL_schema": "type GET_search_collection_ResultsEntry {\n  adult: Boolean\n  backdrop_path: String\n  id: Int\n  name: String\n  original_language: String\n  original_name: String\n  overview: String\n  poster_path: String\n}\n\ntype GET_search_collection_Root {\n  page: Int\n  results: [GET_search_collection_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_search_collection(\n    query: String\n    tmdb_access_token: String!\n  ): GET_search_collection_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/search/collection\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_collection__collection_id_PartsEntry {\n  adult: Boolean\n  backdrop_path: String\n  genre_ids: [Int]\n  id: Int\n  media_type: String\n  original_language: String\n  original_title: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  release_date: Date\n  title: String\n  video: Boolean\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_collection__collection_id_Root {\n  backdrop_path: String\n  id: Int\n  name: String\n  overview: String\n  parts: [GET_collection__collection_id_PartsEntry]\n  poster_path: String\n}\n\ntype Query {\n  GET_collection__collection_id_(\n    collection_id: String!\n    tmdb_access_token: String!\n  ): GET_collection__collection_id_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/collection/$collection_id;\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\n", "utterance": "List movies from The Fast and the Furious collection"}
{"domain": "tmdb", "input": "Function Signatures:\n\n[{\"name\": \"GET_search_person\", \"description\": \"Search for people.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"query\": {\"type\": \"string\", \"description\": \"query\"}, \"page\": {\"type\": \"integer\", \"description\": \"page\"}, \"include_adult\": {\"type\": \"boolean\", \"description\": \"include adult\"}, \"region\": {\"type\": \"string\", \"description\": \"region\"}}, \"required\": [\"query\"]}}, {\"name\": \"GET_person__person_id__tv_credits\", \"description\": \"Get the TV show credits for a person.\\n\\nYou can query for some extra details about the credit with the [credit method](#endpoint:xPWdEBLkvCNZSicLN).\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"person_id\": {\"type\": \"integer\", \"description\": \"person id\"}}, \"required\": [\"person_id\"]}}]\n\nGraphQL schema:\n\ntype GET_search_person_KnownForEntry {\n  adult: Boolean\n  backdrop_path: String\n  genre_ids: [Int]\n  id: Int\n  media_type: String\n  original_language: String\n  original_title: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  release_date: Date\n  title: String\n  video: Boolean\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_search_person_ResultsEntry {\n  adult: Boolean\n  gender: Int\n  id: Int\n  known_for: [GET_search_person_KnownForEntry]\n  known_for_department: String\n  name: String\n  original_name: String\n  popularity: Float\n  profile_path: String\n}\n\ntype GET_search_person_Root {\n  page: Int\n  results: [GET_search_person_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_search_person(\n    query: String\n    tmdb_access_token: String!\n  ): GET_search_person_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/search/person\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_person__person_id__tv_credits_CastEntry {\n  adult: Boolean\n  backdrop_path: String\n  character: String\n  credit_id: String\n  episode_count: Int\n  first_air_date: Date\n  genre_ids: [Int]\n  id: Int\n  name: String\n  origin_country: [String]\n  original_language: String\n  original_name: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_person__person_id__tv_credits_CrewEntry {\n  adult: Boolean\n  backdrop_path: String\n  credit_id: String\n  department: String\n  episode_count: Int\n  first_air_date: String\n  genre_ids: [Int]\n  id: Int\n  job: String\n  name: String\n  origin_country: [String]\n  original_language: String\n  original_name: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_person__person_id__tv_credits_Root {\n  cast: [GET_person__person_id__tv_credits_CastEntry]\n  crew: [GET_person__person_id__tv_credits_CrewEntry]\n  id: Int\n}\n\ntype Query {\n  GET_person__person_id__tv_credits(\n    person_id: String!\n    tmdb_access_token: String!\n  ): GET_person__person_id__tv_credits_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/person/$person_id;/tv_credits\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\n\nUtterance: What is David Schwimmer's most popular TV show?", "output": "response_obj = GET_search_person(query=\"David Schwimmer\")\nGET_person__person_id__tv_credits(person_id=response_obj.results[0].id)\n", "function_specs": "[{\"name\": \"GET_search_person\", \"description\": \"Search for people.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"query\": {\"type\": \"string\", \"description\": \"query\"}, \"page\": {\"type\": \"integer\", \"description\": \"page\"}, \"include_adult\": {\"type\": \"boolean\", \"description\": \"include adult\"}, \"region\": {\"type\": \"string\", \"description\": \"region\"}}, \"required\": [\"query\"]}}, {\"name\": \"GET_person__person_id__tv_credits\", \"description\": \"Get the TV show credits for a person.\\n\\nYou can query for some extra details about the credit with the [credit method](#endpoint:xPWdEBLkvCNZSicLN).\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"person_id\": {\"type\": \"integer\", \"description\": \"person id\"}}, \"required\": [\"person_id\"]}}]", "GraphQL_schema": "type GET_search_person_KnownForEntry {\n  adult: Boolean\n  backdrop_path: String\n  genre_ids: [Int]\n  id: Int\n  media_type: String\n  original_language: String\n  original_title: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  release_date: Date\n  title: String\n  video: Boolean\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_search_person_ResultsEntry {\n  adult: Boolean\n  gender: Int\n  id: Int\n  known_for: [GET_search_person_KnownForEntry]\n  known_for_department: String\n  name: String\n  original_name: String\n  popularity: Float\n  profile_path: String\n}\n\ntype GET_search_person_Root {\n  page: Int\n  results: [GET_search_person_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_search_person(\n    query: String\n    tmdb_access_token: String!\n  ): GET_search_person_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/search/person\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_person__person_id__tv_credits_CastEntry {\n  adult: Boolean\n  backdrop_path: String\n  character: String\n  credit_id: String\n  episode_count: Int\n  first_air_date: Date\n  genre_ids: [Int]\n  id: Int\n  name: String\n  origin_country: [String]\n  original_language: String\n  original_name: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_person__person_id__tv_credits_CrewEntry {\n  adult: Boolean\n  backdrop_path: String\n  credit_id: String\n  department: String\n  episode_count: Int\n  first_air_date: String\n  genre_ids: [Int]\n  id: Int\n  job: String\n  name: String\n  origin_country: [String]\n  original_language: String\n  original_name: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_person__person_id__tv_credits_Root {\n  cast: [GET_person__person_id__tv_credits_CastEntry]\n  crew: [GET_person__person_id__tv_credits_CrewEntry]\n  id: Int\n}\n\ntype Query {\n  GET_person__person_id__tv_credits(\n    person_id: String!\n    tmdb_access_token: String!\n  ): GET_person__person_id__tv_credits_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/person/$person_id;/tv_credits\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\n", "utterance": "What is David Schwimmer's most popular TV show?"}
{"domain": "tmdb", "input": "Function Signatures:\n\n[{\"name\": \"GET_search_movie\", \"description\": \"Search for movies.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"query\": {\"type\": \"string\", \"description\": \"query\"}, \"page\": {\"type\": \"integer\", \"description\": \"page\"}, \"include_adult\": {\"type\": \"boolean\", \"description\": \"include adult\"}, \"region\": {\"type\": \"string\", \"description\": \"region\"}, \"year\": {\"type\": \"integer\", \"description\": \"year\"}, \"primary_release_year\": {\"type\": \"integer\", \"description\": \"primary release year\"}}, \"required\": [\"query\"]}}, {\"name\": \"GET_movie__movie_id__images\", \"description\": \"Get the images that belong to a movie.\\n\\nQuerying images with a `language` parameter will filter the results. If you want to include a fallback language (especially useful for backdrops) you can use the `include_image_language` parameter. This should be a comma seperated value like so: `include_image_language=en,null`.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"movie_id\": {\"type\": \"integer\", \"description\": \"movie id\"}, \"include_image_language\": {\"type\": \"string\", \"description\": \"include image language\"}}, \"required\": [\"movie_id\"]}}]\n\nGraphQL schema:\n\ntype GET_search_movie_ResultsEntry {\n  adult: Boolean\n  backdrop_path: String\n  genre_ids: [Int]\n  id: Int\n  original_language: String\n  original_title: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  release_date: String\n  title: String\n  video: Boolean\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_search_movie_Root {\n  page: Int\n  results: [GET_search_movie_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_search_movie(\n    query: String\n    tmdb_access_token: String!\n  ): GET_search_movie_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/search/movie\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_movie__movie_id__images_BackdropsEntry {\n  aspect_ratio: Float\n  file_path: String\n  height: Int\n  iso_639_1: String\n  vote_average: Float\n  vote_count: Int\n  width: Int\n}\n\ntype GET_movie__movie_id__images_LogosEntry {\n  aspect_ratio: Float\n  file_path: String\n  height: Int\n  iso_639_1: String\n  vote_average: Float\n  vote_count: Int\n  width: Int\n}\n\ntype GET_movie__movie_id__images_PostersEntry {\n  aspect_ratio: Float\n  file_path: String\n  height: Int\n  iso_639_1: String\n  vote_average: Float\n  vote_count: Int\n  width: Int\n}\n\ntype GET_movie__movie_id__images_Root {\n  backdrops: [GET_movie__movie_id__images_BackdropsEntry]\n  id: Int\n  logos: [GET_movie__movie_id__images_LogosEntry]\n  posters: [GET_movie__movie_id__images_PostersEntry]\n}\n\ntype Query {\n  GET_movie__movie_id__images(\n    movie_id: String!\n    tmdb_access_token: String!\n  ): GET_movie__movie_id__images_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/movie/$movie_id;/images\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\n\nUtterance: Give me one cover image of the movie Oppenheimer.", "output": "response_obj = GET_search_movie(query=\"Oppenheimer\")\nGET_movie__movie_id__images(movie_id=response_obj.results[0].id)\n", "function_specs": "[{\"name\": \"GET_search_movie\", \"description\": \"Search for movies.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"query\": {\"type\": \"string\", \"description\": \"query\"}, \"page\": {\"type\": \"integer\", \"description\": \"page\"}, \"include_adult\": {\"type\": \"boolean\", \"description\": \"include adult\"}, \"region\": {\"type\": \"string\", \"description\": \"region\"}, \"year\": {\"type\": \"integer\", \"description\": \"year\"}, \"primary_release_year\": {\"type\": \"integer\", \"description\": \"primary release year\"}}, \"required\": [\"query\"]}}, {\"name\": \"GET_movie__movie_id__images\", \"description\": \"Get the images that belong to a movie.\\n\\nQuerying images with a `language` parameter will filter the results. If you want to include a fallback language (especially useful for backdrops) you can use the `include_image_language` parameter. This should be a comma seperated value like so: `include_image_language=en,null`.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"movie_id\": {\"type\": \"integer\", \"description\": \"movie id\"}, \"include_image_language\": {\"type\": \"string\", \"description\": \"include image language\"}}, \"required\": [\"movie_id\"]}}]", "GraphQL_schema": "type GET_search_movie_ResultsEntry {\n  adult: Boolean\n  backdrop_path: String\n  genre_ids: [Int]\n  id: Int\n  original_language: String\n  original_title: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  release_date: String\n  title: String\n  video: Boolean\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_search_movie_Root {\n  page: Int\n  results: [GET_search_movie_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_search_movie(\n    query: String\n    tmdb_access_token: String!\n  ): GET_search_movie_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/search/movie\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_movie__movie_id__images_BackdropsEntry {\n  aspect_ratio: Float\n  file_path: String\n  height: Int\n  iso_639_1: String\n  vote_average: Float\n  vote_count: Int\n  width: Int\n}\n\ntype GET_movie__movie_id__images_LogosEntry {\n  aspect_ratio: Float\n  file_path: String\n  height: Int\n  iso_639_1: String\n  vote_average: Float\n  vote_count: Int\n  width: Int\n}\n\ntype GET_movie__movie_id__images_PostersEntry {\n  aspect_ratio: Float\n  file_path: String\n  height: Int\n  iso_639_1: String\n  vote_average: Float\n  vote_count: Int\n  width: Int\n}\n\ntype GET_movie__movie_id__images_Root {\n  backdrops: [GET_movie__movie_id__images_BackdropsEntry]\n  id: Int\n  logos: [GET_movie__movie_id__images_LogosEntry]\n  posters: [GET_movie__movie_id__images_PostersEntry]\n}\n\ntype Query {\n  GET_movie__movie_id__images(\n    movie_id: String!\n    tmdb_access_token: String!\n  ): GET_movie__movie_id__images_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/movie/$movie_id;/images\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\n", "utterance": "Give me one cover image of the movie Oppenheimer."}
{"domain": "tmdb", "input": "Function Signatures:\n\n[{\"name\": \"GET_trending__media_type___time_window_\", \"description\": \"Get the daily or weekly trending items. The daily trending list tracks items over the period of a day while items have a 24 hour half life. The weekly list tracks items over a 7 day period, with a 7 day half life.\\n\\n#### Valid Media Types\\n\\n| **Media Type** | **Description** |\\n| - | - |\\n| all | Include all movies, TV shows and people in the results as a global trending list. |\\n| movie | Show the trending movies in the results. |\\n| tv | Show the trending TV shows in the results. |\\n| person | Show the trending people in the results. |\\n\\n#### Valid Time Windows\\n\\n| **Time Window** | **Description** |\\n| - | - |\\n| day | View the trending list for the day. |\\n| week | View the trending list for the week. |\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"media_type\": {\"type\": \"string\", \"description\": \"media type\\nValid values: all,movie,tv,person\"}, \"time_window\": {\"type\": \"string\", \"description\": \"time window\\nValid values: day,week\"}}, \"required\": [\"media_type\", \"time_window\"]}}, {\"name\": \"GET_tv__tv_id_\", \"description\": \"Get the primary TV show details by id.\\n\\nSupports `append_to_response`. Read more about this [here](#docTextSection:JdZq8ctmcxNqyLQjp).\\n\\n#### Recent Changes\\n\\n| **Date** | **Change** |\\n| - | - |\\n| July 17, 2018 | We now return `last_episode_to_air` and `next_episode_to_air` fields. |\\n| March 12, 2018 | Networks return proper logos and we introduced SVG support. |\\n| March 8, 2018 | The `seasons` field now returns the translated names and overviews. |\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"tv_id\": {\"type\": \"integer\", \"description\": \"tv id\"}}, \"required\": [\"tv_id\"]}}, {\"name\": \"GET_network__network_id_\", \"description\": \"Get the details of a network.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"network_id\": {\"type\": \"integer\", \"description\": \"network id\"}}, \"required\": [\"network_id\"]}}]\n\nGraphQL schema:\n\ntype GET_network__network_id_Root {\n  headquarters: String\n  homepage: String\n  id: Int\n  logo_path: String\n  name: String\n  origin_country: String\n}\n\ntype Query {\n  GET_network__network_id_(\n    network_id: String!\n    tmdb_access_token: String!\n  ): GET_network__network_id_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/network/$network_id;\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_trending__media_type___time_window_ResultsEntry {\n  adult: Boolean\n  backdrop_path: String\n  genre_ids: [Int]\n  id: Int\n  media_type: String\n  original_language: String\n  original_title: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  release_date: Date\n  title: String\n  video: Boolean\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_trending__media_type___time_window_Root {\n  page: Int\n  results: [GET_trending__media_type___time_window_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_trending__media_type___time_window_(\n    media_type: String!\n    time_window: String!\n    tmdb_access_token: String!\n  ): GET_trending__media_type___time_window_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/trending/$media_type;/$time_window;\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_tv__tv_id_CreatedByEntry {\n  credit_id: String\n  gender: Int\n  id: Int\n  name: String\n  original_name: String\n  profile_path: String\n}\n\ntype GET_tv__tv_id_GenresEntry {\n  id: Int\n  name: String\n}\n\ntype GET_tv__tv_id_LastEpisodeToAir {\n  air_date: Date\n  episode_number: Int\n  episode_type: String\n  id: Int\n  name: String\n  overview: String\n  production_code: String\n  runtime: Int\n  season_number: Int\n  show_id: Int\n  still_path: String\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_tv__tv_id_NetworksEntry {\n  id: Int\n  logo_path: String\n  name: String\n  origin_country: String\n}\n\ntype GET_tv__tv_id_ProductionCompaniesEntry {\n  id: Int\n  logo_path: String\n  name: String\n  origin_country: String\n}\n\ntype GET_tv__tv_id_ProductionCountriesEntry {\n  iso_3166_1: String\n  name: String\n}\n\ntype GET_tv__tv_id_Root {\n  adult: Boolean\n  backdrop_path: String\n  created_by: [GET_tv__tv_id_CreatedByEntry]\n  episode_run_time: [Int]\n  first_air_date: Date\n  genres: [GET_tv__tv_id_GenresEntry]\n  homepage: String\n  id: Int\n  in_production: Boolean\n  languages: [String]\n  last_air_date: Date\n  last_episode_to_air: GET_tv__tv_id_LastEpisodeToAir\n  name: String\n  networks: [GET_tv__tv_id_NetworksEntry]\n  \"\"\"\n  Field \"next_episode_to_air\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  next_episode_to_air: JSON\n  number_of_episodes: Int\n  number_of_seasons: Int\n  origin_country: [String]\n  original_language: String\n  original_name: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  production_companies: [GET_tv__tv_id_ProductionCompaniesEntry]\n  production_countries: [GET_tv__tv_id_ProductionCountriesEntry]\n  seasons: [GET_tv__tv_id_SeasonsEntry]\n  spoken_languages: [GET_tv__tv_id_SpokenLanguagesEntry]\n  status: String\n  tagline: String\n  type: String\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_tv__tv_id_SeasonsEntry {\n  air_date: Date\n  episode_count: Int\n  id: Int\n  name: String\n  overview: String\n  poster_path: String\n  season_number: Int\n  vote_average: Float\n}\n\ntype GET_tv__tv_id_SpokenLanguagesEntry {\n  english_name: String\n  iso_639_1: String\n  name: String\n}\n\ntype Query {\n  GET_tv__tv_id_(\n    tmdb_access_token: String!\n    tv_id: String!\n  ): GET_tv__tv_id_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/tv/$tv_id;\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\n\nUtterance: What is the homepage of the network that produced today's most trending TV show?", "output": "response_obj = GET_trending__media_type___time_window_(media_type=\"tv\", time_window=\"day\")\nresponse_obj1 = GET_tv__tv_id_(tv_id=response_obj.results[0].id)\nGET_network__network_id_(network_id=response_obj1.networks[0].id)\n", "function_specs": "[{\"name\": \"GET_trending__media_type___time_window_\", \"description\": \"Get the daily or weekly trending items. The daily trending list tracks items over the period of a day while items have a 24 hour half life. The weekly list tracks items over a 7 day period, with a 7 day half life.\\n\\n#### Valid Media Types\\n\\n| **Media Type** | **Description** |\\n| - | - |\\n| all | Include all movies, TV shows and people in the results as a global trending list. |\\n| movie | Show the trending movies in the results. |\\n| tv | Show the trending TV shows in the results. |\\n| person | Show the trending people in the results. |\\n\\n#### Valid Time Windows\\n\\n| **Time Window** | **Description** |\\n| - | - |\\n| day | View the trending list for the day. |\\n| week | View the trending list for the week. |\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"media_type\": {\"type\": \"string\", \"description\": \"media type\\nValid values: all,movie,tv,person\"}, \"time_window\": {\"type\": \"string\", \"description\": \"time window\\nValid values: day,week\"}}, \"required\": [\"media_type\", \"time_window\"]}}, {\"name\": \"GET_tv__tv_id_\", \"description\": \"Get the primary TV show details by id.\\n\\nSupports `append_to_response`. Read more about this [here](#docTextSection:JdZq8ctmcxNqyLQjp).\\n\\n#### Recent Changes\\n\\n| **Date** | **Change** |\\n| - | - |\\n| July 17, 2018 | We now return `last_episode_to_air` and `next_episode_to_air` fields. |\\n| March 12, 2018 | Networks return proper logos and we introduced SVG support. |\\n| March 8, 2018 | The `seasons` field now returns the translated names and overviews. |\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"tv_id\": {\"type\": \"integer\", \"description\": \"tv id\"}}, \"required\": [\"tv_id\"]}}, {\"name\": \"GET_network__network_id_\", \"description\": \"Get the details of a network.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"network_id\": {\"type\": \"integer\", \"description\": \"network id\"}}, \"required\": [\"network_id\"]}}]", "GraphQL_schema": "type GET_network__network_id_Root {\n  headquarters: String\n  homepage: String\n  id: Int\n  logo_path: String\n  name: String\n  origin_country: String\n}\n\ntype Query {\n  GET_network__network_id_(\n    network_id: String!\n    tmdb_access_token: String!\n  ): GET_network__network_id_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/network/$network_id;\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_trending__media_type___time_window_ResultsEntry {\n  adult: Boolean\n  backdrop_path: String\n  genre_ids: [Int]\n  id: Int\n  media_type: String\n  original_language: String\n  original_title: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  release_date: Date\n  title: String\n  video: Boolean\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_trending__media_type___time_window_Root {\n  page: Int\n  results: [GET_trending__media_type___time_window_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_trending__media_type___time_window_(\n    media_type: String!\n    time_window: String!\n    tmdb_access_token: String!\n  ): GET_trending__media_type___time_window_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/trending/$media_type;/$time_window;\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_tv__tv_id_CreatedByEntry {\n  credit_id: String\n  gender: Int\n  id: Int\n  name: String\n  original_name: String\n  profile_path: String\n}\n\ntype GET_tv__tv_id_GenresEntry {\n  id: Int\n  name: String\n}\n\ntype GET_tv__tv_id_LastEpisodeToAir {\n  air_date: Date\n  episode_number: Int\n  episode_type: String\n  id: Int\n  name: String\n  overview: String\n  production_code: String\n  runtime: Int\n  season_number: Int\n  show_id: Int\n  still_path: String\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_tv__tv_id_NetworksEntry {\n  id: Int\n  logo_path: String\n  name: String\n  origin_country: String\n}\n\ntype GET_tv__tv_id_ProductionCompaniesEntry {\n  id: Int\n  logo_path: String\n  name: String\n  origin_country: String\n}\n\ntype GET_tv__tv_id_ProductionCountriesEntry {\n  iso_3166_1: String\n  name: String\n}\n\ntype GET_tv__tv_id_Root {\n  adult: Boolean\n  backdrop_path: String\n  created_by: [GET_tv__tv_id_CreatedByEntry]\n  episode_run_time: [Int]\n  first_air_date: Date\n  genres: [GET_tv__tv_id_GenresEntry]\n  homepage: String\n  id: Int\n  in_production: Boolean\n  languages: [String]\n  last_air_date: Date\n  last_episode_to_air: GET_tv__tv_id_LastEpisodeToAir\n  name: String\n  networks: [GET_tv__tv_id_NetworksEntry]\n  \"\"\"\n  Field \"next_episode_to_air\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  next_episode_to_air: JSON\n  number_of_episodes: Int\n  number_of_seasons: Int\n  origin_country: [String]\n  original_language: String\n  original_name: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  production_companies: [GET_tv__tv_id_ProductionCompaniesEntry]\n  production_countries: [GET_tv__tv_id_ProductionCountriesEntry]\n  seasons: [GET_tv__tv_id_SeasonsEntry]\n  spoken_languages: [GET_tv__tv_id_SpokenLanguagesEntry]\n  status: String\n  tagline: String\n  type: String\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_tv__tv_id_SeasonsEntry {\n  air_date: Date\n  episode_count: Int\n  id: Int\n  name: String\n  overview: String\n  poster_path: String\n  season_number: Int\n  vote_average: Float\n}\n\ntype GET_tv__tv_id_SpokenLanguagesEntry {\n  english_name: String\n  iso_639_1: String\n  name: String\n}\n\ntype Query {\n  GET_tv__tv_id_(\n    tmdb_access_token: String!\n    tv_id: String!\n  ): GET_tv__tv_id_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/tv/$tv_id;\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\n", "utterance": "What is the homepage of the network that produced today's most trending TV show?"}
{"domain": "tmdb", "input": "Function Signatures:\n\n[{\"name\": \"GET_search_tv\", \"description\": \"Search for a TV show.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"page\": {\"type\": \"integer\", \"description\": \"page\"}, \"query\": {\"type\": \"string\", \"description\": \"query\"}, \"include_adult\": {\"type\": \"boolean\", \"description\": \"include adult\"}, \"first_air_date_year\": {\"type\": \"integer\", \"description\": \"first air date year\"}}, \"required\": [\"query\"]}}, {\"name\": \"GET_tv__tv_id_\", \"description\": \"Get the primary TV show details by id.\\n\\nSupports `append_to_response`. Read more about this [here](#docTextSection:JdZq8ctmcxNqyLQjp).\\n\\n#### Recent Changes\\n\\n| **Date** | **Change** |\\n| - | - |\\n| July 17, 2018 | We now return `last_episode_to_air` and `next_episode_to_air` fields. |\\n| March 12, 2018 | Networks return proper logos and we introduced SVG support. |\\n| March 8, 2018 | The `seasons` field now returns the translated names and overviews. |\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"tv_id\": {\"type\": \"integer\", \"description\": \"tv id\"}}, \"required\": [\"tv_id\"]}}]\n\nGraphQL schema:\n\ntype GET_search_tv_ResultsEntry {\n  adult: Boolean\n  backdrop_path: String\n  first_air_date: Date\n  genre_ids: [Int]\n  id: Int\n  name: String\n  origin_country: [String]\n  original_language: String\n  original_name: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_search_tv_Root {\n  page: Int\n  results: [GET_search_tv_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_search_tv(query: String, tmdb_access_token: String!): GET_search_tv_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/search/tv\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_tv__tv_id_CreatedByEntry {\n  credit_id: String\n  gender: Int\n  id: Int\n  name: String\n  original_name: String\n  profile_path: String\n}\n\ntype GET_tv__tv_id_GenresEntry {\n  id: Int\n  name: String\n}\n\ntype GET_tv__tv_id_LastEpisodeToAir {\n  air_date: Date\n  episode_number: Int\n  episode_type: String\n  id: Int\n  name: String\n  overview: String\n  production_code: String\n  runtime: Int\n  season_number: Int\n  show_id: Int\n  still_path: String\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_tv__tv_id_NetworksEntry {\n  id: Int\n  logo_path: String\n  name: String\n  origin_country: String\n}\n\ntype GET_tv__tv_id_ProductionCompaniesEntry {\n  id: Int\n  logo_path: String\n  name: String\n  origin_country: String\n}\n\ntype GET_tv__tv_id_ProductionCountriesEntry {\n  iso_3166_1: String\n  name: String\n}\n\ntype GET_tv__tv_id_Root {\n  adult: Boolean\n  backdrop_path: String\n  created_by: [GET_tv__tv_id_CreatedByEntry]\n  episode_run_time: [Int]\n  first_air_date: Date\n  genres: [GET_tv__tv_id_GenresEntry]\n  homepage: String\n  id: Int\n  in_production: Boolean\n  languages: [String]\n  last_air_date: Date\n  last_episode_to_air: GET_tv__tv_id_LastEpisodeToAir\n  name: String\n  networks: [GET_tv__tv_id_NetworksEntry]\n  \"\"\"\n  Field \"next_episode_to_air\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  next_episode_to_air: JSON\n  number_of_episodes: Int\n  number_of_seasons: Int\n  origin_country: [String]\n  original_language: String\n  original_name: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  production_companies: [GET_tv__tv_id_ProductionCompaniesEntry]\n  production_countries: [GET_tv__tv_id_ProductionCountriesEntry]\n  seasons: [GET_tv__tv_id_SeasonsEntry]\n  spoken_languages: [GET_tv__tv_id_SpokenLanguagesEntry]\n  status: String\n  tagline: String\n  type: String\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_tv__tv_id_SeasonsEntry {\n  air_date: Date\n  episode_count: Int\n  id: Int\n  name: String\n  overview: String\n  poster_path: String\n  season_number: Int\n  vote_average: Float\n}\n\ntype GET_tv__tv_id_SpokenLanguagesEntry {\n  english_name: String\n  iso_639_1: String\n  name: String\n}\n\ntype Query {\n  GET_tv__tv_id_(\n    tmdb_access_token: String!\n    tv_id: String!\n  ): GET_tv__tv_id_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/tv/$tv_id;\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\n\nUtterance: How many episodes does 2 Broke Girls have in total?", "output": "response_obj = GET_search_tv(query=\"2 Broke Girls\")\nGET_tv__tv_id_(tv_id=response_obj.results[0].id)\n", "function_specs": "[{\"name\": \"GET_search_tv\", \"description\": \"Search for a TV show.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"page\": {\"type\": \"integer\", \"description\": \"page\"}, \"query\": {\"type\": \"string\", \"description\": \"query\"}, \"include_adult\": {\"type\": \"boolean\", \"description\": \"include adult\"}, \"first_air_date_year\": {\"type\": \"integer\", \"description\": \"first air date year\"}}, \"required\": [\"query\"]}}, {\"name\": \"GET_tv__tv_id_\", \"description\": \"Get the primary TV show details by id.\\n\\nSupports `append_to_response`. Read more about this [here](#docTextSection:JdZq8ctmcxNqyLQjp).\\n\\n#### Recent Changes\\n\\n| **Date** | **Change** |\\n| - | - |\\n| July 17, 2018 | We now return `last_episode_to_air` and `next_episode_to_air` fields. |\\n| March 12, 2018 | Networks return proper logos and we introduced SVG support. |\\n| March 8, 2018 | The `seasons` field now returns the translated names and overviews. |\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"tv_id\": {\"type\": \"integer\", \"description\": \"tv id\"}}, \"required\": [\"tv_id\"]}}]", "GraphQL_schema": "type GET_search_tv_ResultsEntry {\n  adult: Boolean\n  backdrop_path: String\n  first_air_date: Date\n  genre_ids: [Int]\n  id: Int\n  name: String\n  origin_country: [String]\n  original_language: String\n  original_name: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_search_tv_Root {\n  page: Int\n  results: [GET_search_tv_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_search_tv(query: String, tmdb_access_token: String!): GET_search_tv_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/search/tv\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_tv__tv_id_CreatedByEntry {\n  credit_id: String\n  gender: Int\n  id: Int\n  name: String\n  original_name: String\n  profile_path: String\n}\n\ntype GET_tv__tv_id_GenresEntry {\n  id: Int\n  name: String\n}\n\ntype GET_tv__tv_id_LastEpisodeToAir {\n  air_date: Date\n  episode_number: Int\n  episode_type: String\n  id: Int\n  name: String\n  overview: String\n  production_code: String\n  runtime: Int\n  season_number: Int\n  show_id: Int\n  still_path: String\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_tv__tv_id_NetworksEntry {\n  id: Int\n  logo_path: String\n  name: String\n  origin_country: String\n}\n\ntype GET_tv__tv_id_ProductionCompaniesEntry {\n  id: Int\n  logo_path: String\n  name: String\n  origin_country: String\n}\n\ntype GET_tv__tv_id_ProductionCountriesEntry {\n  iso_3166_1: String\n  name: String\n}\n\ntype GET_tv__tv_id_Root {\n  adult: Boolean\n  backdrop_path: String\n  created_by: [GET_tv__tv_id_CreatedByEntry]\n  episode_run_time: [Int]\n  first_air_date: Date\n  genres: [GET_tv__tv_id_GenresEntry]\n  homepage: String\n  id: Int\n  in_production: Boolean\n  languages: [String]\n  last_air_date: Date\n  last_episode_to_air: GET_tv__tv_id_LastEpisodeToAir\n  name: String\n  networks: [GET_tv__tv_id_NetworksEntry]\n  \"\"\"\n  Field \"next_episode_to_air\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  next_episode_to_air: JSON\n  number_of_episodes: Int\n  number_of_seasons: Int\n  origin_country: [String]\n  original_language: String\n  original_name: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  production_companies: [GET_tv__tv_id_ProductionCompaniesEntry]\n  production_countries: [GET_tv__tv_id_ProductionCountriesEntry]\n  seasons: [GET_tv__tv_id_SeasonsEntry]\n  spoken_languages: [GET_tv__tv_id_SpokenLanguagesEntry]\n  status: String\n  tagline: String\n  type: String\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_tv__tv_id_SeasonsEntry {\n  air_date: Date\n  episode_count: Int\n  id: Int\n  name: String\n  overview: String\n  poster_path: String\n  season_number: Int\n  vote_average: Float\n}\n\ntype GET_tv__tv_id_SpokenLanguagesEntry {\n  english_name: String\n  iso_639_1: String\n  name: String\n}\n\ntype Query {\n  GET_tv__tv_id_(\n    tmdb_access_token: String!\n    tv_id: String!\n  ): GET_tv__tv_id_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/tv/$tv_id;\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\n", "utterance": "How many episodes does 2 Broke Girls have in total?"}
{"domain": "tmdb", "input": "Function Signatures:\n\n[{\"name\": \"GET_search_collection\", \"description\": \"Search for collections.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"query\": {\"type\": \"string\", \"description\": \"query\"}, \"page\": {\"type\": \"integer\", \"description\": \"page\"}}, \"required\": [\"query\"]}}, {\"name\": \"GET_collection__collection_id_\", \"description\": \"Get collection details by id.\\n\\n#### Recent Changes\\n\\n| **Date** | **Change** |\\n| - | - |\\n| March 16, 2018 | Added the [translations](#endpoint:bhcsxEgRvyk3N7FnD) method. |\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"collection_id\": {\"type\": \"integer\", \"description\": \"collection id\"}}, \"required\": [\"collection_id\"]}}, {\"name\": \"GET_movie__movie_id__credits\", \"description\": \"Get the cast and crew for a movie.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"movie_id\": {\"type\": \"integer\", \"description\": \"movie id\"}}, \"required\": [\"movie_id\"]}}]\n\nGraphQL schema:\n\ntype GET_movie__movie_id__credits_CastEntry {\n  adult: Boolean\n  cast_id: Int\n  character: String\n  credit_id: String\n  gender: Int\n  id: Int\n  known_for_department: String\n  name: String\n  order: Int\n  original_name: String\n  popularity: Float\n  profile_path: String\n}\n\ntype GET_movie__movie_id__credits_CrewEntry {\n  adult: Boolean\n  credit_id: String\n  department: String\n  gender: Int\n  id: Int\n  job: String\n  known_for_department: String\n  name: String\n  original_name: String\n  popularity: Float\n  profile_path: String\n}\n\ntype GET_movie__movie_id__credits_Root {\n  cast: [GET_movie__movie_id__credits_CastEntry]\n  crew: [GET_movie__movie_id__credits_CrewEntry]\n  id: Int\n}\n\ntype Query {\n  GET_movie__movie_id__credits(\n    movie_id: String!\n    tmdb_access_token: String!\n  ): GET_movie__movie_id__credits_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/movie/$movie_id;/credits\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_search_collection_ResultsEntry {\n  adult: Boolean\n  backdrop_path: String\n  id: Int\n  name: String\n  original_language: String\n  original_name: String\n  overview: String\n  poster_path: String\n}\n\ntype GET_search_collection_Root {\n  page: Int\n  results: [GET_search_collection_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_search_collection(\n    query: String\n    tmdb_access_token: String!\n  ): GET_search_collection_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/search/collection\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_collection__collection_id_PartsEntry {\n  adult: Boolean\n  backdrop_path: String\n  genre_ids: [Int]\n  id: Int\n  media_type: String\n  original_language: String\n  original_title: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  release_date: Date\n  title: String\n  video: Boolean\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_collection__collection_id_Root {\n  backdrop_path: String\n  id: Int\n  name: String\n  overview: String\n  parts: [GET_collection__collection_id_PartsEntry]\n  poster_path: String\n}\n\ntype Query {\n  GET_collection__collection_id_(\n    collection_id: String!\n    tmdb_access_token: String!\n  ): GET_collection__collection_id_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/collection/$collection_id;\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\n\nUtterance: Who has starred in the first movie of Star Wars collection?", "output": "response_obj = GET_search_collection(query=\"Star Wars\")\nresponse_obj1 = GET_collection__collection_id_(collection_id=response_obj.results[0].id)\nGET_movie__movie_id__credits(movie_id=response_obj1.parts[0].id)\n", "function_specs": "[{\"name\": \"GET_search_collection\", \"description\": \"Search for collections.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"query\": {\"type\": \"string\", \"description\": \"query\"}, \"page\": {\"type\": \"integer\", \"description\": \"page\"}}, \"required\": [\"query\"]}}, {\"name\": \"GET_collection__collection_id_\", \"description\": \"Get collection details by id.\\n\\n#### Recent Changes\\n\\n| **Date** | **Change** |\\n| - | - |\\n| March 16, 2018 | Added the [translations](#endpoint:bhcsxEgRvyk3N7FnD) method. |\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"collection_id\": {\"type\": \"integer\", \"description\": \"collection id\"}}, \"required\": [\"collection_id\"]}}, {\"name\": \"GET_movie__movie_id__credits\", \"description\": \"Get the cast and crew for a movie.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"movie_id\": {\"type\": \"integer\", \"description\": \"movie id\"}}, \"required\": [\"movie_id\"]}}]", "GraphQL_schema": "type GET_movie__movie_id__credits_CastEntry {\n  adult: Boolean\n  cast_id: Int\n  character: String\n  credit_id: String\n  gender: Int\n  id: Int\n  known_for_department: String\n  name: String\n  order: Int\n  original_name: String\n  popularity: Float\n  profile_path: String\n}\n\ntype GET_movie__movie_id__credits_CrewEntry {\n  adult: Boolean\n  credit_id: String\n  department: String\n  gender: Int\n  id: Int\n  job: String\n  known_for_department: String\n  name: String\n  original_name: String\n  popularity: Float\n  profile_path: String\n}\n\ntype GET_movie__movie_id__credits_Root {\n  cast: [GET_movie__movie_id__credits_CastEntry]\n  crew: [GET_movie__movie_id__credits_CrewEntry]\n  id: Int\n}\n\ntype Query {\n  GET_movie__movie_id__credits(\n    movie_id: String!\n    tmdb_access_token: String!\n  ): GET_movie__movie_id__credits_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/movie/$movie_id;/credits\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_search_collection_ResultsEntry {\n  adult: Boolean\n  backdrop_path: String\n  id: Int\n  name: String\n  original_language: String\n  original_name: String\n  overview: String\n  poster_path: String\n}\n\ntype GET_search_collection_Root {\n  page: Int\n  results: [GET_search_collection_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_search_collection(\n    query: String\n    tmdb_access_token: String!\n  ): GET_search_collection_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/search/collection\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_collection__collection_id_PartsEntry {\n  adult: Boolean\n  backdrop_path: String\n  genre_ids: [Int]\n  id: Int\n  media_type: String\n  original_language: String\n  original_title: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  release_date: Date\n  title: String\n  video: Boolean\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_collection__collection_id_Root {\n  backdrop_path: String\n  id: Int\n  name: String\n  overview: String\n  parts: [GET_collection__collection_id_PartsEntry]\n  poster_path: String\n}\n\ntype Query {\n  GET_collection__collection_id_(\n    collection_id: String!\n    tmdb_access_token: String!\n  ): GET_collection__collection_id_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/collection/$collection_id;\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\n", "utterance": "Who has starred in the first movie of Star Wars collection?"}
{"domain": "tmdb", "input": "Function Signatures:\n\n[{\"name\": \"GET_tv_popular\", \"description\": \"Get a list of the current popular TV shows on TMDb. This list updates daily.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"page\": {\"type\": \"integer\", \"description\": \"page\"}}, \"required\": []}}, {\"name\": \"GET_tv__tv_id__keywords\", \"description\": \"Get the keywords that have been added to a TV show.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"tv_id\": {\"type\": \"integer\", \"description\": \"tv id\"}}, \"required\": [\"tv_id\"]}}]\n\nGraphQL schema:\n\ntype GET_tv_popular_ResultsEntry {\n  adult: Boolean\n  backdrop_path: String\n  first_air_date: Date\n  genre_ids: [Int]\n  id: Int\n  name: String\n  origin_country: [String]\n  original_language: String\n  original_name: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_tv_popular_Root {\n  page: Int\n  results: [GET_tv_popular_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_tv_popular(tmdb_access_token: String!): GET_tv_popular_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/tv/popular\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_tv__tv_id__keywords_ResultsEntry {\n  id: Int\n  name: String\n}\n\ntype GET_tv__tv_id__keywords_Root {\n  id: Int\n  results: [GET_tv__tv_id__keywords_ResultsEntry]\n}\n\ntype Query {\n  GET_tv__tv_id__keywords(\n    tmdb_access_token: String!\n    tv_id: String!\n  ): GET_tv__tv_id__keywords_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/tv/$tv_id;/keywords\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\n\nUtterance: give me a keyword of the most popular TV show currently", "output": "response_obj = GET_tv_popular()\nGET_tv__tv_id__keywords(tv_id=response_obj.results[0].id)\n", "function_specs": "[{\"name\": \"GET_tv_popular\", \"description\": \"Get a list of the current popular TV shows on TMDb. This list updates daily.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"page\": {\"type\": \"integer\", \"description\": \"page\"}}, \"required\": []}}, {\"name\": \"GET_tv__tv_id__keywords\", \"description\": \"Get the keywords that have been added to a TV show.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"tv_id\": {\"type\": \"integer\", \"description\": \"tv id\"}}, \"required\": [\"tv_id\"]}}]", "GraphQL_schema": "type GET_tv_popular_ResultsEntry {\n  adult: Boolean\n  backdrop_path: String\n  first_air_date: Date\n  genre_ids: [Int]\n  id: Int\n  name: String\n  origin_country: [String]\n  original_language: String\n  original_name: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_tv_popular_Root {\n  page: Int\n  results: [GET_tv_popular_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_tv_popular(tmdb_access_token: String!): GET_tv_popular_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/tv/popular\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_tv__tv_id__keywords_ResultsEntry {\n  id: Int\n  name: String\n}\n\ntype GET_tv__tv_id__keywords_Root {\n  id: Int\n  results: [GET_tv__tv_id__keywords_ResultsEntry]\n}\n\ntype Query {\n  GET_tv__tv_id__keywords(\n    tmdb_access_token: String!\n    tv_id: String!\n  ): GET_tv__tv_id__keywords_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/tv/$tv_id;/keywords\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\n", "utterance": "give me a keyword of the most popular TV show currently"}
{"domain": "tmdb", "input": "Function Signatures:\n\n[{\"name\": \"GET_search_person\", \"description\": \"Search for people.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"query\": {\"type\": \"string\", \"description\": \"query\"}, \"page\": {\"type\": \"integer\", \"description\": \"page\"}, \"include_adult\": {\"type\": \"boolean\", \"description\": \"include adult\"}, \"region\": {\"type\": \"string\", \"description\": \"region\"}}, \"required\": [\"query\"]}}]\n\nGraphQL schema:\n\ntype GET_search_person_KnownForEntry {\n  adult: Boolean\n  backdrop_path: String\n  genre_ids: [Int]\n  id: Int\n  media_type: String\n  original_language: String\n  original_title: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  release_date: Date\n  title: String\n  video: Boolean\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_search_person_ResultsEntry {\n  adult: Boolean\n  gender: Int\n  id: Int\n  known_for: [GET_search_person_KnownForEntry]\n  known_for_department: String\n  name: String\n  original_name: String\n  popularity: Float\n  profile_path: String\n}\n\ntype GET_search_person_Root {\n  page: Int\n  results: [GET_search_person_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_search_person(\n    query: String\n    tmdb_access_token: String!\n  ): GET_search_person_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/search/person\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\n\nUtterance: give me some movies that Christopher Nolan is known for", "output": "GET_search_person(query=\"Christopher Nolan\")\n", "function_specs": "[{\"name\": \"GET_search_person\", \"description\": \"Search for people.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"query\": {\"type\": \"string\", \"description\": \"query\"}, \"page\": {\"type\": \"integer\", \"description\": \"page\"}, \"include_adult\": {\"type\": \"boolean\", \"description\": \"include adult\"}, \"region\": {\"type\": \"string\", \"description\": \"region\"}}, \"required\": [\"query\"]}}]", "GraphQL_schema": "type GET_search_person_KnownForEntry {\n  adult: Boolean\n  backdrop_path: String\n  genre_ids: [Int]\n  id: Int\n  media_type: String\n  original_language: String\n  original_title: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  release_date: Date\n  title: String\n  video: Boolean\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_search_person_ResultsEntry {\n  adult: Boolean\n  gender: Int\n  id: Int\n  known_for: [GET_search_person_KnownForEntry]\n  known_for_department: String\n  name: String\n  original_name: String\n  popularity: Float\n  profile_path: String\n}\n\ntype GET_search_person_Root {\n  page: Int\n  results: [GET_search_person_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_search_person(\n    query: String\n    tmdb_access_token: String!\n  ): GET_search_person_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/search/person\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\n", "utterance": "give me some movies that Christopher Nolan is known for"}
{"domain": "tmdb", "input": "Function Signatures:\n\n[{\"name\": \"GET_search_movie\", \"description\": \"Search for movies.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"query\": {\"type\": \"string\", \"description\": \"query\"}, \"page\": {\"type\": \"integer\", \"description\": \"page\"}, \"include_adult\": {\"type\": \"boolean\", \"description\": \"include adult\"}, \"region\": {\"type\": \"string\", \"description\": \"region\"}, \"year\": {\"type\": \"integer\", \"description\": \"year\"}, \"primary_release_year\": {\"type\": \"integer\", \"description\": \"primary release year\"}}, \"required\": [\"query\"]}}, {\"name\": \"GET_movie__movie_id__credits\", \"description\": \"Get the cast and crew for a movie.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"movie_id\": {\"type\": \"integer\", \"description\": \"movie id\"}}, \"required\": [\"movie_id\"]}}]\n\nGraphQL schema:\n\ntype GET_search_movie_ResultsEntry {\n  adult: Boolean\n  backdrop_path: String\n  genre_ids: [Int]\n  id: Int\n  original_language: String\n  original_title: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  release_date: String\n  title: String\n  video: Boolean\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_search_movie_Root {\n  page: Int\n  results: [GET_search_movie_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_search_movie(\n    query: String\n    tmdb_access_token: String!\n  ): GET_search_movie_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/search/movie\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_movie__movie_id__credits_CastEntry {\n  adult: Boolean\n  cast_id: Int\n  character: String\n  credit_id: String\n  gender: Int\n  id: Int\n  known_for_department: String\n  name: String\n  order: Int\n  original_name: String\n  popularity: Float\n  profile_path: String\n}\n\ntype GET_movie__movie_id__credits_CrewEntry {\n  adult: Boolean\n  credit_id: String\n  department: String\n  gender: Int\n  id: Int\n  job: String\n  known_for_department: String\n  name: String\n  original_name: String\n  popularity: Float\n  profile_path: String\n}\n\ntype GET_movie__movie_id__credits_Root {\n  cast: [GET_movie__movie_id__credits_CastEntry]\n  crew: [GET_movie__movie_id__credits_CrewEntry]\n  id: Int\n}\n\ntype Query {\n  GET_movie__movie_id__credits(\n    movie_id: String!\n    tmdb_access_token: String!\n  ): GET_movie__movie_id__credits_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/movie/$movie_id;/credits\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\n\nUtterance: Who has starred in a movie \"Titanic\"", "output": "response_obj = GET_search_movie(query=\"Titanic\")\nGET_movie__movie_id__credits(movie_id=response_obj.results[0].id)\n", "function_specs": "[{\"name\": \"GET_search_movie\", \"description\": \"Search for movies.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"query\": {\"type\": \"string\", \"description\": \"query\"}, \"page\": {\"type\": \"integer\", \"description\": \"page\"}, \"include_adult\": {\"type\": \"boolean\", \"description\": \"include adult\"}, \"region\": {\"type\": \"string\", \"description\": \"region\"}, \"year\": {\"type\": \"integer\", \"description\": \"year\"}, \"primary_release_year\": {\"type\": \"integer\", \"description\": \"primary release year\"}}, \"required\": [\"query\"]}}, {\"name\": \"GET_movie__movie_id__credits\", \"description\": \"Get the cast and crew for a movie.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"movie_id\": {\"type\": \"integer\", \"description\": \"movie id\"}}, \"required\": [\"movie_id\"]}}]", "GraphQL_schema": "type GET_search_movie_ResultsEntry {\n  adult: Boolean\n  backdrop_path: String\n  genre_ids: [Int]\n  id: Int\n  original_language: String\n  original_title: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  release_date: String\n  title: String\n  video: Boolean\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_search_movie_Root {\n  page: Int\n  results: [GET_search_movie_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_search_movie(\n    query: String\n    tmdb_access_token: String!\n  ): GET_search_movie_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/search/movie\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_movie__movie_id__credits_CastEntry {\n  adult: Boolean\n  cast_id: Int\n  character: String\n  credit_id: String\n  gender: Int\n  id: Int\n  known_for_department: String\n  name: String\n  order: Int\n  original_name: String\n  popularity: Float\n  profile_path: String\n}\n\ntype GET_movie__movie_id__credits_CrewEntry {\n  adult: Boolean\n  credit_id: String\n  department: String\n  gender: Int\n  id: Int\n  job: String\n  known_for_department: String\n  name: String\n  original_name: String\n  popularity: Float\n  profile_path: String\n}\n\ntype GET_movie__movie_id__credits_Root {\n  cast: [GET_movie__movie_id__credits_CastEntry]\n  crew: [GET_movie__movie_id__credits_CrewEntry]\n  id: Int\n}\n\ntype Query {\n  GET_movie__movie_id__credits(\n    movie_id: String!\n    tmdb_access_token: String!\n  ): GET_movie__movie_id__credits_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/movie/$movie_id;/credits\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\n", "utterance": "Who has starred in a movie \"Titanic\""}
{"domain": "tmdb", "input": "Function Signatures:\n\n[{\"name\": \"GET_search_movie\", \"description\": \"Search for movies.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"query\": {\"type\": \"string\", \"description\": \"query\"}, \"page\": {\"type\": \"integer\", \"description\": \"page\"}, \"include_adult\": {\"type\": \"boolean\", \"description\": \"include adult\"}, \"region\": {\"type\": \"string\", \"description\": \"region\"}, \"year\": {\"type\": \"integer\", \"description\": \"year\"}, \"primary_release_year\": {\"type\": \"integer\", \"description\": \"primary release year\"}}, \"required\": [\"query\"]}}, {\"name\": \"GET_movie__movie_id__credits\", \"description\": \"Get the cast and crew for a movie.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"movie_id\": {\"type\": \"integer\", \"description\": \"movie id\"}}, \"required\": [\"movie_id\"]}}, {\"name\": \"GET_person__person_id__movie_credits\", \"description\": \"Get the movie credits for a person, the results contains various information such as popularity and release date.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"person_id\": {\"type\": \"integer\", \"description\": \"person id\"}}, \"required\": [\"person_id\"]}}]\n\nGraphQL schema:\n\ntype GET_person__person_id__movie_credits_CastEntry {\n  adult: Boolean\n  backdrop_path: String\n  character: String\n  credit_id: String\n  genre_ids: [Int]\n  id: Int\n  order: Int\n  original_language: String\n  original_title: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  release_date: String\n  title: String\n  video: Boolean\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_person__person_id__movie_credits_CrewEntry {\n  adult: Boolean\n  backdrop_path: String\n  credit_id: String\n  department: String\n  genre_ids: [Int]\n  id: Int\n  job: String\n  original_language: String\n  original_title: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  release_date: String\n  title: String\n  video: Boolean\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_person__person_id__movie_credits_Root {\n  cast: [GET_person__person_id__movie_credits_CastEntry]\n  crew: [GET_person__person_id__movie_credits_CrewEntry]\n  id: Int\n}\n\ntype Query {\n  GET_person__person_id__movie_credits(\n    person_id: String!\n    tmdb_access_token: String!\n  ): GET_person__person_id__movie_credits_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/person/$person_id;/movie_credits\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_search_movie_ResultsEntry {\n  adult: Boolean\n  backdrop_path: String\n  genre_ids: [Int]\n  id: Int\n  original_language: String\n  original_title: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  release_date: Date\n  title: String\n  video: Boolean\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_search_movie_Root {\n  page: Int\n  results: [GET_search_movie_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_search_movie(\n    query: String\n    tmdb_access_token: String!\n  ): GET_search_movie_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/search/movie\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_movie__movie_id__credits_CastEntry {\n  adult: Boolean\n  cast_id: Int\n  character: String\n  credit_id: String\n  gender: Int\n  id: Int\n  known_for_department: String\n  name: String\n  order: Int\n  original_name: String\n  popularity: Float\n  profile_path: String\n}\n\ntype GET_movie__movie_id__credits_CrewEntry {\n  adult: Boolean\n  credit_id: String\n  department: String\n  gender: Int\n  id: Int\n  job: String\n  known_for_department: String\n  name: String\n  original_name: String\n  popularity: Float\n  profile_path: String\n}\n\ntype GET_movie__movie_id__credits_Root {\n  cast: [GET_movie__movie_id__credits_CastEntry]\n  crew: [GET_movie__movie_id__credits_CrewEntry]\n  id: Int\n}\n\ntype Query {\n  GET_movie__movie_id__credits(\n    movie_id: String!\n    tmdb_access_token: String!\n  ): GET_movie__movie_id__credits_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/movie/$movie_id;/credits\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\n\nUtterance: tell me a few more works directed by the director of Django Unchained", "output": "response_obj = GET_search_movie(query=\"Django Unchained\")\nresponse_obj1 = GET_movie__movie_id__credits(movie_id=response_obj.results[0].id)\nGET_person__person_id__movie_credits(person_id=[person.id for person in response_obj1.crew if person.job.lower()==\"director\"][0])\n", "function_specs": "[{\"name\": \"GET_search_movie\", \"description\": \"Search for movies.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"query\": {\"type\": \"string\", \"description\": \"query\"}, \"page\": {\"type\": \"integer\", \"description\": \"page\"}, \"include_adult\": {\"type\": \"boolean\", \"description\": \"include adult\"}, \"region\": {\"type\": \"string\", \"description\": \"region\"}, \"year\": {\"type\": \"integer\", \"description\": \"year\"}, \"primary_release_year\": {\"type\": \"integer\", \"description\": \"primary release year\"}}, \"required\": [\"query\"]}}, {\"name\": \"GET_movie__movie_id__credits\", \"description\": \"Get the cast and crew for a movie.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"movie_id\": {\"type\": \"integer\", \"description\": \"movie id\"}}, \"required\": [\"movie_id\"]}}, {\"name\": \"GET_person__person_id__movie_credits\", \"description\": \"Get the movie credits for a person, the results contains various information such as popularity and release date.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"person_id\": {\"type\": \"integer\", \"description\": \"person id\"}}, \"required\": [\"person_id\"]}}]", "GraphQL_schema": "type GET_person__person_id__movie_credits_CastEntry {\n  adult: Boolean\n  backdrop_path: String\n  character: String\n  credit_id: String\n  genre_ids: [Int]\n  id: Int\n  order: Int\n  original_language: String\n  original_title: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  release_date: String\n  title: String\n  video: Boolean\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_person__person_id__movie_credits_CrewEntry {\n  adult: Boolean\n  backdrop_path: String\n  credit_id: String\n  department: String\n  genre_ids: [Int]\n  id: Int\n  job: String\n  original_language: String\n  original_title: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  release_date: String\n  title: String\n  video: Boolean\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_person__person_id__movie_credits_Root {\n  cast: [GET_person__person_id__movie_credits_CastEntry]\n  crew: [GET_person__person_id__movie_credits_CrewEntry]\n  id: Int\n}\n\ntype Query {\n  GET_person__person_id__movie_credits(\n    person_id: String!\n    tmdb_access_token: String!\n  ): GET_person__person_id__movie_credits_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/person/$person_id;/movie_credits\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_search_movie_ResultsEntry {\n  adult: Boolean\n  backdrop_path: String\n  genre_ids: [Int]\n  id: Int\n  original_language: String\n  original_title: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  release_date: Date\n  title: String\n  video: Boolean\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_search_movie_Root {\n  page: Int\n  results: [GET_search_movie_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_search_movie(\n    query: String\n    tmdb_access_token: String!\n  ): GET_search_movie_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/search/movie\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_movie__movie_id__credits_CastEntry {\n  adult: Boolean\n  cast_id: Int\n  character: String\n  credit_id: String\n  gender: Int\n  id: Int\n  known_for_department: String\n  name: String\n  order: Int\n  original_name: String\n  popularity: Float\n  profile_path: String\n}\n\ntype GET_movie__movie_id__credits_CrewEntry {\n  adult: Boolean\n  credit_id: String\n  department: String\n  gender: Int\n  id: Int\n  job: String\n  known_for_department: String\n  name: String\n  original_name: String\n  popularity: Float\n  profile_path: String\n}\n\ntype GET_movie__movie_id__credits_Root {\n  cast: [GET_movie__movie_id__credits_CastEntry]\n  crew: [GET_movie__movie_id__credits_CrewEntry]\n  id: Int\n}\n\ntype Query {\n  GET_movie__movie_id__credits(\n    movie_id: String!\n    tmdb_access_token: String!\n  ): GET_movie__movie_id__credits_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/movie/$movie_id;/credits\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\n", "utterance": "tell me a few more works directed by the director of Django Unchained"}
{"domain": "tmdb", "input": "Function Signatures:\n\n[{\"name\": \"GET_search_tv\", \"description\": \"Search for a TV show.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"page\": {\"type\": \"integer\", \"description\": \"page\"}, \"query\": {\"type\": \"string\", \"description\": \"query\"}, \"include_adult\": {\"type\": \"boolean\", \"description\": \"include adult\"}, \"first_air_date_year\": {\"type\": \"integer\", \"description\": \"first air date year\"}}, \"required\": [\"query\"]}}, {\"name\": \"GET_tv__tv_id__season__season_number_\", \"description\": \"Get the TV season details by id.\\n\\nSupports `append_to_response`. Read more about this [here](#docTextSection:JdZq8ctmcxNqyLQjp).\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"tv_id\": {\"type\": \"integer\", \"description\": \"tv id\"}, \"season_number\": {\"type\": \"integer\", \"description\": \"season number\"}}, \"required\": [\"tv_id\", \"season_number\"]}}]\n\nGraphQL schema:\n\ntype GET_search_tv_ResultsEntry {\n  adult: Boolean\n  backdrop_path: String\n  first_air_date: String\n  genre_ids: [Int]\n  id: Int\n  name: String\n  origin_country: [String]\n  original_language: String\n  original_name: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_search_tv_Root {\n  page: Int\n  results: [GET_search_tv_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_search_tv(query: String, tmdb_access_token: String!): GET_search_tv_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/search/tv\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_tv__tv_id__season__season_number_CrewEntry {\n  adult: Boolean\n  credit_id: String\n  department: String\n  gender: Int\n  id: Int\n  job: String\n  known_for_department: String\n  name: String\n  original_name: String\n  popularity: Float\n  profile_path: String\n}\n\ntype GET_tv__tv_id__season__season_number_EpisodesEntry {\n  air_date: Date\n  crew: [GET_tv__tv_id__season__season_number_CrewEntry]\n  episode_number: Int\n  episode_type: String\n  guest_stars: [GET_tv__tv_id__season__season_number_GuestStarsEntry]\n  id: Int\n  name: String\n  overview: String\n  production_code: String\n  runtime: Int\n  season_number: Int\n  show_id: Int\n  still_path: String\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_tv__tv_id__season__season_number_GuestStarsEntry {\n  adult: Boolean\n  character: String\n  credit_id: String\n  gender: Int\n  id: Int\n  known_for_department: String\n  name: String\n  order: Int\n  original_name: String\n  popularity: Float\n  profile_path: String\n}\n\ntype GET_tv__tv_id__season__season_number_Root {\n  _id: String\n  air_date: Date\n  episodes: [GET_tv__tv_id__season__season_number_EpisodesEntry]\n  id: Int\n  name: String\n  overview: String\n  poster_path: String\n  season_number: Int\n  vote_average: Float\n}\n\ntype Query {\n  GET_tv__tv_id__season__season_number_(\n    season_number: String!\n    tmdb_access_token: String!\n    tv_id: String!\n  ): GET_tv__tv_id__season__season_number_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/tv/$tv_id;/season/$season_number;\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\n\nUtterance: Tell me the air date of the second season of Game of Thrones", "output": "response_obj = GET_search_tv(query=\"Game of Thrones\")\nGET_tv__tv_id__season__season_number_(tv_id=response_obj.results[0].id, season_number=2)\n", "function_specs": "[{\"name\": \"GET_search_tv\", \"description\": \"Search for a TV show.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"page\": {\"type\": \"integer\", \"description\": \"page\"}, \"query\": {\"type\": \"string\", \"description\": \"query\"}, \"include_adult\": {\"type\": \"boolean\", \"description\": \"include adult\"}, \"first_air_date_year\": {\"type\": \"integer\", \"description\": \"first air date year\"}}, \"required\": [\"query\"]}}, {\"name\": \"GET_tv__tv_id__season__season_number_\", \"description\": \"Get the TV season details by id.\\n\\nSupports `append_to_response`. Read more about this [here](#docTextSection:JdZq8ctmcxNqyLQjp).\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"tv_id\": {\"type\": \"integer\", \"description\": \"tv id\"}, \"season_number\": {\"type\": \"integer\", \"description\": \"season number\"}}, \"required\": [\"tv_id\", \"season_number\"]}}]", "GraphQL_schema": "type GET_search_tv_ResultsEntry {\n  adult: Boolean\n  backdrop_path: String\n  first_air_date: String\n  genre_ids: [Int]\n  id: Int\n  name: String\n  origin_country: [String]\n  original_language: String\n  original_name: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_search_tv_Root {\n  page: Int\n  results: [GET_search_tv_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_search_tv(query: String, tmdb_access_token: String!): GET_search_tv_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/search/tv\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_tv__tv_id__season__season_number_CrewEntry {\n  adult: Boolean\n  credit_id: String\n  department: String\n  gender: Int\n  id: Int\n  job: String\n  known_for_department: String\n  name: String\n  original_name: String\n  popularity: Float\n  profile_path: String\n}\n\ntype GET_tv__tv_id__season__season_number_EpisodesEntry {\n  air_date: Date\n  crew: [GET_tv__tv_id__season__season_number_CrewEntry]\n  episode_number: Int\n  episode_type: String\n  guest_stars: [GET_tv__tv_id__season__season_number_GuestStarsEntry]\n  id: Int\n  name: String\n  overview: String\n  production_code: String\n  runtime: Int\n  season_number: Int\n  show_id: Int\n  still_path: String\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_tv__tv_id__season__season_number_GuestStarsEntry {\n  adult: Boolean\n  character: String\n  credit_id: String\n  gender: Int\n  id: Int\n  known_for_department: String\n  name: String\n  order: Int\n  original_name: String\n  popularity: Float\n  profile_path: String\n}\n\ntype GET_tv__tv_id__season__season_number_Root {\n  _id: String\n  air_date: Date\n  episodes: [GET_tv__tv_id__season__season_number_EpisodesEntry]\n  id: Int\n  name: String\n  overview: String\n  poster_path: String\n  season_number: Int\n  vote_average: Float\n}\n\ntype Query {\n  GET_tv__tv_id__season__season_number_(\n    season_number: String!\n    tmdb_access_token: String!\n    tv_id: String!\n  ): GET_tv__tv_id__season__season_number_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/tv/$tv_id;/season/$season_number;\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\n", "utterance": "Tell me the air date of the second season of Game of Thrones"}
{"domain": "tmdb", "input": "Function Signatures:\n\n[{\"name\": \"GET_search_person\", \"description\": \"Search for people.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"query\": {\"type\": \"string\", \"description\": \"query\"}, \"page\": {\"type\": \"integer\", \"description\": \"page\"}, \"include_adult\": {\"type\": \"boolean\", \"description\": \"include adult\"}, \"region\": {\"type\": \"string\", \"description\": \"region\"}}, \"required\": [\"query\"]}}, {\"name\": \"GET_person__person_id__tv_credits\", \"description\": \"Get the TV show credits for a person.\\n\\nYou can query for some extra details about the credit with the [credit method](#endpoint:xPWdEBLkvCNZSicLN).\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"person_id\": {\"type\": \"integer\", \"description\": \"person id\"}}, \"required\": [\"person_id\"]}}, {\"name\": \"GET_tv__tv_id__credits\", \"description\": \"Get the credits (cast and crew) that have been added to a TV show.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"tv_id\": {\"type\": \"integer\", \"description\": \"tv id\"}}, \"required\": [\"tv_id\"]}}]\n\nGraphQL schema:\n\ntype GET_tv__tv_id__credits_CastEntry {\n  adult: Boolean\n  character: String\n  credit_id: String\n  gender: Int\n  id: Int\n  known_for_department: String\n  name: String\n  order: Int\n  original_name: String\n  popularity: Float\n  profile_path: String\n}\n\ntype GET_tv__tv_id__credits_CrewEntry {\n  adult: Boolean\n  credit_id: String\n  department: String\n  gender: Int\n  id: Int\n  job: String\n  known_for_department: String\n  name: String\n  original_name: String\n  popularity: Float\n  profile_path: String\n}\n\ntype GET_tv__tv_id__credits_Root {\n  cast: [GET_tv__tv_id__credits_CastEntry]\n  crew: [GET_tv__tv_id__credits_CrewEntry]\n  id: Int\n}\n\ntype Query {\n  GET_tv__tv_id__credits(\n    tmdb_access_token: String!\n    tv_id: String!\n  ): GET_tv__tv_id__credits_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/tv/$tv_id;/credits\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_search_person_KnownForEntry {\n  adult: Boolean\n  backdrop_path: String\n  first_air_date: Date\n  genre_ids: [Int]\n  id: Int\n  media_type: String\n  name: String\n  origin_country: [String]\n  original_language: String\n  original_name: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_search_person_ResultsEntry {\n  adult: Boolean\n  gender: Int\n  id: Int\n  known_for: [GET_search_person_KnownForEntry]\n  known_for_department: String\n  name: String\n  original_name: String\n  popularity: Float\n  profile_path: String\n}\n\ntype GET_search_person_Root {\n  page: Int\n  results: [GET_search_person_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_search_person(\n    query: String\n    tmdb_access_token: String!\n  ): GET_search_person_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/search/person\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_person__person_id__tv_credits_CastEntry {\n  adult: Boolean\n  backdrop_path: String\n  character: String\n  credit_id: String\n  episode_count: Int\n  first_air_date: Date\n  genre_ids: [Int]\n  id: Int\n  name: String\n  origin_country: [String]\n  original_language: String\n  original_name: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_person__person_id__tv_credits_CrewEntry {\n  adult: Boolean\n  backdrop_path: String\n  credit_id: String\n  department: String\n  episode_count: Int\n  first_air_date: String\n  genre_ids: [Int]\n  id: Int\n  job: String\n  name: String\n  origin_country: [String]\n  original_language: String\n  original_name: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_person__person_id__tv_credits_Root {\n  cast: [GET_person__person_id__tv_credits_CastEntry]\n  crew: [GET_person__person_id__tv_credits_CrewEntry]\n  id: Int\n}\n\ntype Query {\n  GET_person__person_id__tv_credits(\n    person_id: String!\n    tmdb_access_token: String!\n  ): GET_person__person_id__tv_credits_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/person/$person_id;/tv_credits\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\n\nUtterance: Who has worked with Jeremy Clarkson in his most popular TV show?", "output": "response_obj = GET_search_person(query=\"Jeremy Clarkson\")\nresponse_obj1 = GET_person__person_id__tv_credits(person_id=response_obj.results[0].id)\nGET_tv__tv_id__credits(tv_id=[item.id for item in response_obj1.cast if item.popularity==max([item.popularity for item in response_obj1.cast])][0])\n", "function_specs": "[{\"name\": \"GET_search_person\", \"description\": \"Search for people.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"query\": {\"type\": \"string\", \"description\": \"query\"}, \"page\": {\"type\": \"integer\", \"description\": \"page\"}, \"include_adult\": {\"type\": \"boolean\", \"description\": \"include adult\"}, \"region\": {\"type\": \"string\", \"description\": \"region\"}}, \"required\": [\"query\"]}}, {\"name\": \"GET_person__person_id__tv_credits\", \"description\": \"Get the TV show credits for a person.\\n\\nYou can query for some extra details about the credit with the [credit method](#endpoint:xPWdEBLkvCNZSicLN).\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"person_id\": {\"type\": \"integer\", \"description\": \"person id\"}}, \"required\": [\"person_id\"]}}, {\"name\": \"GET_tv__tv_id__credits\", \"description\": \"Get the credits (cast and crew) that have been added to a TV show.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"tv_id\": {\"type\": \"integer\", \"description\": \"tv id\"}}, \"required\": [\"tv_id\"]}}]", "GraphQL_schema": "type GET_tv__tv_id__credits_CastEntry {\n  adult: Boolean\n  character: String\n  credit_id: String\n  gender: Int\n  id: Int\n  known_for_department: String\n  name: String\n  order: Int\n  original_name: String\n  popularity: Float\n  profile_path: String\n}\n\ntype GET_tv__tv_id__credits_CrewEntry {\n  adult: Boolean\n  credit_id: String\n  department: String\n  gender: Int\n  id: Int\n  job: String\n  known_for_department: String\n  name: String\n  original_name: String\n  popularity: Float\n  profile_path: String\n}\n\ntype GET_tv__tv_id__credits_Root {\n  cast: [GET_tv__tv_id__credits_CastEntry]\n  crew: [GET_tv__tv_id__credits_CrewEntry]\n  id: Int\n}\n\ntype Query {\n  GET_tv__tv_id__credits(\n    tmdb_access_token: String!\n    tv_id: String!\n  ): GET_tv__tv_id__credits_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/tv/$tv_id;/credits\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_search_person_KnownForEntry {\n  adult: Boolean\n  backdrop_path: String\n  first_air_date: Date\n  genre_ids: [Int]\n  id: Int\n  media_type: String\n  name: String\n  origin_country: [String]\n  original_language: String\n  original_name: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_search_person_ResultsEntry {\n  adult: Boolean\n  gender: Int\n  id: Int\n  known_for: [GET_search_person_KnownForEntry]\n  known_for_department: String\n  name: String\n  original_name: String\n  popularity: Float\n  profile_path: String\n}\n\ntype GET_search_person_Root {\n  page: Int\n  results: [GET_search_person_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_search_person(\n    query: String\n    tmdb_access_token: String!\n  ): GET_search_person_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/search/person\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_person__person_id__tv_credits_CastEntry {\n  adult: Boolean\n  backdrop_path: String\n  character: String\n  credit_id: String\n  episode_count: Int\n  first_air_date: Date\n  genre_ids: [Int]\n  id: Int\n  name: String\n  origin_country: [String]\n  original_language: String\n  original_name: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_person__person_id__tv_credits_CrewEntry {\n  adult: Boolean\n  backdrop_path: String\n  credit_id: String\n  department: String\n  episode_count: Int\n  first_air_date: String\n  genre_ids: [Int]\n  id: Int\n  job: String\n  name: String\n  origin_country: [String]\n  original_language: String\n  original_name: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_person__person_id__tv_credits_Root {\n  cast: [GET_person__person_id__tv_credits_CastEntry]\n  crew: [GET_person__person_id__tv_credits_CrewEntry]\n  id: Int\n}\n\ntype Query {\n  GET_person__person_id__tv_credits(\n    person_id: String!\n    tmdb_access_token: String!\n  ): GET_person__person_id__tv_credits_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/person/$person_id;/tv_credits\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\n", "utterance": "Who has worked with Jeremy Clarkson in his most popular TV show?"}
{"domain": "tmdb", "input": "Function Signatures:\n\n[{\"name\": \"GET_search_tv\", \"description\": \"Search for a TV show.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"page\": {\"type\": \"integer\", \"description\": \"page\"}, \"query\": {\"type\": \"string\", \"description\": \"query\"}, \"include_adult\": {\"type\": \"boolean\", \"description\": \"include adult\"}, \"first_air_date_year\": {\"type\": \"integer\", \"description\": \"first air date year\"}}, \"required\": [\"query\"]}}, {\"name\": \"GET_tv__tv_id__season__season_number__episode__episode_number_\", \"description\": \"Get the TV episode details by id.\\n\\nSupports `append_to_response`. Read more about this [here](#docTextSection:JdZq8ctmcxNqyLQjp).\\n\\n#### Recent Changes\\n\\n| **Date** | **Change** |\\n| - | - |\\n| June 1, 2018 | Added the [translations](#endpoint:5SFwZar3LkP99QMp7) method. |\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"tv_id\": {\"type\": \"integer\", \"description\": \"tv id\"}, \"season_number\": {\"type\": \"integer\", \"description\": \"season number\"}, \"episode_number\": {\"type\": \"integer\", \"description\": \"episode number\"}}, \"required\": [\"tv_id\", \"season_number\", \"episode_number\"]}}]\n\nGraphQL schema:\n\ntype GET_search_tv_ResultsEntry {\n  adult: Boolean\n  backdrop_path: String\n  first_air_date: Date\n  genre_ids: [Int]\n  id: Int\n  name: String\n  origin_country: [String]\n  original_language: String\n  original_name: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_search_tv_Root {\n  page: Int\n  results: [GET_search_tv_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_search_tv(query: String, tmdb_access_token: String!): GET_search_tv_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/search/tv\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_tv__tv_id__season__season_number__episode__episode_number_CrewEntry {\n  adult: Boolean\n  credit_id: String\n  department: String\n  gender: Int\n  id: Int\n  job: String\n  known_for_department: String\n  name: String\n  original_name: String\n  popularity: Float\n  profile_path: String\n}\n\ntype GET_tv__tv_id__season__season_number__episode__episode_number_GuestStarsEntry {\n  adult: Boolean\n  character: String\n  credit_id: String\n  gender: Int\n  id: Int\n  known_for_department: String\n  name: String\n  order: Int\n  original_name: String\n  popularity: Float\n  profile_path: String\n}\n\ntype GET_tv__tv_id__season__season_number__episode__episode_number_Root {\n  air_date: Date\n  crew: [GET_tv__tv_id__season__season_number__episode__episode_number_CrewEntry]\n  episode_number: Int\n  guest_stars: [GET_tv__tv_id__season__season_number__episode__episode_number_GuestStarsEntry]\n  id: Int\n  name: String\n  overview: String\n  production_code: Int\n  runtime: Int\n  season_number: Int\n  still_path: String\n  vote_average: Float\n  vote_count: Int\n}\n\ntype Query {\n  GET_tv__tv_id__season__season_number__episode__episode_number_(\n    episode_number: String!\n    season_number: String!\n    tmdb_access_token: String!\n    tv_id: String!\n  ): GET_tv__tv_id__season__season_number__episode__episode_number_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/tv/$tv_id;/season/$season_number;/episode/$episode_number;\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\n\nUtterance: What did the third episode of the second season of Westworld talk about?", "output": "response_obj = GET_search_tv(query=\"Westworld\")\nGET_tv__tv_id__season__season_number__episode__episode_number_(tv_id=response_obj.results[0].id, season_number=2, episode_number=3)\n", "function_specs": "[{\"name\": \"GET_search_tv\", \"description\": \"Search for a TV show.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"page\": {\"type\": \"integer\", \"description\": \"page\"}, \"query\": {\"type\": \"string\", \"description\": \"query\"}, \"include_adult\": {\"type\": \"boolean\", \"description\": \"include adult\"}, \"first_air_date_year\": {\"type\": \"integer\", \"description\": \"first air date year\"}}, \"required\": [\"query\"]}}, {\"name\": \"GET_tv__tv_id__season__season_number__episode__episode_number_\", \"description\": \"Get the TV episode details by id.\\n\\nSupports `append_to_response`. Read more about this [here](#docTextSection:JdZq8ctmcxNqyLQjp).\\n\\n#### Recent Changes\\n\\n| **Date** | **Change** |\\n| - | - |\\n| June 1, 2018 | Added the [translations](#endpoint:5SFwZar3LkP99QMp7) method. |\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"tv_id\": {\"type\": \"integer\", \"description\": \"tv id\"}, \"season_number\": {\"type\": \"integer\", \"description\": \"season number\"}, \"episode_number\": {\"type\": \"integer\", \"description\": \"episode number\"}}, \"required\": [\"tv_id\", \"season_number\", \"episode_number\"]}}]", "GraphQL_schema": "type GET_search_tv_ResultsEntry {\n  adult: Boolean\n  backdrop_path: String\n  first_air_date: Date\n  genre_ids: [Int]\n  id: Int\n  name: String\n  origin_country: [String]\n  original_language: String\n  original_name: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_search_tv_Root {\n  page: Int\n  results: [GET_search_tv_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_search_tv(query: String, tmdb_access_token: String!): GET_search_tv_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/search/tv\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_tv__tv_id__season__season_number__episode__episode_number_CrewEntry {\n  adult: Boolean\n  credit_id: String\n  department: String\n  gender: Int\n  id: Int\n  job: String\n  known_for_department: String\n  name: String\n  original_name: String\n  popularity: Float\n  profile_path: String\n}\n\ntype GET_tv__tv_id__season__season_number__episode__episode_number_GuestStarsEntry {\n  adult: Boolean\n  character: String\n  credit_id: String\n  gender: Int\n  id: Int\n  known_for_department: String\n  name: String\n  order: Int\n  original_name: String\n  popularity: Float\n  profile_path: String\n}\n\ntype GET_tv__tv_id__season__season_number__episode__episode_number_Root {\n  air_date: Date\n  crew: [GET_tv__tv_id__season__season_number__episode__episode_number_CrewEntry]\n  episode_number: Int\n  guest_stars: [GET_tv__tv_id__season__season_number__episode__episode_number_GuestStarsEntry]\n  id: Int\n  name: String\n  overview: String\n  production_code: Int\n  runtime: Int\n  season_number: Int\n  still_path: String\n  vote_average: Float\n  vote_count: Int\n}\n\ntype Query {\n  GET_tv__tv_id__season__season_number__episode__episode_number_(\n    episode_number: String!\n    season_number: String!\n    tmdb_access_token: String!\n    tv_id: String!\n  ): GET_tv__tv_id__season__season_number__episode__episode_number_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/tv/$tv_id;/season/$season_number;/episode/$episode_number;\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\n", "utterance": "What did the third episode of the second season of Westworld talk about?"}
{"domain": "tmdb", "input": "Function Signatures:\n\n[{\"name\": \"GET_search_movie\", \"description\": \"Search for movies.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"query\": {\"type\": \"string\", \"description\": \"query\"}, \"page\": {\"type\": \"integer\", \"description\": \"page\"}, \"include_adult\": {\"type\": \"boolean\", \"description\": \"include adult\"}, \"region\": {\"type\": \"string\", \"description\": \"region\"}, \"year\": {\"type\": \"integer\", \"description\": \"year\"}, \"primary_release_year\": {\"type\": \"integer\", \"description\": \"primary release year\"}}, \"required\": [\"query\"]}}, {\"name\": \"GET_movie__movie_id__release_dates\", \"description\": \"Get the release date along with the certification for a movie.\\n\\nRelease dates support different types:\\n\\n1. Premiere\\n2. Theatrical (limited)\\n3. Theatrical\\n4. Digital\\n5. Physical\\n6. TV\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"movie_id\": {\"type\": \"integer\", \"description\": \"movie id\"}}, \"required\": [\"movie_id\"]}}]\n\nGraphQL schema:\n\ntype GET_search_movie_ResultsEntry {\n  adult: Boolean\n  backdrop_path: String\n  genre_ids: [Int]\n  id: Int\n  original_language: String\n  original_title: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  release_date: String\n  title: String\n  video: Boolean\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_search_movie_Root {\n  page: Int\n  results: [GET_search_movie_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_search_movie(\n    query: String\n    tmdb_access_token: String!\n  ): GET_search_movie_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/search/movie\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_movie__movie_id__release_dates_ReleaseDatesEntry {\n  certification: String\n  descriptors: [String]\n  iso_639_1: String\n  note: String\n  release_date: DateTime\n  type: Int\n}\n\ntype GET_movie__movie_id__release_dates_ResultsEntry {\n  iso_3166_1: String\n  release_dates: [GET_movie__movie_id__release_dates_ReleaseDatesEntry]\n}\n\ntype GET_movie__movie_id__release_dates_Root {\n  id: Int\n  results: [GET_movie__movie_id__release_dates_ResultsEntry]\n}\n\ntype Query {\n  GET_movie__movie_id__release_dates(\n    movie_id: String!\n    tmdb_access_token: String!\n  ): GET_movie__movie_id__release_dates_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/movie/$movie_id;/release_dates\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\n\nUtterance: When is the movie \"Titanic\" released?", "output": "response_obj = GET_search_movie(query=\"Titanic\")\nGET_movie__movie_id__release_dates(movie_id=response_obj.results[0].id)\n", "function_specs": "[{\"name\": \"GET_search_movie\", \"description\": \"Search for movies.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"query\": {\"type\": \"string\", \"description\": \"query\"}, \"page\": {\"type\": \"integer\", \"description\": \"page\"}, \"include_adult\": {\"type\": \"boolean\", \"description\": \"include adult\"}, \"region\": {\"type\": \"string\", \"description\": \"region\"}, \"year\": {\"type\": \"integer\", \"description\": \"year\"}, \"primary_release_year\": {\"type\": \"integer\", \"description\": \"primary release year\"}}, \"required\": [\"query\"]}}, {\"name\": \"GET_movie__movie_id__release_dates\", \"description\": \"Get the release date along with the certification for a movie.\\n\\nRelease dates support different types:\\n\\n1. Premiere\\n2. Theatrical (limited)\\n3. Theatrical\\n4. Digital\\n5. Physical\\n6. TV\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"movie_id\": {\"type\": \"integer\", \"description\": \"movie id\"}}, \"required\": [\"movie_id\"]}}]", "GraphQL_schema": "type GET_search_movie_ResultsEntry {\n  adult: Boolean\n  backdrop_path: String\n  genre_ids: [Int]\n  id: Int\n  original_language: String\n  original_title: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  release_date: String\n  title: String\n  video: Boolean\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_search_movie_Root {\n  page: Int\n  results: [GET_search_movie_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_search_movie(\n    query: String\n    tmdb_access_token: String!\n  ): GET_search_movie_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/search/movie\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_movie__movie_id__release_dates_ReleaseDatesEntry {\n  certification: String\n  descriptors: [String]\n  iso_639_1: String\n  note: String\n  release_date: DateTime\n  type: Int\n}\n\ntype GET_movie__movie_id__release_dates_ResultsEntry {\n  iso_3166_1: String\n  release_dates: [GET_movie__movie_id__release_dates_ReleaseDatesEntry]\n}\n\ntype GET_movie__movie_id__release_dates_Root {\n  id: Int\n  results: [GET_movie__movie_id__release_dates_ResultsEntry]\n}\n\ntype Query {\n  GET_movie__movie_id__release_dates(\n    movie_id: String!\n    tmdb_access_token: String!\n  ): GET_movie__movie_id__release_dates_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/movie/$movie_id;/release_dates\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\n", "utterance": "When is the movie \"Titanic\" released?"}
{"domain": "tmdb", "input": "Function Signatures:\n\n[{\"name\": \"GET_search_tv\", \"description\": \"Search for a TV show.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"page\": {\"type\": \"integer\", \"description\": \"page\"}, \"query\": {\"type\": \"string\", \"description\": \"query\"}, \"include_adult\": {\"type\": \"boolean\", \"description\": \"include adult\"}, \"first_air_date_year\": {\"type\": \"integer\", \"description\": \"first air date year\"}}, \"required\": [\"query\"]}}, {\"name\": \"GET_tv__tv_id__images\", \"description\": \"Get the images that belong to a TV show.\\n\\nQuerying images with a `language` parameter will filter the results. If you want to include a fallback language (especially useful for backdrops) you can use the `include_image_language` parameter. This should be a comma seperated value like so: `include_image_language=en,null`.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"tv_id\": {\"type\": \"integer\", \"description\": \"tv id\"}}, \"required\": [\"tv_id\"]}}]\n\nGraphQL schema:\n\ntype GET_search_tv_ResultsEntry {\n  adult: Boolean\n  backdrop_path: String\n  first_air_date: Date\n  genre_ids: [Int]\n  id: Int\n  name: String\n  origin_country: [String]\n  original_language: String\n  original_name: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_search_tv_Root {\n  page: Int\n  results: [GET_search_tv_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_search_tv(query: String, tmdb_access_token: String!): GET_search_tv_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/search/tv\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_tv__tv_id__images_BackdropsEntry {\n  aspect_ratio: Float\n  file_path: String\n  height: Int\n  iso_639_1: String\n  vote_average: Float\n  vote_count: Int\n  width: Int\n}\n\ntype GET_tv__tv_id__images_LogosEntry {\n  aspect_ratio: Float\n  file_path: String\n  height: Int\n  iso_639_1: String\n  vote_average: Float\n  vote_count: Int\n  width: Int\n}\n\ntype GET_tv__tv_id__images_PostersEntry {\n  aspect_ratio: Float\n  file_path: String\n  height: Int\n  iso_639_1: String\n  vote_average: Float\n  vote_count: Int\n  width: Int\n}\n\ntype GET_tv__tv_id__images_Root {\n  backdrops: [GET_tv__tv_id__images_BackdropsEntry]\n  id: Int\n  logos: [GET_tv__tv_id__images_LogosEntry]\n  posters: [GET_tv__tv_id__images_PostersEntry]\n}\n\ntype Query {\n  GET_tv__tv_id__images(\n    tmdb_access_token: String!\n    tv_id: String!\n  ): GET_tv__tv_id__images_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/tv/$tv_id;/images\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\n\nUtterance: give me a poster of 2 Broke Girls", "output": "response_obj = GET_search_tv(query=\"2 Broke Girls\")\nGET_tv__tv_id__images(tv_id=response_obj.results[0].id)\n", "function_specs": "[{\"name\": \"GET_search_tv\", \"description\": \"Search for a TV show.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"page\": {\"type\": \"integer\", \"description\": \"page\"}, \"query\": {\"type\": \"string\", \"description\": \"query\"}, \"include_adult\": {\"type\": \"boolean\", \"description\": \"include adult\"}, \"first_air_date_year\": {\"type\": \"integer\", \"description\": \"first air date year\"}}, \"required\": [\"query\"]}}, {\"name\": \"GET_tv__tv_id__images\", \"description\": \"Get the images that belong to a TV show.\\n\\nQuerying images with a `language` parameter will filter the results. If you want to include a fallback language (especially useful for backdrops) you can use the `include_image_language` parameter. This should be a comma seperated value like so: `include_image_language=en,null`.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"tv_id\": {\"type\": \"integer\", \"description\": \"tv id\"}}, \"required\": [\"tv_id\"]}}]", "GraphQL_schema": "type GET_search_tv_ResultsEntry {\n  adult: Boolean\n  backdrop_path: String\n  first_air_date: Date\n  genre_ids: [Int]\n  id: Int\n  name: String\n  origin_country: [String]\n  original_language: String\n  original_name: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_search_tv_Root {\n  page: Int\n  results: [GET_search_tv_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_search_tv(query: String, tmdb_access_token: String!): GET_search_tv_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/search/tv\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_tv__tv_id__images_BackdropsEntry {\n  aspect_ratio: Float\n  file_path: String\n  height: Int\n  iso_639_1: String\n  vote_average: Float\n  vote_count: Int\n  width: Int\n}\n\ntype GET_tv__tv_id__images_LogosEntry {\n  aspect_ratio: Float\n  file_path: String\n  height: Int\n  iso_639_1: String\n  vote_average: Float\n  vote_count: Int\n  width: Int\n}\n\ntype GET_tv__tv_id__images_PostersEntry {\n  aspect_ratio: Float\n  file_path: String\n  height: Int\n  iso_639_1: String\n  vote_average: Float\n  vote_count: Int\n  width: Int\n}\n\ntype GET_tv__tv_id__images_Root {\n  backdrops: [GET_tv__tv_id__images_BackdropsEntry]\n  id: Int\n  logos: [GET_tv__tv_id__images_LogosEntry]\n  posters: [GET_tv__tv_id__images_PostersEntry]\n}\n\ntype Query {\n  GET_tv__tv_id__images(\n    tmdb_access_token: String!\n    tv_id: String!\n  ): GET_tv__tv_id__images_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/tv/$tv_id;/images\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\n", "utterance": "give me a poster of 2 Broke Girls"}
{"domain": "tmdb", "input": "Function Signatures:\n\n[{\"name\": \"GET_person_popular\", \"description\": \"Get the list of popular people on TMDb. This list updates daily.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"page\": {\"type\": \"integer\", \"description\": \"page\"}}, \"required\": []}}, {\"name\": \"GET_person__person_id_\", \"description\": \"Get the primary person details by id.\\n\\nSupports `append_to_response`. Read more about this [here](#docTextSection:JdZq8ctmcxNqyLQjp).\\n\\n#### Recent Changes\\n\\n| **Date** | **Change** |\\n| - | - |\\n| July 17, 2018 | Added the `known_for_department` field. |\\n| April 26, 2018 | Added the [translations](#endpoint:CSaMjCxXAtGpxNGfS) method. |\\n| November 9, 2016 | Biographies are now translatable on TMDb. This means you can query person details with a language parameter. |\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"person_id\": {\"type\": \"integer\", \"description\": \"person id\"}}, \"required\": [\"person_id\"]}}]\n\nGraphQL schema:\n\ntype GET_person_popular_KnownForEntry {\n  adult: Boolean\n  backdrop_path: String\n  first_air_date: Date\n  genre_ids: [Int]\n  id: Int\n  media_type: String\n  name: String\n  origin_country: [String]\n  original_language: String\n  original_name: String\n  original_title: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  release_date: Date\n  title: String\n  video: Boolean\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_person_popular_ResultsEntry {\n  adult: Boolean\n  gender: Int\n  id: Int\n  known_for: [GET_person_popular_KnownForEntry]\n  known_for_department: String\n  name: String\n  original_name: String\n  popularity: Float\n  profile_path: String\n}\n\ntype GET_person_popular_Root {\n  page: Int\n  results: [GET_person_popular_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_person_popular(tmdb_access_token: String!): GET_person_popular_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/person/popular\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_person__person_id_Root {\n  adult: Boolean\n  also_known_as: [String]\n  biography: String\n  birthday: Date\n  \"\"\"\n  Field \"deathday\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  deathday: JSON\n  gender: Int\n  \"\"\"\n  Field \"homepage\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  homepage: JSON\n  id: Int\n  imdb_id: String\n  known_for_department: String\n  name: String\n  place_of_birth: String\n  popularity: Float\n  profile_path: String\n}\n\ntype Query {\n  GET_person__person_id_(\n    person_id: String!\n    tmdb_access_token: String!\n  ): GET_person__person_id_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/person/$person_id;\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\n\nUtterance: What is the birthday of the most popular person right now?", "output": "response_obj = GET_person_popular()\nGET_person__person_id_(person_id=response_obj.results[0].id)\n", "function_specs": "[{\"name\": \"GET_person_popular\", \"description\": \"Get the list of popular people on TMDb. This list updates daily.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"page\": {\"type\": \"integer\", \"description\": \"page\"}}, \"required\": []}}, {\"name\": \"GET_person__person_id_\", \"description\": \"Get the primary person details by id.\\n\\nSupports `append_to_response`. Read more about this [here](#docTextSection:JdZq8ctmcxNqyLQjp).\\n\\n#### Recent Changes\\n\\n| **Date** | **Change** |\\n| - | - |\\n| July 17, 2018 | Added the `known_for_department` field. |\\n| April 26, 2018 | Added the [translations](#endpoint:CSaMjCxXAtGpxNGfS) method. |\\n| November 9, 2016 | Biographies are now translatable on TMDb. This means you can query person details with a language parameter. |\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"person_id\": {\"type\": \"integer\", \"description\": \"person id\"}}, \"required\": [\"person_id\"]}}]", "GraphQL_schema": "type GET_person_popular_KnownForEntry {\n  adult: Boolean\n  backdrop_path: String\n  first_air_date: Date\n  genre_ids: [Int]\n  id: Int\n  media_type: String\n  name: String\n  origin_country: [String]\n  original_language: String\n  original_name: String\n  original_title: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  release_date: Date\n  title: String\n  video: Boolean\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_person_popular_ResultsEntry {\n  adult: Boolean\n  gender: Int\n  id: Int\n  known_for: [GET_person_popular_KnownForEntry]\n  known_for_department: String\n  name: String\n  original_name: String\n  popularity: Float\n  profile_path: String\n}\n\ntype GET_person_popular_Root {\n  page: Int\n  results: [GET_person_popular_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_person_popular(tmdb_access_token: String!): GET_person_popular_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/person/popular\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_person__person_id_Root {\n  adult: Boolean\n  also_known_as: [String]\n  biography: String\n  birthday: Date\n  \"\"\"\n  Field \"deathday\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  deathday: JSON\n  gender: Int\n  \"\"\"\n  Field \"homepage\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  homepage: JSON\n  id: Int\n  imdb_id: String\n  known_for_department: String\n  name: String\n  place_of_birth: String\n  popularity: Float\n  profile_path: String\n}\n\ntype Query {\n  GET_person__person_id_(\n    person_id: String!\n    tmdb_access_token: String!\n  ): GET_person__person_id_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/person/$person_id;\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\n", "utterance": "What is the birthday of the most popular person right now?"}
{"domain": "tmdb", "input": "Function Signatures:\n\n[{\"name\": \"GET_search_tv\", \"description\": \"Search for a TV show.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"page\": {\"type\": \"integer\", \"description\": \"page\"}, \"query\": {\"type\": \"string\", \"description\": \"query\"}, \"include_adult\": {\"type\": \"boolean\", \"description\": \"include adult\"}, \"first_air_date_year\": {\"type\": \"integer\", \"description\": \"first air date year\"}}, \"required\": [\"query\"]}}, {\"name\": \"GET_tv__tv_id__similar\", \"description\": \"Get a list of similar TV shows. These items are assembled by looking at keywords and genres.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"tv_id\": {\"type\": \"integer\", \"description\": \"tv id\"}, \"page\": {\"type\": \"integer\", \"description\": \"page\"}}, \"required\": [\"tv_id\"]}}]\n\nGraphQL schema:\n\ntype GET_search_tv_ResultsEntry {\n  adult: Boolean\n  backdrop_path: String\n  first_air_date: Date\n  genre_ids: [Int]\n  id: Int\n  name: String\n  origin_country: [String]\n  original_language: String\n  original_name: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_search_tv_Root {\n  page: Int\n  results: [GET_search_tv_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_search_tv(query: String, tmdb_access_token: String!): GET_search_tv_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/search/tv\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_tv__tv_id__similar_ResultsEntry {\n  adult: Boolean\n  backdrop_path: String\n  first_air_date: Date\n  genre_ids: [Int]\n  id: Int\n  name: String\n  origin_country: [String]\n  original_language: String\n  original_name: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_tv__tv_id__similar_Root {\n  page: Int\n  results: [GET_tv__tv_id__similar_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_tv__tv_id__similar(\n    tmdb_access_token: String!\n    tv_id: String!\n  ): GET_tv__tv_id__similar_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/tv/$tv_id;/similar\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\n\nUtterance: I want some tv shows that are similar to House of Cards", "output": "response_obj = GET_search_tv(query=\"House of Cards\")\nGET_tv__tv_id__similar(tv_id=response_obj.results[0].id)\n", "function_specs": "[{\"name\": \"GET_search_tv\", \"description\": \"Search for a TV show.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"page\": {\"type\": \"integer\", \"description\": \"page\"}, \"query\": {\"type\": \"string\", \"description\": \"query\"}, \"include_adult\": {\"type\": \"boolean\", \"description\": \"include adult\"}, \"first_air_date_year\": {\"type\": \"integer\", \"description\": \"first air date year\"}}, \"required\": [\"query\"]}}, {\"name\": \"GET_tv__tv_id__similar\", \"description\": \"Get a list of similar TV shows. These items are assembled by looking at keywords and genres.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"tv_id\": {\"type\": \"integer\", \"description\": \"tv id\"}, \"page\": {\"type\": \"integer\", \"description\": \"page\"}}, \"required\": [\"tv_id\"]}}]", "GraphQL_schema": "type GET_search_tv_ResultsEntry {\n  adult: Boolean\n  backdrop_path: String\n  first_air_date: Date\n  genre_ids: [Int]\n  id: Int\n  name: String\n  origin_country: [String]\n  original_language: String\n  original_name: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_search_tv_Root {\n  page: Int\n  results: [GET_search_tv_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_search_tv(query: String, tmdb_access_token: String!): GET_search_tv_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/search/tv\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_tv__tv_id__similar_ResultsEntry {\n  adult: Boolean\n  backdrop_path: String\n  first_air_date: Date\n  genre_ids: [Int]\n  id: Int\n  name: String\n  origin_country: [String]\n  original_language: String\n  original_name: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_tv__tv_id__similar_Root {\n  page: Int\n  results: [GET_tv__tv_id__similar_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_tv__tv_id__similar(\n    tmdb_access_token: String!\n    tv_id: String!\n  ): GET_tv__tv_id__similar_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/tv/$tv_id;/similar\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\n", "utterance": "I want some tv shows that are similar to House of Cards"}
{"domain": "tmdb", "input": "Function Signatures:\n\n[{\"name\": \"GET_search_movie\", \"description\": \"Search for movies.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"query\": {\"type\": \"string\", \"description\": \"query\"}, \"page\": {\"type\": \"integer\", \"description\": \"page\"}, \"include_adult\": {\"type\": \"boolean\", \"description\": \"include adult\"}, \"region\": {\"type\": \"string\", \"description\": \"region\"}, \"year\": {\"type\": \"integer\", \"description\": \"year\"}, \"primary_release_year\": {\"type\": \"integer\", \"description\": \"primary release year\"}}, \"required\": [\"query\"]}}, {\"name\": \"GET_movie__movie_id__credits\", \"description\": \"Get the cast and crew for a movie.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"movie_id\": {\"type\": \"integer\", \"description\": \"movie id\"}}, \"required\": [\"movie_id\"]}}, {\"name\": \"GET_person__person_id_\", \"description\": \"Get the primary person details by id.\\n\\nSupports `append_to_response`. Read more about this [here](#docTextSection:JdZq8ctmcxNqyLQjp).\\n\\n#### Recent Changes\\n\\n| **Date** | **Change** |\\n| - | - |\\n| July 17, 2018 | Added the `known_for_department` field. |\\n| April 26, 2018 | Added the [translations](#endpoint:CSaMjCxXAtGpxNGfS) method. |\\n| November 9, 2016 | Biographies are now translatable on TMDb. This means you can query person details with a language parameter. |\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"person_id\": {\"type\": \"integer\", \"description\": \"person id\"}}, \"required\": [\"person_id\"]}}]\n\nGraphQL schema:\n\ntype GET_person__person_id_Root {\n  adult: Boolean\n  also_known_as: [String]\n  biography: String\n  birthday: Date\n  \"\"\"\n  Field \"deathday\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  deathday: JSON\n  gender: Int\n  \"\"\"\n  Field \"homepage\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  homepage: JSON\n  id: Int\n  imdb_id: String\n  known_for_department: String\n  name: String\n  place_of_birth: String\n  popularity: Float\n  profile_path: String\n}\n\ntype Query {\n  GET_person__person_id_(\n    person_id: String!\n    tmdb_access_token: String!\n  ): GET_person__person_id_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/person/$person_id;\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_search_movie_ResultsEntry {\n  adult: Boolean\n  backdrop_path: String\n  genre_ids: [Int]\n  id: Int\n  original_language: String\n  original_title: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  release_date: Date\n  title: String\n  video: Boolean\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_search_movie_Root {\n  page: Int\n  results: [GET_search_movie_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_search_movie(\n    query: String\n    tmdb_access_token: String!\n  ): GET_search_movie_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/search/movie\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_movie__movie_id__credits_CastEntry {\n  adult: Boolean\n  cast_id: Int\n  character: String\n  credit_id: String\n  gender: Int\n  id: Int\n  known_for_department: String\n  name: String\n  order: Int\n  original_name: String\n  popularity: Float\n  profile_path: String\n}\n\ntype GET_movie__movie_id__credits_CrewEntry {\n  adult: Boolean\n  credit_id: String\n  department: String\n  gender: Int\n  id: Int\n  job: String\n  known_for_department: String\n  name: String\n  original_name: String\n  popularity: Float\n  profile_path: String\n}\n\ntype GET_movie__movie_id__credits_Root {\n  cast: [GET_movie__movie_id__credits_CastEntry]\n  crew: [GET_movie__movie_id__credits_CrewEntry]\n  id: Int\n}\n\ntype Query {\n  GET_movie__movie_id__credits(\n    movie_id: String!\n    tmdb_access_token: String!\n  ): GET_movie__movie_id__credits_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/movie/$movie_id;/credits\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\n\nUtterance: When is the birthday of the director of the movie The Shawshank Redemption?", "output": "response_obj = GET_search_movie(query=\"The Shawshank Redemption\")\nresponse_obj1 = GET_movie__movie_id__credits(movie_id=response_obj.results[0].id)\nGET_person__person_id_(person_id=[person.id for person in response_obj1.crew if person.job.lower()==\"director\"][0])\n", "function_specs": "[{\"name\": \"GET_search_movie\", \"description\": \"Search for movies.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"query\": {\"type\": \"string\", \"description\": \"query\"}, \"page\": {\"type\": \"integer\", \"description\": \"page\"}, \"include_adult\": {\"type\": \"boolean\", \"description\": \"include adult\"}, \"region\": {\"type\": \"string\", \"description\": \"region\"}, \"year\": {\"type\": \"integer\", \"description\": \"year\"}, \"primary_release_year\": {\"type\": \"integer\", \"description\": \"primary release year\"}}, \"required\": [\"query\"]}}, {\"name\": \"GET_movie__movie_id__credits\", \"description\": \"Get the cast and crew for a movie.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"movie_id\": {\"type\": \"integer\", \"description\": \"movie id\"}}, \"required\": [\"movie_id\"]}}, {\"name\": \"GET_person__person_id_\", \"description\": \"Get the primary person details by id.\\n\\nSupports `append_to_response`. Read more about this [here](#docTextSection:JdZq8ctmcxNqyLQjp).\\n\\n#### Recent Changes\\n\\n| **Date** | **Change** |\\n| - | - |\\n| July 17, 2018 | Added the `known_for_department` field. |\\n| April 26, 2018 | Added the [translations](#endpoint:CSaMjCxXAtGpxNGfS) method. |\\n| November 9, 2016 | Biographies are now translatable on TMDb. This means you can query person details with a language parameter. |\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"person_id\": {\"type\": \"integer\", \"description\": \"person id\"}}, \"required\": [\"person_id\"]}}]", "GraphQL_schema": "type GET_person__person_id_Root {\n  adult: Boolean\n  also_known_as: [String]\n  biography: String\n  birthday: Date\n  \"\"\"\n  Field \"deathday\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  deathday: JSON\n  gender: Int\n  \"\"\"\n  Field \"homepage\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  homepage: JSON\n  id: Int\n  imdb_id: String\n  known_for_department: String\n  name: String\n  place_of_birth: String\n  popularity: Float\n  profile_path: String\n}\n\ntype Query {\n  GET_person__person_id_(\n    person_id: String!\n    tmdb_access_token: String!\n  ): GET_person__person_id_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/person/$person_id;\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_search_movie_ResultsEntry {\n  adult: Boolean\n  backdrop_path: String\n  genre_ids: [Int]\n  id: Int\n  original_language: String\n  original_title: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  release_date: Date\n  title: String\n  video: Boolean\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_search_movie_Root {\n  page: Int\n  results: [GET_search_movie_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_search_movie(\n    query: String\n    tmdb_access_token: String!\n  ): GET_search_movie_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/search/movie\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_movie__movie_id__credits_CastEntry {\n  adult: Boolean\n  cast_id: Int\n  character: String\n  credit_id: String\n  gender: Int\n  id: Int\n  known_for_department: String\n  name: String\n  order: Int\n  original_name: String\n  popularity: Float\n  profile_path: String\n}\n\ntype GET_movie__movie_id__credits_CrewEntry {\n  adult: Boolean\n  credit_id: String\n  department: String\n  gender: Int\n  id: Int\n  job: String\n  known_for_department: String\n  name: String\n  original_name: String\n  popularity: Float\n  profile_path: String\n}\n\ntype GET_movie__movie_id__credits_Root {\n  cast: [GET_movie__movie_id__credits_CastEntry]\n  crew: [GET_movie__movie_id__credits_CrewEntry]\n  id: Int\n}\n\ntype Query {\n  GET_movie__movie_id__credits(\n    movie_id: String!\n    tmdb_access_token: String!\n  ): GET_movie__movie_id__credits_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/movie/$movie_id;/credits\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\n", "utterance": "When is the birthday of the director of the movie The Shawshank Redemption?"}
{"domain": "tmdb", "input": "Function Signatures:\n\n[{\"name\": \"GET_tv_popular\", \"description\": \"Get a list of the current popular TV shows on TMDb. This list updates daily.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"page\": {\"type\": \"integer\", \"description\": \"page\"}}, \"required\": []}}, {\"name\": \"GET_tv__tv_id__credits\", \"description\": \"Get the credits (cast and crew) that have been added to a TV show.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"tv_id\": {\"type\": \"integer\", \"description\": \"tv id\"}}, \"required\": [\"tv_id\"]}}]\n\nGraphQL schema:\n\ntype GET_tv_popular_ResultsEntry {\n  adult: Boolean\n  backdrop_path: String\n  first_air_date: Date\n  genre_ids: [Int]\n  id: Int\n  name: String\n  origin_country: [String]\n  original_language: String\n  original_name: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_tv_popular_Root {\n  page: Int\n  results: [GET_tv_popular_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_tv_popular(tmdb_access_token: String!): GET_tv_popular_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/tv/popular\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_tv__tv_id__credits_CastEntry {\n  adult: Boolean\n  character: String\n  credit_id: String\n  gender: Int\n  id: Int\n  known_for_department: String\n  name: String\n  order: Int\n  original_name: String\n  popularity: Float\n  profile_path: String\n}\n\ntype GET_tv__tv_id__credits_CrewEntry {\n  adult: Boolean\n  credit_id: String\n  department: String\n  gender: Int\n  id: Int\n  job: String\n  known_for_department: String\n  name: String\n  original_name: String\n  popularity: Float\n  profile_path: String\n}\n\ntype GET_tv__tv_id__credits_Root {\n  cast: [GET_tv__tv_id__credits_CastEntry]\n  crew: [GET_tv__tv_id__credits_CrewEntry]\n  id: Int\n}\n\ntype Query {\n  GET_tv__tv_id__credits(\n    tmdb_access_token: String!\n    tv_id: String!\n  ): GET_tv__tv_id__credits_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/tv/$tv_id;/credits\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\n\nUtterance: Who is the lead actor of today's most popular TV show?", "output": "response_obj = GET_tv_popular()\nGET_tv__tv_id__credits(tv_id=response_obj.results[0].id)\n", "function_specs": "[{\"name\": \"GET_tv_popular\", \"description\": \"Get a list of the current popular TV shows on TMDb. This list updates daily.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"page\": {\"type\": \"integer\", \"description\": \"page\"}}, \"required\": []}}, {\"name\": \"GET_tv__tv_id__credits\", \"description\": \"Get the credits (cast and crew) that have been added to a TV show.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"tv_id\": {\"type\": \"integer\", \"description\": \"tv id\"}}, \"required\": [\"tv_id\"]}}]", "GraphQL_schema": "type GET_tv_popular_ResultsEntry {\n  adult: Boolean\n  backdrop_path: String\n  first_air_date: Date\n  genre_ids: [Int]\n  id: Int\n  name: String\n  origin_country: [String]\n  original_language: String\n  original_name: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_tv_popular_Root {\n  page: Int\n  results: [GET_tv_popular_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_tv_popular(tmdb_access_token: String!): GET_tv_popular_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/tv/popular\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_tv__tv_id__credits_CastEntry {\n  adult: Boolean\n  character: String\n  credit_id: String\n  gender: Int\n  id: Int\n  known_for_department: String\n  name: String\n  order: Int\n  original_name: String\n  popularity: Float\n  profile_path: String\n}\n\ntype GET_tv__tv_id__credits_CrewEntry {\n  adult: Boolean\n  credit_id: String\n  department: String\n  gender: Int\n  id: Int\n  job: String\n  known_for_department: String\n  name: String\n  original_name: String\n  popularity: Float\n  profile_path: String\n}\n\ntype GET_tv__tv_id__credits_Root {\n  cast: [GET_tv__tv_id__credits_CastEntry]\n  crew: [GET_tv__tv_id__credits_CrewEntry]\n  id: Int\n}\n\ntype Query {\n  GET_tv__tv_id__credits(\n    tmdb_access_token: String!\n    tv_id: String!\n  ): GET_tv__tv_id__credits_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/tv/$tv_id;/credits\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\n", "utterance": "Who is the lead actor of today's most popular TV show?"}
{"domain": "tmdb", "input": "Function Signatures:\n\n[{\"name\": \"GET_movie_top_rated\", \"description\": \"Get the top rated movies on TMDb.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"page\": {\"type\": \"integer\", \"description\": \"page\"}, \"region\": {\"type\": \"string\", \"description\": \"region\"}}, \"required\": []}}, {\"name\": \"GET_movie__movie_id__credits\", \"description\": \"Get the cast and crew for a movie.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"movie_id\": {\"type\": \"integer\", \"description\": \"movie id\"}}, \"required\": [\"movie_id\"]}}]\n\nGraphQL schema:\n\ntype GET_movie_top_rated_ResultsEntry {\n  adult: Boolean\n  backdrop_path: String\n  genre_ids: [Int]\n  id: Int\n  original_language: String\n  original_title: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  release_date: Date\n  title: String\n  video: Boolean\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_movie_top_rated_Root {\n  page: Int\n  results: [GET_movie_top_rated_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_movie_top_rated(tmdb_access_token: String!): GET_movie_top_rated_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/movie/top_rated\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_movie__movie_id__credits_CastEntry {\n  adult: Boolean\n  cast_id: Int\n  character: String\n  credit_id: String\n  gender: Int\n  id: Int\n  known_for_department: String\n  name: String\n  order: Int\n  original_name: String\n  popularity: Float\n  profile_path: String\n}\n\ntype GET_movie__movie_id__credits_CrewEntry {\n  adult: Boolean\n  credit_id: String\n  department: String\n  gender: Int\n  id: Int\n  job: String\n  known_for_department: String\n  name: String\n  original_name: String\n  popularity: Float\n  profile_path: String\n}\n\ntype GET_movie__movie_id__credits_Root {\n  cast: [GET_movie__movie_id__credits_CastEntry]\n  crew: [GET_movie__movie_id__credits_CrewEntry]\n  id: Int\n}\n\ntype Query {\n  GET_movie__movie_id__credits(\n    movie_id: String!\n    tmdb_access_token: String!\n  ): GET_movie__movie_id__credits_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/movie/$movie_id;/credits\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\n\nUtterance: Who directed the top-1 rated movie?", "output": "response_obj = GET_movie_top_rated()\nGET_movie__movie_id__credits(movie_id=response_obj.results[0].id)\n", "function_specs": "[{\"name\": \"GET_movie_top_rated\", \"description\": \"Get the top rated movies on TMDb.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"page\": {\"type\": \"integer\", \"description\": \"page\"}, \"region\": {\"type\": \"string\", \"description\": \"region\"}}, \"required\": []}}, {\"name\": \"GET_movie__movie_id__credits\", \"description\": \"Get the cast and crew for a movie.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"movie_id\": {\"type\": \"integer\", \"description\": \"movie id\"}}, \"required\": [\"movie_id\"]}}]", "GraphQL_schema": "type GET_movie_top_rated_ResultsEntry {\n  adult: Boolean\n  backdrop_path: String\n  genre_ids: [Int]\n  id: Int\n  original_language: String\n  original_title: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  release_date: Date\n  title: String\n  video: Boolean\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_movie_top_rated_Root {\n  page: Int\n  results: [GET_movie_top_rated_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_movie_top_rated(tmdb_access_token: String!): GET_movie_top_rated_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/movie/top_rated\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_movie__movie_id__credits_CastEntry {\n  adult: Boolean\n  cast_id: Int\n  character: String\n  credit_id: String\n  gender: Int\n  id: Int\n  known_for_department: String\n  name: String\n  order: Int\n  original_name: String\n  popularity: Float\n  profile_path: String\n}\n\ntype GET_movie__movie_id__credits_CrewEntry {\n  adult: Boolean\n  credit_id: String\n  department: String\n  gender: Int\n  id: Int\n  job: String\n  known_for_department: String\n  name: String\n  original_name: String\n  popularity: Float\n  profile_path: String\n}\n\ntype GET_movie__movie_id__credits_Root {\n  cast: [GET_movie__movie_id__credits_CastEntry]\n  crew: [GET_movie__movie_id__credits_CrewEntry]\n  id: Int\n}\n\ntype Query {\n  GET_movie__movie_id__credits(\n    movie_id: String!\n    tmdb_access_token: String!\n  ): GET_movie__movie_id__credits_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/movie/$movie_id;/credits\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\n", "utterance": "Who directed the top-1 rated movie?"}
{"domain": "tmdb", "input": "Function Signatures:\n\n[{\"name\": \"GET_search_movie\", \"description\": \"Search for movies.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"query\": {\"type\": \"string\", \"description\": \"query\"}, \"page\": {\"type\": \"integer\", \"description\": \"page\"}, \"include_adult\": {\"type\": \"boolean\", \"description\": \"include adult\"}, \"region\": {\"type\": \"string\", \"description\": \"region\"}, \"year\": {\"type\": \"integer\", \"description\": \"year\"}, \"primary_release_year\": {\"type\": \"integer\", \"description\": \"primary release year\"}}, \"required\": [\"query\"]}}, {\"name\": \"GET_movie__movie_id_\", \"description\": \"Get the primary information about a movie.\\n\\nSupports `append_to_response`. Read more about this [here](#docTextSection:JdZq8ctmcxNqyLQjp).\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"movie_id\": {\"type\": \"integer\", \"description\": \"movie id\"}, \"append_to_response\": {\"type\": \"string\", \"description\": \"append to response\"}}, \"required\": [\"movie_id\"]}}]\n\nGraphQL schema:\n\ntype GET_search_movie_ResultsEntry {\n  adult: Boolean\n  backdrop_path: String\n  genre_ids: [Int]\n  id: Int\n  original_language: String\n  original_title: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  release_date: String\n  title: String\n  video: Boolean\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_search_movie_Root {\n  page: Int\n  results: [GET_search_movie_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_search_movie(\n    query: String\n    tmdb_access_token: String!\n  ): GET_search_movie_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/search/movie\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_movie__movie_id_GenresEntry {\n  id: Int\n  name: String\n}\n\ntype GET_movie__movie_id_ProductionCompaniesEntry {\n  id: Int\n  logo_path: String\n  name: String\n  origin_country: String\n}\n\ntype GET_movie__movie_id_ProductionCountriesEntry {\n  iso_3166_1: String\n  name: String\n}\n\ntype GET_movie__movie_id_Root {\n  adult: Boolean\n  backdrop_path: String\n  \"\"\"\n  Field \"belongs_to_collection\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  belongs_to_collection: JSON\n  budget: Int\n  genres: [GET_movie__movie_id_GenresEntry]\n  homepage: String\n  id: Int\n  imdb_id: String\n  origin_country: [String]\n  original_language: String\n  original_title: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  production_companies: [GET_movie__movie_id_ProductionCompaniesEntry]\n  production_countries: [GET_movie__movie_id_ProductionCountriesEntry]\n  release_date: Date\n  revenue: Int\n  runtime: Int\n  spoken_languages: [GET_movie__movie_id_SpokenLanguagesEntry]\n  status: String\n  tagline: String\n  title: String\n  video: Boolean\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_movie__movie_id_SpokenLanguagesEntry {\n  english_name: String\n  iso_639_1: String\n  name: String\n}\n\ntype Query {\n  GET_movie__movie_id_(\n    movie_id: String!\n    tmdb_access_token: String!\n  ): GET_movie__movie_id_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/movie/$movie_id;\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\n\nUtterance: What is the genre of the movie Lord of the Rings?", "output": "response_obj = GET_search_movie(query=\"Lord of the Rings\")\nGET_movie__movie_id_(movie_id=response_obj.results[0].id)\n", "function_specs": "[{\"name\": \"GET_search_movie\", \"description\": \"Search for movies.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"query\": {\"type\": \"string\", \"description\": \"query\"}, \"page\": {\"type\": \"integer\", \"description\": \"page\"}, \"include_adult\": {\"type\": \"boolean\", \"description\": \"include adult\"}, \"region\": {\"type\": \"string\", \"description\": \"region\"}, \"year\": {\"type\": \"integer\", \"description\": \"year\"}, \"primary_release_year\": {\"type\": \"integer\", \"description\": \"primary release year\"}}, \"required\": [\"query\"]}}, {\"name\": \"GET_movie__movie_id_\", \"description\": \"Get the primary information about a movie.\\n\\nSupports `append_to_response`. Read more about this [here](#docTextSection:JdZq8ctmcxNqyLQjp).\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"movie_id\": {\"type\": \"integer\", \"description\": \"movie id\"}, \"append_to_response\": {\"type\": \"string\", \"description\": \"append to response\"}}, \"required\": [\"movie_id\"]}}]", "GraphQL_schema": "type GET_search_movie_ResultsEntry {\n  adult: Boolean\n  backdrop_path: String\n  genre_ids: [Int]\n  id: Int\n  original_language: String\n  original_title: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  release_date: String\n  title: String\n  video: Boolean\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_search_movie_Root {\n  page: Int\n  results: [GET_search_movie_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_search_movie(\n    query: String\n    tmdb_access_token: String!\n  ): GET_search_movie_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/search/movie\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_movie__movie_id_GenresEntry {\n  id: Int\n  name: String\n}\n\ntype GET_movie__movie_id_ProductionCompaniesEntry {\n  id: Int\n  logo_path: String\n  name: String\n  origin_country: String\n}\n\ntype GET_movie__movie_id_ProductionCountriesEntry {\n  iso_3166_1: String\n  name: String\n}\n\ntype GET_movie__movie_id_Root {\n  adult: Boolean\n  backdrop_path: String\n  \"\"\"\n  Field \"belongs_to_collection\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  belongs_to_collection: JSON\n  budget: Int\n  genres: [GET_movie__movie_id_GenresEntry]\n  homepage: String\n  id: Int\n  imdb_id: String\n  origin_country: [String]\n  original_language: String\n  original_title: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  production_companies: [GET_movie__movie_id_ProductionCompaniesEntry]\n  production_countries: [GET_movie__movie_id_ProductionCountriesEntry]\n  release_date: Date\n  revenue: Int\n  runtime: Int\n  spoken_languages: [GET_movie__movie_id_SpokenLanguagesEntry]\n  status: String\n  tagline: String\n  title: String\n  video: Boolean\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_movie__movie_id_SpokenLanguagesEntry {\n  english_name: String\n  iso_639_1: String\n  name: String\n}\n\ntype Query {\n  GET_movie__movie_id_(\n    movie_id: String!\n    tmdb_access_token: String!\n  ): GET_movie__movie_id_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/movie/$movie_id;\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\n", "utterance": "What is the genre of the movie Lord of the Rings?"}
{"domain": "tmdb", "input": "Function Signatures:\n\n[{\"name\": \"GET_trending__media_type___time_window_\", \"description\": \"Get the daily or weekly trending items. The daily trending list tracks items over the period of a day while items have a 24 hour half life. The weekly list tracks items over a 7 day period, with a 7 day half life.\\n\\n#### Valid Media Types\\n\\n| **Media Type** | **Description** |\\n| - | - |\\n| all | Include all movies, TV shows and people in the results as a global trending list. |\\n| movie | Show the trending movies in the results. |\\n| tv | Show the trending TV shows in the results. |\\n| person | Show the trending people in the results. |\\n\\n#### Valid Time Windows\\n\\n| **Time Window** | **Description** |\\n| - | - |\\n| day | View the trending list for the day. |\\n| week | View the trending list for the week. |\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"media_type\": {\"type\": \"string\", \"description\": \"media type\\nValid values: all,movie,tv,person\"}, \"time_window\": {\"type\": \"string\", \"description\": \"time window\\nValid values: day,week\"}}, \"required\": [\"media_type\", \"time_window\"]}}, {\"name\": \"GET_tv__tv_id__reviews\", \"description\": \"Get the reviews for a TV show.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"tv_id\": {\"type\": \"integer\", \"description\": \"tv id\"}, \"page\": {\"type\": \"integer\", \"description\": \"page\"}}, \"required\": [\"tv_id\"]}}]\n\nGraphQL schema:\n\ntype GET_trending__media_type___time_window_ResultsEntry {\n  adult: Boolean\n  backdrop_path: String\n  genre_ids: [Int]\n  id: Int\n  media_type: String\n  original_language: String\n  original_title: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  release_date: Date\n  title: String\n  video: Boolean\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_trending__media_type___time_window_Root {\n  page: Int\n  results: [GET_trending__media_type___time_window_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_trending__media_type___time_window_(\n    media_type: String!\n    time_window: String!\n    tmdb_access_token: String!\n  ): GET_trending__media_type___time_window_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/trending/$media_type;/$time_window;\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_tv__tv_id__reviews_AuthorDetails {\n  avatar_path: String\n  name: String\n  rating: Int\n  username: String\n}\n\ntype GET_tv__tv_id__reviews_ResultsEntry {\n  author: String\n  author_details: GET_tv__tv_id__reviews_AuthorDetails\n  content: String\n  created_at: DateTime\n  id: String\n  updated_at: DateTime\n  url: String\n}\n\ntype GET_tv__tv_id__reviews_Root {\n  id: Int\n  page: Int\n  results: [GET_tv__tv_id__reviews_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_tv__tv_id__reviews(\n    tmdb_access_token: String!\n    tv_id: String!\n  ): GET_tv__tv_id__reviews_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/tv/$tv_id;/reviews\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\n\nUtterance: give me a review of today's most trending TV show", "output": "response_obj = GET_trending__media_type___time_window_(media_type=\"tv\", time_window=\"day\")\nGET_tv__tv_id__reviews(tv_id=response_obj.results[0].id)\n", "function_specs": "[{\"name\": \"GET_trending__media_type___time_window_\", \"description\": \"Get the daily or weekly trending items. The daily trending list tracks items over the period of a day while items have a 24 hour half life. The weekly list tracks items over a 7 day period, with a 7 day half life.\\n\\n#### Valid Media Types\\n\\n| **Media Type** | **Description** |\\n| - | - |\\n| all | Include all movies, TV shows and people in the results as a global trending list. |\\n| movie | Show the trending movies in the results. |\\n| tv | Show the trending TV shows in the results. |\\n| person | Show the trending people in the results. |\\n\\n#### Valid Time Windows\\n\\n| **Time Window** | **Description** |\\n| - | - |\\n| day | View the trending list for the day. |\\n| week | View the trending list for the week. |\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"media_type\": {\"type\": \"string\", \"description\": \"media type\\nValid values: all,movie,tv,person\"}, \"time_window\": {\"type\": \"string\", \"description\": \"time window\\nValid values: day,week\"}}, \"required\": [\"media_type\", \"time_window\"]}}, {\"name\": \"GET_tv__tv_id__reviews\", \"description\": \"Get the reviews for a TV show.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"tv_id\": {\"type\": \"integer\", \"description\": \"tv id\"}, \"page\": {\"type\": \"integer\", \"description\": \"page\"}}, \"required\": [\"tv_id\"]}}]", "GraphQL_schema": "type GET_trending__media_type___time_window_ResultsEntry {\n  adult: Boolean\n  backdrop_path: String\n  genre_ids: [Int]\n  id: Int\n  media_type: String\n  original_language: String\n  original_title: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  release_date: Date\n  title: String\n  video: Boolean\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_trending__media_type___time_window_Root {\n  page: Int\n  results: [GET_trending__media_type___time_window_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_trending__media_type___time_window_(\n    media_type: String!\n    time_window: String!\n    tmdb_access_token: String!\n  ): GET_trending__media_type___time_window_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/trending/$media_type;/$time_window;\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_tv__tv_id__reviews_AuthorDetails {\n  avatar_path: String\n  name: String\n  rating: Int\n  username: String\n}\n\ntype GET_tv__tv_id__reviews_ResultsEntry {\n  author: String\n  author_details: GET_tv__tv_id__reviews_AuthorDetails\n  content: String\n  created_at: DateTime\n  id: String\n  updated_at: DateTime\n  url: String\n}\n\ntype GET_tv__tv_id__reviews_Root {\n  id: Int\n  page: Int\n  results: [GET_tv__tv_id__reviews_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_tv__tv_id__reviews(\n    tmdb_access_token: String!\n    tv_id: String!\n  ): GET_tv__tv_id__reviews_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/tv/$tv_id;/reviews\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\n", "utterance": "give me a review of today's most trending TV show"}
{"domain": "tmdb", "input": "Function Signatures:\n\n[{\"name\": \"GET_search_movie\", \"description\": \"Search for movies.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"query\": {\"type\": \"string\", \"description\": \"query\"}, \"page\": {\"type\": \"integer\", \"description\": \"page\"}, \"include_adult\": {\"type\": \"boolean\", \"description\": \"include adult\"}, \"region\": {\"type\": \"string\", \"description\": \"region\"}, \"year\": {\"type\": \"integer\", \"description\": \"year\"}, \"primary_release_year\": {\"type\": \"integer\", \"description\": \"primary release year\"}}, \"required\": [\"query\"]}}, {\"name\": \"GET_movie__movie_id__credits\", \"description\": \"Get the cast and crew for a movie.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"movie_id\": {\"type\": \"integer\", \"description\": \"movie id\"}}, \"required\": [\"movie_id\"]}}, {\"name\": \"GET_person__person_id_\", \"description\": \"Get the primary person details by id.\\n\\nSupports `append_to_response`. Read more about this [here](#docTextSection:JdZq8ctmcxNqyLQjp).\\n\\n#### Recent Changes\\n\\n| **Date** | **Change** |\\n| - | - |\\n| July 17, 2018 | Added the `known_for_department` field. |\\n| April 26, 2018 | Added the [translations](#endpoint:CSaMjCxXAtGpxNGfS) method. |\\n| November 9, 2016 | Biographies are now translatable on TMDb. This means you can query person details with a language parameter. |\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"person_id\": {\"type\": \"integer\", \"description\": \"person id\"}}, \"required\": [\"person_id\"]}}]\n\nGraphQL schema:\n\ntype GET_person__person_id_Root {\n  adult: Boolean\n  also_known_as: [String]\n  biography: String\n  birthday: Date\n  \"\"\"\n  Field \"deathday\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  deathday: JSON\n  gender: Int\n  \"\"\"\n  Field \"homepage\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  homepage: JSON\n  id: Int\n  imdb_id: String\n  known_for_department: String\n  name: String\n  place_of_birth: String\n  popularity: Float\n  profile_path: String\n}\n\ntype Query {\n  GET_person__person_id_(\n    person_id: String!\n    tmdb_access_token: String!\n  ): GET_person__person_id_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/person/$person_id;\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_search_movie_ResultsEntry {\n  adult: Boolean\n  backdrop_path: String\n  genre_ids: [Int]\n  id: Int\n  original_language: String\n  original_title: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  release_date: Date\n  title: String\n  video: Boolean\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_search_movie_Root {\n  page: Int\n  results: [GET_search_movie_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_search_movie(\n    query: String\n    tmdb_access_token: String!\n  ): GET_search_movie_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/search/movie\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_movie__movie_id__credits_CastEntry {\n  adult: Boolean\n  cast_id: Int\n  character: String\n  credit_id: String\n  gender: Int\n  id: Int\n  known_for_department: String\n  name: String\n  order: Int\n  original_name: String\n  popularity: Float\n  profile_path: String\n}\n\ntype GET_movie__movie_id__credits_CrewEntry {\n  adult: Boolean\n  credit_id: String\n  department: String\n  gender: Int\n  id: Int\n  job: String\n  known_for_department: String\n  name: String\n  original_name: String\n  popularity: Float\n  profile_path: String\n}\n\ntype GET_movie__movie_id__credits_Root {\n  cast: [GET_movie__movie_id__credits_CastEntry]\n  crew: [GET_movie__movie_id__credits_CrewEntry]\n  id: Int\n}\n\ntype Query {\n  GET_movie__movie_id__credits(\n    movie_id: String!\n    tmdb_access_token: String!\n  ): GET_movie__movie_id__credits_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/movie/$movie_id;/credits\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\n\nUtterance: Where was the director of Mulholland Drive born?", "output": "response_obj = GET_search_movie(query=\"Mulholland Drive\")\nresponse_obj1 = GET_movie__movie_id__credits(movie_id=response_obj.results[0].id)\nGET_person__person_id_(person_id=[person.id for person in response_obj1.crew if person.job.lower()==\"director\"][0])\n", "function_specs": "[{\"name\": \"GET_search_movie\", \"description\": \"Search for movies.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"query\": {\"type\": \"string\", \"description\": \"query\"}, \"page\": {\"type\": \"integer\", \"description\": \"page\"}, \"include_adult\": {\"type\": \"boolean\", \"description\": \"include adult\"}, \"region\": {\"type\": \"string\", \"description\": \"region\"}, \"year\": {\"type\": \"integer\", \"description\": \"year\"}, \"primary_release_year\": {\"type\": \"integer\", \"description\": \"primary release year\"}}, \"required\": [\"query\"]}}, {\"name\": \"GET_movie__movie_id__credits\", \"description\": \"Get the cast and crew for a movie.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"movie_id\": {\"type\": \"integer\", \"description\": \"movie id\"}}, \"required\": [\"movie_id\"]}}, {\"name\": \"GET_person__person_id_\", \"description\": \"Get the primary person details by id.\\n\\nSupports `append_to_response`. Read more about this [here](#docTextSection:JdZq8ctmcxNqyLQjp).\\n\\n#### Recent Changes\\n\\n| **Date** | **Change** |\\n| - | - |\\n| July 17, 2018 | Added the `known_for_department` field. |\\n| April 26, 2018 | Added the [translations](#endpoint:CSaMjCxXAtGpxNGfS) method. |\\n| November 9, 2016 | Biographies are now translatable on TMDb. This means you can query person details with a language parameter. |\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"person_id\": {\"type\": \"integer\", \"description\": \"person id\"}}, \"required\": [\"person_id\"]}}]", "GraphQL_schema": "type GET_person__person_id_Root {\n  adult: Boolean\n  also_known_as: [String]\n  biography: String\n  birthday: Date\n  \"\"\"\n  Field \"deathday\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  deathday: JSON\n  gender: Int\n  \"\"\"\n  Field \"homepage\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  homepage: JSON\n  id: Int\n  imdb_id: String\n  known_for_department: String\n  name: String\n  place_of_birth: String\n  popularity: Float\n  profile_path: String\n}\n\ntype Query {\n  GET_person__person_id_(\n    person_id: String!\n    tmdb_access_token: String!\n  ): GET_person__person_id_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/person/$person_id;\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_search_movie_ResultsEntry {\n  adult: Boolean\n  backdrop_path: String\n  genre_ids: [Int]\n  id: Int\n  original_language: String\n  original_title: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  release_date: Date\n  title: String\n  video: Boolean\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_search_movie_Root {\n  page: Int\n  results: [GET_search_movie_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_search_movie(\n    query: String\n    tmdb_access_token: String!\n  ): GET_search_movie_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/search/movie\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_movie__movie_id__credits_CastEntry {\n  adult: Boolean\n  cast_id: Int\n  character: String\n  credit_id: String\n  gender: Int\n  id: Int\n  known_for_department: String\n  name: String\n  order: Int\n  original_name: String\n  popularity: Float\n  profile_path: String\n}\n\ntype GET_movie__movie_id__credits_CrewEntry {\n  adult: Boolean\n  credit_id: String\n  department: String\n  gender: Int\n  id: Int\n  job: String\n  known_for_department: String\n  name: String\n  original_name: String\n  popularity: Float\n  profile_path: String\n}\n\ntype GET_movie__movie_id__credits_Root {\n  cast: [GET_movie__movie_id__credits_CastEntry]\n  crew: [GET_movie__movie_id__credits_CrewEntry]\n  id: Int\n}\n\ntype Query {\n  GET_movie__movie_id__credits(\n    movie_id: String!\n    tmdb_access_token: String!\n  ): GET_movie__movie_id__credits_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/movie/$movie_id;/credits\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\n", "utterance": "Where was the director of Mulholland Drive born?"}
{"domain": "tmdb", "input": "Function Signatures:\n\n[{\"name\": \"GET_search_tv\", \"description\": \"Search for a TV show.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"page\": {\"type\": \"integer\", \"description\": \"page\"}, \"query\": {\"type\": \"string\", \"description\": \"query\"}, \"include_adult\": {\"type\": \"boolean\", \"description\": \"include adult\"}, \"first_air_date_year\": {\"type\": \"integer\", \"description\": \"first air date year\"}}, \"required\": [\"query\"]}}, {\"name\": \"GET_tv__tv_id__credits\", \"description\": \"Get the credits (cast and crew) that have been added to a TV show.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"tv_id\": {\"type\": \"integer\", \"description\": \"tv id\"}}, \"required\": [\"tv_id\"]}}, {\"name\": \"GET_person__person_id_\", \"description\": \"Get the primary person details by id.\\n\\nSupports `append_to_response`. Read more about this [here](#docTextSection:JdZq8ctmcxNqyLQjp).\\n\\n#### Recent Changes\\n\\n| **Date** | **Change** |\\n| - | - |\\n| July 17, 2018 | Added the `known_for_department` field. |\\n| April 26, 2018 | Added the [translations](#endpoint:CSaMjCxXAtGpxNGfS) method. |\\n| November 9, 2016 | Biographies are now translatable on TMDb. This means you can query person details with a language parameter. |\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"person_id\": {\"type\": \"integer\", \"description\": \"person id\"}}, \"required\": [\"person_id\"]}}]\n\nGraphQL schema:\n\ntype GET_person__person_id_Root {\n  adult: Boolean\n  also_known_as: [String]\n  biography: String\n  birthday: Date\n  \"\"\"\n  Field \"deathday\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  deathday: JSON\n  gender: Int\n  \"\"\"\n  Field \"homepage\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  homepage: JSON\n  id: Int\n  imdb_id: String\n  known_for_department: String\n  name: String\n  place_of_birth: String\n  popularity: Float\n  profile_path: String\n}\n\ntype Query {\n  GET_person__person_id_(\n    person_id: String!\n    tmdb_access_token: String!\n  ): GET_person__person_id_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/person/$person_id;\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_search_tv_ResultsEntry {\n  adult: Boolean\n  backdrop_path: String\n  first_air_date: Date\n  genre_ids: [Int]\n  id: Int\n  name: String\n  origin_country: [String]\n  original_language: String\n  original_name: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_search_tv_Root {\n  page: Int\n  results: [GET_search_tv_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_search_tv(query: String, tmdb_access_token: String!): GET_search_tv_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/search/tv\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_tv__tv_id__credits_CastEntry {\n  adult: Boolean\n  character: String\n  credit_id: String\n  gender: Int\n  id: Int\n  known_for_department: String\n  name: String\n  order: Int\n  original_name: String\n  popularity: Float\n  profile_path: String\n}\n\ntype GET_tv__tv_id__credits_CrewEntry {\n  adult: Boolean\n  credit_id: String\n  department: String\n  gender: Int\n  id: Int\n  job: String\n  known_for_department: String\n  name: String\n  original_name: String\n  popularity: Float\n  profile_path: String\n}\n\ntype GET_tv__tv_id__credits_Root {\n  cast: [GET_tv__tv_id__credits_CastEntry]\n  crew: [GET_tv__tv_id__credits_CrewEntry]\n  id: Int\n}\n\ntype Query {\n  GET_tv__tv_id__credits(\n    tmdb_access_token: String!\n    tv_id: String!\n  ): GET_tv__tv_id__credits_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/tv/$tv_id;/credits\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\n\nUtterance: When is the lead actor of The Mandalorian born?", "output": "response_obj = GET_search_tv(query=\"The Mandalorian\")\nresponse_obj1 = GET_tv__tv_id__credits(tv_id=response_obj.results[0].id)\nGET_person__person_id_(person_id=response_obj1.cast[0].id)\n", "function_specs": "[{\"name\": \"GET_search_tv\", \"description\": \"Search for a TV show.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"page\": {\"type\": \"integer\", \"description\": \"page\"}, \"query\": {\"type\": \"string\", \"description\": \"query\"}, \"include_adult\": {\"type\": \"boolean\", \"description\": \"include adult\"}, \"first_air_date_year\": {\"type\": \"integer\", \"description\": \"first air date year\"}}, \"required\": [\"query\"]}}, {\"name\": \"GET_tv__tv_id__credits\", \"description\": \"Get the credits (cast and crew) that have been added to a TV show.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"tv_id\": {\"type\": \"integer\", \"description\": \"tv id\"}}, \"required\": [\"tv_id\"]}}, {\"name\": \"GET_person__person_id_\", \"description\": \"Get the primary person details by id.\\n\\nSupports `append_to_response`. Read more about this [here](#docTextSection:JdZq8ctmcxNqyLQjp).\\n\\n#### Recent Changes\\n\\n| **Date** | **Change** |\\n| - | - |\\n| July 17, 2018 | Added the `known_for_department` field. |\\n| April 26, 2018 | Added the [translations](#endpoint:CSaMjCxXAtGpxNGfS) method. |\\n| November 9, 2016 | Biographies are now translatable on TMDb. This means you can query person details with a language parameter. |\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"person_id\": {\"type\": \"integer\", \"description\": \"person id\"}}, \"required\": [\"person_id\"]}}]", "GraphQL_schema": "type GET_person__person_id_Root {\n  adult: Boolean\n  also_known_as: [String]\n  biography: String\n  birthday: Date\n  \"\"\"\n  Field \"deathday\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  deathday: JSON\n  gender: Int\n  \"\"\"\n  Field \"homepage\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  homepage: JSON\n  id: Int\n  imdb_id: String\n  known_for_department: String\n  name: String\n  place_of_birth: String\n  popularity: Float\n  profile_path: String\n}\n\ntype Query {\n  GET_person__person_id_(\n    person_id: String!\n    tmdb_access_token: String!\n  ): GET_person__person_id_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/person/$person_id;\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_search_tv_ResultsEntry {\n  adult: Boolean\n  backdrop_path: String\n  first_air_date: Date\n  genre_ids: [Int]\n  id: Int\n  name: String\n  origin_country: [String]\n  original_language: String\n  original_name: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_search_tv_Root {\n  page: Int\n  results: [GET_search_tv_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_search_tv(query: String, tmdb_access_token: String!): GET_search_tv_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/search/tv\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_tv__tv_id__credits_CastEntry {\n  adult: Boolean\n  character: String\n  credit_id: String\n  gender: Int\n  id: Int\n  known_for_department: String\n  name: String\n  order: Int\n  original_name: String\n  popularity: Float\n  profile_path: String\n}\n\ntype GET_tv__tv_id__credits_CrewEntry {\n  adult: Boolean\n  credit_id: String\n  department: String\n  gender: Int\n  id: Int\n  job: String\n  known_for_department: String\n  name: String\n  original_name: String\n  popularity: Float\n  profile_path: String\n}\n\ntype GET_tv__tv_id__credits_Root {\n  cast: [GET_tv__tv_id__credits_CastEntry]\n  crew: [GET_tv__tv_id__credits_CrewEntry]\n  id: Int\n}\n\ntype Query {\n  GET_tv__tv_id__credits(\n    tmdb_access_token: String!\n    tv_id: String!\n  ): GET_tv__tv_id__credits_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/tv/$tv_id;/credits\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\n", "utterance": "When is the lead actor of The Mandalorian born?"}
{"domain": "tmdb", "input": "Function Signatures:\n\n[{\"name\": \"GET_search_tv\", \"description\": \"Search for a TV show.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"page\": {\"type\": \"integer\", \"description\": \"page\"}, \"query\": {\"type\": \"string\", \"description\": \"query\"}, \"include_adult\": {\"type\": \"boolean\", \"description\": \"include adult\"}, \"first_air_date_year\": {\"type\": \"integer\", \"description\": \"first air date year\"}}, \"required\": [\"query\"]}}, {\"name\": \"GET_tv__tv_id__season__season_number__episode__episode_number__images\", \"description\": \"Get the images that belong to a TV episode.\\n\\nQuerying images with a `language` parameter will filter the results. If you want to include a fallback language (especially useful for backdrops) you can use the `include_image_language` parameter. This should be a comma seperated value like so: `include_image_language=en,null`.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"tv_id\": {\"type\": \"integer\", \"description\": \"tv id\"}, \"season_number\": {\"type\": \"integer\", \"description\": \"season number\"}, \"episode_number\": {\"type\": \"integer\", \"description\": \"episode number\"}}, \"required\": [\"tv_id\", \"season_number\", \"episode_number\"]}}]\n\nGraphQL schema:\n\ntype GET_search_tv_ResultsEntry {\n  adult: Boolean\n  backdrop_path: String\n  first_air_date: String\n  genre_ids: [Int]\n  id: Int\n  name: String\n  origin_country: [String]\n  original_language: String\n  original_name: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_search_tv_Root {\n  page: Int\n  results: [GET_search_tv_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_search_tv(query: String, tmdb_access_token: String!): GET_search_tv_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/search/tv\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_tv__tv_id__season__season_number__episode__episode_number__images_Root {\n  id: Int\n  stills: [JSON]\n}\n\ntype Query {\n  GET_tv__tv_id__season__season_number__episode__episode_number__images(\n    episode_number: String!\n    season_number: String!\n    tmdb_access_token: String!\n    tv_id: String!\n  ): GET_tv__tv_id__season__season_number__episode__episode_number__images_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/tv/$tv_id;/season/$season_number;/episode/$episode_number;/images\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\n\nUtterance: give me a photo belong to the second episode of the first season of the Witcher", "output": "response_obj = GET_search_tv(query)\nGET_tv__tv_id__season__season_number__episode__episode_number__images(tv_id=response_obj.results[0].id, season_number=1, episode_number=2)\n", "function_specs": "[{\"name\": \"GET_search_tv\", \"description\": \"Search for a TV show.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"page\": {\"type\": \"integer\", \"description\": \"page\"}, \"query\": {\"type\": \"string\", \"description\": \"query\"}, \"include_adult\": {\"type\": \"boolean\", \"description\": \"include adult\"}, \"first_air_date_year\": {\"type\": \"integer\", \"description\": \"first air date year\"}}, \"required\": [\"query\"]}}, {\"name\": \"GET_tv__tv_id__season__season_number__episode__episode_number__images\", \"description\": \"Get the images that belong to a TV episode.\\n\\nQuerying images with a `language` parameter will filter the results. If you want to include a fallback language (especially useful for backdrops) you can use the `include_image_language` parameter. This should be a comma seperated value like so: `include_image_language=en,null`.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"tv_id\": {\"type\": \"integer\", \"description\": \"tv id\"}, \"season_number\": {\"type\": \"integer\", \"description\": \"season number\"}, \"episode_number\": {\"type\": \"integer\", \"description\": \"episode number\"}}, \"required\": [\"tv_id\", \"season_number\", \"episode_number\"]}}]", "GraphQL_schema": "type GET_search_tv_ResultsEntry {\n  adult: Boolean\n  backdrop_path: String\n  first_air_date: String\n  genre_ids: [Int]\n  id: Int\n  name: String\n  origin_country: [String]\n  original_language: String\n  original_name: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_search_tv_Root {\n  page: Int\n  results: [GET_search_tv_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_search_tv(query: String, tmdb_access_token: String!): GET_search_tv_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/search/tv\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_tv__tv_id__season__season_number__episode__episode_number__images_Root {\n  id: Int\n  stills: [JSON]\n}\n\ntype Query {\n  GET_tv__tv_id__season__season_number__episode__episode_number__images(\n    episode_number: String!\n    season_number: String!\n    tmdb_access_token: String!\n    tv_id: String!\n  ): GET_tv__tv_id__season__season_number__episode__episode_number__images_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/tv/$tv_id;/season/$season_number;/episode/$episode_number;/images\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\n", "utterance": "give me a photo belong to the second episode of the first season of the Witcher"}
{"domain": "tmdb", "input": "Function Signatures:\n\n[{\"name\": \"GET_search_collection\", \"description\": \"Search for collections.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"query\": {\"type\": \"string\", \"description\": \"query\"}, \"page\": {\"type\": \"integer\", \"description\": \"page\"}}, \"required\": [\"query\"]}}, {\"name\": \"GET_collection__collection_id_\", \"description\": \"Get collection details by id.\\n\\n#### Recent Changes\\n\\n| **Date** | **Change** |\\n| - | - |\\n| March 16, 2018 | Added the [translations](#endpoint:bhcsxEgRvyk3N7FnD) method. |\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"collection_id\": {\"type\": \"integer\", \"description\": \"collection id\"}}, \"required\": [\"collection_id\"]}}, {\"name\": \"GET_movie__movie_id__keywords\", \"description\": \"Get the keywords that have been added to a movie.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"movie_id\": {\"type\": \"integer\", \"description\": \"movie id\"}}, \"required\": [\"movie_id\"]}}]\n\nGraphQL schema:\n\ntype GET_movie__movie_id__keywords_KeywordsEntry {\n  id: Int\n  name: String\n}\n\ntype GET_movie__movie_id__keywords_Root {\n  id: Int\n  keywords: [GET_movie__movie_id__keywords_KeywordsEntry]\n}\n\ntype Query {\n  GET_movie__movie_id__keywords(\n    movie_id: String!\n    tmdb_access_token: String!\n  ): GET_movie__movie_id__keywords_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/movie/$movie_id;/keywords\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_search_collection_ResultsEntry {\n  adult: Boolean\n  backdrop_path: String\n  id: Int\n  name: String\n  original_language: String\n  original_name: String\n  overview: String\n  poster_path: String\n}\n\ntype GET_search_collection_Root {\n  page: Int\n  results: [GET_search_collection_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_search_collection(\n    query: String\n    tmdb_access_token: String!\n  ): GET_search_collection_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/search/collection\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_collection__collection_id_PartsEntry {\n  adult: Boolean\n  backdrop_path: String\n  genre_ids: [Int]\n  id: Int\n  media_type: String\n  original_language: String\n  original_title: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  release_date: Date\n  title: String\n  video: Boolean\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_collection__collection_id_Root {\n  backdrop_path: String\n  id: Int\n  name: String\n  overview: String\n  parts: [GET_collection__collection_id_PartsEntry]\n  poster_path: String\n}\n\ntype Query {\n  GET_collection__collection_id_(\n    collection_id: String!\n    tmdb_access_token: String!\n  ): GET_collection__collection_id_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/collection/$collection_id;\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\n\nUtterance: What are some keywords for a movie of the collection The Hunger Games?", "output": "response_obj = GET_search_collection(query=\"The Hunger Games\")\nresponse_obj1 = GET_collection__collection_id_(collection_id=response_obj.results[0].id)\nGET_movie__movie_id__keywords(movie_id=response_obj1.parts[0].id)\n", "function_specs": "[{\"name\": \"GET_search_collection\", \"description\": \"Search for collections.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"query\": {\"type\": \"string\", \"description\": \"query\"}, \"page\": {\"type\": \"integer\", \"description\": \"page\"}}, \"required\": [\"query\"]}}, {\"name\": \"GET_collection__collection_id_\", \"description\": \"Get collection details by id.\\n\\n#### Recent Changes\\n\\n| **Date** | **Change** |\\n| - | - |\\n| March 16, 2018 | Added the [translations](#endpoint:bhcsxEgRvyk3N7FnD) method. |\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"collection_id\": {\"type\": \"integer\", \"description\": \"collection id\"}}, \"required\": [\"collection_id\"]}}, {\"name\": \"GET_movie__movie_id__keywords\", \"description\": \"Get the keywords that have been added to a movie.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"movie_id\": {\"type\": \"integer\", \"description\": \"movie id\"}}, \"required\": [\"movie_id\"]}}]", "GraphQL_schema": "type GET_movie__movie_id__keywords_KeywordsEntry {\n  id: Int\n  name: String\n}\n\ntype GET_movie__movie_id__keywords_Root {\n  id: Int\n  keywords: [GET_movie__movie_id__keywords_KeywordsEntry]\n}\n\ntype Query {\n  GET_movie__movie_id__keywords(\n    movie_id: String!\n    tmdb_access_token: String!\n  ): GET_movie__movie_id__keywords_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/movie/$movie_id;/keywords\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_search_collection_ResultsEntry {\n  adult: Boolean\n  backdrop_path: String\n  id: Int\n  name: String\n  original_language: String\n  original_name: String\n  overview: String\n  poster_path: String\n}\n\ntype GET_search_collection_Root {\n  page: Int\n  results: [GET_search_collection_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_search_collection(\n    query: String\n    tmdb_access_token: String!\n  ): GET_search_collection_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/search/collection\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_collection__collection_id_PartsEntry {\n  adult: Boolean\n  backdrop_path: String\n  genre_ids: [Int]\n  id: Int\n  media_type: String\n  original_language: String\n  original_title: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  release_date: Date\n  title: String\n  video: Boolean\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_collection__collection_id_Root {\n  backdrop_path: String\n  id: Int\n  name: String\n  overview: String\n  parts: [GET_collection__collection_id_PartsEntry]\n  poster_path: String\n}\n\ntype Query {\n  GET_collection__collection_id_(\n    collection_id: String!\n    tmdb_access_token: String!\n  ): GET_collection__collection_id_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/collection/$collection_id;\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\n", "utterance": "What are some keywords for a movie of the collection The Hunger Games?"}
{"domain": "tmdb", "input": "Function Signatures:\n\n[{\"name\": \"GET_search_person\", \"description\": \"Search for people.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"query\": {\"type\": \"string\", \"description\": \"query\"}, \"page\": {\"type\": \"integer\", \"description\": \"page\"}, \"include_adult\": {\"type\": \"boolean\", \"description\": \"include adult\"}, \"region\": {\"type\": \"string\", \"description\": \"region\"}}, \"required\": [\"query\"]}}, {\"name\": \"GET_person__person_id__movie_credits\", \"description\": \"Get the movie credits for a person, the results contains various information such as popularity and release date.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"person_id\": {\"type\": \"integer\", \"description\": \"person id\"}}, \"required\": [\"person_id\"]}}]\n\nGraphQL schema:\n\ntype GET_search_person_KnownForEntry {\n  adult: Boolean\n  backdrop_path: String\n  first_air_date: Date\n  genre_ids: [Int]\n  id: Int\n  media_type: String\n  name: String\n  origin_country: [String]\n  original_language: String\n  original_name: String\n  original_title: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  release_date: Date\n  title: String\n  video: Boolean\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_search_person_ResultsEntry {\n  adult: Boolean\n  gender: Int\n  id: Int\n  known_for: [GET_search_person_KnownForEntry]\n  known_for_department: String\n  name: String\n  original_name: String\n  popularity: Float\n  profile_path: String\n}\n\ntype GET_search_person_Root {\n  page: Int\n  results: [GET_search_person_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_search_person(\n    query: String\n    tmdb_access_token: String!\n  ): GET_search_person_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/search/person\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_person__person_id__movie_credits_CastEntry {\n  adult: Boolean\n  backdrop_path: String\n  character: String\n  credit_id: String\n  genre_ids: [Int]\n  id: Int\n  order: Int\n  original_language: String\n  original_title: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  release_date: String\n  title: String\n  video: Boolean\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_person__person_id__movie_credits_CrewEntry {\n  adult: Boolean\n  backdrop_path: String\n  credit_id: String\n  department: String\n  genre_ids: [Int]\n  id: Int\n  job: String\n  original_language: String\n  original_title: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  release_date: String\n  title: String\n  video: Boolean\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_person__person_id__movie_credits_Root {\n  cast: [GET_person__person_id__movie_credits_CastEntry]\n  crew: [GET_person__person_id__movie_credits_CrewEntry]\n  id: Int\n}\n\ntype Query {\n  GET_person__person_id__movie_credits(\n    person_id: String!\n    tmdb_access_token: String!\n  ): GET_person__person_id__movie_credits_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/person/$person_id;/movie_credits\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\n\nUtterance: Who directed more movies, Akira Kurosawa or Spielberg?", "output": "response_obj = GET_search_person(query=\"Akira Kurosawa\")\nGET_person__person_id__movie_credits(person_id=response_obj.results[0].id)\nresponse_obj1 = GET_search_person(query=\"Spielberg\")\nGET_person__person_id__movie_credits(person_id=response_obj1.results[0].id)\n", "function_specs": "[{\"name\": \"GET_search_person\", \"description\": \"Search for people.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"query\": {\"type\": \"string\", \"description\": \"query\"}, \"page\": {\"type\": \"integer\", \"description\": \"page\"}, \"include_adult\": {\"type\": \"boolean\", \"description\": \"include adult\"}, \"region\": {\"type\": \"string\", \"description\": \"region\"}}, \"required\": [\"query\"]}}, {\"name\": \"GET_person__person_id__movie_credits\", \"description\": \"Get the movie credits for a person, the results contains various information such as popularity and release date.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"person_id\": {\"type\": \"integer\", \"description\": \"person id\"}}, \"required\": [\"person_id\"]}}]", "GraphQL_schema": "type GET_search_person_KnownForEntry {\n  adult: Boolean\n  backdrop_path: String\n  first_air_date: Date\n  genre_ids: [Int]\n  id: Int\n  media_type: String\n  name: String\n  origin_country: [String]\n  original_language: String\n  original_name: String\n  original_title: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  release_date: Date\n  title: String\n  video: Boolean\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_search_person_ResultsEntry {\n  adult: Boolean\n  gender: Int\n  id: Int\n  known_for: [GET_search_person_KnownForEntry]\n  known_for_department: String\n  name: String\n  original_name: String\n  popularity: Float\n  profile_path: String\n}\n\ntype GET_search_person_Root {\n  page: Int\n  results: [GET_search_person_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_search_person(\n    query: String\n    tmdb_access_token: String!\n  ): GET_search_person_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/search/person\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_person__person_id__movie_credits_CastEntry {\n  adult: Boolean\n  backdrop_path: String\n  character: String\n  credit_id: String\n  genre_ids: [Int]\n  id: Int\n  order: Int\n  original_language: String\n  original_title: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  release_date: String\n  title: String\n  video: Boolean\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_person__person_id__movie_credits_CrewEntry {\n  adult: Boolean\n  backdrop_path: String\n  credit_id: String\n  department: String\n  genre_ids: [Int]\n  id: Int\n  job: String\n  original_language: String\n  original_title: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  release_date: String\n  title: String\n  video: Boolean\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_person__person_id__movie_credits_Root {\n  cast: [GET_person__person_id__movie_credits_CastEntry]\n  crew: [GET_person__person_id__movie_credits_CrewEntry]\n  id: Int\n}\n\ntype Query {\n  GET_person__person_id__movie_credits(\n    person_id: String!\n    tmdb_access_token: String!\n  ): GET_person__person_id__movie_credits_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/person/$person_id;/movie_credits\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\n", "utterance": "Who directed more movies, Akira Kurosawa or Spielberg?"}
{"domain": "tmdb", "input": "Function Signatures:\n\n[{\"name\": \"GET_search_person\", \"description\": \"Search for people.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"query\": {\"type\": \"string\", \"description\": \"query\"}, \"page\": {\"type\": \"integer\", \"description\": \"page\"}, \"include_adult\": {\"type\": \"boolean\", \"description\": \"include adult\"}, \"region\": {\"type\": \"string\", \"description\": \"region\"}}, \"required\": [\"query\"]}}, {\"name\": \"GET_person__person_id__tv_credits\", \"description\": \"Get the TV show credits for a person.\\n\\nYou can query for some extra details about the credit with the [credit method](#endpoint:xPWdEBLkvCNZSicLN).\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"person_id\": {\"type\": \"integer\", \"description\": \"person id\"}}, \"required\": [\"person_id\"]}}]\n\nGraphQL schema:\n\ntype GET_search_person_KnownForEntry {\n  adult: Boolean\n  backdrop_path: String\n  genre_ids: [Int]\n  id: Int\n  media_type: String\n  original_language: String\n  original_title: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  release_date: Date\n  title: String\n  video: Boolean\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_search_person_ResultsEntry {\n  adult: Boolean\n  gender: Int\n  id: Int\n  known_for: [GET_search_person_KnownForEntry]\n  known_for_department: String\n  name: String\n  original_name: String\n  popularity: Float\n  profile_path: String\n}\n\ntype GET_search_person_Root {\n  page: Int\n  results: [GET_search_person_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_search_person(\n    query: String\n    tmdb_access_token: String!\n  ): GET_search_person_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/search/person\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_person__person_id__tv_credits_CastEntry {\n  adult: Boolean\n  backdrop_path: String\n  character: String\n  credit_id: String\n  episode_count: Int\n  first_air_date: Date\n  genre_ids: [Int]\n  id: Int\n  name: String\n  origin_country: [String]\n  original_language: String\n  original_name: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_person__person_id__tv_credits_CrewEntry {\n  adult: Boolean\n  backdrop_path: String\n  credit_id: String\n  department: String\n  episode_count: Int\n  first_air_date: String\n  genre_ids: [Int]\n  id: Int\n  job: String\n  name: String\n  origin_country: [String]\n  original_language: String\n  original_name: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_person__person_id__tv_credits_Root {\n  cast: [GET_person__person_id__tv_credits_CastEntry]\n  crew: [GET_person__person_id__tv_credits_CrewEntry]\n  id: Int\n}\n\ntype Query {\n  GET_person__person_id__tv_credits(\n    person_id: String!\n    tmdb_access_token: String!\n  ): GET_person__person_id__tv_credits_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/person/$person_id;/tv_credits\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\n\nUtterance: tell me a TV show recently directed by Catherine Hardwicke", "output": "response_obj = GET_search_person(query=\"Catherine Hardwicke\")\nGET_person__person_id__tv_credits(person_id=response_obj.results[0].id)\n", "function_specs": "[{\"name\": \"GET_search_person\", \"description\": \"Search for people.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"query\": {\"type\": \"string\", \"description\": \"query\"}, \"page\": {\"type\": \"integer\", \"description\": \"page\"}, \"include_adult\": {\"type\": \"boolean\", \"description\": \"include adult\"}, \"region\": {\"type\": \"string\", \"description\": \"region\"}}, \"required\": [\"query\"]}}, {\"name\": \"GET_person__person_id__tv_credits\", \"description\": \"Get the TV show credits for a person.\\n\\nYou can query for some extra details about the credit with the [credit method](#endpoint:xPWdEBLkvCNZSicLN).\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"person_id\": {\"type\": \"integer\", \"description\": \"person id\"}}, \"required\": [\"person_id\"]}}]", "GraphQL_schema": "type GET_search_person_KnownForEntry {\n  adult: Boolean\n  backdrop_path: String\n  genre_ids: [Int]\n  id: Int\n  media_type: String\n  original_language: String\n  original_title: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  release_date: Date\n  title: String\n  video: Boolean\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_search_person_ResultsEntry {\n  adult: Boolean\n  gender: Int\n  id: Int\n  known_for: [GET_search_person_KnownForEntry]\n  known_for_department: String\n  name: String\n  original_name: String\n  popularity: Float\n  profile_path: String\n}\n\ntype GET_search_person_Root {\n  page: Int\n  results: [GET_search_person_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_search_person(\n    query: String\n    tmdb_access_token: String!\n  ): GET_search_person_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/search/person\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_person__person_id__tv_credits_CastEntry {\n  adult: Boolean\n  backdrop_path: String\n  character: String\n  credit_id: String\n  episode_count: Int\n  first_air_date: Date\n  genre_ids: [Int]\n  id: Int\n  name: String\n  origin_country: [String]\n  original_language: String\n  original_name: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_person__person_id__tv_credits_CrewEntry {\n  adult: Boolean\n  backdrop_path: String\n  credit_id: String\n  department: String\n  episode_count: Int\n  first_air_date: String\n  genre_ids: [Int]\n  id: Int\n  job: String\n  name: String\n  origin_country: [String]\n  original_language: String\n  original_name: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_person__person_id__tv_credits_Root {\n  cast: [GET_person__person_id__tv_credits_CastEntry]\n  crew: [GET_person__person_id__tv_credits_CrewEntry]\n  id: Int\n}\n\ntype Query {\n  GET_person__person_id__tv_credits(\n    person_id: String!\n    tmdb_access_token: String!\n  ): GET_person__person_id__tv_credits_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/person/$person_id;/tv_credits\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\n", "utterance": "tell me a TV show recently directed by Catherine Hardwicke"}
{"domain": "tmdb", "input": "Function Signatures:\n\n[{\"name\": \"GET_tv_on_the_air\", \"description\": \"Get a list of shows that are currently on the air.\\n\\nThis query looks for any TV show that has an episode with an air date in the next 7 days.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"page\": {\"type\": \"integer\", \"description\": \"page\"}}, \"required\": []}}]\n\nGraphQL schema:\n\ntype GET_tv_on_the_air_ResultsEntry {\n  adult: Boolean\n  backdrop_path: String\n  first_air_date: Date\n  genre_ids: [Int]\n  id: Int\n  name: String\n  origin_country: [String]\n  original_language: String\n  original_name: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_tv_on_the_air_Root {\n  page: Int\n  results: [GET_tv_on_the_air_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_tv_on_the_air(tmdb_access_token: String!): GET_tv_on_the_air_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/tv/on_the_air\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\n\nUtterance: Give me a show that is currently on the air", "output": "GET_tv_on_the_air()\n", "function_specs": "[{\"name\": \"GET_tv_on_the_air\", \"description\": \"Get a list of shows that are currently on the air.\\n\\nThis query looks for any TV show that has an episode with an air date in the next 7 days.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"page\": {\"type\": \"integer\", \"description\": \"page\"}}, \"required\": []}}]", "GraphQL_schema": "type GET_tv_on_the_air_ResultsEntry {\n  adult: Boolean\n  backdrop_path: String\n  first_air_date: Date\n  genre_ids: [Int]\n  id: Int\n  name: String\n  origin_country: [String]\n  original_language: String\n  original_name: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_tv_on_the_air_Root {\n  page: Int\n  results: [GET_tv_on_the_air_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_tv_on_the_air(tmdb_access_token: String!): GET_tv_on_the_air_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/tv/on_the_air\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\n", "utterance": "Give me a show that is currently on the air"}
{"domain": "tmdb", "input": "Function Signatures:\n\n[{\"name\": \"GET_search_person\", \"description\": \"Search for people.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"query\": {\"type\": \"string\", \"description\": \"query\"}, \"page\": {\"type\": \"integer\", \"description\": \"page\"}, \"include_adult\": {\"type\": \"boolean\", \"description\": \"include adult\"}, \"region\": {\"type\": \"string\", \"description\": \"region\"}}, \"required\": [\"query\"]}}, {\"name\": \"GET_person__person_id__movie_credits\", \"description\": \"Get the movie credits for a person, the results contains various information such as popularity and release date.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"person_id\": {\"type\": \"integer\", \"description\": \"person id\"}}, \"required\": [\"person_id\"]}}]\n\nGraphQL schema:\n\ntype GET_search_person_KnownForEntry {\n  adult: Boolean\n  backdrop_path: String\n  genre_ids: [Int]\n  id: Int\n  media_type: String\n  original_language: String\n  original_title: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  release_date: Date\n  title: String\n  video: Boolean\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_search_person_ResultsEntry {\n  adult: Boolean\n  gender: Int\n  id: Int\n  known_for: [GET_search_person_KnownForEntry]\n  known_for_department: String\n  name: String\n  original_name: String\n  popularity: Float\n  profile_path: String\n}\n\ntype GET_search_person_Root {\n  page: Int\n  results: [GET_search_person_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_search_person(\n    query: String\n    tmdb_access_token: String!\n  ): GET_search_person_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/search/person\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_person__person_id__movie_credits_CastEntry {\n  adult: Boolean\n  backdrop_path: String\n  character: String\n  credit_id: String\n  genre_ids: [Int]\n  id: Int\n  order: Int\n  original_language: String\n  original_title: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  release_date: String\n  title: String\n  video: Boolean\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_person__person_id__movie_credits_CrewEntry {\n  adult: Boolean\n  backdrop_path: String\n  credit_id: String\n  department: String\n  genre_ids: [Int]\n  id: Int\n  job: String\n  original_language: String\n  original_title: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  release_date: String\n  title: String\n  video: Boolean\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_person__person_id__movie_credits_Root {\n  cast: [GET_person__person_id__movie_credits_CastEntry]\n  crew: [GET_person__person_id__movie_credits_CrewEntry]\n  id: Int\n}\n\ntype Query {\n  GET_person__person_id__movie_credits(\n    person_id: String!\n    tmdb_access_token: String!\n  ): GET_person__person_id__movie_credits_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/person/$person_id;/movie_credits\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\n\nUtterance: tell me the highest rated movie directed by Martin Scorsese", "output": "response_obj = GET_search_person(query=\"Martin Scorsese\")\nGET_person__person_id__movie_credits(person_id=response_obj.results[0].id)\n", "function_specs": "[{\"name\": \"GET_search_person\", \"description\": \"Search for people.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"query\": {\"type\": \"string\", \"description\": \"query\"}, \"page\": {\"type\": \"integer\", \"description\": \"page\"}, \"include_adult\": {\"type\": \"boolean\", \"description\": \"include adult\"}, \"region\": {\"type\": \"string\", \"description\": \"region\"}}, \"required\": [\"query\"]}}, {\"name\": \"GET_person__person_id__movie_credits\", \"description\": \"Get the movie credits for a person, the results contains various information such as popularity and release date.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"person_id\": {\"type\": \"integer\", \"description\": \"person id\"}}, \"required\": [\"person_id\"]}}]", "GraphQL_schema": "type GET_search_person_KnownForEntry {\n  adult: Boolean\n  backdrop_path: String\n  genre_ids: [Int]\n  id: Int\n  media_type: String\n  original_language: String\n  original_title: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  release_date: Date\n  title: String\n  video: Boolean\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_search_person_ResultsEntry {\n  adult: Boolean\n  gender: Int\n  id: Int\n  known_for: [GET_search_person_KnownForEntry]\n  known_for_department: String\n  name: String\n  original_name: String\n  popularity: Float\n  profile_path: String\n}\n\ntype GET_search_person_Root {\n  page: Int\n  results: [GET_search_person_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_search_person(\n    query: String\n    tmdb_access_token: String!\n  ): GET_search_person_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/search/person\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_person__person_id__movie_credits_CastEntry {\n  adult: Boolean\n  backdrop_path: String\n  character: String\n  credit_id: String\n  genre_ids: [Int]\n  id: Int\n  order: Int\n  original_language: String\n  original_title: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  release_date: String\n  title: String\n  video: Boolean\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_person__person_id__movie_credits_CrewEntry {\n  adult: Boolean\n  backdrop_path: String\n  credit_id: String\n  department: String\n  genre_ids: [Int]\n  id: Int\n  job: String\n  original_language: String\n  original_title: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  release_date: String\n  title: String\n  video: Boolean\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_person__person_id__movie_credits_Root {\n  cast: [GET_person__person_id__movie_credits_CastEntry]\n  crew: [GET_person__person_id__movie_credits_CrewEntry]\n  id: Int\n}\n\ntype Query {\n  GET_person__person_id__movie_credits(\n    person_id: String!\n    tmdb_access_token: String!\n  ): GET_person__person_id__movie_credits_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/person/$person_id;/movie_credits\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\n", "utterance": "tell me the highest rated movie directed by Martin Scorsese"}
{"domain": "tmdb", "input": "Function Signatures:\n\n[{\"name\": \"GET_discover_movie\", \"description\": \"Discover movies by different types of data like average rating, number of votes, genres and certifications. You can get a valid list of certifications from the [certifications list](#endpoint:faFKjuKG2HnwexAWM) method.\\n\\nDiscover also supports a nice list of sort options. See below for all of the available options.\\n\\nPlease note, when using `certification` \\\\ `certification.lte` you must also specify `certification_country`. These two parameters work together in order to filter the results. You can only filter results with the countries we have added to our [certifications list](#endpoint:faFKjuKG2HnwexAWM).\\n\\nIf you specify the `region` parameter, the regional release date will be used instead of the primary release date. The date returned will be the first date based on your query (ie. if a `with_release_type` is specified). It's important to note the order of the release types that are used. Specifying \\\"2|3\\\" would return the limited theatrical release date as opposed to \\\"3|2\\\" which would return the theatrical date.\\n\\nAlso note that a number of filters support being comma (`,`) or pipe (`|`) separated. Comma's are treated like an `AND` and query while pipe's are an `OR`. \\n\\nSome examples of what can be done with discover can be found [here](https://www.themoviedb.org/documentation/api/discover).\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"region\": {\"type\": \"string\", \"description\": \"region\"}, \"sort_by\": {\"type\": \"string\", \"description\": \"sort by\\nValid values: ,popularity.asc,popularity.desc,release_date.asc,release_date.desc,revenue.asc,revenue.desc,primary_release_date.asc,primary_release_date.desc,original_title.asc,original_title.desc,vote_average.asc,vote_average.desc,vote_count.asc,vote_count.desc\"}, \"certification_country\": {\"type\": \"string\", \"description\": \"certification country\"}, \"certification\": {\"type\": \"string\", \"description\": \"certification\"}, \"certification.lte\": {\"type\": \"string\", \"description\": \"certification.lte\"}, \"certification.gte\": {\"type\": \"string\", \"description\": \"certification.gte\"}, \"include_adult\": {\"type\": \"boolean\", \"description\": \"include adult\"}, \"include_video\": {\"type\": \"boolean\", \"description\": \"include video\"}, \"page\": {\"type\": \"integer\", \"description\": \"page\"}, \"primary_release_year\": {\"type\": \"integer\", \"description\": \"primary release year\"}, \"primary_release_date.gte\": {\"type\": \"string\", \"description\": \"primary release date.gte\"}, \"primary_release_date.lte\": {\"type\": \"string\", \"description\": \"primary release date.lte\"}, \"release_date.gte\": {\"type\": \"string\", \"description\": \"release date.gte\"}, \"release_date.lte\": {\"type\": \"string\", \"description\": \"release date.lte\"}, \"with_release_type\": {\"type\": \"integer\", \"description\": \"with release type\"}, \"year\": {\"type\": \"integer\", \"description\": \"year\"}, \"vote_count.gte\": {\"type\": \"integer\", \"description\": \"vote count.gte\"}, \"vote_count.lte\": {\"type\": \"integer\", \"description\": \"vote count.lte\"}, \"vote_average.gte\": {\"type\": \"number\", \"description\": \"vote average.gte\"}, \"vote_average.lte\": {\"type\": \"number\", \"description\": \"vote average.lte\"}, \"with_cast\": {\"type\": \"string\", \"description\": \"with cast\"}, \"with_crew\": {\"type\": \"string\", \"description\": \"with crew\"}, \"with_people\": {\"type\": \"string\", \"description\": \"with people\"}, \"with_companies\": {\"type\": \"string\", \"description\": \"with companies\"}, \"with_genres\": {\"type\": \"string\", \"description\": \"with genres\"}, \"without_genres\": {\"type\": \"string\", \"description\": \"without genres\"}, \"with_keywords\": {\"type\": \"string\", \"description\": \"with keywords\"}, \"without_keywords\": {\"type\": \"string\", \"description\": \"without keywords\"}, \"with_runtime.gte\": {\"type\": \"integer\", \"description\": \"with runtime.gte\"}, \"with_runtime.lte\": {\"type\": \"integer\", \"description\": \"with runtime.lte\"}, \"with_original_language\": {\"type\": \"string\", \"description\": \"with original language\"}, \"with_watch_providers\": {\"type\": \"string\", \"description\": \"with watch providers\"}, \"watch_region\": {\"type\": \"string\", \"description\": \"watch region\"}, \"with_watch_monetization_types\": {\"type\": \"string\", \"description\": \"with watch monetization types\\nValid values: flatrate,free,ads,rent,buy\"}, \"without_companies\": {\"type\": \"string\", \"description\": \"without companies\"}}, \"required\": []}}]\n\nGraphQL schema:\n\ntype GET_discover_movie_ResultsEntry {\n  adult: Boolean\n  backdrop_path: String\n  genre_ids: [Int]\n  id: Int\n  original_language: String\n  original_title: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  release_date: Date\n  title: String\n  video: Boolean\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_discover_movie_Root {\n  page: Int\n  results: [GET_discover_movie_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_discover_movie(tmdb_access_token: String!): GET_discover_movie_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/discover/movie\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\n\nUtterance: Show me some English movies rating no less than 7.0 and no earlier than 2021", "output": "GET_discover_movie()\n", "function_specs": "[{\"name\": \"GET_discover_movie\", \"description\": \"Discover movies by different types of data like average rating, number of votes, genres and certifications. You can get a valid list of certifications from the [certifications list](#endpoint:faFKjuKG2HnwexAWM) method.\\n\\nDiscover also supports a nice list of sort options. See below for all of the available options.\\n\\nPlease note, when using `certification` \\\\ `certification.lte` you must also specify `certification_country`. These two parameters work together in order to filter the results. You can only filter results with the countries we have added to our [certifications list](#endpoint:faFKjuKG2HnwexAWM).\\n\\nIf you specify the `region` parameter, the regional release date will be used instead of the primary release date. The date returned will be the first date based on your query (ie. if a `with_release_type` is specified). It's important to note the order of the release types that are used. Specifying \\\"2|3\\\" would return the limited theatrical release date as opposed to \\\"3|2\\\" which would return the theatrical date.\\n\\nAlso note that a number of filters support being comma (`,`) or pipe (`|`) separated. Comma's are treated like an `AND` and query while pipe's are an `OR`. \\n\\nSome examples of what can be done with discover can be found [here](https://www.themoviedb.org/documentation/api/discover).\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"region\": {\"type\": \"string\", \"description\": \"region\"}, \"sort_by\": {\"type\": \"string\", \"description\": \"sort by\\nValid values: ,popularity.asc,popularity.desc,release_date.asc,release_date.desc,revenue.asc,revenue.desc,primary_release_date.asc,primary_release_date.desc,original_title.asc,original_title.desc,vote_average.asc,vote_average.desc,vote_count.asc,vote_count.desc\"}, \"certification_country\": {\"type\": \"string\", \"description\": \"certification country\"}, \"certification\": {\"type\": \"string\", \"description\": \"certification\"}, \"certification.lte\": {\"type\": \"string\", \"description\": \"certification.lte\"}, \"certification.gte\": {\"type\": \"string\", \"description\": \"certification.gte\"}, \"include_adult\": {\"type\": \"boolean\", \"description\": \"include adult\"}, \"include_video\": {\"type\": \"boolean\", \"description\": \"include video\"}, \"page\": {\"type\": \"integer\", \"description\": \"page\"}, \"primary_release_year\": {\"type\": \"integer\", \"description\": \"primary release year\"}, \"primary_release_date.gte\": {\"type\": \"string\", \"description\": \"primary release date.gte\"}, \"primary_release_date.lte\": {\"type\": \"string\", \"description\": \"primary release date.lte\"}, \"release_date.gte\": {\"type\": \"string\", \"description\": \"release date.gte\"}, \"release_date.lte\": {\"type\": \"string\", \"description\": \"release date.lte\"}, \"with_release_type\": {\"type\": \"integer\", \"description\": \"with release type\"}, \"year\": {\"type\": \"integer\", \"description\": \"year\"}, \"vote_count.gte\": {\"type\": \"integer\", \"description\": \"vote count.gte\"}, \"vote_count.lte\": {\"type\": \"integer\", \"description\": \"vote count.lte\"}, \"vote_average.gte\": {\"type\": \"number\", \"description\": \"vote average.gte\"}, \"vote_average.lte\": {\"type\": \"number\", \"description\": \"vote average.lte\"}, \"with_cast\": {\"type\": \"string\", \"description\": \"with cast\"}, \"with_crew\": {\"type\": \"string\", \"description\": \"with crew\"}, \"with_people\": {\"type\": \"string\", \"description\": \"with people\"}, \"with_companies\": {\"type\": \"string\", \"description\": \"with companies\"}, \"with_genres\": {\"type\": \"string\", \"description\": \"with genres\"}, \"without_genres\": {\"type\": \"string\", \"description\": \"without genres\"}, \"with_keywords\": {\"type\": \"string\", \"description\": \"with keywords\"}, \"without_keywords\": {\"type\": \"string\", \"description\": \"without keywords\"}, \"with_runtime.gte\": {\"type\": \"integer\", \"description\": \"with runtime.gte\"}, \"with_runtime.lte\": {\"type\": \"integer\", \"description\": \"with runtime.lte\"}, \"with_original_language\": {\"type\": \"string\", \"description\": \"with original language\"}, \"with_watch_providers\": {\"type\": \"string\", \"description\": \"with watch providers\"}, \"watch_region\": {\"type\": \"string\", \"description\": \"watch region\"}, \"with_watch_monetization_types\": {\"type\": \"string\", \"description\": \"with watch monetization types\\nValid values: flatrate,free,ads,rent,buy\"}, \"without_companies\": {\"type\": \"string\", \"description\": \"without companies\"}}, \"required\": []}}]", "GraphQL_schema": "type GET_discover_movie_ResultsEntry {\n  adult: Boolean\n  backdrop_path: String\n  genre_ids: [Int]\n  id: Int\n  original_language: String\n  original_title: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  release_date: Date\n  title: String\n  video: Boolean\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_discover_movie_Root {\n  page: Int\n  results: [GET_discover_movie_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_discover_movie(tmdb_access_token: String!): GET_discover_movie_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/discover/movie\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\n", "utterance": "Show me some English movies rating no less than 7.0 and no earlier than 2021"}
{"domain": "tmdb", "input": "Function Signatures:\n\n[{\"name\": \"GET_search_tv\", \"description\": \"Search for a TV show.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"page\": {\"type\": \"integer\", \"description\": \"page\"}, \"query\": {\"type\": \"string\", \"description\": \"query\"}, \"include_adult\": {\"type\": \"boolean\", \"description\": \"include adult\"}, \"first_air_date_year\": {\"type\": \"integer\", \"description\": \"first air date year\"}}, \"required\": [\"query\"]}}, {\"name\": \"GET_tv__tv_id__season__season_number__images\", \"description\": \"Get the images that belong to a TV season.\\n\\nQuerying images with a `language` parameter will filter the results. If you want to include a fallback language (especially useful for backdrops) you can use the `include_image_language` parameter. This should be a comma seperated value like so: `include_image_language=en,null`.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"tv_id\": {\"type\": \"integer\", \"description\": \"tv id\"}, \"season_number\": {\"type\": \"integer\", \"description\": \"season number\"}}, \"required\": [\"tv_id\", \"season_number\"]}}]\n\nGraphQL schema:\n\ntype GET_search_tv_ResultsEntry {\n  adult: Boolean\n  backdrop_path: String\n  first_air_date: String\n  genre_ids: [Int]\n  id: Int\n  name: String\n  origin_country: [String]\n  original_language: String\n  original_name: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_search_tv_Root {\n  page: Int\n  results: [GET_search_tv_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_search_tv(query: String, tmdb_access_token: String!): GET_search_tv_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/search/tv\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_tv__tv_id__season__season_number__images_PostersEntry {\n  aspect_ratio: Float\n  file_path: String\n  height: Int\n  iso_639_1: String\n  vote_average: Float\n  vote_count: Int\n  width: Int\n}\n\ntype GET_tv__tv_id__season__season_number__images_Root {\n  id: Int\n  posters: [GET_tv__tv_id__season__season_number__images_PostersEntry]\n}\n\ntype Query {\n  GET_tv__tv_id__season__season_number__images(\n    season_number: String!\n    tmdb_access_token: String!\n    tv_id: String!\n  ): GET_tv__tv_id__season__season_number__images_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/tv/$tv_id;/season/$season_number;/images\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\n\nUtterance: give me a poster of the second season of Big Bang Theory", "output": "response_obj = GET_search_tv(query=\"Big Bang Theory\")\nGET_tv__tv_id__season__season_number__images(tv_id=response_obj.results[0].id, season_number=2)\n", "function_specs": "[{\"name\": \"GET_search_tv\", \"description\": \"Search for a TV show.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"page\": {\"type\": \"integer\", \"description\": \"page\"}, \"query\": {\"type\": \"string\", \"description\": \"query\"}, \"include_adult\": {\"type\": \"boolean\", \"description\": \"include adult\"}, \"first_air_date_year\": {\"type\": \"integer\", \"description\": \"first air date year\"}}, \"required\": [\"query\"]}}, {\"name\": \"GET_tv__tv_id__season__season_number__images\", \"description\": \"Get the images that belong to a TV season.\\n\\nQuerying images with a `language` parameter will filter the results. If you want to include a fallback language (especially useful for backdrops) you can use the `include_image_language` parameter. This should be a comma seperated value like so: `include_image_language=en,null`.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"tv_id\": {\"type\": \"integer\", \"description\": \"tv id\"}, \"season_number\": {\"type\": \"integer\", \"description\": \"season number\"}}, \"required\": [\"tv_id\", \"season_number\"]}}]", "GraphQL_schema": "type GET_search_tv_ResultsEntry {\n  adult: Boolean\n  backdrop_path: String\n  first_air_date: String\n  genre_ids: [Int]\n  id: Int\n  name: String\n  origin_country: [String]\n  original_language: String\n  original_name: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_search_tv_Root {\n  page: Int\n  results: [GET_search_tv_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_search_tv(query: String, tmdb_access_token: String!): GET_search_tv_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/search/tv\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_tv__tv_id__season__season_number__images_PostersEntry {\n  aspect_ratio: Float\n  file_path: String\n  height: Int\n  iso_639_1: String\n  vote_average: Float\n  vote_count: Int\n  width: Int\n}\n\ntype GET_tv__tv_id__season__season_number__images_Root {\n  id: Int\n  posters: [GET_tv__tv_id__season__season_number__images_PostersEntry]\n}\n\ntype Query {\n  GET_tv__tv_id__season__season_number__images(\n    season_number: String!\n    tmdb_access_token: String!\n    tv_id: String!\n  ): GET_tv__tv_id__season__season_number__images_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/tv/$tv_id;/season/$season_number;/images\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\n", "utterance": "give me a poster of the second season of Big Bang Theory"}
{"domain": "tmdb", "input": "Function Signatures:\n\n[{\"name\": \"GET_search_tv\", \"description\": \"Search for a TV show.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"page\": {\"type\": \"integer\", \"description\": \"page\"}, \"query\": {\"type\": \"string\", \"description\": \"query\"}, \"include_adult\": {\"type\": \"boolean\", \"description\": \"include adult\"}, \"first_air_date_year\": {\"type\": \"integer\", \"description\": \"first air date year\"}}, \"required\": [\"query\"]}}, {\"name\": \"GET_tv__tv_id_\", \"description\": \"Get the primary TV show details by id.\\n\\nSupports `append_to_response`. Read more about this [here](#docTextSection:JdZq8ctmcxNqyLQjp).\\n\\n#### Recent Changes\\n\\n| **Date** | **Change** |\\n| - | - |\\n| July 17, 2018 | We now return `last_episode_to_air` and `next_episode_to_air` fields. |\\n| March 12, 2018 | Networks return proper logos and we introduced SVG support. |\\n| March 8, 2018 | The `seasons` field now returns the translated names and overviews. |\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"tv_id\": {\"type\": \"integer\", \"description\": \"tv id\"}}, \"required\": [\"tv_id\"]}}, {\"name\": \"GET_network__network_id__images\", \"description\": \"Get the TV network logos by id.\\n\\nThere are two image formats that are supported for networks, PNG's and SVG's. You can see which type the original file is by looking at the `file_type` field. We prefer SVG's as they are resolution independent and as such, the width and height are only there to reflect the original asset that was uploaded. An SVG can be scaled properly beyond those dimensions if you call them as a PNG.\\n\\nFor more information about how SVG's and PNG's can be used, take a read through [this document](#docTextSection:mXP9B2uzoDJFguDZv).\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"network_id\": {\"type\": \"integer\", \"description\": \"network id\"}}, \"required\": [\"network_id\"]}}]\n\nGraphQL schema:\n\ntype GET_network__network_id__images_LogosEntry {\n  aspect_ratio: Float\n  file_path: String\n  file_type: String\n  height: Int\n  id: String\n  vote_average: Float\n  vote_count: Int\n  width: Int\n}\n\ntype GET_network__network_id__images_Root {\n  id: Int\n  logos: [GET_network__network_id__images_LogosEntry]\n}\n\ntype Query {\n  GET_network__network_id__images(\n    network_id: String!\n    tmdb_access_token: String!\n  ): GET_network__network_id__images_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/network/$network_id;/images\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_search_tv_ResultsEntry {\n  adult: Boolean\n  backdrop_path: String\n  first_air_date: String\n  genre_ids: [Int]\n  id: Int\n  name: String\n  origin_country: [String]\n  original_language: String\n  original_name: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_search_tv_Root {\n  page: Int\n  results: [GET_search_tv_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_search_tv(query: String, tmdb_access_token: String!): GET_search_tv_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/search/tv\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_tv__tv_id_CreatedByEntry {\n  credit_id: String\n  gender: Int\n  id: Int\n  name: String\n  original_name: String\n  profile_path: String\n}\n\ntype GET_tv__tv_id_GenresEntry {\n  id: Int\n  name: String\n}\n\ntype GET_tv__tv_id_LastEpisodeToAir {\n  air_date: Date\n  episode_number: Int\n  episode_type: String\n  id: Int\n  name: String\n  overview: String\n  production_code: String\n  runtime: Int\n  season_number: Int\n  show_id: Int\n  still_path: String\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_tv__tv_id_NetworksEntry {\n  id: Int\n  logo_path: String\n  name: String\n  origin_country: String\n}\n\ntype GET_tv__tv_id_ProductionCompaniesEntry {\n  id: Int\n  logo_path: String\n  name: String\n  origin_country: String\n}\n\ntype GET_tv__tv_id_ProductionCountriesEntry {\n  iso_3166_1: String\n  name: String\n}\n\ntype GET_tv__tv_id_Root {\n  adult: Boolean\n  backdrop_path: String\n  created_by: [GET_tv__tv_id_CreatedByEntry]\n  episode_run_time: [Int]\n  first_air_date: Date\n  genres: [GET_tv__tv_id_GenresEntry]\n  homepage: String\n  id: Int\n  in_production: Boolean\n  languages: [String]\n  last_air_date: Date\n  last_episode_to_air: GET_tv__tv_id_LastEpisodeToAir\n  name: String\n  networks: [GET_tv__tv_id_NetworksEntry]\n  \"\"\"\n  Field \"next_episode_to_air\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  next_episode_to_air: JSON\n  number_of_episodes: Int\n  number_of_seasons: Int\n  origin_country: [String]\n  original_language: String\n  original_name: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  production_companies: [GET_tv__tv_id_ProductionCompaniesEntry]\n  production_countries: [GET_tv__tv_id_ProductionCountriesEntry]\n  seasons: [GET_tv__tv_id_SeasonsEntry]\n  spoken_languages: [GET_tv__tv_id_SpokenLanguagesEntry]\n  status: String\n  tagline: String\n  type: String\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_tv__tv_id_SeasonsEntry {\n  air_date: Date\n  episode_count: Int\n  id: Int\n  name: String\n  overview: String\n  poster_path: String\n  season_number: Int\n  vote_average: Float\n}\n\ntype GET_tv__tv_id_SpokenLanguagesEntry {\n  english_name: String\n  iso_639_1: String\n  name: String\n}\n\ntype Query {\n  GET_tv__tv_id_(\n    tmdb_access_token: String!\n    tv_id: String!\n  ): GET_tv__tv_id_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/tv/$tv_id;\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\n\nUtterance: What is the logo of the network that produced Game of Thrones?", "output": "response_obj = GET_search_tv(query=\"Game of Thrones\")\nresponse_obj1 = GET_tv__tv_id_(tv_id=response_obj.results[0].id)\nGET_network__network_id__images(network_id=response_obj1.networks[0].id)\n", "function_specs": "[{\"name\": \"GET_search_tv\", \"description\": \"Search for a TV show.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"page\": {\"type\": \"integer\", \"description\": \"page\"}, \"query\": {\"type\": \"string\", \"description\": \"query\"}, \"include_adult\": {\"type\": \"boolean\", \"description\": \"include adult\"}, \"first_air_date_year\": {\"type\": \"integer\", \"description\": \"first air date year\"}}, \"required\": [\"query\"]}}, {\"name\": \"GET_tv__tv_id_\", \"description\": \"Get the primary TV show details by id.\\n\\nSupports `append_to_response`. Read more about this [here](#docTextSection:JdZq8ctmcxNqyLQjp).\\n\\n#### Recent Changes\\n\\n| **Date** | **Change** |\\n| - | - |\\n| July 17, 2018 | We now return `last_episode_to_air` and `next_episode_to_air` fields. |\\n| March 12, 2018 | Networks return proper logos and we introduced SVG support. |\\n| March 8, 2018 | The `seasons` field now returns the translated names and overviews. |\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"tv_id\": {\"type\": \"integer\", \"description\": \"tv id\"}}, \"required\": [\"tv_id\"]}}, {\"name\": \"GET_network__network_id__images\", \"description\": \"Get the TV network logos by id.\\n\\nThere are two image formats that are supported for networks, PNG's and SVG's. You can see which type the original file is by looking at the `file_type` field. We prefer SVG's as they are resolution independent and as such, the width and height are only there to reflect the original asset that was uploaded. An SVG can be scaled properly beyond those dimensions if you call them as a PNG.\\n\\nFor more information about how SVG's and PNG's can be used, take a read through [this document](#docTextSection:mXP9B2uzoDJFguDZv).\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"network_id\": {\"type\": \"integer\", \"description\": \"network id\"}}, \"required\": [\"network_id\"]}}]", "GraphQL_schema": "type GET_network__network_id__images_LogosEntry {\n  aspect_ratio: Float\n  file_path: String\n  file_type: String\n  height: Int\n  id: String\n  vote_average: Float\n  vote_count: Int\n  width: Int\n}\n\ntype GET_network__network_id__images_Root {\n  id: Int\n  logos: [GET_network__network_id__images_LogosEntry]\n}\n\ntype Query {\n  GET_network__network_id__images(\n    network_id: String!\n    tmdb_access_token: String!\n  ): GET_network__network_id__images_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/network/$network_id;/images\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_search_tv_ResultsEntry {\n  adult: Boolean\n  backdrop_path: String\n  first_air_date: String\n  genre_ids: [Int]\n  id: Int\n  name: String\n  origin_country: [String]\n  original_language: String\n  original_name: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_search_tv_Root {\n  page: Int\n  results: [GET_search_tv_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_search_tv(query: String, tmdb_access_token: String!): GET_search_tv_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/search/tv\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_tv__tv_id_CreatedByEntry {\n  credit_id: String\n  gender: Int\n  id: Int\n  name: String\n  original_name: String\n  profile_path: String\n}\n\ntype GET_tv__tv_id_GenresEntry {\n  id: Int\n  name: String\n}\n\ntype GET_tv__tv_id_LastEpisodeToAir {\n  air_date: Date\n  episode_number: Int\n  episode_type: String\n  id: Int\n  name: String\n  overview: String\n  production_code: String\n  runtime: Int\n  season_number: Int\n  show_id: Int\n  still_path: String\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_tv__tv_id_NetworksEntry {\n  id: Int\n  logo_path: String\n  name: String\n  origin_country: String\n}\n\ntype GET_tv__tv_id_ProductionCompaniesEntry {\n  id: Int\n  logo_path: String\n  name: String\n  origin_country: String\n}\n\ntype GET_tv__tv_id_ProductionCountriesEntry {\n  iso_3166_1: String\n  name: String\n}\n\ntype GET_tv__tv_id_Root {\n  adult: Boolean\n  backdrop_path: String\n  created_by: [GET_tv__tv_id_CreatedByEntry]\n  episode_run_time: [Int]\n  first_air_date: Date\n  genres: [GET_tv__tv_id_GenresEntry]\n  homepage: String\n  id: Int\n  in_production: Boolean\n  languages: [String]\n  last_air_date: Date\n  last_episode_to_air: GET_tv__tv_id_LastEpisodeToAir\n  name: String\n  networks: [GET_tv__tv_id_NetworksEntry]\n  \"\"\"\n  Field \"next_episode_to_air\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  next_episode_to_air: JSON\n  number_of_episodes: Int\n  number_of_seasons: Int\n  origin_country: [String]\n  original_language: String\n  original_name: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  production_companies: [GET_tv__tv_id_ProductionCompaniesEntry]\n  production_countries: [GET_tv__tv_id_ProductionCountriesEntry]\n  seasons: [GET_tv__tv_id_SeasonsEntry]\n  spoken_languages: [GET_tv__tv_id_SpokenLanguagesEntry]\n  status: String\n  tagline: String\n  type: String\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_tv__tv_id_SeasonsEntry {\n  air_date: Date\n  episode_count: Int\n  id: Int\n  name: String\n  overview: String\n  poster_path: String\n  season_number: Int\n  vote_average: Float\n}\n\ntype GET_tv__tv_id_SpokenLanguagesEntry {\n  english_name: String\n  iso_639_1: String\n  name: String\n}\n\ntype Query {\n  GET_tv__tv_id_(\n    tmdb_access_token: String!\n    tv_id: String!\n  ): GET_tv__tv_id_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/tv/$tv_id;\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\n", "utterance": "What is the logo of the network that produced Game of Thrones?"}
{"domain": "tmdb", "input": "Function Signatures:\n\n[{\"name\": \"GET_trending__media_type___time_window_\", \"description\": \"Get the daily or weekly trending items. The daily trending list tracks items over the period of a day while items have a 24 hour half life. The weekly list tracks items over a 7 day period, with a 7 day half life.\\n\\n#### Valid Media Types\\n\\n| **Media Type** | **Description** |\\n| - | - |\\n| all | Include all movies, TV shows and people in the results as a global trending list. |\\n| movie | Show the trending movies in the results. |\\n| tv | Show the trending TV shows in the results. |\\n| person | Show the trending people in the results. |\\n\\n#### Valid Time Windows\\n\\n| **Time Window** | **Description** |\\n| - | - |\\n| day | View the trending list for the day. |\\n| week | View the trending list for the week. |\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"media_type\": {\"type\": \"string\", \"description\": \"media type\\nValid values: all,movie,tv,person\"}, \"time_window\": {\"type\": \"string\", \"description\": \"time window\\nValid values: day,week\"}}, \"required\": [\"media_type\", \"time_window\"]}}, {\"name\": \"GET_tv__tv_id__similar\", \"description\": \"Get a list of similar TV shows. These items are assembled by looking at keywords and genres.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"tv_id\": {\"type\": \"integer\", \"description\": \"tv id\"}, \"page\": {\"type\": \"integer\", \"description\": \"page\"}}, \"required\": [\"tv_id\"]}}]\n\nGraphQL schema:\n\ntype GET_trending__media_type___time_window_ResultsEntry {\n  adult: Boolean\n  backdrop_path: String\n  genre_ids: [Int]\n  id: Int\n  media_type: String\n  original_language: String\n  original_title: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  release_date: Date\n  title: String\n  video: Boolean\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_trending__media_type___time_window_Root {\n  page: Int\n  results: [GET_trending__media_type___time_window_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_trending__media_type___time_window_(\n    media_type: String!\n    time_window: String!\n    tmdb_access_token: String!\n  ): GET_trending__media_type___time_window_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/trending/$media_type;/$time_window;\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_tv__tv_id__similar_ResultsEntry {\n  adult: Boolean\n  backdrop_path: String\n  first_air_date: Date\n  genre_ids: [Int]\n  id: Int\n  name: String\n  origin_country: [String]\n  original_language: String\n  original_name: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_tv__tv_id__similar_Root {\n  page: Int\n  results: [GET_tv__tv_id__similar_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_tv__tv_id__similar(\n    tmdb_access_token: String!\n    tv_id: String!\n  ): GET_tv__tv_id__similar_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/tv/$tv_id;/similar\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\n\nUtterance: I prefer a TV show that similar to today's most trending TV show", "output": "response_obj = GET_trending__media_type___time_window_(media_type=\"tv\", time_window=\"day\")\nGET_tv__tv_id__similar(tv_id=response_obj.results[0].id)\n", "function_specs": "[{\"name\": \"GET_trending__media_type___time_window_\", \"description\": \"Get the daily or weekly trending items. The daily trending list tracks items over the period of a day while items have a 24 hour half life. The weekly list tracks items over a 7 day period, with a 7 day half life.\\n\\n#### Valid Media Types\\n\\n| **Media Type** | **Description** |\\n| - | - |\\n| all | Include all movies, TV shows and people in the results as a global trending list. |\\n| movie | Show the trending movies in the results. |\\n| tv | Show the trending TV shows in the results. |\\n| person | Show the trending people in the results. |\\n\\n#### Valid Time Windows\\n\\n| **Time Window** | **Description** |\\n| - | - |\\n| day | View the trending list for the day. |\\n| week | View the trending list for the week. |\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"media_type\": {\"type\": \"string\", \"description\": \"media type\\nValid values: all,movie,tv,person\"}, \"time_window\": {\"type\": \"string\", \"description\": \"time window\\nValid values: day,week\"}}, \"required\": [\"media_type\", \"time_window\"]}}, {\"name\": \"GET_tv__tv_id__similar\", \"description\": \"Get a list of similar TV shows. These items are assembled by looking at keywords and genres.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"tv_id\": {\"type\": \"integer\", \"description\": \"tv id\"}, \"page\": {\"type\": \"integer\", \"description\": \"page\"}}, \"required\": [\"tv_id\"]}}]", "GraphQL_schema": "type GET_trending__media_type___time_window_ResultsEntry {\n  adult: Boolean\n  backdrop_path: String\n  genre_ids: [Int]\n  id: Int\n  media_type: String\n  original_language: String\n  original_title: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  release_date: Date\n  title: String\n  video: Boolean\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_trending__media_type___time_window_Root {\n  page: Int\n  results: [GET_trending__media_type___time_window_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_trending__media_type___time_window_(\n    media_type: String!\n    time_window: String!\n    tmdb_access_token: String!\n  ): GET_trending__media_type___time_window_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/trending/$media_type;/$time_window;\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_tv__tv_id__similar_ResultsEntry {\n  adult: Boolean\n  backdrop_path: String\n  first_air_date: Date\n  genre_ids: [Int]\n  id: Int\n  name: String\n  origin_country: [String]\n  original_language: String\n  original_name: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_tv__tv_id__similar_Root {\n  page: Int\n  results: [GET_tv__tv_id__similar_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_tv__tv_id__similar(\n    tmdb_access_token: String!\n    tv_id: String!\n  ): GET_tv__tv_id__similar_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/tv/$tv_id;/similar\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\n", "utterance": "I prefer a TV show that similar to today's most trending TV show"}
{"domain": "tmdb", "input": "Function Signatures:\n\n[{\"name\": \"GET_search_movie\", \"description\": \"Search for movies.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"query\": {\"type\": \"string\", \"description\": \"query\"}, \"page\": {\"type\": \"integer\", \"description\": \"page\"}, \"include_adult\": {\"type\": \"boolean\", \"description\": \"include adult\"}, \"region\": {\"type\": \"string\", \"description\": \"region\"}, \"year\": {\"type\": \"integer\", \"description\": \"year\"}, \"primary_release_year\": {\"type\": \"integer\", \"description\": \"primary release year\"}}, \"required\": [\"query\"]}}, {\"name\": \"GET_movie__movie_id__credits\", \"description\": \"Get the cast and crew for a movie.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"movie_id\": {\"type\": \"integer\", \"description\": \"movie id\"}}, \"required\": [\"movie_id\"]}}, {\"name\": \"GET_person__person_id__tv_credits\", \"description\": \"Get the TV show credits for a person.\\n\\nYou can query for some extra details about the credit with the [credit method](#endpoint:xPWdEBLkvCNZSicLN).\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"person_id\": {\"type\": \"integer\", \"description\": \"person id\"}}, \"required\": [\"person_id\"]}}]\n\nGraphQL schema:\n\ntype GET_person__person_id__tv_credits_CastEntry {\n  adult: Boolean\n  backdrop_path: String\n  character: String\n  credit_id: String\n  episode_count: Int\n  first_air_date: Date\n  genre_ids: [Int]\n  id: Int\n  name: String\n  origin_country: [String]\n  original_language: String\n  original_name: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_person__person_id__tv_credits_CrewEntry {\n  adult: Boolean\n  backdrop_path: String\n  credit_id: String\n  department: String\n  episode_count: Int\n  first_air_date: String\n  genre_ids: [Int]\n  id: Int\n  job: String\n  name: String\n  origin_country: [String]\n  original_language: String\n  original_name: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_person__person_id__tv_credits_Root {\n  cast: [GET_person__person_id__tv_credits_CastEntry]\n  crew: [GET_person__person_id__tv_credits_CrewEntry]\n  id: Int\n}\n\ntype Query {\n  GET_person__person_id__tv_credits(\n    person_id: String!\n    tmdb_access_token: String!\n  ): GET_person__person_id__tv_credits_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/person/$person_id;/tv_credits\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_search_movie_ResultsEntry {\n  adult: Boolean\n  backdrop_path: String\n  genre_ids: [Int]\n  id: Int\n  original_language: String\n  original_title: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  release_date: Date\n  title: String\n  video: Boolean\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_search_movie_Root {\n  page: Int\n  results: [GET_search_movie_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_search_movie(\n    query: String\n    tmdb_access_token: String!\n  ): GET_search_movie_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/search/movie\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_movie__movie_id__credits_CastEntry {\n  adult: Boolean\n  cast_id: Int\n  character: String\n  credit_id: String\n  gender: Int\n  id: Int\n  known_for_department: String\n  name: String\n  order: Int\n  original_name: String\n  popularity: Float\n  profile_path: String\n}\n\ntype GET_movie__movie_id__credits_CrewEntry {\n  adult: Boolean\n  credit_id: String\n  department: String\n  gender: Int\n  id: Int\n  job: String\n  known_for_department: String\n  name: String\n  original_name: String\n  popularity: Float\n  profile_path: String\n}\n\ntype GET_movie__movie_id__credits_Root {\n  cast: [GET_movie__movie_id__credits_CastEntry]\n  crew: [GET_movie__movie_id__credits_CrewEntry]\n  id: Int\n}\n\ntype Query {\n  GET_movie__movie_id__credits(\n    movie_id: String!\n    tmdb_access_token: String!\n  ): GET_movie__movie_id__credits_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/movie/$movie_id;/credits\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\n\nUtterance: What TV series has the director of Mulholland Drive directed?", "output": "response_obj = GET_search_movie(query=\"Mulholland Drive\")\nresponse_obj1 = GET_movie__movie_id__credits(movie_id=response_obj.results[0].id)\nGET_person__person_id__tv_credits(person_id=[person.id for person in response_obj1.crew if person.job.lower()==\"director\"][0])\n", "function_specs": "[{\"name\": \"GET_search_movie\", \"description\": \"Search for movies.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"query\": {\"type\": \"string\", \"description\": \"query\"}, \"page\": {\"type\": \"integer\", \"description\": \"page\"}, \"include_adult\": {\"type\": \"boolean\", \"description\": \"include adult\"}, \"region\": {\"type\": \"string\", \"description\": \"region\"}, \"year\": {\"type\": \"integer\", \"description\": \"year\"}, \"primary_release_year\": {\"type\": \"integer\", \"description\": \"primary release year\"}}, \"required\": [\"query\"]}}, {\"name\": \"GET_movie__movie_id__credits\", \"description\": \"Get the cast and crew for a movie.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"movie_id\": {\"type\": \"integer\", \"description\": \"movie id\"}}, \"required\": [\"movie_id\"]}}, {\"name\": \"GET_person__person_id__tv_credits\", \"description\": \"Get the TV show credits for a person.\\n\\nYou can query for some extra details about the credit with the [credit method](#endpoint:xPWdEBLkvCNZSicLN).\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"person_id\": {\"type\": \"integer\", \"description\": \"person id\"}}, \"required\": [\"person_id\"]}}]", "GraphQL_schema": "type GET_person__person_id__tv_credits_CastEntry {\n  adult: Boolean\n  backdrop_path: String\n  character: String\n  credit_id: String\n  episode_count: Int\n  first_air_date: Date\n  genre_ids: [Int]\n  id: Int\n  name: String\n  origin_country: [String]\n  original_language: String\n  original_name: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_person__person_id__tv_credits_CrewEntry {\n  adult: Boolean\n  backdrop_path: String\n  credit_id: String\n  department: String\n  episode_count: Int\n  first_air_date: String\n  genre_ids: [Int]\n  id: Int\n  job: String\n  name: String\n  origin_country: [String]\n  original_language: String\n  original_name: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_person__person_id__tv_credits_Root {\n  cast: [GET_person__person_id__tv_credits_CastEntry]\n  crew: [GET_person__person_id__tv_credits_CrewEntry]\n  id: Int\n}\n\ntype Query {\n  GET_person__person_id__tv_credits(\n    person_id: String!\n    tmdb_access_token: String!\n  ): GET_person__person_id__tv_credits_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/person/$person_id;/tv_credits\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_search_movie_ResultsEntry {\n  adult: Boolean\n  backdrop_path: String\n  genre_ids: [Int]\n  id: Int\n  original_language: String\n  original_title: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  release_date: Date\n  title: String\n  video: Boolean\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_search_movie_Root {\n  page: Int\n  results: [GET_search_movie_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_search_movie(\n    query: String\n    tmdb_access_token: String!\n  ): GET_search_movie_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/search/movie\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_movie__movie_id__credits_CastEntry {\n  adult: Boolean\n  cast_id: Int\n  character: String\n  credit_id: String\n  gender: Int\n  id: Int\n  known_for_department: String\n  name: String\n  order: Int\n  original_name: String\n  popularity: Float\n  profile_path: String\n}\n\ntype GET_movie__movie_id__credits_CrewEntry {\n  adult: Boolean\n  credit_id: String\n  department: String\n  gender: Int\n  id: Int\n  job: String\n  known_for_department: String\n  name: String\n  original_name: String\n  popularity: Float\n  profile_path: String\n}\n\ntype GET_movie__movie_id__credits_Root {\n  cast: [GET_movie__movie_id__credits_CastEntry]\n  crew: [GET_movie__movie_id__credits_CrewEntry]\n  id: Int\n}\n\ntype Query {\n  GET_movie__movie_id__credits(\n    movie_id: String!\n    tmdb_access_token: String!\n  ): GET_movie__movie_id__credits_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/movie/$movie_id;/credits\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\n", "utterance": "What TV series has the director of Mulholland Drive directed?"}
{"domain": "tmdb", "input": "Function Signatures:\n\n[{\"name\": \"GET_search_tv\", \"description\": \"Search for a TV show.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"page\": {\"type\": \"integer\", \"description\": \"page\"}, \"query\": {\"type\": \"string\", \"description\": \"query\"}, \"include_adult\": {\"type\": \"boolean\", \"description\": \"include adult\"}, \"first_air_date_year\": {\"type\": \"integer\", \"description\": \"first air date year\"}}, \"required\": [\"query\"]}}, {\"name\": \"GET_tv__tv_id__reviews\", \"description\": \"Get the reviews for a TV show.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"tv_id\": {\"type\": \"integer\", \"description\": \"tv id\"}, \"page\": {\"type\": \"integer\", \"description\": \"page\"}}, \"required\": [\"tv_id\"]}}]\n\nGraphQL schema:\n\ntype GET_search_tv_ResultsEntry {\n  adult: Boolean\n  backdrop_path: String\n  first_air_date: Date\n  genre_ids: [Int]\n  id: Int\n  name: String\n  origin_country: [String]\n  original_language: String\n  original_name: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_search_tv_Root {\n  page: Int\n  results: [GET_search_tv_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_search_tv(query: String, tmdb_access_token: String!): GET_search_tv_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/search/tv\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_tv__tv_id__reviews_AuthorDetails {\n  avatar_path: String\n  name: String\n  rating: Int\n  username: String\n}\n\ntype GET_tv__tv_id__reviews_ResultsEntry {\n  author: String\n  author_details: GET_tv__tv_id__reviews_AuthorDetails\n  content: String\n  created_at: DateTime\n  id: String\n  updated_at: DateTime\n  url: String\n}\n\ntype GET_tv__tv_id__reviews_Root {\n  id: Int\n  page: Int\n  results: [GET_tv__tv_id__reviews_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_tv__tv_id__reviews(\n    tmdb_access_token: String!\n    tv_id: String!\n  ): GET_tv__tv_id__reviews_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/tv/$tv_id;/reviews\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\n\nUtterance: I need a review for Breaking Bad", "output": "response_obj = GET_search_tv(query=\"Breaking Bad\")\nGET_tv__tv_id__reviews(tv_id=response_obj.results[0].id)\n", "function_specs": "[{\"name\": \"GET_search_tv\", \"description\": \"Search for a TV show.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"page\": {\"type\": \"integer\", \"description\": \"page\"}, \"query\": {\"type\": \"string\", \"description\": \"query\"}, \"include_adult\": {\"type\": \"boolean\", \"description\": \"include adult\"}, \"first_air_date_year\": {\"type\": \"integer\", \"description\": \"first air date year\"}}, \"required\": [\"query\"]}}, {\"name\": \"GET_tv__tv_id__reviews\", \"description\": \"Get the reviews for a TV show.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"tv_id\": {\"type\": \"integer\", \"description\": \"tv id\"}, \"page\": {\"type\": \"integer\", \"description\": \"page\"}}, \"required\": [\"tv_id\"]}}]", "GraphQL_schema": "type GET_search_tv_ResultsEntry {\n  adult: Boolean\n  backdrop_path: String\n  first_air_date: Date\n  genre_ids: [Int]\n  id: Int\n  name: String\n  origin_country: [String]\n  original_language: String\n  original_name: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_search_tv_Root {\n  page: Int\n  results: [GET_search_tv_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_search_tv(query: String, tmdb_access_token: String!): GET_search_tv_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/search/tv\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_tv__tv_id__reviews_AuthorDetails {\n  avatar_path: String\n  name: String\n  rating: Int\n  username: String\n}\n\ntype GET_tv__tv_id__reviews_ResultsEntry {\n  author: String\n  author_details: GET_tv__tv_id__reviews_AuthorDetails\n  content: String\n  created_at: DateTime\n  id: String\n  updated_at: DateTime\n  url: String\n}\n\ntype GET_tv__tv_id__reviews_Root {\n  id: Int\n  page: Int\n  results: [GET_tv__tv_id__reviews_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_tv__tv_id__reviews(\n    tmdb_access_token: String!\n    tv_id: String!\n  ): GET_tv__tv_id__reviews_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/tv/$tv_id;/reviews\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\n", "utterance": "I need a review for Breaking Bad"}
{"domain": "tmdb", "input": "Function Signatures:\n\n[{\"name\": \"GET_search_tv\", \"description\": \"Search for a TV show.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"page\": {\"type\": \"integer\", \"description\": \"page\"}, \"query\": {\"type\": \"string\", \"description\": \"query\"}, \"include_adult\": {\"type\": \"boolean\", \"description\": \"include adult\"}, \"first_air_date_year\": {\"type\": \"integer\", \"description\": \"first air date year\"}}, \"required\": [\"query\"]}}, {\"name\": \"GET_tv__tv_id_\", \"description\": \"Get the primary TV show details by id.\\n\\nSupports `append_to_response`. Read more about this [here](#docTextSection:JdZq8ctmcxNqyLQjp).\\n\\n#### Recent Changes\\n\\n| **Date** | **Change** |\\n| - | - |\\n| July 17, 2018 | We now return `last_episode_to_air` and `next_episode_to_air` fields. |\\n| March 12, 2018 | Networks return proper logos and we introduced SVG support. |\\n| March 8, 2018 | The `seasons` field now returns the translated names and overviews. |\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"tv_id\": {\"type\": \"integer\", \"description\": \"tv id\"}}, \"required\": [\"tv_id\"]}}, {\"name\": \"GET_company__company_id_\", \"description\": \"Get a companies details by id.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"company_id\": {\"type\": \"integer\", \"description\": \"company id\"}}, \"required\": [\"company_id\"]}}]\n\nGraphQL schema:\n\ntype GET_company__company_id_Root {\n  description: String\n  headquarters: String\n  homepage: String\n  id: Int\n  logo_path: String\n  name: String\n  origin_country: String\n  \"\"\"\n  Field \"parent_company\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  parent_company: JSON\n}\n\ntype Query {\n  GET_company__company_id_(\n    company_id: String!\n    tmdb_access_token: String!\n  ): GET_company__company_id_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/company/$company_id;\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_search_tv_ResultsEntry {\n  adult: Boolean\n  backdrop_path: String\n  first_air_date: String\n  genre_ids: [Int]\n  id: Int\n  name: String\n  origin_country: [String]\n  original_language: String\n  original_name: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_search_tv_Root {\n  page: Int\n  results: [GET_search_tv_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_search_tv(query: String, tmdb_access_token: String!): GET_search_tv_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/search/tv\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_tv__tv_id_CreatedByEntry {\n  credit_id: String\n  gender: Int\n  id: Int\n  name: String\n  original_name: String\n  profile_path: String\n}\n\ntype GET_tv__tv_id_GenresEntry {\n  id: Int\n  name: String\n}\n\ntype GET_tv__tv_id_LastEpisodeToAir {\n  air_date: Date\n  episode_number: Int\n  episode_type: String\n  id: Int\n  name: String\n  overview: String\n  production_code: String\n  runtime: Int\n  season_number: Int\n  show_id: Int\n  still_path: String\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_tv__tv_id_NetworksEntry {\n  id: Int\n  logo_path: String\n  name: String\n  origin_country: String\n}\n\ntype GET_tv__tv_id_ProductionCompaniesEntry {\n  id: Int\n  logo_path: String\n  name: String\n  origin_country: String\n}\n\ntype GET_tv__tv_id_ProductionCountriesEntry {\n  iso_3166_1: String\n  name: String\n}\n\ntype GET_tv__tv_id_Root {\n  adult: Boolean\n  backdrop_path: String\n  created_by: [GET_tv__tv_id_CreatedByEntry]\n  episode_run_time: [Int]\n  first_air_date: Date\n  genres: [GET_tv__tv_id_GenresEntry]\n  homepage: String\n  id: Int\n  in_production: Boolean\n  languages: [String]\n  last_air_date: Date\n  last_episode_to_air: GET_tv__tv_id_LastEpisodeToAir\n  name: String\n  networks: [GET_tv__tv_id_NetworksEntry]\n  \"\"\"\n  Field \"next_episode_to_air\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  next_episode_to_air: JSON\n  number_of_episodes: Int\n  number_of_seasons: Int\n  origin_country: [String]\n  original_language: String\n  original_name: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  production_companies: [GET_tv__tv_id_ProductionCompaniesEntry]\n  production_countries: [GET_tv__tv_id_ProductionCountriesEntry]\n  seasons: [GET_tv__tv_id_SeasonsEntry]\n  spoken_languages: [GET_tv__tv_id_SpokenLanguagesEntry]\n  status: String\n  tagline: String\n  type: String\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_tv__tv_id_SeasonsEntry {\n  air_date: Date\n  episode_count: Int\n  id: Int\n  name: String\n  overview: String\n  poster_path: String\n  season_number: Int\n  vote_average: Float\n}\n\ntype GET_tv__tv_id_SpokenLanguagesEntry {\n  english_name: String\n  iso_639_1: String\n  name: String\n}\n\ntype Query {\n  GET_tv__tv_id_(\n    tmdb_access_token: String!\n    tv_id: String!\n  ): GET_tv__tv_id_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/tv/$tv_id;\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\n\nUtterance: When was the company that produced The Big Bang Theory founded?", "output": "response_obj = GET_search_tv(query=\"The Big Bang Theory\")\nresponse_obj1 = GET_tv__tv_id_(tv_id=response_obj.results[0].id)\nGET_company__company_id_(company_id=response_obj1.production_companies[0].id)\n", "function_specs": "[{\"name\": \"GET_search_tv\", \"description\": \"Search for a TV show.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"page\": {\"type\": \"integer\", \"description\": \"page\"}, \"query\": {\"type\": \"string\", \"description\": \"query\"}, \"include_adult\": {\"type\": \"boolean\", \"description\": \"include adult\"}, \"first_air_date_year\": {\"type\": \"integer\", \"description\": \"first air date year\"}}, \"required\": [\"query\"]}}, {\"name\": \"GET_tv__tv_id_\", \"description\": \"Get the primary TV show details by id.\\n\\nSupports `append_to_response`. Read more about this [here](#docTextSection:JdZq8ctmcxNqyLQjp).\\n\\n#### Recent Changes\\n\\n| **Date** | **Change** |\\n| - | - |\\n| July 17, 2018 | We now return `last_episode_to_air` and `next_episode_to_air` fields. |\\n| March 12, 2018 | Networks return proper logos and we introduced SVG support. |\\n| March 8, 2018 | The `seasons` field now returns the translated names and overviews. |\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"tv_id\": {\"type\": \"integer\", \"description\": \"tv id\"}}, \"required\": [\"tv_id\"]}}, {\"name\": \"GET_company__company_id_\", \"description\": \"Get a companies details by id.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"company_id\": {\"type\": \"integer\", \"description\": \"company id\"}}, \"required\": [\"company_id\"]}}]", "GraphQL_schema": "type GET_company__company_id_Root {\n  description: String\n  headquarters: String\n  homepage: String\n  id: Int\n  logo_path: String\n  name: String\n  origin_country: String\n  \"\"\"\n  Field \"parent_company\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  parent_company: JSON\n}\n\ntype Query {\n  GET_company__company_id_(\n    company_id: String!\n    tmdb_access_token: String!\n  ): GET_company__company_id_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/company/$company_id;\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_search_tv_ResultsEntry {\n  adult: Boolean\n  backdrop_path: String\n  first_air_date: String\n  genre_ids: [Int]\n  id: Int\n  name: String\n  origin_country: [String]\n  original_language: String\n  original_name: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_search_tv_Root {\n  page: Int\n  results: [GET_search_tv_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_search_tv(query: String, tmdb_access_token: String!): GET_search_tv_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/search/tv\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_tv__tv_id_CreatedByEntry {\n  credit_id: String\n  gender: Int\n  id: Int\n  name: String\n  original_name: String\n  profile_path: String\n}\n\ntype GET_tv__tv_id_GenresEntry {\n  id: Int\n  name: String\n}\n\ntype GET_tv__tv_id_LastEpisodeToAir {\n  air_date: Date\n  episode_number: Int\n  episode_type: String\n  id: Int\n  name: String\n  overview: String\n  production_code: String\n  runtime: Int\n  season_number: Int\n  show_id: Int\n  still_path: String\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_tv__tv_id_NetworksEntry {\n  id: Int\n  logo_path: String\n  name: String\n  origin_country: String\n}\n\ntype GET_tv__tv_id_ProductionCompaniesEntry {\n  id: Int\n  logo_path: String\n  name: String\n  origin_country: String\n}\n\ntype GET_tv__tv_id_ProductionCountriesEntry {\n  iso_3166_1: String\n  name: String\n}\n\ntype GET_tv__tv_id_Root {\n  adult: Boolean\n  backdrop_path: String\n  created_by: [GET_tv__tv_id_CreatedByEntry]\n  episode_run_time: [Int]\n  first_air_date: Date\n  genres: [GET_tv__tv_id_GenresEntry]\n  homepage: String\n  id: Int\n  in_production: Boolean\n  languages: [String]\n  last_air_date: Date\n  last_episode_to_air: GET_tv__tv_id_LastEpisodeToAir\n  name: String\n  networks: [GET_tv__tv_id_NetworksEntry]\n  \"\"\"\n  Field \"next_episode_to_air\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  next_episode_to_air: JSON\n  number_of_episodes: Int\n  number_of_seasons: Int\n  origin_country: [String]\n  original_language: String\n  original_name: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  production_companies: [GET_tv__tv_id_ProductionCompaniesEntry]\n  production_countries: [GET_tv__tv_id_ProductionCountriesEntry]\n  seasons: [GET_tv__tv_id_SeasonsEntry]\n  spoken_languages: [GET_tv__tv_id_SpokenLanguagesEntry]\n  status: String\n  tagline: String\n  type: String\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_tv__tv_id_SeasonsEntry {\n  air_date: Date\n  episode_count: Int\n  id: Int\n  name: String\n  overview: String\n  poster_path: String\n  season_number: Int\n  vote_average: Float\n}\n\ntype GET_tv__tv_id_SpokenLanguagesEntry {\n  english_name: String\n  iso_639_1: String\n  name: String\n}\n\ntype Query {\n  GET_tv__tv_id_(\n    tmdb_access_token: String!\n    tv_id: String!\n  ): GET_tv__tv_id_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/tv/$tv_id;\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\n", "utterance": "When was the company that produced The Big Bang Theory founded?"}
{"domain": "tmdb", "input": "Function Signatures:\n\n[{\"name\": \"GET_search_tv\", \"description\": \"Search for a TV show.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"page\": {\"type\": \"integer\", \"description\": \"page\"}, \"query\": {\"type\": \"string\", \"description\": \"query\"}, \"include_adult\": {\"type\": \"boolean\", \"description\": \"include adult\"}, \"first_air_date_year\": {\"type\": \"integer\", \"description\": \"first air date year\"}}, \"required\": [\"query\"]}}, {\"name\": \"GET_tv__tv_id_\", \"description\": \"Get the primary TV show details by id.\\n\\nSupports `append_to_response`. Read more about this [here](#docTextSection:JdZq8ctmcxNqyLQjp).\\n\\n#### Recent Changes\\n\\n| **Date** | **Change** |\\n| - | - |\\n| July 17, 2018 | We now return `last_episode_to_air` and `next_episode_to_air` fields. |\\n| March 12, 2018 | Networks return proper logos and we introduced SVG support. |\\n| March 8, 2018 | The `seasons` field now returns the translated names and overviews. |\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"tv_id\": {\"type\": \"integer\", \"description\": \"tv id\"}}, \"required\": [\"tv_id\"]}}]\n\nGraphQL schema:\n\ntype GET_search_tv_ResultsEntry {\n  adult: Boolean\n  backdrop_path: String\n  first_air_date: String\n  genre_ids: [Int]\n  id: Int\n  name: String\n  origin_country: [String]\n  original_language: String\n  original_name: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_search_tv_Root {\n  page: Int\n  results: [GET_search_tv_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_search_tv(query: String, tmdb_access_token: String!): GET_search_tv_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/search/tv\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_tv__tv_id_CreatedByEntry {\n  credit_id: String\n  gender: Int\n  id: Int\n  name: String\n  original_name: String\n  profile_path: String\n}\n\ntype GET_tv__tv_id_GenresEntry {\n  id: Int\n  name: String\n}\n\ntype GET_tv__tv_id_LastEpisodeToAir {\n  air_date: Date\n  episode_number: Int\n  episode_type: String\n  id: Int\n  name: String\n  overview: String\n  production_code: String\n  runtime: Int\n  season_number: Int\n  show_id: Int\n  still_path: String\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_tv__tv_id_NetworksEntry {\n  id: Int\n  logo_path: String\n  name: String\n  origin_country: String\n}\n\ntype GET_tv__tv_id_ProductionCompaniesEntry {\n  id: Int\n  logo_path: String\n  name: String\n  origin_country: String\n}\n\ntype GET_tv__tv_id_ProductionCountriesEntry {\n  iso_3166_1: String\n  name: String\n}\n\ntype GET_tv__tv_id_Root {\n  adult: Boolean\n  backdrop_path: String\n  created_by: [GET_tv__tv_id_CreatedByEntry]\n  episode_run_time: [Int]\n  first_air_date: Date\n  genres: [GET_tv__tv_id_GenresEntry]\n  homepage: String\n  id: Int\n  in_production: Boolean\n  languages: [String]\n  last_air_date: Date\n  last_episode_to_air: GET_tv__tv_id_LastEpisodeToAir\n  name: String\n  networks: [GET_tv__tv_id_NetworksEntry]\n  \"\"\"\n  Field \"next_episode_to_air\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  next_episode_to_air: JSON\n  number_of_episodes: Int\n  number_of_seasons: Int\n  origin_country: [String]\n  original_language: String\n  original_name: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  production_companies: [GET_tv__tv_id_ProductionCompaniesEntry]\n  production_countries: [GET_tv__tv_id_ProductionCountriesEntry]\n  seasons: [GET_tv__tv_id_SeasonsEntry]\n  spoken_languages: [GET_tv__tv_id_SpokenLanguagesEntry]\n  status: String\n  tagline: String\n  type: String\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_tv__tv_id_SeasonsEntry {\n  air_date: Date\n  episode_count: Int\n  id: Int\n  name: String\n  overview: String\n  poster_path: String\n  season_number: Int\n  vote_average: Float\n}\n\ntype GET_tv__tv_id_SpokenLanguagesEntry {\n  english_name: String\n  iso_639_1: String\n  name: String\n}\n\ntype Query {\n  GET_tv__tv_id_(\n    tmdb_access_token: String!\n    tv_id: String!\n  ): GET_tv__tv_id_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/tv/$tv_id;\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\n\nUtterance: When was the TV show The Big Bang Theory created?", "output": "response_obj = GET_search_tv(query=\"The Big Bang Theory\")\nGET_tv__tv_id_(tv_id=response_obj.results[0].id)\n", "function_specs": "[{\"name\": \"GET_search_tv\", \"description\": \"Search for a TV show.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"page\": {\"type\": \"integer\", \"description\": \"page\"}, \"query\": {\"type\": \"string\", \"description\": \"query\"}, \"include_adult\": {\"type\": \"boolean\", \"description\": \"include adult\"}, \"first_air_date_year\": {\"type\": \"integer\", \"description\": \"first air date year\"}}, \"required\": [\"query\"]}}, {\"name\": \"GET_tv__tv_id_\", \"description\": \"Get the primary TV show details by id.\\n\\nSupports `append_to_response`. Read more about this [here](#docTextSection:JdZq8ctmcxNqyLQjp).\\n\\n#### Recent Changes\\n\\n| **Date** | **Change** |\\n| - | - |\\n| July 17, 2018 | We now return `last_episode_to_air` and `next_episode_to_air` fields. |\\n| March 12, 2018 | Networks return proper logos and we introduced SVG support. |\\n| March 8, 2018 | The `seasons` field now returns the translated names and overviews. |\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"tv_id\": {\"type\": \"integer\", \"description\": \"tv id\"}}, \"required\": [\"tv_id\"]}}]", "GraphQL_schema": "type GET_search_tv_ResultsEntry {\n  adult: Boolean\n  backdrop_path: String\n  first_air_date: String\n  genre_ids: [Int]\n  id: Int\n  name: String\n  origin_country: [String]\n  original_language: String\n  original_name: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_search_tv_Root {\n  page: Int\n  results: [GET_search_tv_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_search_tv(query: String, tmdb_access_token: String!): GET_search_tv_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/search/tv\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_tv__tv_id_CreatedByEntry {\n  credit_id: String\n  gender: Int\n  id: Int\n  name: String\n  original_name: String\n  profile_path: String\n}\n\ntype GET_tv__tv_id_GenresEntry {\n  id: Int\n  name: String\n}\n\ntype GET_tv__tv_id_LastEpisodeToAir {\n  air_date: Date\n  episode_number: Int\n  episode_type: String\n  id: Int\n  name: String\n  overview: String\n  production_code: String\n  runtime: Int\n  season_number: Int\n  show_id: Int\n  still_path: String\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_tv__tv_id_NetworksEntry {\n  id: Int\n  logo_path: String\n  name: String\n  origin_country: String\n}\n\ntype GET_tv__tv_id_ProductionCompaniesEntry {\n  id: Int\n  logo_path: String\n  name: String\n  origin_country: String\n}\n\ntype GET_tv__tv_id_ProductionCountriesEntry {\n  iso_3166_1: String\n  name: String\n}\n\ntype GET_tv__tv_id_Root {\n  adult: Boolean\n  backdrop_path: String\n  created_by: [GET_tv__tv_id_CreatedByEntry]\n  episode_run_time: [Int]\n  first_air_date: Date\n  genres: [GET_tv__tv_id_GenresEntry]\n  homepage: String\n  id: Int\n  in_production: Boolean\n  languages: [String]\n  last_air_date: Date\n  last_episode_to_air: GET_tv__tv_id_LastEpisodeToAir\n  name: String\n  networks: [GET_tv__tv_id_NetworksEntry]\n  \"\"\"\n  Field \"next_episode_to_air\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  next_episode_to_air: JSON\n  number_of_episodes: Int\n  number_of_seasons: Int\n  origin_country: [String]\n  original_language: String\n  original_name: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  production_companies: [GET_tv__tv_id_ProductionCompaniesEntry]\n  production_countries: [GET_tv__tv_id_ProductionCountriesEntry]\n  seasons: [GET_tv__tv_id_SeasonsEntry]\n  spoken_languages: [GET_tv__tv_id_SpokenLanguagesEntry]\n  status: String\n  tagline: String\n  type: String\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_tv__tv_id_SeasonsEntry {\n  air_date: Date\n  episode_count: Int\n  id: Int\n  name: String\n  overview: String\n  poster_path: String\n  season_number: Int\n  vote_average: Float\n}\n\ntype GET_tv__tv_id_SpokenLanguagesEntry {\n  english_name: String\n  iso_639_1: String\n  name: String\n}\n\ntype Query {\n  GET_tv__tv_id_(\n    tmdb_access_token: String!\n    tv_id: String!\n  ): GET_tv__tv_id_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/tv/$tv_id;\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\n", "utterance": "When was the TV show The Big Bang Theory created?"}
{"domain": "tmdb", "input": "Function Signatures:\n\n[{\"name\": \"GET_movie_latest\", \"description\": \"Get the most newly created movie. This is a live response and will continuously change.\", \"parameters\": {\"type\": \"dict\", \"properties\": {}, \"required\": []}}, {\"name\": \"GET_movie__movie_id__credits\", \"description\": \"Get the cast and crew for a movie.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"movie_id\": {\"type\": \"integer\", \"description\": \"movie id\"}}, \"required\": [\"movie_id\"]}}]\n\nGraphQL schema:\n\ntype GET_movie_latest_Root {\n  adult: Boolean\n  \"\"\"\n  Field \"backdrop_path\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  backdrop_path: JSON\n  \"\"\"\n  Field \"belongs_to_collection\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  belongs_to_collection: JSON\n  budget: Int\n  genres: [JSON]\n  homepage: String\n  id: Int\n  \"\"\"\n  Field \"imdb_id\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  imdb_id: JSON\n  origin_country: [String]\n  original_language: String\n  original_title: String\n  overview: String\n  popularity: Int\n  poster_path: String\n  production_companies: [JSON]\n  production_countries: [JSON]\n  release_date: String\n  revenue: Int\n  runtime: Int\n  spoken_languages: [GET_movie_latest_SpokenLanguagesEntry]\n  status: String\n  tagline: String\n  title: String\n  video: Boolean\n  vote_average: Int\n  vote_count: Int\n}\n\ntype GET_movie_latest_SpokenLanguagesEntry {\n  english_name: String\n  iso_639_1: String\n  name: String\n}\n\ntype Query {\n  GET_movie_latest(tmdb_access_token: String!): GET_movie_latest_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/movie/latest\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_movie__movie_id__credits_CastEntry {\n  adult: Boolean\n  cast_id: Int\n  character: String\n  credit_id: String\n  gender: Int\n  id: Int\n  known_for_department: String\n  name: String\n  order: Int\n  original_name: String\n  popularity: Float\n  profile_path: String\n}\n\ntype GET_movie__movie_id__credits_CrewEntry {\n  adult: Boolean\n  credit_id: String\n  department: String\n  gender: Int\n  id: Int\n  job: String\n  known_for_department: String\n  name: String\n  original_name: String\n  popularity: Float\n  profile_path: String\n}\n\ntype GET_movie__movie_id__credits_Root {\n  cast: [GET_movie__movie_id__credits_CastEntry]\n  crew: [GET_movie__movie_id__credits_CrewEntry]\n  id: Int\n}\n\ntype Query {\n  GET_movie__movie_id__credits(\n    movie_id: String!\n    tmdb_access_token: String!\n  ): GET_movie__movie_id__credits_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/movie/$movie_id;/credits\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\n\nUtterance: Who is the lead actor in the latest released movie?", "output": "response_obj = GET_movie_latest()\nGET_movie__movie_id__credits(movie_id=response_obj.id)\n", "function_specs": "[{\"name\": \"GET_movie_latest\", \"description\": \"Get the most newly created movie. This is a live response and will continuously change.\", \"parameters\": {\"type\": \"dict\", \"properties\": {}, \"required\": []}}, {\"name\": \"GET_movie__movie_id__credits\", \"description\": \"Get the cast and crew for a movie.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"movie_id\": {\"type\": \"integer\", \"description\": \"movie id\"}}, \"required\": [\"movie_id\"]}}]", "GraphQL_schema": "type GET_movie_latest_Root {\n  adult: Boolean\n  \"\"\"\n  Field \"backdrop_path\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  backdrop_path: JSON\n  \"\"\"\n  Field \"belongs_to_collection\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  belongs_to_collection: JSON\n  budget: Int\n  genres: [JSON]\n  homepage: String\n  id: Int\n  \"\"\"\n  Field \"imdb_id\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  imdb_id: JSON\n  origin_country: [String]\n  original_language: String\n  original_title: String\n  overview: String\n  popularity: Int\n  poster_path: String\n  production_companies: [JSON]\n  production_countries: [JSON]\n  release_date: String\n  revenue: Int\n  runtime: Int\n  spoken_languages: [GET_movie_latest_SpokenLanguagesEntry]\n  status: String\n  tagline: String\n  title: String\n  video: Boolean\n  vote_average: Int\n  vote_count: Int\n}\n\ntype GET_movie_latest_SpokenLanguagesEntry {\n  english_name: String\n  iso_639_1: String\n  name: String\n}\n\ntype Query {\n  GET_movie_latest(tmdb_access_token: String!): GET_movie_latest_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/movie/latest\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_movie__movie_id__credits_CastEntry {\n  adult: Boolean\n  cast_id: Int\n  character: String\n  credit_id: String\n  gender: Int\n  id: Int\n  known_for_department: String\n  name: String\n  order: Int\n  original_name: String\n  popularity: Float\n  profile_path: String\n}\n\ntype GET_movie__movie_id__credits_CrewEntry {\n  adult: Boolean\n  credit_id: String\n  department: String\n  gender: Int\n  id: Int\n  job: String\n  known_for_department: String\n  name: String\n  original_name: String\n  popularity: Float\n  profile_path: String\n}\n\ntype GET_movie__movie_id__credits_Root {\n  cast: [GET_movie__movie_id__credits_CastEntry]\n  crew: [GET_movie__movie_id__credits_CrewEntry]\n  id: Int\n}\n\ntype Query {\n  GET_movie__movie_id__credits(\n    movie_id: String!\n    tmdb_access_token: String!\n  ): GET_movie__movie_id__credits_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/movie/$movie_id;/credits\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\n", "utterance": "Who is the lead actor in the latest released movie?"}
{"domain": "tmdb", "input": "Function Signatures:\n\n[{\"name\": \"GET_search_movie\", \"description\": \"Search for movies.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"query\": {\"type\": \"string\", \"description\": \"query\"}, \"page\": {\"type\": \"integer\", \"description\": \"page\"}, \"include_adult\": {\"type\": \"boolean\", \"description\": \"include adult\"}, \"region\": {\"type\": \"string\", \"description\": \"region\"}, \"year\": {\"type\": \"integer\", \"description\": \"year\"}, \"primary_release_year\": {\"type\": \"integer\", \"description\": \"primary release year\"}}, \"required\": [\"query\"]}}, {\"name\": \"GET_movie__movie_id__credits\", \"description\": \"Get the cast and crew for a movie.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"movie_id\": {\"type\": \"integer\", \"description\": \"movie id\"}}, \"required\": [\"movie_id\"]}}, {\"name\": \"GET_search_tv\", \"description\": \"Search for a TV show.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"page\": {\"type\": \"integer\", \"description\": \"page\"}, \"query\": {\"type\": \"string\", \"description\": \"query\"}, \"include_adult\": {\"type\": \"boolean\", \"description\": \"include adult\"}, \"first_air_date_year\": {\"type\": \"integer\", \"description\": \"first air date year\"}}, \"required\": [\"query\"]}}, {\"name\": \"GET_tv__tv_id__credits\", \"description\": \"Get the credits (cast and crew) that have been added to a TV show.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"tv_id\": {\"type\": \"integer\", \"description\": \"tv id\"}}, \"required\": [\"tv_id\"]}}]\n\nGraphQL schema:\n\ntype GET_search_tv_ResultsEntry {\n  adult: Boolean\n  backdrop_path: String\n  first_air_date: String\n  genre_ids: [Int]\n  id: Int\n  name: String\n  origin_country: [String]\n  original_language: String\n  original_name: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_search_tv_Root {\n  page: Int\n  results: [GET_search_tv_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_search_tv(query: String, tmdb_access_token: String!): GET_search_tv_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/search/tv\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_tv__tv_id__credits_CastEntry {\n  adult: Boolean\n  character: String\n  credit_id: String\n  gender: Int\n  id: Int\n  known_for_department: String\n  name: String\n  order: Int\n  original_name: String\n  popularity: Float\n  profile_path: String\n}\n\ntype GET_tv__tv_id__credits_CrewEntry {\n  adult: Boolean\n  credit_id: String\n  department: String\n  gender: Int\n  id: Int\n  job: String\n  known_for_department: String\n  name: String\n  original_name: String\n  popularity: Float\n  profile_path: String\n}\n\ntype GET_tv__tv_id__credits_Root {\n  cast: [GET_tv__tv_id__credits_CastEntry]\n  crew: [GET_tv__tv_id__credits_CrewEntry]\n  id: Int\n}\n\ntype Query {\n  GET_tv__tv_id__credits(\n    tmdb_access_token: String!\n    tv_id: String!\n  ): GET_tv__tv_id__credits_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/tv/$tv_id;/credits\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_search_movie_ResultsEntry {\n  adult: Boolean\n  backdrop_path: String\n  genre_ids: [Int]\n  id: Int\n  original_language: String\n  original_title: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  release_date: Date\n  title: String\n  video: Boolean\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_search_movie_Root {\n  page: Int\n  results: [GET_search_movie_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_search_movie(\n    query: String\n    tmdb_access_token: String!\n  ): GET_search_movie_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/search/movie\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_movie__movie_id__credits_CastEntry {\n  adult: Boolean\n  cast_id: Int\n  character: String\n  credit_id: String\n  gender: Int\n  id: Int\n  known_for_department: String\n  name: String\n  order: Int\n  original_name: String\n  popularity: Float\n  profile_path: String\n}\n\ntype GET_movie__movie_id__credits_CrewEntry {\n  adult: Boolean\n  credit_id: String\n  department: String\n  gender: Int\n  id: Int\n  job: String\n  known_for_department: String\n  name: String\n  original_name: String\n  popularity: Float\n  profile_path: String\n}\n\ntype GET_movie__movie_id__credits_Root {\n  cast: [GET_movie__movie_id__credits_CastEntry]\n  crew: [GET_movie__movie_id__credits_CrewEntry]\n  id: Int\n}\n\ntype Query {\n  GET_movie__movie_id__credits(\n    movie_id: String!\n    tmdb_access_token: String!\n  ): GET_movie__movie_id__credits_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/movie/$movie_id;/credits\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\n\nUtterance: Who is older, by how many years, the director of film Barbie or the lead actor of television DEATH NOTE?", "output": "response_obj = GET_search_movie(query=\"Barbie\")\nGET_movie__movie_id__credits(movie_id=response_obj.results[0].id)\nresponse_obj1 = GET_search_tv(query=\"DEATH NOTE\")\nGET_tv__tv_id__credits(tv_id=response_obj1.results[0].id))\n", "function_specs": "[{\"name\": \"GET_search_movie\", \"description\": \"Search for movies.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"query\": {\"type\": \"string\", \"description\": \"query\"}, \"page\": {\"type\": \"integer\", \"description\": \"page\"}, \"include_adult\": {\"type\": \"boolean\", \"description\": \"include adult\"}, \"region\": {\"type\": \"string\", \"description\": \"region\"}, \"year\": {\"type\": \"integer\", \"description\": \"year\"}, \"primary_release_year\": {\"type\": \"integer\", \"description\": \"primary release year\"}}, \"required\": [\"query\"]}}, {\"name\": \"GET_movie__movie_id__credits\", \"description\": \"Get the cast and crew for a movie.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"movie_id\": {\"type\": \"integer\", \"description\": \"movie id\"}}, \"required\": [\"movie_id\"]}}, {\"name\": \"GET_search_tv\", \"description\": \"Search for a TV show.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"page\": {\"type\": \"integer\", \"description\": \"page\"}, \"query\": {\"type\": \"string\", \"description\": \"query\"}, \"include_adult\": {\"type\": \"boolean\", \"description\": \"include adult\"}, \"first_air_date_year\": {\"type\": \"integer\", \"description\": \"first air date year\"}}, \"required\": [\"query\"]}}, {\"name\": \"GET_tv__tv_id__credits\", \"description\": \"Get the credits (cast and crew) that have been added to a TV show.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"tv_id\": {\"type\": \"integer\", \"description\": \"tv id\"}}, \"required\": [\"tv_id\"]}}]", "GraphQL_schema": "type GET_search_tv_ResultsEntry {\n  adult: Boolean\n  backdrop_path: String\n  first_air_date: String\n  genre_ids: [Int]\n  id: Int\n  name: String\n  origin_country: [String]\n  original_language: String\n  original_name: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_search_tv_Root {\n  page: Int\n  results: [GET_search_tv_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_search_tv(query: String, tmdb_access_token: String!): GET_search_tv_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/search/tv\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_tv__tv_id__credits_CastEntry {\n  adult: Boolean\n  character: String\n  credit_id: String\n  gender: Int\n  id: Int\n  known_for_department: String\n  name: String\n  order: Int\n  original_name: String\n  popularity: Float\n  profile_path: String\n}\n\ntype GET_tv__tv_id__credits_CrewEntry {\n  adult: Boolean\n  credit_id: String\n  department: String\n  gender: Int\n  id: Int\n  job: String\n  known_for_department: String\n  name: String\n  original_name: String\n  popularity: Float\n  profile_path: String\n}\n\ntype GET_tv__tv_id__credits_Root {\n  cast: [GET_tv__tv_id__credits_CastEntry]\n  crew: [GET_tv__tv_id__credits_CrewEntry]\n  id: Int\n}\n\ntype Query {\n  GET_tv__tv_id__credits(\n    tmdb_access_token: String!\n    tv_id: String!\n  ): GET_tv__tv_id__credits_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/tv/$tv_id;/credits\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_search_movie_ResultsEntry {\n  adult: Boolean\n  backdrop_path: String\n  genre_ids: [Int]\n  id: Int\n  original_language: String\n  original_title: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  release_date: Date\n  title: String\n  video: Boolean\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_search_movie_Root {\n  page: Int\n  results: [GET_search_movie_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_search_movie(\n    query: String\n    tmdb_access_token: String!\n  ): GET_search_movie_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/search/movie\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_movie__movie_id__credits_CastEntry {\n  adult: Boolean\n  cast_id: Int\n  character: String\n  credit_id: String\n  gender: Int\n  id: Int\n  known_for_department: String\n  name: String\n  order: Int\n  original_name: String\n  popularity: Float\n  profile_path: String\n}\n\ntype GET_movie__movie_id__credits_CrewEntry {\n  adult: Boolean\n  credit_id: String\n  department: String\n  gender: Int\n  id: Int\n  job: String\n  known_for_department: String\n  name: String\n  original_name: String\n  popularity: Float\n  profile_path: String\n}\n\ntype GET_movie__movie_id__credits_Root {\n  cast: [GET_movie__movie_id__credits_CastEntry]\n  crew: [GET_movie__movie_id__credits_CrewEntry]\n  id: Int\n}\n\ntype Query {\n  GET_movie__movie_id__credits(\n    movie_id: String!\n    tmdb_access_token: String!\n  ): GET_movie__movie_id__credits_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/movie/$movie_id;/credits\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\n", "utterance": "Who is older, by how many years, the director of film Barbie or the lead actor of television DEATH NOTE?"}
{"domain": "tmdb", "input": "Function Signatures:\n\n[{\"name\": \"GET_search_person\", \"description\": \"Search for people.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"query\": {\"type\": \"string\", \"description\": \"query\"}, \"page\": {\"type\": \"integer\", \"description\": \"page\"}, \"include_adult\": {\"type\": \"boolean\", \"description\": \"include adult\"}, \"region\": {\"type\": \"string\", \"description\": \"region\"}}, \"required\": [\"query\"]}}, {\"name\": \"GET_person__person_id__movie_credits\", \"description\": \"Get the movie credits for a person, the results contains various information such as popularity and release date.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"person_id\": {\"type\": \"integer\", \"description\": \"person id\"}}, \"required\": [\"person_id\"]}}, {\"name\": \"GET_movie__movie_id__images\", \"description\": \"Get the images that belong to a movie.\\n\\nQuerying images with a `language` parameter will filter the results. If you want to include a fallback language (especially useful for backdrops) you can use the `include_image_language` parameter. This should be a comma seperated value like so: `include_image_language=en,null`.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"movie_id\": {\"type\": \"integer\", \"description\": \"movie id\"}, \"include_image_language\": {\"type\": \"string\", \"description\": \"include image language\"}}, \"required\": [\"movie_id\"]}}]\n\nGraphQL schema:\n\ntype GET_movie__movie_id__images_BackdropsEntry {\n  aspect_ratio: Float\n  file_path: String\n  height: Int\n  iso_639_1: String\n  vote_average: Float\n  vote_count: Int\n  width: Int\n}\n\ntype GET_movie__movie_id__images_LogosEntry {\n  aspect_ratio: Float\n  file_path: String\n  height: Int\n  iso_639_1: String\n  vote_average: Float\n  vote_count: Int\n  width: Int\n}\n\ntype GET_movie__movie_id__images_PostersEntry {\n  aspect_ratio: Float\n  file_path: String\n  height: Int\n  iso_639_1: String\n  vote_average: Float\n  vote_count: Int\n  width: Int\n}\n\ntype GET_movie__movie_id__images_Root {\n  backdrops: [GET_movie__movie_id__images_BackdropsEntry]\n  id: Int\n  logos: [GET_movie__movie_id__images_LogosEntry]\n  posters: [GET_movie__movie_id__images_PostersEntry]\n}\n\ntype Query {\n  GET_movie__movie_id__images(\n    movie_id: String!\n    tmdb_access_token: String!\n  ): GET_movie__movie_id__images_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/movie/$movie_id;/images\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_search_person_KnownForEntry {\n  adult: Boolean\n  backdrop_path: String\n  genre_ids: [Int]\n  id: Int\n  media_type: String\n  original_language: String\n  original_title: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  release_date: Date\n  title: String\n  video: Boolean\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_search_person_ResultsEntry {\n  adult: Boolean\n  gender: Int\n  id: Int\n  known_for: [GET_search_person_KnownForEntry]\n  known_for_department: String\n  name: String\n  original_name: String\n  popularity: Float\n  profile_path: String\n}\n\ntype GET_search_person_Root {\n  page: Int\n  results: [GET_search_person_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_search_person(\n    query: String\n    tmdb_access_token: String!\n  ): GET_search_person_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/search/person\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_person__person_id__movie_credits_CastEntry {\n  adult: Boolean\n  backdrop_path: String\n  character: String\n  credit_id: String\n  genre_ids: [Int]\n  id: Int\n  order: Int\n  original_language: String\n  original_title: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  release_date: String\n  title: String\n  video: Boolean\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_person__person_id__movie_credits_CrewEntry {\n  adult: Boolean\n  backdrop_path: String\n  credit_id: String\n  department: String\n  genre_ids: [Int]\n  id: Int\n  job: String\n  original_language: String\n  original_title: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  release_date: String\n  title: String\n  video: Boolean\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_person__person_id__movie_credits_Root {\n  cast: [GET_person__person_id__movie_credits_CastEntry]\n  crew: [GET_person__person_id__movie_credits_CrewEntry]\n  id: Int\n}\n\ntype Query {\n  GET_person__person_id__movie_credits(\n    person_id: String!\n    tmdb_access_token: String!\n  ): GET_person__person_id__movie_credits_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/person/$person_id;/movie_credits\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\n\nUtterance: Give me some cover images of movies directed by Christopher Nolan.", "output": "response_obj = GET_search_person(query=\"Christopher Nolan\")\nresponse_obj1 = GET_person__person_id__movie_credits(person_id=response_obj.results[0].id)\nGET_movie__movie_id__images(movie_id=response_obj1.crew[0].id)\n", "function_specs": "[{\"name\": \"GET_search_person\", \"description\": \"Search for people.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"query\": {\"type\": \"string\", \"description\": \"query\"}, \"page\": {\"type\": \"integer\", \"description\": \"page\"}, \"include_adult\": {\"type\": \"boolean\", \"description\": \"include adult\"}, \"region\": {\"type\": \"string\", \"description\": \"region\"}}, \"required\": [\"query\"]}}, {\"name\": \"GET_person__person_id__movie_credits\", \"description\": \"Get the movie credits for a person, the results contains various information such as popularity and release date.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"person_id\": {\"type\": \"integer\", \"description\": \"person id\"}}, \"required\": [\"person_id\"]}}, {\"name\": \"GET_movie__movie_id__images\", \"description\": \"Get the images that belong to a movie.\\n\\nQuerying images with a `language` parameter will filter the results. If you want to include a fallback language (especially useful for backdrops) you can use the `include_image_language` parameter. This should be a comma seperated value like so: `include_image_language=en,null`.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"movie_id\": {\"type\": \"integer\", \"description\": \"movie id\"}, \"include_image_language\": {\"type\": \"string\", \"description\": \"include image language\"}}, \"required\": [\"movie_id\"]}}]", "GraphQL_schema": "type GET_movie__movie_id__images_BackdropsEntry {\n  aspect_ratio: Float\n  file_path: String\n  height: Int\n  iso_639_1: String\n  vote_average: Float\n  vote_count: Int\n  width: Int\n}\n\ntype GET_movie__movie_id__images_LogosEntry {\n  aspect_ratio: Float\n  file_path: String\n  height: Int\n  iso_639_1: String\n  vote_average: Float\n  vote_count: Int\n  width: Int\n}\n\ntype GET_movie__movie_id__images_PostersEntry {\n  aspect_ratio: Float\n  file_path: String\n  height: Int\n  iso_639_1: String\n  vote_average: Float\n  vote_count: Int\n  width: Int\n}\n\ntype GET_movie__movie_id__images_Root {\n  backdrops: [GET_movie__movie_id__images_BackdropsEntry]\n  id: Int\n  logos: [GET_movie__movie_id__images_LogosEntry]\n  posters: [GET_movie__movie_id__images_PostersEntry]\n}\n\ntype Query {\n  GET_movie__movie_id__images(\n    movie_id: String!\n    tmdb_access_token: String!\n  ): GET_movie__movie_id__images_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/movie/$movie_id;/images\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_search_person_KnownForEntry {\n  adult: Boolean\n  backdrop_path: String\n  genre_ids: [Int]\n  id: Int\n  media_type: String\n  original_language: String\n  original_title: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  release_date: Date\n  title: String\n  video: Boolean\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_search_person_ResultsEntry {\n  adult: Boolean\n  gender: Int\n  id: Int\n  known_for: [GET_search_person_KnownForEntry]\n  known_for_department: String\n  name: String\n  original_name: String\n  popularity: Float\n  profile_path: String\n}\n\ntype GET_search_person_Root {\n  page: Int\n  results: [GET_search_person_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_search_person(\n    query: String\n    tmdb_access_token: String!\n  ): GET_search_person_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/search/person\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_person__person_id__movie_credits_CastEntry {\n  adult: Boolean\n  backdrop_path: String\n  character: String\n  credit_id: String\n  genre_ids: [Int]\n  id: Int\n  order: Int\n  original_language: String\n  original_title: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  release_date: String\n  title: String\n  video: Boolean\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_person__person_id__movie_credits_CrewEntry {\n  adult: Boolean\n  backdrop_path: String\n  credit_id: String\n  department: String\n  genre_ids: [Int]\n  id: Int\n  job: String\n  original_language: String\n  original_title: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  release_date: String\n  title: String\n  video: Boolean\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_person__person_id__movie_credits_Root {\n  cast: [GET_person__person_id__movie_credits_CastEntry]\n  crew: [GET_person__person_id__movie_credits_CrewEntry]\n  id: Int\n}\n\ntype Query {\n  GET_person__person_id__movie_credits(\n    person_id: String!\n    tmdb_access_token: String!\n  ): GET_person__person_id__movie_credits_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/person/$person_id;/movie_credits\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\n", "utterance": "Give me some cover images of movies directed by Christopher Nolan."}
{"domain": "tmdb", "input": "Function Signatures:\n\n[{\"name\": \"GET_tv_top_rated\", \"description\": \"Get a list of the top rated TV shows on TMDb.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"page\": {\"type\": \"integer\", \"description\": \"page\"}}, \"required\": []}}, {\"name\": \"GET_tv__tv_id__keywords\", \"description\": \"Get the keywords that have been added to a TV show.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"tv_id\": {\"type\": \"integer\", \"description\": \"tv id\"}}, \"required\": [\"tv_id\"]}}]\n\nGraphQL schema:\n\ntype GET_tv_top_rated_ResultsEntry {\n  adult: Boolean\n  backdrop_path: String\n  first_air_date: Date\n  genre_ids: [Int]\n  id: Int\n  name: String\n  origin_country: [String]\n  original_language: String\n  original_name: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_tv_top_rated_Root {\n  page: Int\n  results: [GET_tv_top_rated_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_tv_top_rated(tmdb_access_token: String!): GET_tv_top_rated_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/tv/top_rated\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_tv__tv_id__keywords_ResultsEntry {\n  id: Int\n  name: String\n}\n\ntype GET_tv__tv_id__keywords_Root {\n  id: Int\n  results: [GET_tv__tv_id__keywords_ResultsEntry]\n}\n\ntype Query {\n  GET_tv__tv_id__keywords(\n    tmdb_access_token: String!\n    tv_id: String!\n  ): GET_tv__tv_id__keywords_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/tv/$tv_id;/keywords\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\n\nUtterance: give me a keyword of the top-1 rated TV show", "output": "response_obj = GET_tv_top_rated()\nGET_tv__tv_id__keywords(tv_id=response_obj.results[0].id)\n", "function_specs": "[{\"name\": \"GET_tv_top_rated\", \"description\": \"Get a list of the top rated TV shows on TMDb.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"page\": {\"type\": \"integer\", \"description\": \"page\"}}, \"required\": []}}, {\"name\": \"GET_tv__tv_id__keywords\", \"description\": \"Get the keywords that have been added to a TV show.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"tv_id\": {\"type\": \"integer\", \"description\": \"tv id\"}}, \"required\": [\"tv_id\"]}}]", "GraphQL_schema": "type GET_tv_top_rated_ResultsEntry {\n  adult: Boolean\n  backdrop_path: String\n  first_air_date: Date\n  genre_ids: [Int]\n  id: Int\n  name: String\n  origin_country: [String]\n  original_language: String\n  original_name: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_tv_top_rated_Root {\n  page: Int\n  results: [GET_tv_top_rated_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_tv_top_rated(tmdb_access_token: String!): GET_tv_top_rated_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/tv/top_rated\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_tv__tv_id__keywords_ResultsEntry {\n  id: Int\n  name: String\n}\n\ntype GET_tv__tv_id__keywords_Root {\n  id: Int\n  results: [GET_tv__tv_id__keywords_ResultsEntry]\n}\n\ntype Query {\n  GET_tv__tv_id__keywords(\n    tmdb_access_token: String!\n    tv_id: String!\n  ): GET_tv__tv_id__keywords_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/tv/$tv_id;/keywords\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\n", "utterance": "give me a keyword of the top-1 rated TV show"}
{"domain": "tmdb", "input": "Function Signatures:\n\n[{\"name\": \"GET_search_movie\", \"description\": \"Search for movies.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"query\": {\"type\": \"string\", \"description\": \"query\"}, \"page\": {\"type\": \"integer\", \"description\": \"page\"}, \"include_adult\": {\"type\": \"boolean\", \"description\": \"include adult\"}, \"region\": {\"type\": \"string\", \"description\": \"region\"}, \"year\": {\"type\": \"integer\", \"description\": \"year\"}, \"primary_release_year\": {\"type\": \"integer\", \"description\": \"primary release year\"}}, \"required\": [\"query\"]}}, {\"name\": \"GET_movie__movie_id__credits\", \"description\": \"Get the cast and crew for a movie.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"movie_id\": {\"type\": \"integer\", \"description\": \"movie id\"}}, \"required\": [\"movie_id\"]}}]\n\nGraphQL schema:\n\ntype GET_search_movie_ResultsEntry {\n  adult: Boolean\n  backdrop_path: String\n  genre_ids: [Int]\n  id: Int\n  original_language: String\n  original_title: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  release_date: Date\n  title: String\n  video: Boolean\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_search_movie_Root {\n  page: Int\n  results: [GET_search_movie_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_search_movie(\n    query: String\n    tmdb_access_token: String!\n  ): GET_search_movie_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/search/movie\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_movie__movie_id__credits_CastEntry {\n  adult: Boolean\n  cast_id: Int\n  character: String\n  credit_id: String\n  gender: Int\n  id: Int\n  known_for_department: String\n  name: String\n  order: Int\n  original_name: String\n  popularity: Float\n  profile_path: String\n}\n\ntype GET_movie__movie_id__credits_CrewEntry {\n  adult: Boolean\n  credit_id: String\n  department: String\n  gender: Int\n  id: Int\n  job: String\n  known_for_department: String\n  name: String\n  original_name: String\n  popularity: Float\n  profile_path: String\n}\n\ntype GET_movie__movie_id__credits_Root {\n  cast: [GET_movie__movie_id__credits_CastEntry]\n  crew: [GET_movie__movie_id__credits_CrewEntry]\n  id: Int\n}\n\ntype Query {\n  GET_movie__movie_id__credits(\n    movie_id: String!\n    tmdb_access_token: String!\n  ): GET_movie__movie_id__credits_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/movie/$movie_id;/credits\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\n\nUtterance: Who is the director of the movie \"Twilight\"?", "output": "response_obj = GET_search_movie(query)\nGET_movie__movie_id__credits(movie_id=response_obj.results[0].id)\n", "function_specs": "[{\"name\": \"GET_search_movie\", \"description\": \"Search for movies.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"query\": {\"type\": \"string\", \"description\": \"query\"}, \"page\": {\"type\": \"integer\", \"description\": \"page\"}, \"include_adult\": {\"type\": \"boolean\", \"description\": \"include adult\"}, \"region\": {\"type\": \"string\", \"description\": \"region\"}, \"year\": {\"type\": \"integer\", \"description\": \"year\"}, \"primary_release_year\": {\"type\": \"integer\", \"description\": \"primary release year\"}}, \"required\": [\"query\"]}}, {\"name\": \"GET_movie__movie_id__credits\", \"description\": \"Get the cast and crew for a movie.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"movie_id\": {\"type\": \"integer\", \"description\": \"movie id\"}}, \"required\": [\"movie_id\"]}}]", "GraphQL_schema": "type GET_search_movie_ResultsEntry {\n  adult: Boolean\n  backdrop_path: String\n  genre_ids: [Int]\n  id: Int\n  original_language: String\n  original_title: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  release_date: Date\n  title: String\n  video: Boolean\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_search_movie_Root {\n  page: Int\n  results: [GET_search_movie_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_search_movie(\n    query: String\n    tmdb_access_token: String!\n  ): GET_search_movie_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/search/movie\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_movie__movie_id__credits_CastEntry {\n  adult: Boolean\n  cast_id: Int\n  character: String\n  credit_id: String\n  gender: Int\n  id: Int\n  known_for_department: String\n  name: String\n  order: Int\n  original_name: String\n  popularity: Float\n  profile_path: String\n}\n\ntype GET_movie__movie_id__credits_CrewEntry {\n  adult: Boolean\n  credit_id: String\n  department: String\n  gender: Int\n  id: Int\n  job: String\n  known_for_department: String\n  name: String\n  original_name: String\n  popularity: Float\n  profile_path: String\n}\n\ntype GET_movie__movie_id__credits_Root {\n  cast: [GET_movie__movie_id__credits_CastEntry]\n  crew: [GET_movie__movie_id__credits_CrewEntry]\n  id: Int\n}\n\ntype Query {\n  GET_movie__movie_id__credits(\n    movie_id: String!\n    tmdb_access_token: String!\n  ): GET_movie__movie_id__credits_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/movie/$movie_id;/credits\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\n", "utterance": "Who is the director of the movie \"Twilight\"?"}
{"domain": "tmdb", "input": "Function Signatures:\n\n[{\"name\": \"GET_search_person\", \"description\": \"Search for people.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"query\": {\"type\": \"string\", \"description\": \"query\"}, \"page\": {\"type\": \"integer\", \"description\": \"page\"}, \"include_adult\": {\"type\": \"boolean\", \"description\": \"include adult\"}, \"region\": {\"type\": \"string\", \"description\": \"region\"}}, \"required\": [\"query\"]}}, {\"name\": \"GET_person__person_id_\", \"description\": \"Get the primary person details by id.\\n\\nSupports `append_to_response`. Read more about this [here](#docTextSection:JdZq8ctmcxNqyLQjp).\\n\\n#### Recent Changes\\n\\n| **Date** | **Change** |\\n| - | - |\\n| July 17, 2018 | Added the `known_for_department` field. |\\n| April 26, 2018 | Added the [translations](#endpoint:CSaMjCxXAtGpxNGfS) method. |\\n| November 9, 2016 | Biographies are now translatable on TMDb. This means you can query person details with a language parameter. |\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"person_id\": {\"type\": \"integer\", \"description\": \"person id\"}}, \"required\": [\"person_id\"]}}]\n\nGraphQL schema:\n\ntype GET_search_person_KnownForEntry {\n  adult: Boolean\n  backdrop_path: String\n  genre_ids: [Int]\n  id: Int\n  media_type: String\n  original_language: String\n  original_title: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  release_date: Date\n  title: String\n  video: Boolean\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_search_person_ResultsEntry {\n  adult: Boolean\n  gender: Int\n  id: Int\n  known_for: [GET_search_person_KnownForEntry]\n  known_for_department: String\n  name: String\n  original_name: String\n  popularity: Float\n  profile_path: String\n}\n\ntype GET_search_person_Root {\n  page: Int\n  results: [GET_search_person_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_search_person(\n    query: String\n    tmdb_access_token: String!\n  ): GET_search_person_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/search/person\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_person__person_id_Root {\n  adult: Boolean\n  also_known_as: [String]\n  biography: String\n  birthday: Date\n  \"\"\"\n  Field \"deathday\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  deathday: JSON\n  gender: Int\n  \"\"\"\n  Field \"homepage\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  homepage: JSON\n  id: Int\n  imdb_id: String\n  known_for_department: String\n  name: String\n  place_of_birth: String\n  popularity: Float\n  profile_path: String\n}\n\ntype Query {\n  GET_person__person_id_(\n    person_id: String!\n    tmdb_access_token: String!\n  ): GET_person__person_id_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/person/$person_id;\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\n\nUtterance: Tell me about actor Scarlett Johansson's birthday", "output": "response_obj = GET_search_person(query=\"Scarlett Johansson\")\nGET_person__person_id_(person_id=response_obj.results[0].id)\n", "function_specs": "[{\"name\": \"GET_search_person\", \"description\": \"Search for people.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"query\": {\"type\": \"string\", \"description\": \"query\"}, \"page\": {\"type\": \"integer\", \"description\": \"page\"}, \"include_adult\": {\"type\": \"boolean\", \"description\": \"include adult\"}, \"region\": {\"type\": \"string\", \"description\": \"region\"}}, \"required\": [\"query\"]}}, {\"name\": \"GET_person__person_id_\", \"description\": \"Get the primary person details by id.\\n\\nSupports `append_to_response`. Read more about this [here](#docTextSection:JdZq8ctmcxNqyLQjp).\\n\\n#### Recent Changes\\n\\n| **Date** | **Change** |\\n| - | - |\\n| July 17, 2018 | Added the `known_for_department` field. |\\n| April 26, 2018 | Added the [translations](#endpoint:CSaMjCxXAtGpxNGfS) method. |\\n| November 9, 2016 | Biographies are now translatable on TMDb. This means you can query person details with a language parameter. |\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"person_id\": {\"type\": \"integer\", \"description\": \"person id\"}}, \"required\": [\"person_id\"]}}]", "GraphQL_schema": "type GET_search_person_KnownForEntry {\n  adult: Boolean\n  backdrop_path: String\n  genre_ids: [Int]\n  id: Int\n  media_type: String\n  original_language: String\n  original_title: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  release_date: Date\n  title: String\n  video: Boolean\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_search_person_ResultsEntry {\n  adult: Boolean\n  gender: Int\n  id: Int\n  known_for: [GET_search_person_KnownForEntry]\n  known_for_department: String\n  name: String\n  original_name: String\n  popularity: Float\n  profile_path: String\n}\n\ntype GET_search_person_Root {\n  page: Int\n  results: [GET_search_person_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_search_person(\n    query: String\n    tmdb_access_token: String!\n  ): GET_search_person_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/search/person\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_person__person_id_Root {\n  adult: Boolean\n  also_known_as: [String]\n  biography: String\n  birthday: Date\n  \"\"\"\n  Field \"deathday\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  deathday: JSON\n  gender: Int\n  \"\"\"\n  Field \"homepage\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  homepage: JSON\n  id: Int\n  imdb_id: String\n  known_for_department: String\n  name: String\n  place_of_birth: String\n  popularity: Float\n  profile_path: String\n}\n\ntype Query {\n  GET_person__person_id_(\n    person_id: String!\n    tmdb_access_token: String!\n  ): GET_person__person_id_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/person/$person_id;\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\n", "utterance": "Tell me about actor Scarlett Johansson's birthday"}
{"domain": "tmdb", "input": "Function Signatures:\n\n[{\"name\": \"GET_search_company\", \"description\": \"Search for companies.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"query\": {\"type\": \"string\", \"description\": \"query\"}, \"page\": {\"type\": \"integer\", \"description\": \"page\"}}, \"required\": [\"query\"]}}, {\"name\": \"GET_company__company_id__images\", \"description\": \"Get a companies logos by id.\\n\\nThere are two image formats that are supported for companies, PNG's and SVG's. You can see which type the original file is by looking at the `file_type` field. We prefer SVG's as they are resolution independent and as such, the width and height are only there to reflect the original asset that was uploaded. An SVG can be scaled properly beyond those dimensions if you call them as a PNG.\\n\\nFor more information about how SVG's and PNG's can be used, take a read through [this document](#docTextSection:mXP9B2uzoDJFguDZv).\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"company_id\": {\"type\": \"integer\", \"description\": \"company id\"}}, \"required\": [\"company_id\"]}}]\n\nGraphQL schema:\n\ntype GET_search_company_ResultsEntry {\n  id: Int\n  logo_path: String\n  name: String\n  origin_country: String\n}\n\ntype GET_search_company_Root {\n  page: Int\n  results: [GET_search_company_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_search_company(\n    query: String\n    tmdb_access_token: String!\n  ): GET_search_company_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/search/company\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_company__company_id__images_LogosEntry {\n  aspect_ratio: Float\n  file_path: String\n  file_type: String\n  height: Int\n  id: String\n  vote_average: Float\n  vote_count: Int\n  width: Int\n}\n\ntype GET_company__company_id__images_Root {\n  id: Int\n  logos: [GET_company__company_id__images_LogosEntry]\n}\n\ntype Query {\n  GET_company__company_id__images(\n    company_id: String!\n    tmdb_access_token: String!\n  ): GET_company__company_id__images_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/company/$company_id;/images\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\n\nUtterance: What does the logo look like for Paramount Pictures?", "output": "response_obj = GET_search_company(query=\"Paramount Pictures\")\nresponse_obj1 = GET_company__company_id_(company_id=response_obj.results[0].id)\nGET_company__company_id__images(company_id=response_obj.results[0].id)\n", "function_specs": "[{\"name\": \"GET_search_company\", \"description\": \"Search for companies.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"query\": {\"type\": \"string\", \"description\": \"query\"}, \"page\": {\"type\": \"integer\", \"description\": \"page\"}}, \"required\": [\"query\"]}}, {\"name\": \"GET_company__company_id__images\", \"description\": \"Get a companies logos by id.\\n\\nThere are two image formats that are supported for companies, PNG's and SVG's. You can see which type the original file is by looking at the `file_type` field. We prefer SVG's as they are resolution independent and as such, the width and height are only there to reflect the original asset that was uploaded. An SVG can be scaled properly beyond those dimensions if you call them as a PNG.\\n\\nFor more information about how SVG's and PNG's can be used, take a read through [this document](#docTextSection:mXP9B2uzoDJFguDZv).\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"company_id\": {\"type\": \"integer\", \"description\": \"company id\"}}, \"required\": [\"company_id\"]}}]", "GraphQL_schema": "type GET_search_company_ResultsEntry {\n  id: Int\n  logo_path: String\n  name: String\n  origin_country: String\n}\n\ntype GET_search_company_Root {\n  page: Int\n  results: [GET_search_company_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_search_company(\n    query: String\n    tmdb_access_token: String!\n  ): GET_search_company_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/search/company\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_company__company_id__images_LogosEntry {\n  aspect_ratio: Float\n  file_path: String\n  file_type: String\n  height: Int\n  id: String\n  vote_average: Float\n  vote_count: Int\n  width: Int\n}\n\ntype GET_company__company_id__images_Root {\n  id: Int\n  logos: [GET_company__company_id__images_LogosEntry]\n}\n\ntype Query {\n  GET_company__company_id__images(\n    company_id: String!\n    tmdb_access_token: String!\n  ): GET_company__company_id__images_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/company/$company_id;/images\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\n", "utterance": "What does the logo look like for Paramount Pictures?"}
{"domain": "tmdb", "input": "Function Signatures:\n\n[{\"name\": \"GET_search_collection\", \"description\": \"Search for collections.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"query\": {\"type\": \"string\", \"description\": \"query\"}, \"page\": {\"type\": \"integer\", \"description\": \"page\"}}, \"required\": [\"query\"]}}, {\"name\": \"GET_collection__collection_id_\", \"description\": \"Get collection details by id.\\n\\n#### Recent Changes\\n\\n| **Date** | **Change** |\\n| - | - |\\n| March 16, 2018 | Added the [translations](#endpoint:bhcsxEgRvyk3N7FnD) method. |\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"collection_id\": {\"type\": \"integer\", \"description\": \"collection id\"}}, \"required\": [\"collection_id\"]}}, {\"name\": \"GET_movie__movie_id__reviews\", \"description\": \"Get the user reviews for a movie.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"movie_id\": {\"type\": \"integer\", \"description\": \"movie id\"}, \"page\": {\"type\": \"integer\", \"description\": \"page\"}}, \"required\": [\"movie_id\"]}}]\n\nGraphQL schema:\n\ntype GET_movie__movie_id__reviews_AuthorDetails {\n  avatar_path: String\n  name: String\n  rating: Int\n  username: String\n}\n\ntype GET_movie__movie_id__reviews_ResultsEntry {\n  author: String\n  author_details: GET_movie__movie_id__reviews_AuthorDetails\n  content: String\n  created_at: DateTime\n  id: String\n  updated_at: DateTime\n  url: String\n}\n\ntype GET_movie__movie_id__reviews_Root {\n  id: Int\n  page: Int\n  results: [GET_movie__movie_id__reviews_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_movie__movie_id__reviews(\n    movie_id: String!\n    tmdb_access_token: String!\n  ): GET_movie__movie_id__reviews_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/movie/$movie_id;/reviews\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_search_collection_ResultsEntry {\n  adult: Boolean\n  backdrop_path: String\n  id: Int\n  name: String\n  original_language: String\n  original_name: String\n  overview: String\n  poster_path: String\n}\n\ntype GET_search_collection_Root {\n  page: Int\n  results: [GET_search_collection_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_search_collection(\n    query: String\n    tmdb_access_token: String!\n  ): GET_search_collection_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/search/collection\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_collection__collection_id_PartsEntry {\n  adult: Boolean\n  backdrop_path: String\n  genre_ids: [Int]\n  id: Int\n  media_type: String\n  original_language: String\n  original_title: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  release_date: Date\n  title: String\n  video: Boolean\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_collection__collection_id_Root {\n  backdrop_path: String\n  id: Int\n  name: String\n  overview: String\n  parts: [GET_collection__collection_id_PartsEntry]\n  poster_path: String\n}\n\ntype Query {\n  GET_collection__collection_id_(\n    collection_id: String!\n    tmdb_access_token: String!\n  ): GET_collection__collection_id_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/collection/$collection_id;\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\n\nUtterance: Give me a review of a movie from the collection The Fast and the Furious.", "output": "response_obj = GET_search_collection(query=\"The Fast and the Furious\")\nresponse_obj1 = GET_collection__collection_id_(collection_id=response_obj.results[0].id)\nGET_movie__movie_id__reviews(movie_id=response_obj1.parts[0].id)\n", "function_specs": "[{\"name\": \"GET_search_collection\", \"description\": \"Search for collections.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"query\": {\"type\": \"string\", \"description\": \"query\"}, \"page\": {\"type\": \"integer\", \"description\": \"page\"}}, \"required\": [\"query\"]}}, {\"name\": \"GET_collection__collection_id_\", \"description\": \"Get collection details by id.\\n\\n#### Recent Changes\\n\\n| **Date** | **Change** |\\n| - | - |\\n| March 16, 2018 | Added the [translations](#endpoint:bhcsxEgRvyk3N7FnD) method. |\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"collection_id\": {\"type\": \"integer\", \"description\": \"collection id\"}}, \"required\": [\"collection_id\"]}}, {\"name\": \"GET_movie__movie_id__reviews\", \"description\": \"Get the user reviews for a movie.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"movie_id\": {\"type\": \"integer\", \"description\": \"movie id\"}, \"page\": {\"type\": \"integer\", \"description\": \"page\"}}, \"required\": [\"movie_id\"]}}]", "GraphQL_schema": "type GET_movie__movie_id__reviews_AuthorDetails {\n  avatar_path: String\n  name: String\n  rating: Int\n  username: String\n}\n\ntype GET_movie__movie_id__reviews_ResultsEntry {\n  author: String\n  author_details: GET_movie__movie_id__reviews_AuthorDetails\n  content: String\n  created_at: DateTime\n  id: String\n  updated_at: DateTime\n  url: String\n}\n\ntype GET_movie__movie_id__reviews_Root {\n  id: Int\n  page: Int\n  results: [GET_movie__movie_id__reviews_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_movie__movie_id__reviews(\n    movie_id: String!\n    tmdb_access_token: String!\n  ): GET_movie__movie_id__reviews_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/movie/$movie_id;/reviews\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_search_collection_ResultsEntry {\n  adult: Boolean\n  backdrop_path: String\n  id: Int\n  name: String\n  original_language: String\n  original_name: String\n  overview: String\n  poster_path: String\n}\n\ntype GET_search_collection_Root {\n  page: Int\n  results: [GET_search_collection_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_search_collection(\n    query: String\n    tmdb_access_token: String!\n  ): GET_search_collection_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/search/collection\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_collection__collection_id_PartsEntry {\n  adult: Boolean\n  backdrop_path: String\n  genre_ids: [Int]\n  id: Int\n  media_type: String\n  original_language: String\n  original_title: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  release_date: Date\n  title: String\n  video: Boolean\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_collection__collection_id_Root {\n  backdrop_path: String\n  id: Int\n  name: String\n  overview: String\n  parts: [GET_collection__collection_id_PartsEntry]\n  poster_path: String\n}\n\ntype Query {\n  GET_collection__collection_id_(\n    collection_id: String!\n    tmdb_access_token: String!\n  ): GET_collection__collection_id_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/collection/$collection_id;\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\n", "utterance": "Give me a review of a movie from the collection The Fast and the Furious."}
{"domain": "tmdb", "input": "Function Signatures:\n\n[{\"name\": \"GET_search_tv\", \"description\": \"Search for a TV show.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"page\": {\"type\": \"integer\", \"description\": \"page\"}, \"query\": {\"type\": \"string\", \"description\": \"query\"}, \"include_adult\": {\"type\": \"boolean\", \"description\": \"include adult\"}, \"first_air_date_year\": {\"type\": \"integer\", \"description\": \"first air date year\"}}, \"required\": [\"query\"]}}, {\"name\": \"GET_tv__tv_id_\", \"description\": \"Get the primary TV show details by id.\\n\\nSupports `append_to_response`. Read more about this [here](#docTextSection:JdZq8ctmcxNqyLQjp).\\n\\n#### Recent Changes\\n\\n| **Date** | **Change** |\\n| - | - |\\n| July 17, 2018 | We now return `last_episode_to_air` and `next_episode_to_air` fields. |\\n| March 12, 2018 | Networks return proper logos and we introduced SVG support. |\\n| March 8, 2018 | The `seasons` field now returns the translated names and overviews. |\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"tv_id\": {\"type\": \"integer\", \"description\": \"tv id\"}}, \"required\": [\"tv_id\"]}}, {\"name\": \"GET_network__network_id_\", \"description\": \"Get the details of a network.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"network_id\": {\"type\": \"integer\", \"description\": \"network id\"}}, \"required\": [\"network_id\"]}}]\n\nGraphQL schema:\n\ntype GET_network__network_id_Root {\n  headquarters: String\n  homepage: String\n  id: Int\n  logo_path: String\n  name: String\n  origin_country: String\n}\n\ntype Query {\n  GET_network__network_id_(\n    network_id: String!\n    tmdb_access_token: String!\n  ): GET_network__network_id_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/network/$network_id;\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_search_tv_ResultsEntry {\n  adult: Boolean\n  backdrop_path: String\n  first_air_date: String\n  genre_ids: [Int]\n  id: Int\n  name: String\n  origin_country: [String]\n  original_language: String\n  original_name: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_search_tv_Root {\n  page: Int\n  results: [GET_search_tv_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_search_tv(query: String, tmdb_access_token: String!): GET_search_tv_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/search/tv\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_tv__tv_id_CreatedByEntry {\n  credit_id: String\n  gender: Int\n  id: Int\n  name: String\n  original_name: String\n  profile_path: String\n}\n\ntype GET_tv__tv_id_GenresEntry {\n  id: Int\n  name: String\n}\n\ntype GET_tv__tv_id_LastEpisodeToAir {\n  air_date: Date\n  episode_number: Int\n  episode_type: String\n  id: Int\n  name: String\n  overview: String\n  production_code: String\n  runtime: Int\n  season_number: Int\n  show_id: Int\n  still_path: String\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_tv__tv_id_NetworksEntry {\n  id: Int\n  logo_path: String\n  name: String\n  origin_country: String\n}\n\ntype GET_tv__tv_id_ProductionCompaniesEntry {\n  id: Int\n  logo_path: String\n  name: String\n  origin_country: String\n}\n\ntype GET_tv__tv_id_ProductionCountriesEntry {\n  iso_3166_1: String\n  name: String\n}\n\ntype GET_tv__tv_id_Root {\n  adult: Boolean\n  backdrop_path: String\n  created_by: [GET_tv__tv_id_CreatedByEntry]\n  episode_run_time: [Int]\n  first_air_date: Date\n  genres: [GET_tv__tv_id_GenresEntry]\n  homepage: String\n  id: Int\n  in_production: Boolean\n  languages: [String]\n  last_air_date: Date\n  last_episode_to_air: GET_tv__tv_id_LastEpisodeToAir\n  name: String\n  networks: [GET_tv__tv_id_NetworksEntry]\n  \"\"\"\n  Field \"next_episode_to_air\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  next_episode_to_air: JSON\n  number_of_episodes: Int\n  number_of_seasons: Int\n  origin_country: [String]\n  original_language: String\n  original_name: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  production_companies: [GET_tv__tv_id_ProductionCompaniesEntry]\n  production_countries: [GET_tv__tv_id_ProductionCountriesEntry]\n  seasons: [GET_tv__tv_id_SeasonsEntry]\n  spoken_languages: [GET_tv__tv_id_SpokenLanguagesEntry]\n  status: String\n  tagline: String\n  type: String\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_tv__tv_id_SeasonsEntry {\n  air_date: Date\n  episode_count: Int\n  id: Int\n  name: String\n  overview: String\n  poster_path: String\n  season_number: Int\n  vote_average: Float\n}\n\ntype GET_tv__tv_id_SpokenLanguagesEntry {\n  english_name: String\n  iso_639_1: String\n  name: String\n}\n\ntype Query {\n  GET_tv__tv_id_(\n    tmdb_access_token: String!\n    tv_id: String!\n  ): GET_tv__tv_id_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/tv/$tv_id;\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\n\nUtterance: give me the homepage of the network that produced Game of Thrones", "output": "response_obj = GET_search_tv(query=\"Game of Thrones\")\nresponse_obj1 = GET_tv__tv_id_(tv_id=response_obj.results[0].id)\nGET_network__network_id_(network_id=response_obj1.networks[0].id)\n", "function_specs": "[{\"name\": \"GET_search_tv\", \"description\": \"Search for a TV show.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"page\": {\"type\": \"integer\", \"description\": \"page\"}, \"query\": {\"type\": \"string\", \"description\": \"query\"}, \"include_adult\": {\"type\": \"boolean\", \"description\": \"include adult\"}, \"first_air_date_year\": {\"type\": \"integer\", \"description\": \"first air date year\"}}, \"required\": [\"query\"]}}, {\"name\": \"GET_tv__tv_id_\", \"description\": \"Get the primary TV show details by id.\\n\\nSupports `append_to_response`. Read more about this [here](#docTextSection:JdZq8ctmcxNqyLQjp).\\n\\n#### Recent Changes\\n\\n| **Date** | **Change** |\\n| - | - |\\n| July 17, 2018 | We now return `last_episode_to_air` and `next_episode_to_air` fields. |\\n| March 12, 2018 | Networks return proper logos and we introduced SVG support. |\\n| March 8, 2018 | The `seasons` field now returns the translated names and overviews. |\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"tv_id\": {\"type\": \"integer\", \"description\": \"tv id\"}}, \"required\": [\"tv_id\"]}}, {\"name\": \"GET_network__network_id_\", \"description\": \"Get the details of a network.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"network_id\": {\"type\": \"integer\", \"description\": \"network id\"}}, \"required\": [\"network_id\"]}}]", "GraphQL_schema": "type GET_network__network_id_Root {\n  headquarters: String\n  homepage: String\n  id: Int\n  logo_path: String\n  name: String\n  origin_country: String\n}\n\ntype Query {\n  GET_network__network_id_(\n    network_id: String!\n    tmdb_access_token: String!\n  ): GET_network__network_id_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/network/$network_id;\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_search_tv_ResultsEntry {\n  adult: Boolean\n  backdrop_path: String\n  first_air_date: String\n  genre_ids: [Int]\n  id: Int\n  name: String\n  origin_country: [String]\n  original_language: String\n  original_name: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_search_tv_Root {\n  page: Int\n  results: [GET_search_tv_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_search_tv(query: String, tmdb_access_token: String!): GET_search_tv_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/search/tv\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_tv__tv_id_CreatedByEntry {\n  credit_id: String\n  gender: Int\n  id: Int\n  name: String\n  original_name: String\n  profile_path: String\n}\n\ntype GET_tv__tv_id_GenresEntry {\n  id: Int\n  name: String\n}\n\ntype GET_tv__tv_id_LastEpisodeToAir {\n  air_date: Date\n  episode_number: Int\n  episode_type: String\n  id: Int\n  name: String\n  overview: String\n  production_code: String\n  runtime: Int\n  season_number: Int\n  show_id: Int\n  still_path: String\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_tv__tv_id_NetworksEntry {\n  id: Int\n  logo_path: String\n  name: String\n  origin_country: String\n}\n\ntype GET_tv__tv_id_ProductionCompaniesEntry {\n  id: Int\n  logo_path: String\n  name: String\n  origin_country: String\n}\n\ntype GET_tv__tv_id_ProductionCountriesEntry {\n  iso_3166_1: String\n  name: String\n}\n\ntype GET_tv__tv_id_Root {\n  adult: Boolean\n  backdrop_path: String\n  created_by: [GET_tv__tv_id_CreatedByEntry]\n  episode_run_time: [Int]\n  first_air_date: Date\n  genres: [GET_tv__tv_id_GenresEntry]\n  homepage: String\n  id: Int\n  in_production: Boolean\n  languages: [String]\n  last_air_date: Date\n  last_episode_to_air: GET_tv__tv_id_LastEpisodeToAir\n  name: String\n  networks: [GET_tv__tv_id_NetworksEntry]\n  \"\"\"\n  Field \"next_episode_to_air\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  next_episode_to_air: JSON\n  number_of_episodes: Int\n  number_of_seasons: Int\n  origin_country: [String]\n  original_language: String\n  original_name: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  production_companies: [GET_tv__tv_id_ProductionCompaniesEntry]\n  production_countries: [GET_tv__tv_id_ProductionCountriesEntry]\n  seasons: [GET_tv__tv_id_SeasonsEntry]\n  spoken_languages: [GET_tv__tv_id_SpokenLanguagesEntry]\n  status: String\n  tagline: String\n  type: String\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_tv__tv_id_SeasonsEntry {\n  air_date: Date\n  episode_count: Int\n  id: Int\n  name: String\n  overview: String\n  poster_path: String\n  season_number: Int\n  vote_average: Float\n}\n\ntype GET_tv__tv_id_SpokenLanguagesEntry {\n  english_name: String\n  iso_639_1: String\n  name: String\n}\n\ntype Query {\n  GET_tv__tv_id_(\n    tmdb_access_token: String!\n    tv_id: String!\n  ): GET_tv__tv_id_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/tv/$tv_id;\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\n", "utterance": "give me the homepage of the network that produced Game of Thrones"}
{"domain": "tmdb", "input": "Function Signatures:\n\n[{\"name\": \"GET_search_tv\", \"description\": \"Search for a TV show.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"page\": {\"type\": \"integer\", \"description\": \"page\"}, \"query\": {\"type\": \"string\", \"description\": \"query\"}, \"include_adult\": {\"type\": \"boolean\", \"description\": \"include adult\"}, \"first_air_date_year\": {\"type\": \"integer\", \"description\": \"first air date year\"}}, \"required\": [\"query\"]}}, {\"name\": \"GET_tv__tv_id_\", \"description\": \"Get the primary TV show details by id.\\n\\nSupports `append_to_response`. Read more about this [here](#docTextSection:JdZq8ctmcxNqyLQjp).\\n\\n#### Recent Changes\\n\\n| **Date** | **Change** |\\n| - | - |\\n| July 17, 2018 | We now return `last_episode_to_air` and `next_episode_to_air` fields. |\\n| March 12, 2018 | Networks return proper logos and we introduced SVG support. |\\n| March 8, 2018 | The `seasons` field now returns the translated names and overviews. |\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"tv_id\": {\"type\": \"integer\", \"description\": \"tv id\"}}, \"required\": [\"tv_id\"]}}]\n\nGraphQL schema:\n\ntype GET_search_tv_ResultsEntry {\n  adult: Boolean\n  backdrop_path: String\n  first_air_date: Date\n  genre_ids: [Int]\n  id: Int\n  name: String\n  origin_country: [String]\n  original_language: String\n  original_name: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_search_tv_Root {\n  page: Int\n  results: [GET_search_tv_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_search_tv(query: String, tmdb_access_token: String!): GET_search_tv_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/search/tv\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_tv__tv_id_CreatedByEntry {\n  credit_id: String\n  gender: Int\n  id: Int\n  name: String\n  original_name: String\n  profile_path: String\n}\n\ntype GET_tv__tv_id_GenresEntry {\n  id: Int\n  name: String\n}\n\ntype GET_tv__tv_id_LastEpisodeToAir {\n  air_date: Date\n  episode_number: Int\n  episode_type: String\n  id: Int\n  name: String\n  overview: String\n  production_code: String\n  runtime: Int\n  season_number: Int\n  show_id: Int\n  still_path: String\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_tv__tv_id_NetworksEntry {\n  id: Int\n  logo_path: String\n  name: String\n  origin_country: String\n}\n\ntype GET_tv__tv_id_ProductionCompaniesEntry {\n  id: Int\n  logo_path: String\n  name: String\n  origin_country: String\n}\n\ntype GET_tv__tv_id_ProductionCountriesEntry {\n  iso_3166_1: String\n  name: String\n}\n\ntype GET_tv__tv_id_Root {\n  adult: Boolean\n  backdrop_path: String\n  created_by: [GET_tv__tv_id_CreatedByEntry]\n  episode_run_time: [Int]\n  first_air_date: Date\n  genres: [GET_tv__tv_id_GenresEntry]\n  homepage: String\n  id: Int\n  in_production: Boolean\n  languages: [String]\n  last_air_date: Date\n  last_episode_to_air: GET_tv__tv_id_LastEpisodeToAir\n  name: String\n  networks: [GET_tv__tv_id_NetworksEntry]\n  \"\"\"\n  Field \"next_episode_to_air\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  next_episode_to_air: JSON\n  number_of_episodes: Int\n  number_of_seasons: Int\n  origin_country: [String]\n  original_language: String\n  original_name: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  production_companies: [GET_tv__tv_id_ProductionCompaniesEntry]\n  production_countries: [GET_tv__tv_id_ProductionCountriesEntry]\n  seasons: [GET_tv__tv_id_SeasonsEntry]\n  spoken_languages: [GET_tv__tv_id_SpokenLanguagesEntry]\n  status: String\n  tagline: String\n  type: String\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_tv__tv_id_SeasonsEntry {\n  air_date: Date\n  episode_count: Int\n  id: Int\n  name: String\n  overview: String\n  poster_path: String\n  season_number: Int\n  vote_average: Float\n}\n\ntype GET_tv__tv_id_SpokenLanguagesEntry {\n  english_name: String\n  iso_639_1: String\n  name: String\n}\n\ntype Query {\n  GET_tv__tv_id_(\n    tmdb_access_token: String!\n    tv_id: String!\n  ): GET_tv__tv_id_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/tv/$tv_id;\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\n\nUtterance: What is the genre of The Mandalorian?", "output": "response_obj = GET_search_tv(query=\"The Mandalorian\")\nGET_tv__tv_id_(tv_id=response_obj.results[0].id)\n", "function_specs": "[{\"name\": \"GET_search_tv\", \"description\": \"Search for a TV show.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"page\": {\"type\": \"integer\", \"description\": \"page\"}, \"query\": {\"type\": \"string\", \"description\": \"query\"}, \"include_adult\": {\"type\": \"boolean\", \"description\": \"include adult\"}, \"first_air_date_year\": {\"type\": \"integer\", \"description\": \"first air date year\"}}, \"required\": [\"query\"]}}, {\"name\": \"GET_tv__tv_id_\", \"description\": \"Get the primary TV show details by id.\\n\\nSupports `append_to_response`. Read more about this [here](#docTextSection:JdZq8ctmcxNqyLQjp).\\n\\n#### Recent Changes\\n\\n| **Date** | **Change** |\\n| - | - |\\n| July 17, 2018 | We now return `last_episode_to_air` and `next_episode_to_air` fields. |\\n| March 12, 2018 | Networks return proper logos and we introduced SVG support. |\\n| March 8, 2018 | The `seasons` field now returns the translated names and overviews. |\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"tv_id\": {\"type\": \"integer\", \"description\": \"tv id\"}}, \"required\": [\"tv_id\"]}}]", "GraphQL_schema": "type GET_search_tv_ResultsEntry {\n  adult: Boolean\n  backdrop_path: String\n  first_air_date: Date\n  genre_ids: [Int]\n  id: Int\n  name: String\n  origin_country: [String]\n  original_language: String\n  original_name: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_search_tv_Root {\n  page: Int\n  results: [GET_search_tv_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_search_tv(query: String, tmdb_access_token: String!): GET_search_tv_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/search/tv\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_tv__tv_id_CreatedByEntry {\n  credit_id: String\n  gender: Int\n  id: Int\n  name: String\n  original_name: String\n  profile_path: String\n}\n\ntype GET_tv__tv_id_GenresEntry {\n  id: Int\n  name: String\n}\n\ntype GET_tv__tv_id_LastEpisodeToAir {\n  air_date: Date\n  episode_number: Int\n  episode_type: String\n  id: Int\n  name: String\n  overview: String\n  production_code: String\n  runtime: Int\n  season_number: Int\n  show_id: Int\n  still_path: String\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_tv__tv_id_NetworksEntry {\n  id: Int\n  logo_path: String\n  name: String\n  origin_country: String\n}\n\ntype GET_tv__tv_id_ProductionCompaniesEntry {\n  id: Int\n  logo_path: String\n  name: String\n  origin_country: String\n}\n\ntype GET_tv__tv_id_ProductionCountriesEntry {\n  iso_3166_1: String\n  name: String\n}\n\ntype GET_tv__tv_id_Root {\n  adult: Boolean\n  backdrop_path: String\n  created_by: [GET_tv__tv_id_CreatedByEntry]\n  episode_run_time: [Int]\n  first_air_date: Date\n  genres: [GET_tv__tv_id_GenresEntry]\n  homepage: String\n  id: Int\n  in_production: Boolean\n  languages: [String]\n  last_air_date: Date\n  last_episode_to_air: GET_tv__tv_id_LastEpisodeToAir\n  name: String\n  networks: [GET_tv__tv_id_NetworksEntry]\n  \"\"\"\n  Field \"next_episode_to_air\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  next_episode_to_air: JSON\n  number_of_episodes: Int\n  number_of_seasons: Int\n  origin_country: [String]\n  original_language: String\n  original_name: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  production_companies: [GET_tv__tv_id_ProductionCompaniesEntry]\n  production_countries: [GET_tv__tv_id_ProductionCountriesEntry]\n  seasons: [GET_tv__tv_id_SeasonsEntry]\n  spoken_languages: [GET_tv__tv_id_SpokenLanguagesEntry]\n  status: String\n  tagline: String\n  type: String\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_tv__tv_id_SeasonsEntry {\n  air_date: Date\n  episode_count: Int\n  id: Int\n  name: String\n  overview: String\n  poster_path: String\n  season_number: Int\n  vote_average: Float\n}\n\ntype GET_tv__tv_id_SpokenLanguagesEntry {\n  english_name: String\n  iso_639_1: String\n  name: String\n}\n\ntype Query {\n  GET_tv__tv_id_(\n    tmdb_access_token: String!\n    tv_id: String!\n  ): GET_tv__tv_id_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/tv/$tv_id;\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\n", "utterance": "What is the genre of The Mandalorian?"}
{"domain": "tmdb", "input": "Function Signatures:\n\n[{\"name\": \"GET_search_movie\", \"description\": \"Search for movies.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"query\": {\"type\": \"string\", \"description\": \"query\"}, \"page\": {\"type\": \"integer\", \"description\": \"page\"}, \"include_adult\": {\"type\": \"boolean\", \"description\": \"include adult\"}, \"region\": {\"type\": \"string\", \"description\": \"region\"}, \"year\": {\"type\": \"integer\", \"description\": \"year\"}, \"primary_release_year\": {\"type\": \"integer\", \"description\": \"primary release year\"}}, \"required\": [\"query\"]}}, {\"name\": \"GET_movie__movie_id__credits\", \"description\": \"Get the cast and crew for a movie.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"movie_id\": {\"type\": \"integer\", \"description\": \"movie id\"}}, \"required\": [\"movie_id\"]}}]\n\nGraphQL schema:\n\ntype GET_search_movie_ResultsEntry {\n  adult: Boolean\n  backdrop_path: String\n  genre_ids: [Int]\n  id: Int\n  original_language: String\n  original_title: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  release_date: String\n  title: String\n  video: Boolean\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_search_movie_Root {\n  page: Int\n  results: [GET_search_movie_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_search_movie(\n    query: String\n    tmdb_access_token: String!\n  ): GET_search_movie_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/search/movie\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_movie__movie_id__credits_CastEntry {\n  adult: Boolean\n  cast_id: Int\n  character: String\n  credit_id: String\n  gender: Int\n  id: Int\n  known_for_department: String\n  name: String\n  order: Int\n  original_name: String\n  popularity: Float\n  profile_path: String\n}\n\ntype GET_movie__movie_id__credits_CrewEntry {\n  adult: Boolean\n  credit_id: String\n  department: String\n  gender: Int\n  id: Int\n  job: String\n  known_for_department: String\n  name: String\n  original_name: String\n  popularity: Float\n  profile_path: String\n}\n\ntype GET_movie__movie_id__credits_Root {\n  cast: [GET_movie__movie_id__credits_CastEntry]\n  crew: [GET_movie__movie_id__credits_CrewEntry]\n  id: Int\n}\n\ntype Query {\n  GET_movie__movie_id__credits(\n    movie_id: String!\n    tmdb_access_token: String!\n  ): GET_movie__movie_id__credits_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/movie/$movie_id;/credits\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\n\nUtterance: Who was the lead actor in the movie The Dark Knight?", "output": "response_obj = GET_search_movie(query=\"The Dark Knight\")\nGET_movie__movie_id__credits(movie_id=response_obj.results[0].id)\n", "function_specs": "[{\"name\": \"GET_search_movie\", \"description\": \"Search for movies.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"query\": {\"type\": \"string\", \"description\": \"query\"}, \"page\": {\"type\": \"integer\", \"description\": \"page\"}, \"include_adult\": {\"type\": \"boolean\", \"description\": \"include adult\"}, \"region\": {\"type\": \"string\", \"description\": \"region\"}, \"year\": {\"type\": \"integer\", \"description\": \"year\"}, \"primary_release_year\": {\"type\": \"integer\", \"description\": \"primary release year\"}}, \"required\": [\"query\"]}}, {\"name\": \"GET_movie__movie_id__credits\", \"description\": \"Get the cast and crew for a movie.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"movie_id\": {\"type\": \"integer\", \"description\": \"movie id\"}}, \"required\": [\"movie_id\"]}}]", "GraphQL_schema": "type GET_search_movie_ResultsEntry {\n  adult: Boolean\n  backdrop_path: String\n  genre_ids: [Int]\n  id: Int\n  original_language: String\n  original_title: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  release_date: String\n  title: String\n  video: Boolean\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_search_movie_Root {\n  page: Int\n  results: [GET_search_movie_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_search_movie(\n    query: String\n    tmdb_access_token: String!\n  ): GET_search_movie_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/search/movie\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_movie__movie_id__credits_CastEntry {\n  adult: Boolean\n  cast_id: Int\n  character: String\n  credit_id: String\n  gender: Int\n  id: Int\n  known_for_department: String\n  name: String\n  order: Int\n  original_name: String\n  popularity: Float\n  profile_path: String\n}\n\ntype GET_movie__movie_id__credits_CrewEntry {\n  adult: Boolean\n  credit_id: String\n  department: String\n  gender: Int\n  id: Int\n  job: String\n  known_for_department: String\n  name: String\n  original_name: String\n  popularity: Float\n  profile_path: String\n}\n\ntype GET_movie__movie_id__credits_Root {\n  cast: [GET_movie__movie_id__credits_CastEntry]\n  crew: [GET_movie__movie_id__credits_CrewEntry]\n  id: Int\n}\n\ntype Query {\n  GET_movie__movie_id__credits(\n    movie_id: String!\n    tmdb_access_token: String!\n  ): GET_movie__movie_id__credits_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/movie/$movie_id;/credits\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\n", "utterance": "Who was the lead actor in the movie The Dark Knight?"}
{"domain": "tmdb", "input": "Function Signatures:\n\n[{\"name\": \"GET_search_movie\", \"description\": \"Search for movies.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"query\": {\"type\": \"string\", \"description\": \"query\"}, \"page\": {\"type\": \"integer\", \"description\": \"page\"}, \"include_adult\": {\"type\": \"boolean\", \"description\": \"include adult\"}, \"region\": {\"type\": \"string\", \"description\": \"region\"}, \"year\": {\"type\": \"integer\", \"description\": \"year\"}, \"primary_release_year\": {\"type\": \"integer\", \"description\": \"primary release year\"}}, \"required\": [\"query\"]}}, {\"name\": \"GET_movie_top_rated\", \"description\": \"Get the top rated movies on TMDb.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"page\": {\"type\": \"integer\", \"description\": \"page\"}, \"region\": {\"type\": \"string\", \"description\": \"region\"}}, \"required\": []}}]\n\nGraphQL schema:\n\ntype GET_search_movie_ResultsEntry {\n  adult: Boolean\n  backdrop_path: String\n  genre_ids: [Int]\n  id: Int\n  original_language: String\n  original_title: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  release_date: Date\n  title: String\n  video: Boolean\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_search_movie_Root {\n  page: Int\n  results: [GET_search_movie_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_search_movie(\n    query: String\n    tmdb_access_token: String!\n  ): GET_search_movie_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/search/movie\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_movie_top_rated_ResultsEntry {\n  adult: Boolean\n  backdrop_path: String\n  genre_ids: [Int]\n  id: Int\n  original_language: String\n  original_title: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  release_date: Date\n  title: String\n  video: Boolean\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_movie_top_rated_Root {\n  page: Int\n  results: [GET_movie_top_rated_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_movie_top_rated(tmdb_access_token: String!): GET_movie_top_rated_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/movie/top_rated\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\n\nUtterance: Is Mulholland Drive in the Top-10 rated list of the TMDB?", "output": "GET_search_movie(query=\"Mulholland Drive\")\nGET_movie_top_rated()\n", "function_specs": "[{\"name\": \"GET_search_movie\", \"description\": \"Search for movies.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"query\": {\"type\": \"string\", \"description\": \"query\"}, \"page\": {\"type\": \"integer\", \"description\": \"page\"}, \"include_adult\": {\"type\": \"boolean\", \"description\": \"include adult\"}, \"region\": {\"type\": \"string\", \"description\": \"region\"}, \"year\": {\"type\": \"integer\", \"description\": \"year\"}, \"primary_release_year\": {\"type\": \"integer\", \"description\": \"primary release year\"}}, \"required\": [\"query\"]}}, {\"name\": \"GET_movie_top_rated\", \"description\": \"Get the top rated movies on TMDb.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"page\": {\"type\": \"integer\", \"description\": \"page\"}, \"region\": {\"type\": \"string\", \"description\": \"region\"}}, \"required\": []}}]", "GraphQL_schema": "type GET_search_movie_ResultsEntry {\n  adult: Boolean\n  backdrop_path: String\n  genre_ids: [Int]\n  id: Int\n  original_language: String\n  original_title: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  release_date: Date\n  title: String\n  video: Boolean\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_search_movie_Root {\n  page: Int\n  results: [GET_search_movie_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_search_movie(\n    query: String\n    tmdb_access_token: String!\n  ): GET_search_movie_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/search/movie\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_movie_top_rated_ResultsEntry {\n  adult: Boolean\n  backdrop_path: String\n  genre_ids: [Int]\n  id: Int\n  original_language: String\n  original_title: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  release_date: Date\n  title: String\n  video: Boolean\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_movie_top_rated_Root {\n  page: Int\n  results: [GET_movie_top_rated_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_movie_top_rated(tmdb_access_token: String!): GET_movie_top_rated_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/movie/top_rated\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\n", "utterance": "Is Mulholland Drive in the Top-10 rated list of the TMDB?"}
{"domain": "tmdb", "input": "Function Signatures:\n\n[{\"name\": \"GET_search_collection\", \"description\": \"Search for collections.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"query\": {\"type\": \"string\", \"description\": \"query\"}, \"page\": {\"type\": \"integer\", \"description\": \"page\"}}, \"required\": [\"query\"]}}, {\"name\": \"GET_collection__collection_id_\", \"description\": \"Get collection details by id.\\n\\n#### Recent Changes\\n\\n| **Date** | **Change** |\\n| - | - |\\n| March 16, 2018 | Added the [translations](#endpoint:bhcsxEgRvyk3N7FnD) method. |\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"collection_id\": {\"type\": \"integer\", \"description\": \"collection id\"}}, \"required\": [\"collection_id\"]}}]\n\nGraphQL schema:\n\ntype GET_search_collection_ResultsEntry {\n  adult: Boolean\n  backdrop_path: String\n  id: Int\n  name: String\n  original_language: String\n  original_name: String\n  overview: String\n  poster_path: String\n}\n\ntype GET_search_collection_Root {\n  page: Int\n  results: [GET_search_collection_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_search_collection(\n    query: String\n    tmdb_access_token: String!\n  ): GET_search_collection_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/search/collection\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_collection__collection_id_PartsEntry {\n  adult: Boolean\n  backdrop_path: String\n  genre_ids: [Int]\n  id: Int\n  media_type: String\n  original_language: String\n  original_title: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  release_date: Date\n  title: String\n  video: Boolean\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_collection__collection_id_Root {\n  backdrop_path: String\n  id: Int\n  name: String\n  overview: String\n  parts: [GET_collection__collection_id_PartsEntry]\n  poster_path: String\n}\n\ntype Query {\n  GET_collection__collection_id_(\n    collection_id: String!\n    tmdb_access_token: String!\n  ): GET_collection__collection_id_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/collection/$collection_id;\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\n\nUtterance: When are the release dates for the movies of the collection The Hobbit?", "output": "response_obj = GET_search_collection(query=\"The Hobbit\")\nGET_collection__collection_id_(collection_id=response_obj.results[0].id)\n", "function_specs": "[{\"name\": \"GET_search_collection\", \"description\": \"Search for collections.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"query\": {\"type\": \"string\", \"description\": \"query\"}, \"page\": {\"type\": \"integer\", \"description\": \"page\"}}, \"required\": [\"query\"]}}, {\"name\": \"GET_collection__collection_id_\", \"description\": \"Get collection details by id.\\n\\n#### Recent Changes\\n\\n| **Date** | **Change** |\\n| - | - |\\n| March 16, 2018 | Added the [translations](#endpoint:bhcsxEgRvyk3N7FnD) method. |\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"collection_id\": {\"type\": \"integer\", \"description\": \"collection id\"}}, \"required\": [\"collection_id\"]}}]", "GraphQL_schema": "type GET_search_collection_ResultsEntry {\n  adult: Boolean\n  backdrop_path: String\n  id: Int\n  name: String\n  original_language: String\n  original_name: String\n  overview: String\n  poster_path: String\n}\n\ntype GET_search_collection_Root {\n  page: Int\n  results: [GET_search_collection_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_search_collection(\n    query: String\n    tmdb_access_token: String!\n  ): GET_search_collection_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/search/collection\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_collection__collection_id_PartsEntry {\n  adult: Boolean\n  backdrop_path: String\n  genre_ids: [Int]\n  id: Int\n  media_type: String\n  original_language: String\n  original_title: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  release_date: Date\n  title: String\n  video: Boolean\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_collection__collection_id_Root {\n  backdrop_path: String\n  id: Int\n  name: String\n  overview: String\n  parts: [GET_collection__collection_id_PartsEntry]\n  poster_path: String\n}\n\ntype Query {\n  GET_collection__collection_id_(\n    collection_id: String!\n    tmdb_access_token: String!\n  ): GET_collection__collection_id_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/collection/$collection_id;\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\n", "utterance": "When are the release dates for the movies of the collection The Hobbit?"}
{"domain": "tmdb", "input": "Function Signatures:\n\n[{\"name\": \"GET_search_person\", \"description\": \"Search for people.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"query\": {\"type\": \"string\", \"description\": \"query\"}, \"page\": {\"type\": \"integer\", \"description\": \"page\"}, \"include_adult\": {\"type\": \"boolean\", \"description\": \"include adult\"}, \"region\": {\"type\": \"string\", \"description\": \"region\"}}, \"required\": [\"query\"]}}, {\"name\": \"GET_person__person_id__movie_credits\", \"description\": \"Get the movie credits for a person, the results contains various information such as popularity and release date.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"person_id\": {\"type\": \"integer\", \"description\": \"person id\"}}, \"required\": [\"person_id\"]}}, {\"name\": \"GET_movie__movie_id__similar\", \"description\": \"Get a list of similar movies. This is **not** the same as the \\\"Recommendation\\\" system you see on the website.\\n\\nThese items are assembled by looking at keywords and genres.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"movie_id\": {\"type\": \"integer\", \"description\": \"movie id\"}, \"page\": {\"type\": \"integer\", \"description\": \"page\"}}, \"required\": [\"movie_id\"]}}]\n\nGraphQL schema:\n\ntype GET_movie__movie_id__similar_ResultsEntry {\n  adult: Boolean\n  backdrop_path: String\n  genre_ids: [Int]\n  id: Int\n  original_language: String\n  original_title: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  release_date: Date\n  title: String\n  video: Boolean\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_movie__movie_id__similar_Root {\n  page: Int\n  results: [GET_movie__movie_id__similar_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_movie__movie_id__similar(\n    movie_id: String!\n    tmdb_access_token: String!\n  ): GET_movie__movie_id__similar_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/movie/$movie_id;/similar\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_search_person_KnownForEntry {\n  adult: Boolean\n  backdrop_path: String\n  genre_ids: [Int]\n  id: Int\n  media_type: String\n  original_language: String\n  original_title: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  release_date: Date\n  title: String\n  video: Boolean\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_search_person_ResultsEntry {\n  adult: Boolean\n  gender: Int\n  id: Int\n  known_for: [GET_search_person_KnownForEntry]\n  known_for_department: String\n  name: String\n  original_name: String\n  popularity: Float\n  profile_path: String\n}\n\ntype GET_search_person_Root {\n  page: Int\n  results: [GET_search_person_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_search_person(\n    query: String\n    tmdb_access_token: String!\n  ): GET_search_person_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/search/person\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_person__person_id__movie_credits_CastEntry {\n  adult: Boolean\n  backdrop_path: String\n  character: String\n  credit_id: String\n  genre_ids: [Int]\n  id: Int\n  order: Int\n  original_language: String\n  original_title: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  release_date: String\n  title: String\n  video: Boolean\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_person__person_id__movie_credits_CrewEntry {\n  adult: Boolean\n  backdrop_path: String\n  credit_id: String\n  department: String\n  genre_ids: [Int]\n  id: Int\n  job: String\n  original_language: String\n  original_title: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  release_date: String\n  title: String\n  video: Boolean\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_person__person_id__movie_credits_Root {\n  cast: [GET_person__person_id__movie_credits_CastEntry]\n  crew: [GET_person__person_id__movie_credits_CrewEntry]\n  id: Int\n}\n\ntype Query {\n  GET_person__person_id__movie_credits(\n    person_id: String!\n    tmdb_access_token: String!\n  ): GET_person__person_id__movie_credits_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/person/$person_id;/movie_credits\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\n\nUtterance: What are some movies that are similar to one of the movies directed by Francis Ford Coppola?", "output": "response_obj = GET_search_person(query=\"Francis Ford Coppola\")\nresponse_obj1 = GET_person__person_id__movie_credits(person_id=response_obj.results[0].id)\nGET_movie__movie_id__similar(movie_id=response_obj1.crew[0].id)\n", "function_specs": "[{\"name\": \"GET_search_person\", \"description\": \"Search for people.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"query\": {\"type\": \"string\", \"description\": \"query\"}, \"page\": {\"type\": \"integer\", \"description\": \"page\"}, \"include_adult\": {\"type\": \"boolean\", \"description\": \"include adult\"}, \"region\": {\"type\": \"string\", \"description\": \"region\"}}, \"required\": [\"query\"]}}, {\"name\": \"GET_person__person_id__movie_credits\", \"description\": \"Get the movie credits for a person, the results contains various information such as popularity and release date.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"person_id\": {\"type\": \"integer\", \"description\": \"person id\"}}, \"required\": [\"person_id\"]}}, {\"name\": \"GET_movie__movie_id__similar\", \"description\": \"Get a list of similar movies. This is **not** the same as the \\\"Recommendation\\\" system you see on the website.\\n\\nThese items are assembled by looking at keywords and genres.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"movie_id\": {\"type\": \"integer\", \"description\": \"movie id\"}, \"page\": {\"type\": \"integer\", \"description\": \"page\"}}, \"required\": [\"movie_id\"]}}]", "GraphQL_schema": "type GET_movie__movie_id__similar_ResultsEntry {\n  adult: Boolean\n  backdrop_path: String\n  genre_ids: [Int]\n  id: Int\n  original_language: String\n  original_title: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  release_date: Date\n  title: String\n  video: Boolean\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_movie__movie_id__similar_Root {\n  page: Int\n  results: [GET_movie__movie_id__similar_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_movie__movie_id__similar(\n    movie_id: String!\n    tmdb_access_token: String!\n  ): GET_movie__movie_id__similar_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/movie/$movie_id;/similar\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_search_person_KnownForEntry {\n  adult: Boolean\n  backdrop_path: String\n  genre_ids: [Int]\n  id: Int\n  media_type: String\n  original_language: String\n  original_title: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  release_date: Date\n  title: String\n  video: Boolean\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_search_person_ResultsEntry {\n  adult: Boolean\n  gender: Int\n  id: Int\n  known_for: [GET_search_person_KnownForEntry]\n  known_for_department: String\n  name: String\n  original_name: String\n  popularity: Float\n  profile_path: String\n}\n\ntype GET_search_person_Root {\n  page: Int\n  results: [GET_search_person_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_search_person(\n    query: String\n    tmdb_access_token: String!\n  ): GET_search_person_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/search/person\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_person__person_id__movie_credits_CastEntry {\n  adult: Boolean\n  backdrop_path: String\n  character: String\n  credit_id: String\n  genre_ids: [Int]\n  id: Int\n  order: Int\n  original_language: String\n  original_title: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  release_date: String\n  title: String\n  video: Boolean\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_person__person_id__movie_credits_CrewEntry {\n  adult: Boolean\n  backdrop_path: String\n  credit_id: String\n  department: String\n  genre_ids: [Int]\n  id: Int\n  job: String\n  original_language: String\n  original_title: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  release_date: String\n  title: String\n  video: Boolean\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_person__person_id__movie_credits_Root {\n  cast: [GET_person__person_id__movie_credits_CastEntry]\n  crew: [GET_person__person_id__movie_credits_CrewEntry]\n  id: Int\n}\n\ntype Query {\n  GET_person__person_id__movie_credits(\n    person_id: String!\n    tmdb_access_token: String!\n  ): GET_person__person_id__movie_credits_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/person/$person_id;/movie_credits\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\n", "utterance": "What are some movies that are similar to one of the movies directed by Francis Ford Coppola?"}
{"domain": "tmdb", "input": "Function Signatures:\n\n[{\"name\": \"GET_search_tv\", \"description\": \"Search for a TV show.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"page\": {\"type\": \"integer\", \"description\": \"page\"}, \"query\": {\"type\": \"string\", \"description\": \"query\"}, \"include_adult\": {\"type\": \"boolean\", \"description\": \"include adult\"}, \"first_air_date_year\": {\"type\": \"integer\", \"description\": \"first air date year\"}}, \"required\": [\"query\"]}}, {\"name\": \"GET_tv__tv_id__credits\", \"description\": \"Get the credits (cast and crew) that have been added to a TV show.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"tv_id\": {\"type\": \"integer\", \"description\": \"tv id\"}}, \"required\": [\"tv_id\"]}}, {\"name\": \"GET_person__person_id__images\", \"description\": \"Get the images for a person.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"person_id\": {\"type\": \"integer\", \"description\": \"person id\"}}, \"required\": [\"person_id\"]}}]\n\nGraphQL schema:\n\ntype GET_person__person_id__images_ProfilesEntry {\n  aspect_ratio: Float\n  file_path: String\n  height: Int\n  \"\"\"\n  Field \"iso_639_1\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  iso_639_1: JSON\n  vote_average: Float\n  vote_count: Int\n  width: Int\n}\n\ntype GET_person__person_id__images_Root {\n  id: Int\n  profiles: [GET_person__person_id__images_ProfilesEntry]\n}\n\ntype Query {\n  GET_person__person_id__images(\n    person_id: String!\n    tmdb_access_token: String!\n  ): GET_person__person_id__images_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/person/$person_id;/images\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_search_tv_ResultsEntry {\n  adult: Boolean\n  backdrop_path: String\n  first_air_date: Date\n  genre_ids: [Int]\n  id: Int\n  name: String\n  origin_country: [String]\n  original_language: String\n  original_name: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_search_tv_Root {\n  page: Int\n  results: [GET_search_tv_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_search_tv(query: String, tmdb_access_token: String!): GET_search_tv_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/search/tv\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_tv__tv_id__credits_CastEntry {\n  adult: Boolean\n  character: String\n  credit_id: String\n  gender: Int\n  id: Int\n  known_for_department: String\n  name: String\n  order: Int\n  original_name: String\n  popularity: Float\n  profile_path: String\n}\n\ntype GET_tv__tv_id__credits_CrewEntry {\n  adult: Boolean\n  credit_id: String\n  department: String\n  gender: Int\n  id: Int\n  job: String\n  known_for_department: String\n  name: String\n  original_name: String\n  popularity: Float\n  profile_path: String\n}\n\ntype GET_tv__tv_id__credits_Root {\n  cast: [GET_tv__tv_id__credits_CastEntry]\n  crew: [GET_tv__tv_id__credits_CrewEntry]\n  id: Int\n}\n\ntype Query {\n  GET_tv__tv_id__credits(\n    tmdb_access_token: String!\n    tv_id: String!\n  ): GET_tv__tv_id__credits_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/tv/$tv_id;/credits\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\n\nUtterance: What does the lead actor of the first episode of second season of Black Mirror look like?", "output": "response_obj = GET_search_tv(query=\"Black Mirror\")\nresponse_obj1 = GET_tv__tv_id__credits(tv_id=response_obj.results[0].id)\nGET_person__person_id__images(person_id=response_obj1.cast[0].id)\n", "function_specs": "[{\"name\": \"GET_search_tv\", \"description\": \"Search for a TV show.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"page\": {\"type\": \"integer\", \"description\": \"page\"}, \"query\": {\"type\": \"string\", \"description\": \"query\"}, \"include_adult\": {\"type\": \"boolean\", \"description\": \"include adult\"}, \"first_air_date_year\": {\"type\": \"integer\", \"description\": \"first air date year\"}}, \"required\": [\"query\"]}}, {\"name\": \"GET_tv__tv_id__credits\", \"description\": \"Get the credits (cast and crew) that have been added to a TV show.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"tv_id\": {\"type\": \"integer\", \"description\": \"tv id\"}}, \"required\": [\"tv_id\"]}}, {\"name\": \"GET_person__person_id__images\", \"description\": \"Get the images for a person.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"person_id\": {\"type\": \"integer\", \"description\": \"person id\"}}, \"required\": [\"person_id\"]}}]", "GraphQL_schema": "type GET_person__person_id__images_ProfilesEntry {\n  aspect_ratio: Float\n  file_path: String\n  height: Int\n  \"\"\"\n  Field \"iso_639_1\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  iso_639_1: JSON\n  vote_average: Float\n  vote_count: Int\n  width: Int\n}\n\ntype GET_person__person_id__images_Root {\n  id: Int\n  profiles: [GET_person__person_id__images_ProfilesEntry]\n}\n\ntype Query {\n  GET_person__person_id__images(\n    person_id: String!\n    tmdb_access_token: String!\n  ): GET_person__person_id__images_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/person/$person_id;/images\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_search_tv_ResultsEntry {\n  adult: Boolean\n  backdrop_path: String\n  first_air_date: Date\n  genre_ids: [Int]\n  id: Int\n  name: String\n  origin_country: [String]\n  original_language: String\n  original_name: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_search_tv_Root {\n  page: Int\n  results: [GET_search_tv_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_search_tv(query: String, tmdb_access_token: String!): GET_search_tv_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/search/tv\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_tv__tv_id__credits_CastEntry {\n  adult: Boolean\n  character: String\n  credit_id: String\n  gender: Int\n  id: Int\n  known_for_department: String\n  name: String\n  order: Int\n  original_name: String\n  popularity: Float\n  profile_path: String\n}\n\ntype GET_tv__tv_id__credits_CrewEntry {\n  adult: Boolean\n  credit_id: String\n  department: String\n  gender: Int\n  id: Int\n  job: String\n  known_for_department: String\n  name: String\n  original_name: String\n  popularity: Float\n  profile_path: String\n}\n\ntype GET_tv__tv_id__credits_Root {\n  cast: [GET_tv__tv_id__credits_CastEntry]\n  crew: [GET_tv__tv_id__credits_CrewEntry]\n  id: Int\n}\n\ntype Query {\n  GET_tv__tv_id__credits(\n    tmdb_access_token: String!\n    tv_id: String!\n  ): GET_tv__tv_id__credits_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/tv/$tv_id;/credits\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\n", "utterance": "What does the lead actor of the first episode of second season of Black Mirror look like?"}
{"domain": "tmdb", "input": "Function Signatures:\n\n[{\"name\": \"GET_search_tv\", \"description\": \"Search for a TV show.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"page\": {\"type\": \"integer\", \"description\": \"page\"}, \"query\": {\"type\": \"string\", \"description\": \"query\"}, \"include_adult\": {\"type\": \"boolean\", \"description\": \"include adult\"}, \"first_air_date_year\": {\"type\": \"integer\", \"description\": \"first air date year\"}}, \"required\": [\"query\"]}}, {\"name\": \"GET_tv__tv_id__season__season_number__episode__episode_number__credits\", \"description\": \"Get the credits (cast, crew and guest stars) for a TV episode.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"tv_id\": {\"type\": \"integer\", \"description\": \"tv id\"}, \"season_number\": {\"type\": \"integer\", \"description\": \"season number\"}, \"episode_number\": {\"type\": \"integer\", \"description\": \"episode number\"}}, \"required\": [\"tv_id\", \"season_number\", \"episode_number\"]}}]\n\nGraphQL schema:\n\ntype GET_search_tv_ResultsEntry {\n  adult: Boolean\n  backdrop_path: String\n  first_air_date: Date\n  genre_ids: [Int]\n  id: Int\n  name: String\n  origin_country: [String]\n  original_language: String\n  original_name: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_search_tv_Root {\n  page: Int\n  results: [GET_search_tv_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_search_tv(query: String, tmdb_access_token: String!): GET_search_tv_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/search/tv\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_tv__tv_id__season__season_number__episode__episode_number__credits_CastEntry {\n  adult: Boolean\n  character: String\n  credit_id: String\n  gender: Int\n  id: Int\n  known_for_department: String\n  name: String\n  order: Int\n  original_name: String\n  popularity: Float\n  profile_path: String\n}\n\ntype GET_tv__tv_id__season__season_number__episode__episode_number__credits_CrewEntry {\n  adult: Boolean\n  credit_id: String\n  department: String\n  gender: Int\n  id: Int\n  job: String\n  known_for_department: String\n  name: String\n  original_name: String\n  popularity: Float\n  profile_path: String\n}\n\ntype GET_tv__tv_id__season__season_number__episode__episode_number__credits_GuestStarsEntry {\n  adult: Boolean\n  character: String\n  credit_id: String\n  gender: Int\n  id: Int\n  known_for_department: String\n  name: String\n  order: Int\n  original_name: String\n  popularity: Float\n  profile_path: String\n}\n\ntype GET_tv__tv_id__season__season_number__episode__episode_number__credits_Root {\n  cast: [GET_tv__tv_id__season__season_number__episode__episode_number__credits_CastEntry]\n  crew: [GET_tv__tv_id__season__season_number__episode__episode_number__credits_CrewEntry]\n  guest_stars: [GET_tv__tv_id__season__season_number__episode__episode_number__credits_GuestStarsEntry]\n  id: Int\n}\n\ntype Query {\n  GET_tv__tv_id__season__season_number__episode__episode_number__credits(\n    episode_number: String!\n    season_number: String!\n    tmdb_access_token: String!\n    tv_id: String!\n  ): GET_tv__tv_id__season__season_number__episode__episode_number__credits_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/tv/$tv_id;/season/$season_number;/episode/$episode_number;/credits\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\n\nUtterance: tell me the guest star from season 3, episode 24 of Friends", "output": "response_obj = GET_search_tv(query=\"Friends\")\nGET_tv__tv_id__season__season_number__episode__episode_number__credits(tv_id=response_obj.results[0].id, season_number=3, episode_number=24)\n", "function_specs": "[{\"name\": \"GET_search_tv\", \"description\": \"Search for a TV show.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"page\": {\"type\": \"integer\", \"description\": \"page\"}, \"query\": {\"type\": \"string\", \"description\": \"query\"}, \"include_adult\": {\"type\": \"boolean\", \"description\": \"include adult\"}, \"first_air_date_year\": {\"type\": \"integer\", \"description\": \"first air date year\"}}, \"required\": [\"query\"]}}, {\"name\": \"GET_tv__tv_id__season__season_number__episode__episode_number__credits\", \"description\": \"Get the credits (cast, crew and guest stars) for a TV episode.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"tv_id\": {\"type\": \"integer\", \"description\": \"tv id\"}, \"season_number\": {\"type\": \"integer\", \"description\": \"season number\"}, \"episode_number\": {\"type\": \"integer\", \"description\": \"episode number\"}}, \"required\": [\"tv_id\", \"season_number\", \"episode_number\"]}}]", "GraphQL_schema": "type GET_search_tv_ResultsEntry {\n  adult: Boolean\n  backdrop_path: String\n  first_air_date: Date\n  genre_ids: [Int]\n  id: Int\n  name: String\n  origin_country: [String]\n  original_language: String\n  original_name: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_search_tv_Root {\n  page: Int\n  results: [GET_search_tv_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_search_tv(query: String, tmdb_access_token: String!): GET_search_tv_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/search/tv\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_tv__tv_id__season__season_number__episode__episode_number__credits_CastEntry {\n  adult: Boolean\n  character: String\n  credit_id: String\n  gender: Int\n  id: Int\n  known_for_department: String\n  name: String\n  order: Int\n  original_name: String\n  popularity: Float\n  profile_path: String\n}\n\ntype GET_tv__tv_id__season__season_number__episode__episode_number__credits_CrewEntry {\n  adult: Boolean\n  credit_id: String\n  department: String\n  gender: Int\n  id: Int\n  job: String\n  known_for_department: String\n  name: String\n  original_name: String\n  popularity: Float\n  profile_path: String\n}\n\ntype GET_tv__tv_id__season__season_number__episode__episode_number__credits_GuestStarsEntry {\n  adult: Boolean\n  character: String\n  credit_id: String\n  gender: Int\n  id: Int\n  known_for_department: String\n  name: String\n  order: Int\n  original_name: String\n  popularity: Float\n  profile_path: String\n}\n\ntype GET_tv__tv_id__season__season_number__episode__episode_number__credits_Root {\n  cast: [GET_tv__tv_id__season__season_number__episode__episode_number__credits_CastEntry]\n  crew: [GET_tv__tv_id__season__season_number__episode__episode_number__credits_CrewEntry]\n  guest_stars: [GET_tv__tv_id__season__season_number__episode__episode_number__credits_GuestStarsEntry]\n  id: Int\n}\n\ntype Query {\n  GET_tv__tv_id__season__season_number__episode__episode_number__credits(\n    episode_number: String!\n    season_number: String!\n    tmdb_access_token: String!\n    tv_id: String!\n  ): GET_tv__tv_id__season__season_number__episode__episode_number__credits_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/tv/$tv_id;/season/$season_number;/episode/$episode_number;/credits\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\n", "utterance": "tell me the guest star from season 3, episode 24 of Friends"}
{"domain": "tmdb", "input": "Function Signatures:\n\n[{\"name\": \"GET_search_movie\", \"description\": \"Search for movies.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"query\": {\"type\": \"string\", \"description\": \"query\"}, \"page\": {\"type\": \"integer\", \"description\": \"page\"}, \"include_adult\": {\"type\": \"boolean\", \"description\": \"include adult\"}, \"region\": {\"type\": \"string\", \"description\": \"region\"}, \"year\": {\"type\": \"integer\", \"description\": \"year\"}, \"primary_release_year\": {\"type\": \"integer\", \"description\": \"primary release year\"}}, \"required\": [\"query\"]}}, {\"name\": \"GET_movie__movie_id__recommendations\", \"description\": \"Get a list of recommended movies for a movie.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"movie_id\": {\"type\": \"integer\", \"description\": \"movie id\"}, \"page\": {\"type\": \"integer\", \"description\": \"page\"}}, \"required\": [\"movie_id\"]}}]\n\nGraphQL schema:\n\ntype GET_search_movie_ResultsEntry {\n  adult: Boolean\n  backdrop_path: String\n  genre_ids: [Int]\n  id: Int\n  original_language: String\n  original_title: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  release_date: String\n  title: String\n  video: Boolean\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_search_movie_Root {\n  page: Int\n  results: [GET_search_movie_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_search_movie(\n    query: String\n    tmdb_access_token: String!\n  ): GET_search_movie_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/search/movie\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_movie__movie_id__recommendations_ResultsEntry {\n  adult: Boolean\n  backdrop_path: String\n  genre_ids: [Int]\n  id: Int\n  media_type: String\n  original_language: String\n  original_title: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  release_date: Date\n  title: String\n  video: Boolean\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_movie__movie_id__recommendations_Root {\n  page: Int\n  results: [GET_movie__movie_id__recommendations_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_movie__movie_id__recommendations(\n    movie_id: String!\n    tmdb_access_token: String!\n  ): GET_movie__movie_id__recommendations_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/movie/$movie_id;/recommendations\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\n\nUtterance: I just finished watching Titanic and I want some other movie recommendations", "output": "response_obj = GET_search_movie(query=\"Titanic\")\nGET_movie__movie_id__recommendations(movie_id=response_obj.results[0].id)\n", "function_specs": "[{\"name\": \"GET_search_movie\", \"description\": \"Search for movies.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"query\": {\"type\": \"string\", \"description\": \"query\"}, \"page\": {\"type\": \"integer\", \"description\": \"page\"}, \"include_adult\": {\"type\": \"boolean\", \"description\": \"include adult\"}, \"region\": {\"type\": \"string\", \"description\": \"region\"}, \"year\": {\"type\": \"integer\", \"description\": \"year\"}, \"primary_release_year\": {\"type\": \"integer\", \"description\": \"primary release year\"}}, \"required\": [\"query\"]}}, {\"name\": \"GET_movie__movie_id__recommendations\", \"description\": \"Get a list of recommended movies for a movie.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"movie_id\": {\"type\": \"integer\", \"description\": \"movie id\"}, \"page\": {\"type\": \"integer\", \"description\": \"page\"}}, \"required\": [\"movie_id\"]}}]", "GraphQL_schema": "type GET_search_movie_ResultsEntry {\n  adult: Boolean\n  backdrop_path: String\n  genre_ids: [Int]\n  id: Int\n  original_language: String\n  original_title: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  release_date: String\n  title: String\n  video: Boolean\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_search_movie_Root {\n  page: Int\n  results: [GET_search_movie_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_search_movie(\n    query: String\n    tmdb_access_token: String!\n  ): GET_search_movie_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/search/movie\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_movie__movie_id__recommendations_ResultsEntry {\n  adult: Boolean\n  backdrop_path: String\n  genre_ids: [Int]\n  id: Int\n  media_type: String\n  original_language: String\n  original_title: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  release_date: Date\n  title: String\n  video: Boolean\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_movie__movie_id__recommendations_Root {\n  page: Int\n  results: [GET_movie__movie_id__recommendations_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_movie__movie_id__recommendations(\n    movie_id: String!\n    tmdb_access_token: String!\n  ): GET_movie__movie_id__recommendations_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/movie/$movie_id;/recommendations\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\n", "utterance": "I just finished watching Titanic and I want some other movie recommendations"}
{"domain": "tmdb", "input": "Function Signatures:\n\n[{\"name\": \"GET_trending__media_type___time_window_\", \"description\": \"Get the daily or weekly trending items. The daily trending list tracks items over the period of a day while items have a 24 hour half life. The weekly list tracks items over a 7 day period, with a 7 day half life.\\n\\n#### Valid Media Types\\n\\n| **Media Type** | **Description** |\\n| - | - |\\n| all | Include all movies, TV shows and people in the results as a global trending list. |\\n| movie | Show the trending movies in the results. |\\n| tv | Show the trending TV shows in the results. |\\n| person | Show the trending people in the results. |\\n\\n#### Valid Time Windows\\n\\n| **Time Window** | **Description** |\\n| - | - |\\n| day | View the trending list for the day. |\\n| week | View the trending list for the week. |\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"media_type\": {\"type\": \"string\", \"description\": \"media type\\nValid values: all,movie,tv,person\"}, \"time_window\": {\"type\": \"string\", \"description\": \"time window\\nValid values: day,week\"}}, \"required\": [\"media_type\", \"time_window\"]}}, {\"name\": \"GET_tv__tv_id__images\", \"description\": \"Get the images that belong to a TV show.\\n\\nQuerying images with a `language` parameter will filter the results. If you want to include a fallback language (especially useful for backdrops) you can use the `include_image_language` parameter. This should be a comma seperated value like so: `include_image_language=en,null`.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"tv_id\": {\"type\": \"integer\", \"description\": \"tv id\"}}, \"required\": [\"tv_id\"]}}]\n\nGraphQL schema:\n\ntype GET_trending__media_type___time_window_ResultsEntry {\n  adult: Boolean\n  backdrop_path: String\n  genre_ids: [Int]\n  id: Int\n  media_type: String\n  original_language: String\n  original_title: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  release_date: Date\n  title: String\n  video: Boolean\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_trending__media_type___time_window_Root {\n  page: Int\n  results: [GET_trending__media_type___time_window_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_trending__media_type___time_window_(\n    media_type: String!\n    time_window: String!\n    tmdb_access_token: String!\n  ): GET_trending__media_type___time_window_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/trending/$media_type;/$time_window;\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_tv__tv_id__images_BackdropsEntry {\n  aspect_ratio: Float\n  file_path: String\n  height: Int\n  iso_639_1: String\n  vote_average: Float\n  vote_count: Int\n  width: Int\n}\n\ntype GET_tv__tv_id__images_LogosEntry {\n  aspect_ratio: Float\n  file_path: String\n  height: Int\n  iso_639_1: String\n  vote_average: Float\n  vote_count: Int\n  width: Int\n}\n\ntype GET_tv__tv_id__images_PostersEntry {\n  aspect_ratio: Float\n  file_path: String\n  height: Int\n  iso_639_1: String\n  vote_average: Float\n  vote_count: Int\n  width: Int\n}\n\ntype GET_tv__tv_id__images_Root {\n  backdrops: [GET_tv__tv_id__images_BackdropsEntry]\n  id: Int\n  logos: [GET_tv__tv_id__images_LogosEntry]\n  posters: [GET_tv__tv_id__images_PostersEntry]\n}\n\ntype Query {\n  GET_tv__tv_id__images(\n    tmdb_access_token: String!\n    tv_id: String!\n  ): GET_tv__tv_id__images_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/tv/$tv_id;/images\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\n\nUtterance: I need a poster of today's most trending TV show", "output": "response_obj = GET_trending__media_type___time_window_(media_type=\"tv\", time_window=\"day\")\nGET_tv__tv_id__images(tv_id=response_obj.results[0].id)\n", "function_specs": "[{\"name\": \"GET_trending__media_type___time_window_\", \"description\": \"Get the daily or weekly trending items. The daily trending list tracks items over the period of a day while items have a 24 hour half life. The weekly list tracks items over a 7 day period, with a 7 day half life.\\n\\n#### Valid Media Types\\n\\n| **Media Type** | **Description** |\\n| - | - |\\n| all | Include all movies, TV shows and people in the results as a global trending list. |\\n| movie | Show the trending movies in the results. |\\n| tv | Show the trending TV shows in the results. |\\n| person | Show the trending people in the results. |\\n\\n#### Valid Time Windows\\n\\n| **Time Window** | **Description** |\\n| - | - |\\n| day | View the trending list for the day. |\\n| week | View the trending list for the week. |\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"media_type\": {\"type\": \"string\", \"description\": \"media type\\nValid values: all,movie,tv,person\"}, \"time_window\": {\"type\": \"string\", \"description\": \"time window\\nValid values: day,week\"}}, \"required\": [\"media_type\", \"time_window\"]}}, {\"name\": \"GET_tv__tv_id__images\", \"description\": \"Get the images that belong to a TV show.\\n\\nQuerying images with a `language` parameter will filter the results. If you want to include a fallback language (especially useful for backdrops) you can use the `include_image_language` parameter. This should be a comma seperated value like so: `include_image_language=en,null`.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"tv_id\": {\"type\": \"integer\", \"description\": \"tv id\"}}, \"required\": [\"tv_id\"]}}]", "GraphQL_schema": "type GET_trending__media_type___time_window_ResultsEntry {\n  adult: Boolean\n  backdrop_path: String\n  genre_ids: [Int]\n  id: Int\n  media_type: String\n  original_language: String\n  original_title: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  release_date: Date\n  title: String\n  video: Boolean\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_trending__media_type___time_window_Root {\n  page: Int\n  results: [GET_trending__media_type___time_window_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_trending__media_type___time_window_(\n    media_type: String!\n    time_window: String!\n    tmdb_access_token: String!\n  ): GET_trending__media_type___time_window_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/trending/$media_type;/$time_window;\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_tv__tv_id__images_BackdropsEntry {\n  aspect_ratio: Float\n  file_path: String\n  height: Int\n  iso_639_1: String\n  vote_average: Float\n  vote_count: Int\n  width: Int\n}\n\ntype GET_tv__tv_id__images_LogosEntry {\n  aspect_ratio: Float\n  file_path: String\n  height: Int\n  iso_639_1: String\n  vote_average: Float\n  vote_count: Int\n  width: Int\n}\n\ntype GET_tv__tv_id__images_PostersEntry {\n  aspect_ratio: Float\n  file_path: String\n  height: Int\n  iso_639_1: String\n  vote_average: Float\n  vote_count: Int\n  width: Int\n}\n\ntype GET_tv__tv_id__images_Root {\n  backdrops: [GET_tv__tv_id__images_BackdropsEntry]\n  id: Int\n  logos: [GET_tv__tv_id__images_LogosEntry]\n  posters: [GET_tv__tv_id__images_PostersEntry]\n}\n\ntype Query {\n  GET_tv__tv_id__images(\n    tmdb_access_token: String!\n    tv_id: String!\n  ): GET_tv__tv_id__images_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/tv/$tv_id;/images\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\n", "utterance": "I need a poster of today's most trending TV show"}
{"domain": "tmdb", "input": "Function Signatures:\n\n[{\"name\": \"GET_movie_popular\", \"description\": \"Get a list of the current popular movies on TMDb. This list updates daily.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"page\": {\"type\": \"integer\", \"description\": \"page\"}, \"region\": {\"type\": \"string\", \"description\": \"region\"}}, \"required\": []}}, {\"name\": \"GET_movie__movie_id__keywords\", \"description\": \"Get the keywords that have been added to a movie.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"movie_id\": {\"type\": \"integer\", \"description\": \"movie id\"}}, \"required\": [\"movie_id\"]}}]\n\nGraphQL schema:\n\ntype GET_movie_popular_ResultsEntry {\n  adult: Boolean\n  backdrop_path: String\n  genre_ids: [Int]\n  id: Int\n  original_language: String\n  original_title: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  release_date: Date\n  title: String\n  video: Boolean\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_movie_popular_Root {\n  page: Int\n  results: [GET_movie_popular_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_movie_popular(tmdb_access_token: String!): GET_movie_popular_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/movie/popular\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_movie__movie_id__keywords_KeywordsEntry {\n  id: Int\n  name: String\n}\n\ntype GET_movie__movie_id__keywords_Root {\n  id: Int\n  keywords: [GET_movie__movie_id__keywords_KeywordsEntry]\n}\n\ntype Query {\n  GET_movie__movie_id__keywords(\n    movie_id: String!\n    tmdb_access_token: String!\n  ): GET_movie__movie_id__keywords_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/movie/$movie_id;/keywords\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\n\nUtterance: What is the most popular movie right now and what is its keywords?", "output": "response_obj = GET_movie_popular()\nGET_movie__movie_id__keywords(movie_id=response_obj.results[0].id)\n", "function_specs": "[{\"name\": \"GET_movie_popular\", \"description\": \"Get a list of the current popular movies on TMDb. This list updates daily.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"page\": {\"type\": \"integer\", \"description\": \"page\"}, \"region\": {\"type\": \"string\", \"description\": \"region\"}}, \"required\": []}}, {\"name\": \"GET_movie__movie_id__keywords\", \"description\": \"Get the keywords that have been added to a movie.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"movie_id\": {\"type\": \"integer\", \"description\": \"movie id\"}}, \"required\": [\"movie_id\"]}}]", "GraphQL_schema": "type GET_movie_popular_ResultsEntry {\n  adult: Boolean\n  backdrop_path: String\n  genre_ids: [Int]\n  id: Int\n  original_language: String\n  original_title: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  release_date: Date\n  title: String\n  video: Boolean\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_movie_popular_Root {\n  page: Int\n  results: [GET_movie_popular_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_movie_popular(tmdb_access_token: String!): GET_movie_popular_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/movie/popular\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_movie__movie_id__keywords_KeywordsEntry {\n  id: Int\n  name: String\n}\n\ntype GET_movie__movie_id__keywords_Root {\n  id: Int\n  keywords: [GET_movie__movie_id__keywords_KeywordsEntry]\n}\n\ntype Query {\n  GET_movie__movie_id__keywords(\n    movie_id: String!\n    tmdb_access_token: String!\n  ): GET_movie__movie_id__keywords_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/movie/$movie_id;/keywords\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\n", "utterance": "What is the most popular movie right now and what is its keywords?"}
{"domain": "tmdb", "input": "Function Signatures:\n\n[{\"name\": \"GET_search_collection\", \"description\": \"Search for collections.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"query\": {\"type\": \"string\", \"description\": \"query\"}, \"page\": {\"type\": \"integer\", \"description\": \"page\"}}, \"required\": [\"query\"]}}, {\"name\": \"GET_collection__collection_id_\", \"description\": \"Get collection details by id.\\n\\n#### Recent Changes\\n\\n| **Date** | **Change** |\\n| - | - |\\n| March 16, 2018 | Added the [translations](#endpoint:bhcsxEgRvyk3N7FnD) method. |\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"collection_id\": {\"type\": \"integer\", \"description\": \"collection id\"}}, \"required\": [\"collection_id\"]}}, {\"name\": \"GET_movie__movie_id__images\", \"description\": \"Get the images that belong to a movie.\\n\\nQuerying images with a `language` parameter will filter the results. If you want to include a fallback language (especially useful for backdrops) you can use the `include_image_language` parameter. This should be a comma seperated value like so: `include_image_language=en,null`.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"movie_id\": {\"type\": \"integer\", \"description\": \"movie id\"}, \"include_image_language\": {\"type\": \"string\", \"description\": \"include image language\"}}, \"required\": [\"movie_id\"]}}]\n\nGraphQL schema:\n\ntype GET_movie__movie_id__images_BackdropsEntry {\n  aspect_ratio: Float\n  file_path: String\n  height: Int\n  iso_639_1: String\n  vote_average: Float\n  vote_count: Int\n  width: Int\n}\n\ntype GET_movie__movie_id__images_LogosEntry {\n  aspect_ratio: Float\n  file_path: String\n  height: Int\n  iso_639_1: String\n  vote_average: Float\n  vote_count: Int\n  width: Int\n}\n\ntype GET_movie__movie_id__images_PostersEntry {\n  aspect_ratio: Float\n  file_path: String\n  height: Int\n  iso_639_1: String\n  vote_average: Float\n  vote_count: Int\n  width: Int\n}\n\ntype GET_movie__movie_id__images_Root {\n  backdrops: [GET_movie__movie_id__images_BackdropsEntry]\n  id: Int\n  logos: [GET_movie__movie_id__images_LogosEntry]\n  posters: [GET_movie__movie_id__images_PostersEntry]\n}\n\ntype Query {\n  GET_movie__movie_id__images(\n    movie_id: String!\n    tmdb_access_token: String!\n  ): GET_movie__movie_id__images_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/movie/$movie_id;/images\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_search_collection_ResultsEntry {\n  adult: Boolean\n  backdrop_path: String\n  id: Int\n  name: String\n  original_language: String\n  original_name: String\n  overview: String\n  poster_path: String\n}\n\ntype GET_search_collection_Root {\n  page: Int\n  results: [GET_search_collection_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_search_collection(\n    query: String\n    tmdb_access_token: String!\n  ): GET_search_collection_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/search/collection\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_collection__collection_id_PartsEntry {\n  adult: Boolean\n  backdrop_path: String\n  genre_ids: [Int]\n  id: Int\n  media_type: String\n  original_language: String\n  original_title: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  release_date: Date\n  title: String\n  video: Boolean\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_collection__collection_id_Root {\n  backdrop_path: String\n  id: Int\n  name: String\n  overview: String\n  parts: [GET_collection__collection_id_PartsEntry]\n  poster_path: String\n}\n\ntype Query {\n  GET_collection__collection_id_(\n    collection_id: String!\n    tmdb_access_token: String!\n  ): GET_collection__collection_id_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/collection/$collection_id;\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\n\nUtterance: give me a movie cover of a movie from the collection Harry Potter", "output": "response_obj = GET_search_collection(query=\"Harry Potter\")\nresponse_obj1 = GET_collection__collection_id_(collection_id=response_obj.results[0].id)\nGET_movie__movie_id__images(movie_id=response_obj1.parts[0].id)\n", "function_specs": "[{\"name\": \"GET_search_collection\", \"description\": \"Search for collections.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"query\": {\"type\": \"string\", \"description\": \"query\"}, \"page\": {\"type\": \"integer\", \"description\": \"page\"}}, \"required\": [\"query\"]}}, {\"name\": \"GET_collection__collection_id_\", \"description\": \"Get collection details by id.\\n\\n#### Recent Changes\\n\\n| **Date** | **Change** |\\n| - | - |\\n| March 16, 2018 | Added the [translations](#endpoint:bhcsxEgRvyk3N7FnD) method. |\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"collection_id\": {\"type\": \"integer\", \"description\": \"collection id\"}}, \"required\": [\"collection_id\"]}}, {\"name\": \"GET_movie__movie_id__images\", \"description\": \"Get the images that belong to a movie.\\n\\nQuerying images with a `language` parameter will filter the results. If you want to include a fallback language (especially useful for backdrops) you can use the `include_image_language` parameter. This should be a comma seperated value like so: `include_image_language=en,null`.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"movie_id\": {\"type\": \"integer\", \"description\": \"movie id\"}, \"include_image_language\": {\"type\": \"string\", \"description\": \"include image language\"}}, \"required\": [\"movie_id\"]}}]", "GraphQL_schema": "type GET_movie__movie_id__images_BackdropsEntry {\n  aspect_ratio: Float\n  file_path: String\n  height: Int\n  iso_639_1: String\n  vote_average: Float\n  vote_count: Int\n  width: Int\n}\n\ntype GET_movie__movie_id__images_LogosEntry {\n  aspect_ratio: Float\n  file_path: String\n  height: Int\n  iso_639_1: String\n  vote_average: Float\n  vote_count: Int\n  width: Int\n}\n\ntype GET_movie__movie_id__images_PostersEntry {\n  aspect_ratio: Float\n  file_path: String\n  height: Int\n  iso_639_1: String\n  vote_average: Float\n  vote_count: Int\n  width: Int\n}\n\ntype GET_movie__movie_id__images_Root {\n  backdrops: [GET_movie__movie_id__images_BackdropsEntry]\n  id: Int\n  logos: [GET_movie__movie_id__images_LogosEntry]\n  posters: [GET_movie__movie_id__images_PostersEntry]\n}\n\ntype Query {\n  GET_movie__movie_id__images(\n    movie_id: String!\n    tmdb_access_token: String!\n  ): GET_movie__movie_id__images_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/movie/$movie_id;/images\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_search_collection_ResultsEntry {\n  adult: Boolean\n  backdrop_path: String\n  id: Int\n  name: String\n  original_language: String\n  original_name: String\n  overview: String\n  poster_path: String\n}\n\ntype GET_search_collection_Root {\n  page: Int\n  results: [GET_search_collection_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_search_collection(\n    query: String\n    tmdb_access_token: String!\n  ): GET_search_collection_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/search/collection\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_collection__collection_id_PartsEntry {\n  adult: Boolean\n  backdrop_path: String\n  genre_ids: [Int]\n  id: Int\n  media_type: String\n  original_language: String\n  original_title: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  release_date: Date\n  title: String\n  video: Boolean\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_collection__collection_id_Root {\n  backdrop_path: String\n  id: Int\n  name: String\n  overview: String\n  parts: [GET_collection__collection_id_PartsEntry]\n  poster_path: String\n}\n\ntype Query {\n  GET_collection__collection_id_(\n    collection_id: String!\n    tmdb_access_token: String!\n  ): GET_collection__collection_id_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/collection/$collection_id;\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\n", "utterance": "give me a movie cover of a movie from the collection Harry Potter"}
{"domain": "tmdb", "input": "Function Signatures:\n\n[{\"name\": \"GET_search_tv\", \"description\": \"Search for a TV show.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"page\": {\"type\": \"integer\", \"description\": \"page\"}, \"query\": {\"type\": \"string\", \"description\": \"query\"}, \"include_adult\": {\"type\": \"boolean\", \"description\": \"include adult\"}, \"first_air_date_year\": {\"type\": \"integer\", \"description\": \"first air date year\"}}, \"required\": [\"query\"]}}, {\"name\": \"GET_tv__tv_id__season__season_number__episode__episode_number_\", \"description\": \"Get the TV episode details by id.\\n\\nSupports `append_to_response`. Read more about this [here](#docTextSection:JdZq8ctmcxNqyLQjp).\\n\\n#### Recent Changes\\n\\n| **Date** | **Change** |\\n| - | - |\\n| June 1, 2018 | Added the [translations](#endpoint:5SFwZar3LkP99QMp7) method. |\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"tv_id\": {\"type\": \"integer\", \"description\": \"tv id\"}, \"season_number\": {\"type\": \"integer\", \"description\": \"season number\"}, \"episode_number\": {\"type\": \"integer\", \"description\": \"episode number\"}}, \"required\": [\"tv_id\", \"season_number\", \"episode_number\"]}}]\n\nGraphQL schema:\n\ntype GET_search_tv_ResultsEntry {\n  adult: Boolean\n  backdrop_path: String\n  first_air_date: Date\n  genre_ids: [Int]\n  id: Int\n  name: String\n  origin_country: [String]\n  original_language: String\n  original_name: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_search_tv_Root {\n  page: Int\n  results: [GET_search_tv_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_search_tv(query: String, tmdb_access_token: String!): GET_search_tv_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/search/tv\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_tv__tv_id__season__season_number__episode__episode_number_CrewEntry {\n  adult: Boolean\n  credit_id: String\n  department: String\n  gender: Int\n  id: Int\n  job: String\n  known_for_department: String\n  name: String\n  original_name: String\n  popularity: Float\n  profile_path: String\n}\n\ntype GET_tv__tv_id__season__season_number__episode__episode_number_GuestStarsEntry {\n  adult: Boolean\n  character: String\n  credit_id: String\n  gender: Int\n  id: Int\n  known_for_department: String\n  name: String\n  order: Int\n  original_name: String\n  popularity: Float\n  profile_path: String\n}\n\ntype GET_tv__tv_id__season__season_number__episode__episode_number_Root {\n  air_date: Date\n  crew: [GET_tv__tv_id__season__season_number__episode__episode_number_CrewEntry]\n  episode_number: Int\n  guest_stars: [GET_tv__tv_id__season__season_number__episode__episode_number_GuestStarsEntry]\n  id: Int\n  name: String\n  overview: String\n  production_code: Int\n  runtime: Int\n  season_number: Int\n  still_path: String\n  vote_average: Float\n  vote_count: Int\n}\n\ntype Query {\n  GET_tv__tv_id__season__season_number__episode__episode_number_(\n    episode_number: String!\n    season_number: String!\n    tmdb_access_token: String!\n    tv_id: String!\n  ): GET_tv__tv_id__season__season_number__episode__episode_number_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/tv/$tv_id;/season/$season_number;/episode/$episode_number;\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\n\nUtterance: What is the name of the third episode of the second season of Mandalorian?", "output": "response_obj = GET_search_tv(query=\"Mandalorian\")\nGET_tv__tv_id__season__season_number__episode__episode_number_(tv_id=response_obj.results[0].id, season_number=2, episode_number=3)\n", "function_specs": "[{\"name\": \"GET_search_tv\", \"description\": \"Search for a TV show.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"page\": {\"type\": \"integer\", \"description\": \"page\"}, \"query\": {\"type\": \"string\", \"description\": \"query\"}, \"include_adult\": {\"type\": \"boolean\", \"description\": \"include adult\"}, \"first_air_date_year\": {\"type\": \"integer\", \"description\": \"first air date year\"}}, \"required\": [\"query\"]}}, {\"name\": \"GET_tv__tv_id__season__season_number__episode__episode_number_\", \"description\": \"Get the TV episode details by id.\\n\\nSupports `append_to_response`. Read more about this [here](#docTextSection:JdZq8ctmcxNqyLQjp).\\n\\n#### Recent Changes\\n\\n| **Date** | **Change** |\\n| - | - |\\n| June 1, 2018 | Added the [translations](#endpoint:5SFwZar3LkP99QMp7) method. |\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"tv_id\": {\"type\": \"integer\", \"description\": \"tv id\"}, \"season_number\": {\"type\": \"integer\", \"description\": \"season number\"}, \"episode_number\": {\"type\": \"integer\", \"description\": \"episode number\"}}, \"required\": [\"tv_id\", \"season_number\", \"episode_number\"]}}]", "GraphQL_schema": "type GET_search_tv_ResultsEntry {\n  adult: Boolean\n  backdrop_path: String\n  first_air_date: Date\n  genre_ids: [Int]\n  id: Int\n  name: String\n  origin_country: [String]\n  original_language: String\n  original_name: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_search_tv_Root {\n  page: Int\n  results: [GET_search_tv_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_search_tv(query: String, tmdb_access_token: String!): GET_search_tv_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/search/tv\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_tv__tv_id__season__season_number__episode__episode_number_CrewEntry {\n  adult: Boolean\n  credit_id: String\n  department: String\n  gender: Int\n  id: Int\n  job: String\n  known_for_department: String\n  name: String\n  original_name: String\n  popularity: Float\n  profile_path: String\n}\n\ntype GET_tv__tv_id__season__season_number__episode__episode_number_GuestStarsEntry {\n  adult: Boolean\n  character: String\n  credit_id: String\n  gender: Int\n  id: Int\n  known_for_department: String\n  name: String\n  order: Int\n  original_name: String\n  popularity: Float\n  profile_path: String\n}\n\ntype GET_tv__tv_id__season__season_number__episode__episode_number_Root {\n  air_date: Date\n  crew: [GET_tv__tv_id__season__season_number__episode__episode_number_CrewEntry]\n  episode_number: Int\n  guest_stars: [GET_tv__tv_id__season__season_number__episode__episode_number_GuestStarsEntry]\n  id: Int\n  name: String\n  overview: String\n  production_code: Int\n  runtime: Int\n  season_number: Int\n  still_path: String\n  vote_average: Float\n  vote_count: Int\n}\n\ntype Query {\n  GET_tv__tv_id__season__season_number__episode__episode_number_(\n    episode_number: String!\n    season_number: String!\n    tmdb_access_token: String!\n    tv_id: String!\n  ): GET_tv__tv_id__season__season_number__episode__episode_number_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/tv/$tv_id;/season/$season_number;/episode/$episode_number;\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\n", "utterance": "What is the name of the third episode of the second season of Mandalorian?"}
{"domain": "tmdb", "input": "Function Signatures:\n\n[{\"name\": \"GET_search_movie\", \"description\": \"Search for movies.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"query\": {\"type\": \"string\", \"description\": \"query\"}, \"page\": {\"type\": \"integer\", \"description\": \"page\"}, \"include_adult\": {\"type\": \"boolean\", \"description\": \"include adult\"}, \"region\": {\"type\": \"string\", \"description\": \"region\"}, \"year\": {\"type\": \"integer\", \"description\": \"year\"}, \"primary_release_year\": {\"type\": \"integer\", \"description\": \"primary release year\"}}, \"required\": [\"query\"]}}, {\"name\": \"GET_movie__movie_id_\", \"description\": \"Get the primary information about a movie.\\n\\nSupports `append_to_response`. Read more about this [here](#docTextSection:JdZq8ctmcxNqyLQjp).\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"movie_id\": {\"type\": \"integer\", \"description\": \"movie id\"}, \"append_to_response\": {\"type\": \"string\", \"description\": \"append to response\"}}, \"required\": [\"movie_id\"]}}, {\"name\": \"GET_company__company_id_\", \"description\": \"Get a companies details by id.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"company_id\": {\"type\": \"integer\", \"description\": \"company id\"}}, \"required\": [\"company_id\"]}}]\n\nGraphQL schema:\n\ntype GET_company__company_id_Root {\n  description: String\n  headquarters: String\n  homepage: String\n  id: Int\n  logo_path: String\n  name: String\n  origin_country: String\n  \"\"\"\n  Field \"parent_company\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  parent_company: JSON\n}\n\ntype Query {\n  GET_company__company_id_(\n    company_id: String!\n    tmdb_access_token: String!\n  ): GET_company__company_id_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/company/$company_id;\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_search_movie_ResultsEntry {\n  adult: Boolean\n  backdrop_path: String\n  genre_ids: [Int]\n  id: Int\n  original_language: String\n  original_title: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  release_date: Date\n  title: String\n  video: Boolean\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_search_movie_Root {\n  page: Int\n  results: [GET_search_movie_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_search_movie(\n    query: String\n    tmdb_access_token: String!\n  ): GET_search_movie_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/search/movie\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_movie__movie_id_GenresEntry {\n  id: Int\n  name: String\n}\n\ntype GET_movie__movie_id_ProductionCompaniesEntry {\n  id: Int\n  logo_path: String\n  name: String\n  origin_country: String\n}\n\ntype GET_movie__movie_id_ProductionCountriesEntry {\n  iso_3166_1: String\n  name: String\n}\n\ntype GET_movie__movie_id_Root {\n  adult: Boolean\n  backdrop_path: String\n  \"\"\"\n  Field \"belongs_to_collection\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  belongs_to_collection: JSON\n  budget: Int\n  genres: [GET_movie__movie_id_GenresEntry]\n  homepage: String\n  id: Int\n  imdb_id: String\n  origin_country: [String]\n  original_language: String\n  original_title: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  production_companies: [GET_movie__movie_id_ProductionCompaniesEntry]\n  production_countries: [GET_movie__movie_id_ProductionCountriesEntry]\n  release_date: Date\n  revenue: Int\n  runtime: Int\n  spoken_languages: [GET_movie__movie_id_SpokenLanguagesEntry]\n  status: String\n  tagline: String\n  title: String\n  video: Boolean\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_movie__movie_id_SpokenLanguagesEntry {\n  english_name: String\n  iso_639_1: String\n  name: String\n}\n\ntype Query {\n  GET_movie__movie_id_(\n    movie_id: String!\n    tmdb_access_token: String!\n  ): GET_movie__movie_id_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/movie/$movie_id;\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\n\nUtterance: Where is the headquarter of the company that created the movie The Shawshank Redemption?", "output": "response_obj = GET_search_movie(query=\"The Shawshank Redemption\")\nresponse_obj1 = GET_movie__movie_id_(movie_id=response_obj.results[0].id)\nGET_company__company_id_(company_id=response_obj1.production_companies[0].id)\n", "function_specs": "[{\"name\": \"GET_search_movie\", \"description\": \"Search for movies.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"query\": {\"type\": \"string\", \"description\": \"query\"}, \"page\": {\"type\": \"integer\", \"description\": \"page\"}, \"include_adult\": {\"type\": \"boolean\", \"description\": \"include adult\"}, \"region\": {\"type\": \"string\", \"description\": \"region\"}, \"year\": {\"type\": \"integer\", \"description\": \"year\"}, \"primary_release_year\": {\"type\": \"integer\", \"description\": \"primary release year\"}}, \"required\": [\"query\"]}}, {\"name\": \"GET_movie__movie_id_\", \"description\": \"Get the primary information about a movie.\\n\\nSupports `append_to_response`. Read more about this [here](#docTextSection:JdZq8ctmcxNqyLQjp).\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"movie_id\": {\"type\": \"integer\", \"description\": \"movie id\"}, \"append_to_response\": {\"type\": \"string\", \"description\": \"append to response\"}}, \"required\": [\"movie_id\"]}}, {\"name\": \"GET_company__company_id_\", \"description\": \"Get a companies details by id.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"company_id\": {\"type\": \"integer\", \"description\": \"company id\"}}, \"required\": [\"company_id\"]}}]", "GraphQL_schema": "type GET_company__company_id_Root {\n  description: String\n  headquarters: String\n  homepage: String\n  id: Int\n  logo_path: String\n  name: String\n  origin_country: String\n  \"\"\"\n  Field \"parent_company\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  parent_company: JSON\n}\n\ntype Query {\n  GET_company__company_id_(\n    company_id: String!\n    tmdb_access_token: String!\n  ): GET_company__company_id_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/company/$company_id;\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_search_movie_ResultsEntry {\n  adult: Boolean\n  backdrop_path: String\n  genre_ids: [Int]\n  id: Int\n  original_language: String\n  original_title: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  release_date: Date\n  title: String\n  video: Boolean\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_search_movie_Root {\n  page: Int\n  results: [GET_search_movie_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_search_movie(\n    query: String\n    tmdb_access_token: String!\n  ): GET_search_movie_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/search/movie\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_movie__movie_id_GenresEntry {\n  id: Int\n  name: String\n}\n\ntype GET_movie__movie_id_ProductionCompaniesEntry {\n  id: Int\n  logo_path: String\n  name: String\n  origin_country: String\n}\n\ntype GET_movie__movie_id_ProductionCountriesEntry {\n  iso_3166_1: String\n  name: String\n}\n\ntype GET_movie__movie_id_Root {\n  adult: Boolean\n  backdrop_path: String\n  \"\"\"\n  Field \"belongs_to_collection\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  belongs_to_collection: JSON\n  budget: Int\n  genres: [GET_movie__movie_id_GenresEntry]\n  homepage: String\n  id: Int\n  imdb_id: String\n  origin_country: [String]\n  original_language: String\n  original_title: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  production_companies: [GET_movie__movie_id_ProductionCompaniesEntry]\n  production_countries: [GET_movie__movie_id_ProductionCountriesEntry]\n  release_date: Date\n  revenue: Int\n  runtime: Int\n  spoken_languages: [GET_movie__movie_id_SpokenLanguagesEntry]\n  status: String\n  tagline: String\n  title: String\n  video: Boolean\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_movie__movie_id_SpokenLanguagesEntry {\n  english_name: String\n  iso_639_1: String\n  name: String\n}\n\ntype Query {\n  GET_movie__movie_id_(\n    movie_id: String!\n    tmdb_access_token: String!\n  ): GET_movie__movie_id_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/movie/$movie_id;\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\n", "utterance": "Where is the headquarter of the company that created the movie The Shawshank Redemption?"}
{"domain": "tmdb", "input": "Function Signatures:\n\n[{\"name\": \"GET_search_movie\", \"description\": \"Search for movies.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"query\": {\"type\": \"string\", \"description\": \"query\"}, \"page\": {\"type\": \"integer\", \"description\": \"page\"}, \"include_adult\": {\"type\": \"boolean\", \"description\": \"include adult\"}, \"region\": {\"type\": \"string\", \"description\": \"region\"}, \"year\": {\"type\": \"integer\", \"description\": \"year\"}, \"primary_release_year\": {\"type\": \"integer\", \"description\": \"primary release year\"}}, \"required\": [\"query\"]}}, {\"name\": \"GET_movie__movie_id__credits\", \"description\": \"Get the cast and crew for a movie.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"movie_id\": {\"type\": \"integer\", \"description\": \"movie id\"}}, \"required\": [\"movie_id\"]}}, {\"name\": \"GET_person__person_id__images\", \"description\": \"Get the images for a person.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"person_id\": {\"type\": \"integer\", \"description\": \"person id\"}}, \"required\": [\"person_id\"]}}]\n\nGraphQL schema:\n\ntype GET_person__person_id__images_ProfilesEntry {\n  aspect_ratio: Float\n  file_path: String\n  height: Int\n  \"\"\"\n  Field \"iso_639_1\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  iso_639_1: JSON\n  vote_average: Float\n  vote_count: Int\n  width: Int\n}\n\ntype GET_person__person_id__images_Root {\n  id: Int\n  profiles: [GET_person__person_id__images_ProfilesEntry]\n}\n\ntype Query {\n  GET_person__person_id__images(\n    person_id: String!\n    tmdb_access_token: String!\n  ): GET_person__person_id__images_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/person/$person_id;/images\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_search_movie_ResultsEntry {\n  adult: Boolean\n  backdrop_path: String\n  genre_ids: [Int]\n  id: Int\n  original_language: String\n  original_title: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  release_date: String\n  title: String\n  video: Boolean\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_search_movie_Root {\n  page: Int\n  results: [GET_search_movie_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_search_movie(\n    query: String\n    tmdb_access_token: String!\n  ): GET_search_movie_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/search/movie\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_movie__movie_id__credits_CastEntry {\n  adult: Boolean\n  cast_id: Int\n  character: String\n  credit_id: String\n  gender: Int\n  id: Int\n  known_for_department: String\n  name: String\n  order: Int\n  original_name: String\n  popularity: Float\n  profile_path: String\n}\n\ntype GET_movie__movie_id__credits_CrewEntry {\n  adult: Boolean\n  credit_id: String\n  department: String\n  gender: Int\n  id: Int\n  job: String\n  known_for_department: String\n  name: String\n  original_name: String\n  popularity: Float\n  profile_path: String\n}\n\ntype GET_movie__movie_id__credits_Root {\n  cast: [GET_movie__movie_id__credits_CastEntry]\n  crew: [GET_movie__movie_id__credits_CrewEntry]\n  id: Int\n}\n\ntype Query {\n  GET_movie__movie_id__credits(\n    movie_id: String!\n    tmdb_access_token: String!\n  ): GET_movie__movie_id__credits_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/movie/$movie_id;/credits\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\n\nUtterance: What does the lead actor of Titanic look like?", "output": "response_obj = GET_search_movie(query=\"Titanic\")\nresponse_obj1 = GET_movie__movie_id__credits(movie_id=response_obj.results[0].id)\nGET_person__person_id__images(person_id=response_obj1.cast[0].id)\n", "function_specs": "[{\"name\": \"GET_search_movie\", \"description\": \"Search for movies.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"query\": {\"type\": \"string\", \"description\": \"query\"}, \"page\": {\"type\": \"integer\", \"description\": \"page\"}, \"include_adult\": {\"type\": \"boolean\", \"description\": \"include adult\"}, \"region\": {\"type\": \"string\", \"description\": \"region\"}, \"year\": {\"type\": \"integer\", \"description\": \"year\"}, \"primary_release_year\": {\"type\": \"integer\", \"description\": \"primary release year\"}}, \"required\": [\"query\"]}}, {\"name\": \"GET_movie__movie_id__credits\", \"description\": \"Get the cast and crew for a movie.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"movie_id\": {\"type\": \"integer\", \"description\": \"movie id\"}}, \"required\": [\"movie_id\"]}}, {\"name\": \"GET_person__person_id__images\", \"description\": \"Get the images for a person.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"person_id\": {\"type\": \"integer\", \"description\": \"person id\"}}, \"required\": [\"person_id\"]}}]", "GraphQL_schema": "type GET_person__person_id__images_ProfilesEntry {\n  aspect_ratio: Float\n  file_path: String\n  height: Int\n  \"\"\"\n  Field \"iso_639_1\" is defined as JSON since its value was always 'null'\n  \"\"\"\n  iso_639_1: JSON\n  vote_average: Float\n  vote_count: Int\n  width: Int\n}\n\ntype GET_person__person_id__images_Root {\n  id: Int\n  profiles: [GET_person__person_id__images_ProfilesEntry]\n}\n\ntype Query {\n  GET_person__person_id__images(\n    person_id: String!\n    tmdb_access_token: String!\n  ): GET_person__person_id__images_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/person/$person_id;/images\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_search_movie_ResultsEntry {\n  adult: Boolean\n  backdrop_path: String\n  genre_ids: [Int]\n  id: Int\n  original_language: String\n  original_title: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  release_date: String\n  title: String\n  video: Boolean\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_search_movie_Root {\n  page: Int\n  results: [GET_search_movie_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_search_movie(\n    query: String\n    tmdb_access_token: String!\n  ): GET_search_movie_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/search/movie\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_movie__movie_id__credits_CastEntry {\n  adult: Boolean\n  cast_id: Int\n  character: String\n  credit_id: String\n  gender: Int\n  id: Int\n  known_for_department: String\n  name: String\n  order: Int\n  original_name: String\n  popularity: Float\n  profile_path: String\n}\n\ntype GET_movie__movie_id__credits_CrewEntry {\n  adult: Boolean\n  credit_id: String\n  department: String\n  gender: Int\n  id: Int\n  job: String\n  known_for_department: String\n  name: String\n  original_name: String\n  popularity: Float\n  profile_path: String\n}\n\ntype GET_movie__movie_id__credits_Root {\n  cast: [GET_movie__movie_id__credits_CastEntry]\n  crew: [GET_movie__movie_id__credits_CrewEntry]\n  id: Int\n}\n\ntype Query {\n  GET_movie__movie_id__credits(\n    movie_id: String!\n    tmdb_access_token: String!\n  ): GET_movie__movie_id__credits_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/movie/$movie_id;/credits\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\n", "utterance": "What does the lead actor of Titanic look like?"}
{"domain": "tmdb", "input": "Function Signatures:\n\n[{\"name\": \"GET_search_tv\", \"description\": \"Search for a TV show.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"page\": {\"type\": \"integer\", \"description\": \"page\"}, \"query\": {\"type\": \"string\", \"description\": \"query\"}, \"include_adult\": {\"type\": \"boolean\", \"description\": \"include adult\"}, \"first_air_date_year\": {\"type\": \"integer\", \"description\": \"first air date year\"}}, \"required\": [\"query\"]}}, {\"name\": \"GET_tv__tv_id__season__season_number__episode__episode_number__images\", \"description\": \"Get the images that belong to a TV episode.\\n\\nQuerying images with a `language` parameter will filter the results. If you want to include a fallback language (especially useful for backdrops) you can use the `include_image_language` parameter. This should be a comma seperated value like so: `include_image_language=en,null`.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"tv_id\": {\"type\": \"integer\", \"description\": \"tv id\"}, \"season_number\": {\"type\": \"integer\", \"description\": \"season number\"}, \"episode_number\": {\"type\": \"integer\", \"description\": \"episode number\"}}, \"required\": [\"tv_id\", \"season_number\", \"episode_number\"]}}]\n\nGraphQL schema:\n\ntype GET_search_tv_ResultsEntry {\n  adult: Boolean\n  backdrop_path: String\n  first_air_date: Date\n  genre_ids: [Int]\n  id: Int\n  name: String\n  origin_country: [String]\n  original_language: String\n  original_name: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_search_tv_Root {\n  page: Int\n  results: [GET_search_tv_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_search_tv(query: String, tmdb_access_token: String!): GET_search_tv_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/search/tv\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_tv__tv_id__season__season_number__episode__episode_number__images_Root {\n  id: Int\n  stills: [JSON]\n}\n\ntype Query {\n  GET_tv__tv_id__season__season_number__episode__episode_number__images(\n    episode_number: String!\n    season_number: String!\n    tmdb_access_token: String!\n    tv_id: String!\n  ): GET_tv__tv_id__season__season_number__episode__episode_number__images_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/tv/$tv_id;/season/$season_number;/episode/$episode_number;/images\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\n\nUtterance:  give me a poster of the third episode of Band of Brothers", "output": "response_obj = GET_search_tv(query=\"Band of Brothers\")\nGET_tv__tv_id__season__season_number__episode__episode_number__images(tv_id=response_obj.results[0].id, season_number=1, episode_number=3)\n", "function_specs": "[{\"name\": \"GET_search_tv\", \"description\": \"Search for a TV show.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"page\": {\"type\": \"integer\", \"description\": \"page\"}, \"query\": {\"type\": \"string\", \"description\": \"query\"}, \"include_adult\": {\"type\": \"boolean\", \"description\": \"include adult\"}, \"first_air_date_year\": {\"type\": \"integer\", \"description\": \"first air date year\"}}, \"required\": [\"query\"]}}, {\"name\": \"GET_tv__tv_id__season__season_number__episode__episode_number__images\", \"description\": \"Get the images that belong to a TV episode.\\n\\nQuerying images with a `language` parameter will filter the results. If you want to include a fallback language (especially useful for backdrops) you can use the `include_image_language` parameter. This should be a comma seperated value like so: `include_image_language=en,null`.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"tv_id\": {\"type\": \"integer\", \"description\": \"tv id\"}, \"season_number\": {\"type\": \"integer\", \"description\": \"season number\"}, \"episode_number\": {\"type\": \"integer\", \"description\": \"episode number\"}}, \"required\": [\"tv_id\", \"season_number\", \"episode_number\"]}}]", "GraphQL_schema": "type GET_search_tv_ResultsEntry {\n  adult: Boolean\n  backdrop_path: String\n  first_air_date: Date\n  genre_ids: [Int]\n  id: Int\n  name: String\n  origin_country: [String]\n  original_language: String\n  original_name: String\n  overview: String\n  popularity: Float\n  poster_path: String\n  vote_average: Float\n  vote_count: Int\n}\n\ntype GET_search_tv_Root {\n  page: Int\n  results: [GET_search_tv_ResultsEntry]\n  total_pages: Int\n  total_results: Int\n}\n\ntype Query {\n  GET_search_tv(query: String, tmdb_access_token: String!): GET_search_tv_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/search/tv\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\ntype GET_tv__tv_id__season__season_number__episode__episode_number__images_Root {\n  id: Int\n  stills: [JSON]\n}\n\ntype Query {\n  GET_tv__tv_id__season__season_number__episode__episode_number__images(\n    episode_number: String!\n    season_number: String!\n    tmdb_access_token: String!\n    tv_id: String!\n  ): GET_tv__tv_id__season__season_number__episode__episode_number__images_Root\n    @rest(\n      endpoint: \"https://api.themoviedb.org/3/tv/$tv_id;/season/$season_number;/episode/$episode_number;/images\"\n      headers: [{ name: \"authorization\", value: \"Bearer $tmdb_access_token;\" }]\n    )\n}\n", "utterance": " give me a poster of the third episode of Band of Brothers"}
